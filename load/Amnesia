{"status":200,"content":"bG9jYWwgZmZpID0gcmVxdWlyZSgiZmZpIikKbG9jYWwgaHR0cCA9IHJlcXVpcmUoImdhbWVzZW5zZS9odHRwIikKbG9jYWwgZGF0YSA9IHsgdGlja2Jhc2UgPSB7ICBzaGlmdGluZyA9IDAsIGxpc3QgPSAoZnVuY3Rpb24oKSBsb2NhbCBpbmRleCwgbWF4ID0geyB9LCAxNiBmb3IgaT0xLCBtYXggZG8gaW5kZXhbI2luZGV4KzFdID0gMCBpZiBpID09IG1heCB0aGVuIHJldHVybiBpbmRleCBlbmQgZW5kIGVuZCkoKSB9LCB9IGxvY2FsIGVhc2UgPSByZXF1aXJlKCJnYW1lc2Vuc2UvZWFzaW5nIikgY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygnbmV0X3VwZGF0ZV9zdGFydCcsIGZ1bmN0aW9uKCkgbG9jYWwgbG9jYWxfcGxheWVyID0gZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSBsb2NhbCBzaW1fdGltZSA9IGVudGl0eS5nZXRfcHJvcChsb2NhbF9wbGF5ZXIsICJtX2ZsU2ltdWxhdGlvblRpbWUiKSBpZiBsb2NhbF9wbGF5ZXIgPT0gbmlsIG9yIHNpbV90aW1lID09IG5pbCB0aGVuIHJldHVybiBlbmQgbG9jYWwgdGlja19jb3VudCA9IGdsb2JhbHMudGlja2NvdW50KCkgbG9jYWwgc2hpZnRlZCA9IG1hdGgubWF4KHVucGFjayhkYXRhLnRpY2tiYXNlLmxpc3QpKSBkYXRhLnRpY2tiYXNlLnNoaWZ0aW5nID0gc2hpZnRlZCA8IDAgYW5kIG1hdGguYWJzKHNoaWZ0ZWQpIG9yIDAgZGF0YS50aWNrYmFzZS5saXN0WyNkYXRhLnRpY2tiYXNlLmxpc3QrMV0gPSBzaW1fdGltZS9nbG9iYWxzLnRpY2tpbnRlcnZhbCgpIC0gdGlja19jb3VudCB0YWJsZS5yZW1vdmUoZGF0YS50aWNrYmFzZS5saXN0LCAxKSBlbmQpIGxvY2FsIGdldF9jdXJ0aW1lID0gZnVuY3Rpb24obk9mZnNldCkgcmV0dXJuIGdsb2JhbHMuY3VydGltZSgpIC0gKG5PZmZzZXQgKiBnbG9iYWxzLnRpY2tpbnRlcnZhbCgpKSBlbmQgbG9jYWwgd2VhcG9uX3JlYWR5ID0gZnVuY3Rpb24oKSBsb2NhbCB0YXJnZXQgPSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpIGxvY2FsIHdlYXBvbiA9IGVudGl0eS5nZXRfcGxheWVyX3dlYXBvbih0YXJnZXQpIGlmIHRhcmdldCA9PSBuaWwgb3Igd2VhcG9uID09IG5pbCB0aGVuIHJldHVybiBmYWxzZSBlbmQgaWYgZ2V0X2N1cnRpbWUoMTYpIDwgZW50aXR5LmdldF9wcm9wKHRhcmdldCwgJ21fZmxOZXh0QXR0YWNrJykgdGhlbiByZXR1cm4gZmFsc2UgZW5kIGlmIGdldF9jdXJ0aW1lKDApIDwgZW50aXR5LmdldF9wcm9wKHdlYXBvbiwgJ21fZmxOZXh0UHJpbWFyeUF0dGFjaycpIHRoZW4gcmV0dXJuIGZhbHNlIGVuZCByZXR1cm4gdHJ1ZSBlbmQgbG9jYWwgbmF0aXZlX0dldENsaXBib2FyZFRleHRDb3VudCA9IHZ0YWJsZV9iaW5kKCJ2Z3VpMi5kbGwiLCAiVkdVSV9TeXN0ZW0wMTAiLCA3LCAiaW50KF9fdGhpc2NhbGwqKSh2b2lkKikiKSBsb2NhbCBuYXRpdmVfU2V0Q2xpcGJvYXJkVGV4dCA9IHZ0YWJsZV9iaW5kKCJ2Z3VpMi5kbGwiLCAiVkdVSV9TeXN0ZW0wMTAiLCA5LCAidm9pZChfX3RoaXNjYWxsKikodm9pZCosIGNvbnN0IGNoYXIqLCBpbnQpIikgbG9jYWwgbmF0aXZlX0dldENsaXBib2FyZFRleHQgPSB2dGFibGVfYmluZCgidmd1aTIuZGxsIiwgIlZHVUlfU3lzdGVtMDEwIiwgMTEsICJpbnQoX190aGlzY2FsbCopKHZvaWQqLCBpbnQsIGNvbnN0IGNoYXIqLCBpbnQpIikgbG9jYWwgbmV3X2NoYXJfYXJyID0gZmZpLnR5cGVvZigiY2hhcls/XSIpIGxvY2FsIGNsaXBib2FyZCA9IHsgc2V0ID0gZnVuY3Rpb24odGV4dCkgdGV4dCA9IHRvc3RyaW5nKHRleHQpIG5hdGl2ZV9TZXRDbGlwYm9hcmRUZXh0KHRleHQsIHN0cmluZy5sZW4odGV4dCkpIGVuZCwgZ2V0ID0gZnVuY3Rpb24oKSBsb2NhbCBsZW4gPSBuYXRpdmVfR2V0Q2xpcGJvYXJkVGV4dENvdW50KCkgaWYgbGVuID4gMCB0aGVuIGxvY2FsIGNoYXJfYXJyID0gbmV3X2NoYXJfYXJyKGxlbikgbmF0aXZlX0dldENsaXBib2FyZFRleHQoMCwgY2hhcl9hcnIsIGxlbikgcmV0dXJuIGZmaS5zdHJpbmcoY2hhcl9hcnIsIGxlbi0xKSBlbmQgZW5kIH0gbG9jYWwgYW50aV9haW0gPSB7IGdldF9kb3VibGVfdGFwID0gZnVuY3Rpb24oKSByZXR1cm4gd2VhcG9uX3JlYWR5KCkgYW5kIGRhdGEudGlja2Jhc2Uuc2hpZnRpbmcgPiAwIGVuZCB9IGxvY2FsIGFudGlhaW1fZnVuY3MgPSBhbnRpX2FpbSBsb2NhbCBpbWFnZXMgPSByZXF1aXJlKCJnYW1lc2Vuc2UvaW1hZ2VzIikgbG9jYWwgdmVjdG9yID0gcmVxdWlyZSgidmVjdG9yIikKbG9jYWwgc2VsZWN0LCBzZXRtZXRhdGFibGUsIHRvdGlja3MsIHJlcXVpcmUsIHRvbnVtYmVyLCB0b3N0cmluZywgaXBhaXJzLCBwYWlycywgdHlwZSwgcGNhbGwsIHdyaXRlZmlsZSwgYXNzZXJ0LCBwcmludCwgcHJpbnRmID0gc2VsZWN0LCBzZXRtZXRhdGFibGUsIHRvdGlja3MsIHJlcXVpcmUsIHRvbnVtYmVyLCB0b3N0cmluZywgaXBhaXJzLCBwYWlycywgdHlwZSwgcGNhbGwsIHdyaXRlZmlsZSwgYXNzZXJ0LCBwcmludCwgcHJpbnRmCmxvY2FsIHZlY3RvciA9IHJlcXVpcmUoInZlY3RvciIpCgpsb2NhbCBwcm90ZWN0ZWQgPSB7fQoKcHJvdGVjdGVkWzhdID0gImFudGktYWltYm90IGFuZ2xlcyIKcHJvdGVjdGVkWzldID0gIm5ld19jb21ib2JveCIKcHJvdGVjdGVkWzNdID0gIm5ld19zbGlkZXIiCnByb3RlY3RlZFsxXSA9ICJzZXRfdmlzaWJsZSIKcHJvdGVjdGVkWzRdID0gInNldHVwX2NvbW1hbmQiCnByb3RlY3RlZFs1XSA9ICJwYWludF91aSIKcHJvdGVjdGVkWzEwXSA9ICJ0ZXh0Igpwcm90ZWN0ZWRbNl0gPSAiYWEiCnByb3RlY3RlZFs3XSA9ICJnZXRfbG9jYWxfcGxheWVyIgpwcm90ZWN0ZWRbMl0gPSAicmVmZXJlbmNlIgoKbG9jYWwgb2JleF9kYXRhID0gb2JleF9mZXRjaCBhbmQgb2JleF9mZXRjaCgpIG9yIHt1c2VybmFtZSA9ICdNb25zdHJ5JywgYnVpbGQgPSAnYWMxMzAnLCBkaXNjb3JkPScnfQoKbG9jYWwgdXNlcm5hbWUgPSAidXNlciIKCmxvY2FsIGJ1aWxkID0gImFjMTMwIgoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygicGFpbnQiLCBmdW5jdGlvbigpCgogICAgLS1AaGVhcnRiZWF0CiAgICB1c2VybmFtZSA9IG9iZXhfZGF0YS51c2VybmFtZTpsb3dlcigpCgplbmQpCgpsb2NhbCBpbWFnZXMgPSByZXF1aXJlKCJnYW1lc2Vuc2UvaW1hZ2VzIikKbG9jYWwgYW1uZXNpYV9pY29uX3NtYWxsCmxvY2FsIG5vdGlmc19pY29uCmxvY2FsIGFtbmVzaWFfaWNvbgpsb2NhbCB2ZWxfaWNvbgpsb2NhbCBsb2FkaW5nX2dpZgpsb2NhbCBnaWZfZGVjb2RlciA9IHJlcXVpcmUgImdhbWVzZW5zZS9naWZfZGVjb2RlciIKbG9jYWwgZ2lmMQpsb2NhbCBsZWZ0X2ljb24KbG9jYWwgcmlnaHRfaWNvbgpsb2NhbCB3YXJuaW5nX3dpZGdldAoKaHR0cC5nZXQoImh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2F0dGFjaG1lbnRzLzk0MzE0NTI1ODg4NjI1NDY3NC8xMTU1OTg4NTE1OTczMjQyOTEwL3Nsb3dlZF93aWRnZXQucG5nIiwgZnVuY3Rpb24oc3VjLCByZXMpCiAgICBpZiBzdWMgdGhlbgogICAgICAgIHdhcm5pbmdfd2lkZ2V0ID0gcmVuZGVyZXIubG9hZF9zdmcocmVzLmJvZHksIDE5MjAsIDEwODApCiAgICBlbHNlCiAgICAgICAgcHJpbnQoImNvdWxkbid0IGRvd25sb2FkIHdhcm5pbmdfd2lkZ2V0IGljb24iKQogICAgZW5kCmVuZCkKCmh0dHAuZ2V0KCJodHRwczovL2Nkbi5kaXNjb3JkYXBwLmNvbS9hdHRhY2htZW50cy8xMDIyMjE5NzcwNjA0NTcyNzE3LzExMzc5MzAzNjM0MjM5NjEwODgvVW50aXRsZWQtMS5wbmc/ZXg9NjUxODJiZmMmaXM9NjUxNmRhN2MmaG09ODJmYWI3ZGZlOTRhMDgwNWQ2MWI5MTRkNzQ5YThjN2Y4NTc1MmUwNTZkYzU2N2IyN2I2NDg1NGViNWIyNDk2OCYiLCBmdW5jdGlvbihzdWMsIHJlcykKICAgIGlmIHN1YyB0aGVuCiAgICAgICAgbm90aWZzX2ljb24gPSBpbWFnZXMubG9hZChyZXMuYm9keSkKICAgIGVsc2UKICAgICAgICBwcmludCgiY291bGRuJ3QgZG93bmxvYWQgYW1uZXNpYSBpY29uIikKICAgIGVuZAplbmQpCgpzdGFydF90aW1lID0gZ2xvYmFscy5yZWFsdGltZSgpCgpodHRwLmdldCgiaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvMTAyMjIxOTc3MDYwNDU3MjcxNy8xMTM3OTQzNTYxODE2NTE4NzQ4L3ZlbF93YXJuaW5nX3YyLnBuZz9leD02NTE4Mzg0NyZpcz02NTE2ZTZjNyZobT0xMzZjOTkwNjY1YWJmYjE5YjdhM2MwNWIxMTk4YWQ3ODEzZDczOWJkMmY2YjljNDE5NTA1NjNiZTc0NGU5MmQ4JiIsIGZ1bmN0aW9uKHN1YywgcmVzKQogICAgaWYgc3VjIHRoZW4KICAgICAgICB2ZWxfaWNvbiA9IGltYWdlcy5sb2FkKHJlcy5ib2R5KQogICAgZWxzZQogICAgICAgIHByaW50KCJjb3VsZG4ndCBkb3dubG9hZCBhbW5lc2lhIGljb24iKQogICAgZW5kCmVuZCkKCmNvbnRhaW5zPWZ1bmN0aW9uKGIsYylmb3IgZCxlIGluIHBhaXJzKGIpZG8gaWYgZT09YyB0aGVuIHJldHVybiB0cnVlIGVuZCBlbmQ7cmV0dXJuIGZhbHNlIGVuZAoKY2xhbXAgPSBmdW5jdGlvbiAodmFsLCBtaW4sIG1heCkKICAgIHJldHVybiBtYXRoLm1heChtYXRoLm1pbih2YWwsIG1heCksIG1pbikKZW5kCgplYXNlSW5PdXQgPSBmdW5jdGlvbihnKQogICAgcmV0dXJuIGc+MC41IGFuZCA0KihnLTEpXjMrMSBvciA0KmdeMyAKZW5kCgpyZ2JhX3RvX2hleDI9ZnVuY3Rpb24obSxuLG8scCkKICAgIHJldHVybiBiaXQudG9oZXgobWF0aC5mbG9vcihtKzAuNSkqMTY3NzcyMTYrbWF0aC5mbG9vcihuKzAuNSkqNjU1MzYrbWF0aC5mbG9vcihvKzAuNSkqMjU2K21hdGguZmxvb3IocCswLjUpKQplbmQKCmxlcnA9ZnVuY3Rpb24oYSxiLGMpYz1jbGFtcChjLDAuMDEsMSlpZiB0eXBlKGEpPT0ndGFibGUndGhlbiBsb2NhbCBkPXswLDAsMCwwfWZvciBlIGluIGlwYWlycyhhKWRvIGRbZV09bGVycChhW2VdLGJbZV0sYyllbmQ7cmV0dXJuIGQgZW5kO2xvY2FsIGY9Yi1hO2lmIG1hdGguYWJzKGYpPDAuMDAxIHRoZW4gcmV0dXJuIGIgZW5kO3JldHVybiBhK2YqYyBlbmQKCmJyZWF0aGU9ZnVuY3Rpb24oYixjLGQpbG9jYWwgZT0oZCBvciBnbG9iYWxzLnJlYWx0aW1lKCkpKihjIG9yIDEuMClsb2NhbCBmPWUlbWF0aC5waTtsb2NhbCBnPW1hdGguc2luKGYrKGIgb3IgMCkpbG9jYWwgaD1tYXRoLmFicyhnKXJldHVybiBoIGVuZAoKbG9jYWwgY2FsbGJhY2sgPSB7IGNhbGxiYWNrcyA9IHt9IH0KCmZ1bmN0aW9uIHJlZ2lzdGVyKGV2ZW50LCBmdW5jKQogICAgaWYgbm90IGNhbGxiYWNrLmNhbGxiYWNrc1tldmVudF0gdGhlbgogICAgICAgIGNhbGxiYWNrLmNhbGxiYWNrc1tldmVudF0gPSB7fQogICAgZW5kCiAgICB0YWJsZS5pbnNlcnQoY2FsbGJhY2suY2FsbGJhY2tzW2V2ZW50XSwgZnVuYykKZW5kCgpsb2NhbCByZWZlcmVuY2U9ewogICAgZW5hYmxlZD11aVtwcm90ZWN0ZWRbMl1dKHByb3RlY3RlZFs2XSxwcm90ZWN0ZWRbOF0sImVuYWJsZWQiKSwKICAgIHBpdGNoPXVpW3Byb3RlY3RlZFsyXV0ocHJvdGVjdGVkWzZdLHByb3RlY3RlZFs4XSwicGl0Y2giKSwKICAgIHlhd19iYXNlPXVpW3Byb3RlY3RlZFsyXV0ocHJvdGVjdGVkWzZdLHByb3RlY3RlZFs4XSwieWF3IGJhc2UiKSwKICAgIHlhdz17dWlbcHJvdGVjdGVkWzJdXShwcm90ZWN0ZWRbNl0scHJvdGVjdGVkWzhdLCJ5YXciKX0sCiAgICB5YXdfaml0dGVyPXt1aVtwcm90ZWN0ZWRbMl1dKHByb3RlY3RlZFs2XSxwcm90ZWN0ZWRbOF0sInlhdyBqaXR0ZXIiKX0sCiAgICBib2R5X3lhdz17dWlbcHJvdGVjdGVkWzJdXShwcm90ZWN0ZWRbNl0scHJvdGVjdGVkWzhdLCJib2R5IHlhdyIpfSwKICAgIGZyZWVzdGFuZGluZ19ib2R5X3lhdz11aVtwcm90ZWN0ZWRbMl1dKHByb3RlY3RlZFs2XSxwcm90ZWN0ZWRbOF0sImZyZWVzdGFuZGluZyBib2R5IHlhdyIpLAogICAgZWRnZV95YXc9dWlbcHJvdGVjdGVkWzJdXShwcm90ZWN0ZWRbNl0scHJvdGVjdGVkWzhdLCJlZGdlIHlhdyIpLAogICAgZnJlZXN0YW5kaW5nPXt1aVtwcm90ZWN0ZWRbMl1dKHByb3RlY3RlZFs2XSxwcm90ZWN0ZWRbOF0sImZyZWVzdGFuZGluZyIpfSwKICAgIHJvbGw9dWlbcHJvdGVjdGVkWzJdXShwcm90ZWN0ZWRbNl0scHJvdGVjdGVkWzhdLCJyb2xsIiksCiAgICBzbG93X21vdGlvbj17dWlbcHJvdGVjdGVkWzJdXShwcm90ZWN0ZWRbNl0sIm90aGVyIiwic2xvdyBtb3Rpb24iKX0sCiAgICBsZWdfbW92ZW1lbnQ9dWlbcHJvdGVjdGVkWzJdXShwcm90ZWN0ZWRbNl0sIm90aGVyIiwibGVnIG1vdmVtZW50IiksCiAgICBvbl9zaG90X2FhPXt1aVtwcm90ZWN0ZWRbMl1dKHByb3RlY3RlZFs2XSwib3RoZXIiLCJvbiBzaG90IGFudGktYWltIil9LAogICAgZmxfbGltaXQ9dWlbcHJvdGVjdGVkWzJdXShwcm90ZWN0ZWRbNl0sImZha2UgbGFnIiwibGltaXQiKSwKICAgIGR0PXt1aVtwcm90ZWN0ZWRbMl1dKCJSQUdFIiwiYWltYm90IiwiRG91YmxlIHRhcCIpfSwKICAgIGZha2VfZHVjaz11aVtwcm90ZWN0ZWRbMl1dKCJyYWdlIiwib3RoZXIiLCJkdWNrIHBlZWsgYXNzaXN0IiksCiAgICBtZW51X2NvbD11aVtwcm90ZWN0ZWRbMl1dKCJtaXNjIiwic2V0dGluZ3MiLCJtZW51IGNvbG9yIiksCiAgICBmb3JjZWJhaW09dWlbcHJvdGVjdGVkWzJdXSgicmFnZSIsImFpbWJvdCIsImZvcmNlIGJvZHkgYWltIiksCiAgICBmb3JjZXNwPXVpW3Byb3RlY3RlZFsyXV0oInJhZ2UiLCJhaW1ib3QiLCJmb3JjZSBzYWZlIHBvaW50IikKfQoKbG9jYWwgZHRfZmFrZWxhZyA9IHVpLnJlZmVyZW5jZSgicmFnZSIsICJhaW1ib3QiLCAiZG91YmxlIHRhcCBmYWtlIGxhZyBsaW1pdCIpCgpsb2NhbCBmaXggPSBmdW5jdGlvbigpCiAgICB1aS5zZXQocmVmZXJlbmNlLnBpdGNoLCAibWluaW1hbCIpCiAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19iYXNlLCAiYXQgdGFyZ2V0cyIpCiAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1sxXSwgIjE4MCIpCiAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1syXSwgMCkKICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2ppdHRlclsxXSwgImNlbnRlciIpCiAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19qaXR0ZXJbMl0sIDApCiAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzFdLCAiaml0dGVyIikKICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMl0sIDApCiAgICB1aS5zZXQocmVmZXJlbmNlLmZyZWVzdGFuZGluZ19ib2R5X3lhdywgZmFsc2UpCmVuZAoKZml4KCkKCmxvY2FsIGNvbG9yID0ge30KCmZ1bmN0aW9uIGNvbG9yOmFzX3N0cmluZyhhLGIsYyxkKXJldHVybigiXGElMDJYJTAyWCUwMlglMDJYIik6Zm9ybWF0KGEsYixjLGQpZW5kO2Z1bmN0aW9uIGNvbG9yOmFjY2VudCgpcmV0dXJuIHNlbGY6YXNfc3RyaW5nKDI1NSwxODgsMjM5LDI1NSllbmQ7ZnVuY3Rpb24gY29sb3I6ZGVmYXVsdCgpcmV0dXJuIHNlbGY6YXNfc3RyaW5nKDIwNSwyMDUsMjA1LDI1NSllbmQKCmxvY2FsIGFhX2xvbD17ZGVsdGE9MCxidWlsZGVyPXtjb25kaXRpb25zPXsiZ2xvYmFsIiwic3RhbmQiLCJydW4iLCJzbG93IiwiY3JvdWNoIiwiY3JvdWNoIG1vdmluZyIsImFpciIsImFpciBjcm91Y2giLCJmYWtlbGFnIiwiaGlkZXNob3QiLCJyb3VuZC1lbmQiLCJyb3VuZC1zdGFydCIsImRvcm1hbnQiLCJkZWZlbnNpdmUiLCJicmVha2luZyBsYyIsIm9uIHBlZWsiLCAia25pZmUifX0sbWFudWFsX3N0YXRlPTAsc3RhdGU9Ik5PTkUifQoKbG9jYWwgbWVudSA9IHsKICAgIGZsX2xpbWl0ID0gdWlbcHJvdGVjdGVkWzNdXShwcm90ZWN0ZWRbNl0sICJmYWtlIGxhZyIsICJMaW1pdFxuIiwgMSwgMTUsIHVpLmdldChyZWZlcmVuY2UuZmxfbGltaXQpKSwKICAgIGNvbG9yMyA9IHVpLm5ld19jb2xvcl9waWNrZXIocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICJjb2xvciIsIDI1NSwgMTg4LCAyMzksIDI1NSksCiAgICBlbmFibGVkX2xhYmVsID0gdWkubmV3X2xhYmVsKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAiZW5hYmxlIGFtbmVzaWEgW2FjMTMwXSAtIHYuMC4wLjEiKSwKICAgIHRhYnMgPSB1aVtwcm90ZWN0ZWRbOV1dKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAiXG4iLCB7ICJhbnRpLWFpbSIsICJ2aXN1YWxzIHttaXNjfSIsICJjb25maWcifSksCiAgICBhYV9hZGRvbnMgPSB1aVtwcm90ZWN0ZWRbOV1dKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAiXG4iLCB7ICJidWlsZGVyIiwgImFkZG9ucyIgfSksCiAgICBhbnRpYWltX21vZGUgPSB1aVtwcm90ZWN0ZWRbOV1dKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAibW9kZSIsIHsgImN1c3RvbSIsICJjdXN0b20iIH0pLAogICAgc3BhY2UgPSB1aS5uZXdfbGFiZWwocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICIgIiksCiAgICB0ZWFtX21vZGUgPSB1aVtwcm90ZWN0ZWRbOV1dKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAidGVhbSIsIHsgImNvdW50ZXJ0ZXJyb3Jpc3QiLCAidGVycm9yaXN0IiB9KQp9Cgp1aS5zZXRfY2FsbGJhY2sobWVudS5mbF9saW1pdCwgZnVuY3Rpb24gKCkgdWkuc2V0KHJlZmVyZW5jZS5mbF9saW1pdCwgdWkuZ2V0KG1lbnUuZmxfbGltaXQpKSBlbmQpCgotLSB1bnVzZWQgZm9yIG5vdwpsb2NhbCBkeW5hbWljX21vZGUgPSB1aS5uZXdfbXVsdGlzZWxlY3QocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICgiY2hhbmdlIC8gcmVzZXQgZHluYW1pYyBsb2dpYyIpOmZvcm1hdChjb2xvcjphY2NlbnQoKSksIHsgImhpdCIsICJtaXNzIiwgImhlYWRzaG90In0pCi0tbG9jYWwgYnV0dG9uID0gdWkubmV3X2J1dHRvbihwcm90ZWN0ZWRbNl0sIHByb3RlY3RlZFs4XSwgInJlZnJlc2ggcHJlc2V0cyIsIGZ1bmN0aW9uICgpIHByaW50KCJyZWZyZXNoZWQiKSBlbmQpCgotLXBpbmctc3Bpa2UgcmVmCmxvY2FsIHBpbmdfc3Bpa2UgPSB7dWkucmVmZXJlbmNlKCJNSVNDIiwgIk1pc2NlbGxhbmVvdXMiLCAiUGluZyBzcGlrZSIpfQoKbG9jYWwgYW50aWFpbV9jb25kaXRpb24gPSB1aVtwcm90ZWN0ZWRbOV1dKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAoImNvbmRpdGlvbnMiKTpmb3JtYXQoY29sb3I6YWNjZW50KCkpLCBhYV9sb2wuYnVpbGRlci5jb25kaXRpb25zKQoKY29uZmlnX2xpc3Q9dWkubmV3X2xpc3Rib3gocHJvdGVjdGVkWzZdLHByb3RlY3RlZFs4XSwiY29uZmlncyIsIiIpY29uZmlnX25hbWU9dWkubmV3X3RleHRib3gocHJvdGVjdGVkWzZdLHByb3RlY3RlZFs4XSwiY29uZmlnIG5hbWUiKWNvbmZpZ19sb2FkPXVpLm5ld19idXR0b24ocHJvdGVjdGVkWzZdLHByb3RlY3RlZFs4XSwibG9hZCIsZnVuY3Rpb24oKWVuZCljb25maWdfc2F2ZT11aS5uZXdfYnV0dG9uKHByb3RlY3RlZFs2XSxwcm90ZWN0ZWRbOF0sInNhdmUiLGZ1bmN0aW9uKCllbmQpY29uZmlnX2RlbGV0ZT11aS5uZXdfYnV0dG9uKHByb3RlY3RlZFs2XSxwcm90ZWN0ZWRbOF0sImRlbGV0ZSIsZnVuY3Rpb24oKWVuZCljb25maWdfaW1wb3J0PXVpLm5ld19idXR0b24ocHJvdGVjdGVkWzZdLHByb3RlY3RlZFs4XSwiaW1wb3J0IixmdW5jdGlvbigpZW5kKWNvbmZpZ19leHBvcnQ9dWkubmV3X2J1dHRvbihwcm90ZWN0ZWRbNl0scHJvdGVjdGVkWzhdLCJleHBvcnQiLGZ1bmN0aW9uKCllbmQpCgpyZ2JhX3RvX2hleCA9IGZ1bmN0aW9uKCByLCBnLCBiLCBhICkKICAgIHJldHVybiBzdHJpbmcuZm9ybWF0KCAnJTAyeCUwMnglMDJ4JTAyeCcsIHIsIGcsIGIsIGEgKQplbmQKCmZ1bmN0aW9uIG1lbnU6aGFuZGxlcigpCiAgICBsb2NhbCBlbGVtZW50X2hhbmRsaW5nID0ge30KCiAgICBmb3IgXywgdiBpbiBwYWlycyhhYV9sb2wuYnVpbGRlci5jb25kaXRpb25zKSBkbwogICAgICAgIGVsZW1lbnRfaGFuZGxpbmdbdl0gPSB7fQoKICAgICAgICBlbGVtZW50X2hhbmRsaW5nW3ZdLmVuYWJsZV9zdGF0ZSA9IHVpLm5ld19jaGVja2JveChwcm90ZWN0ZWRbNl0sIHByb3RlY3RlZFs4XSwgImVuYWJsZSAoIi4udi4uIilcbmN0IikKCiAgICAgICAgZWxlbWVudF9oYW5kbGluZ1t2XS5qaXR0ZXJfdmFsX2wgPSB1aS5uZXdfbGFiZWwocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICIoIi4udi4uIikgLSBqaXR0ZXIiKQogICAgICAgIGVsZW1lbnRfaGFuZGxpbmdbdl0uaml0dGVyX3ZhbCA9IHVpW3Byb3RlY3RlZFszXV0ocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICJcbmN0KCIuLnYuLiIpIC0gaml0dGVyIiwgLTE4MCwgMTgwLCAwLCB0cnVlLCAiwrAiKQoKICAgICAgICBlbGVtZW50X2hhbmRsaW5nW3ZdLnlhd19tb2RlID0gdWlbcHJvdGVjdGVkWzldXShwcm90ZWN0ZWRbNl0sIHByb3RlY3RlZFs4XSwgKCJ5YXcgb3B0aW9uXG5jdCVzIik6Zm9ybWF0KHYpLCB7ICJsIC8gciIsImRlbGF5IiwiYXN5bmMiLCJhZHZhbmNlZCIsImFkdmFuY2VkKCspIiwiaW50ZXJ2YWwiLCAibGlnaHQifSkKCiAgICAgICAgZWxlbWVudF9oYW5kbGluZ1t2XS55YXdfbGVmdF9sID0gdWkubmV3X2xhYmVsKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAiKCIuLnYuLiIpIC0gbGVmdCB5YXciKQogICAgICAgIGVsZW1lbnRfaGFuZGxpbmdbdl0ueWF3X2xlZnQgPSB1aVtwcm90ZWN0ZWRbM11dKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAiXG5jdCgiLi52Li4iKSAtIGxlZnQgeWF3IiwgLTE4MCwgMTgwLCAwLCB0cnVlLCAiwrAiKQogICAgICAgIGVsZW1lbnRfaGFuZGxpbmdbdl0ueWF3X2xlZnRfciA9IHVpLm5ld19sYWJlbChwcm90ZWN0ZWRbNl0sIHByb3RlY3RlZFs4XSwgIigiLi52Li4iKSAtIHJpZ2h0IHlhdyIpCiAgICAgICAgZWxlbWVudF9oYW5kbGluZ1t2XS55YXdfcmlnaHQgPSB1aVtwcm90ZWN0ZWRbM11dKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAiXG5jdCgiLi52Li4iKSAtIHJpZ2h0IHlhdyIsIC0xODAsIDE4MCwgMCwgdHJ1ZSwgIsKwIikKCiAgICAgICAgZWxlbWVudF9oYW5kbGluZ1t2XS5kZWxheV9sID0gdWkubmV3X2xhYmVsKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAiKCIuLnYuLiIpIC0gZGVsYXkgbGFiZWwiKQogICAgICAgIGVsZW1lbnRfaGFuZGxpbmdbdl0uZGVsYXkgPSB1aVtwcm90ZWN0ZWRbM11dKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAoIlxub2Zmc2V0ZGVsYXljdCIpOmZvcm1hdCh2KSwgMCwgMTUsIDgsIHRydWUpCgogICAgICAgIGVsZW1lbnRfaGFuZGxpbmdbdl0uZW5hYmxlX3N0YXRlX3QgPSB1aS5uZXdfY2hlY2tib3gocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICJlbmFibGUgKCIuLnYuLiIpXG50IikKCiAgICAgICAgZWxlbWVudF9oYW5kbGluZ1t2XS5qaXR0ZXJfdmFsX2xfdCA9IHVpLm5ld19sYWJlbChwcm90ZWN0ZWRbNl0sIHByb3RlY3RlZFs4XSwgIigiLi52Li4iKSAtIGppdHRlciIpCiAgICAgICAgZWxlbWVudF9oYW5kbGluZ1t2XS5qaXR0ZXJfdmFsX3QgPSB1aVtwcm90ZWN0ZWRbM11dKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAiXG50KCIuLnYuLiIpIC0gaml0dGVyIiwgLTE4MCwgMTgwLCAwLCB0cnVlLCAiwrAiKQoKICAgICAgICBlbGVtZW50X2hhbmRsaW5nW3ZdLnlhd19tb2RlX3QgPSB1aVtwcm90ZWN0ZWRbOV1dKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAoInlhdyBvcHRpb25cbnQlcyIpOmZvcm1hdCh2KSwgeyAibCAvIHIiLCJkZWxheSIsImFzeW5jIiwiYWR2YW5jZWQiLCJhZHZhbmNlZCgrKSIsImludGVydmFsIiwgImxpZ2h0In0pCgogICAgICAgIGVsZW1lbnRfaGFuZGxpbmdbdl0ueWF3X2xlZnRfbF90ID0gdWkubmV3X2xhYmVsKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAiKCIuLnYuLiIpIC0gbGVmdCB5YXciKQogICAgICAgIGVsZW1lbnRfaGFuZGxpbmdbdl0ueWF3X2xlZnRfdCA9IHVpW3Byb3RlY3RlZFszXV0ocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICJcbnQoIi4udi4uIikgLSBsZWZ0IHlhdyIsIC0xODAsIDE4MCwgMCwgdHJ1ZSwgIsKwIikKICAgICAgICBlbGVtZW50X2hhbmRsaW5nW3ZdLnlhd19sZWZ0X3JfdCA9IHVpLm5ld19sYWJlbChwcm90ZWN0ZWRbNl0sIHByb3RlY3RlZFs4XSwgIigiLi52Li4iKSAtIHJpZ2h0IHlhdyIpCiAgICAgICAgZWxlbWVudF9oYW5kbGluZ1t2XS55YXdfcmlnaHRfdCA9IHVpW3Byb3RlY3RlZFszXV0ocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICJcbnQoIi4udi4uIikgLSByaWdodCB5YXciLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIpCgogICAgICAgIGVsZW1lbnRfaGFuZGxpbmdbdl0uZGVsYXlfbF90ID0gdWkubmV3X2xhYmVsKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAiKCIuLnYuLiIpIC0gZGVsYXkgbGFiZWwiKQogICAgICAgIGVsZW1lbnRfaGFuZGxpbmdbdl0uZGVsYXlfdCA9IHVpW3Byb3RlY3RlZFszXV0ocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICgiXG5vZmZzZXRkZWxheXQiKTpmb3JtYXQodiksIDAsIDE1LCA4LCB0cnVlKQogICAgZW5kCgogICAgbWVudS5idWlsZGVyX2VsZW1lbnRzID0gZWxlbWVudF9oYW5kbGluZwplbmQKCm1lbnU6aGFuZGxlcigpCgpsb2NhbCBhZGRvbnMgPSB7CiAgICBjbG9zZV9sYWJlbDExID0gdWkubmV3X2xhYmVsKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAiICIpLAogICAgYmluZHNfbGFiZWwgPSB1aS5uZXdfbGFiZWwocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICIgIiksCiAgICBiaW5kcyA9IHVpLm5ld19tdWx0aXNlbGVjdChwcm90ZWN0ZWRbNl0sIHByb3RlY3RlZFs4XSwgKCJcbmJpbmRzIik6Zm9ybWF0KGNvbG9yOmFjY2VudCgpKSwgeyAibWFudWFsIGFhIiwgImZyZWVzdGFuZGluZyIsICJmcmVlc3RhbmQgZGlzYWJsZXJzIiwgImVkZ2UgeWF3In0pLAogICAgbWFudWFsX2xlZnRfa2V5ID0gdWkubmV3X2hvdGtleShwcm90ZWN0ZWRbNl0sIHByb3RlY3RlZFs4XSwgIm1hbnVhbCBsZWZ0IiksCiAgICBtYW51YWxfcmlnaHRfa2V5ID0gdWkubmV3X2hvdGtleShwcm90ZWN0ZWRbNl0sIHByb3RlY3RlZFs4XSwgIm1hbnVhbCByaWdodCIpLAogICAgbWFudWFsX2ZvcndhcmRfa2V5ID0gdWkubmV3X2hvdGtleShwcm90ZWN0ZWRbNl0sIHByb3RlY3RlZFs4XSwgIm1hbnVhbCBmb3J3YXJkIiksCiAgICBmcmVlc3RhbmRpbmdfa2V5ID0gdWkubmV3X2hvdGtleShwcm90ZWN0ZWRbNl0sIHByb3RlY3RlZFs4XSwgImZyZWVzdGFuZGluZyIpLAogICAgZnJlZXN0YW5kaW5nX2Rpc2FibGVycyA9IHVpLm5ld19tdWx0aXNlbGVjdChwcm90ZWN0ZWRbNl0sIHByb3RlY3RlZFs4XSwgIuKVsOKUiGRpc2FibGVycyIsIHsgInN0YW5kaW5nIiwgIm1vdmluZyIsICJjcm91Y2hpbmciLCAiaW4gYWlyIiwgInNsb3d3YWxraW5nIiB9KSwKICAgIGVkZ2VfeWF3X2tleSA9IHVpLm5ld19ob3RrZXkocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICJlZGdlIHlhdyIpLAogICAgdmlzX3NlbGVjdHMgPSB1aS5uZXdfbXVsdGlzZWxlY3QocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICgidmlzdWFsIGVsZW1lbnRzIik6Zm9ybWF0KGNvbG9yOmFjY2VudCgpKSwgeyAic2NyZWVuIGluZGljYXRvciIsICJzbG93ZG93biIsICJ3YXRlcm1hcmsifSksCiAgICBtaXNjX3NlbGVjdHMgPSB1aS5uZXdfbXVsdGlzZWxlY3QocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICgibWlzYyBlbGVtZW50cyIpOmZvcm1hdChjb2xvcjphY2NlbnQoKSksIHsgImFpciB7bGN9IGV4cGxvaXQiLCAiZW5oYW5jZSBwaW5nIn0pLAogICAgZW5hYmxlX3Zpc3VhbHMgPSB1aS5uZXdfY2hlY2tib3gocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICJlbmFibGUgd2F0ZXJtYXJrIiksCiAgICBzY2FsZV9jbHIgPSB1aS5uZXdfY2hlY2tib3gocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICJzY2FsZSBpY29uIGNvbG9yIG9uIG1lbnUiKSwKICAgIGVuYWJsZV9pbmRpY2F0b3JzID0gdWkubmV3X2NoZWNrYm94KHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAiZW5hYmxlIGluZGljYXRvcnMiKSwKICAgIGVuYWJsZV9zbG93ZG93biA9IHVpLm5ld19jaGVja2JveChwcm90ZWN0ZWRbNl0sIHByb3RlY3RlZFs4XSwgImVuYWJsZSBzbG93ZG93biBpbmRpY2F0b3IiKSwKICAgIGluZGljYXRvcnMgPSB1aVtwcm90ZWN0ZWRbOV1dKHByb3RlY3RlZFs2XSwgcHJvdGVjdGVkWzhdLCAiY2hvb3NlIGluZGljYXRvciBzdHlsZSIsIHsgIi0iLCAiYW1uZXNpYSJ9KSwKICAgIHJlZHVjZV90aWNrcyA9IHVpLm5ld19jaGVja2JveChwcm90ZWN0ZWRbNl0sIHByb3RlY3RlZFs4XSwgJ3JlZHVjZSBzZW50IHRpY2tzJyksCiAgICBtYW5pcHVsYXRlX3RpY2sgPSB1aS5uZXdfY2hlY2tib3gocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICdtYW5pcHVsYXRlIHRpY2tzIHRvIGVuaGFuY2UgYW50aS1haW0nKQp9Cgpsb2NhbCBnZXRoZXg9ZnVuY3Rpb24oYixjLGQsZSxmLGcsaCxpKWxvY2FsIGosayxsLG09YyxkLGUsMDtsb2NhbCBmLGcsaCxpPWYsZyxoLGk7bG9jYWwgbj1nbG9iYWxzLnJlYWx0aW1lKCkvMiUxLjMqMi0xLjM7bG9jYWwgbz0iImZvciBwPTEsI2IgZG8gbG9jYWwgcT1iOnN1YihwLHApbG9jYWwgcj1wLyNiO2xvY2FsIGMsZCxlLHM9aixrLGwsbTtsb2NhbCB0PXItbjtpZiB0Pj0wIGFuZCB0PD0xLjQgdGhlbiBpZiB0PjAuNyB0aGVuIHQ9MS40LXQgZW5kO3JfZnJhY3Rpb24sZ19mcmFjdGlvbixiX2ZyYWN0aW9uLGFfZnJhY3Rpb249Zi1jLGctZCxoLWU7Yz1jK3JfZnJhY3Rpb24qdC8wLjg7ZD1kK2dfZnJhY3Rpb24qdC8wLjg7ZT1lK2JfZnJhY3Rpb24qdC8wLjggZW5kO289by4uKCdcYSUwMnglMDJ4JTAyeCUwMnglcycpOmZvcm1hdChjLGQsZSxpLGI6c3ViKHAscCkpZW5kO3JldHVybiBvIGVuZApsb2NhbCBncmFkaWVudF90ZXh0X2FuaW09ZnVuY3Rpb24oYixjLGQsZSxmLGcsaCxpLGosayxsKWxvY2FsIG0sbixvLHA9YyxkLGUsZjtsb2NhbCBnLGgsaSxqPWcsaCxpLGo7az1rIG9yIDE7bD1sIG9yIDA7bD1sKzM7bG9jYWwgcT0nJ2xvY2FsIHI9YjpsZW4oKWxvY2FsIHM9Z2xvYmFscy5jdXJ0aW1lKClsb2NhbCB0PXMqayVsLTI7Zm9yIHU9MSxyIGRvIGxvY2FsIHY9YjpzdWIodSx1KWxvY2FsIHc9KHUtMSkvKHItMSlsb2NhbCB4PXctdDtpZiB4PjEgdGhlbiB4PTEqMi14IGVuZDtsb2NhbCBjLGQsZSxmPW0sbixvLHA7bG9jYWwgeT1nLWM7bG9jYWwgej1oLWQ7bG9jYWwgQT1pLWU7bG9jYWwgQj1qLWY7aWYgeD49MCBhbmQgeDw9MSB0aGVuIGM9Yyt5Kng7ZD1kK3oqeDtlPWUrQSp4O2Y9ZitCKnggZW5kO3E9cS4uKCdcYSUwMnglMDJ4JTAyeCUwMnglcycpOmZvcm1hdChjLGQsZSxmLHYpZW5kO3JldHVybiBxIGVuZAoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjayhwcm90ZWN0ZWRbNV0sIGZ1bmN0aW9uKCkKICAgIGxvY2FsIHIsZyxiLGEgPSB1aS5nZXQobWVudS5jb2xvcjMpCgogICAgbG9jYWwgY29sb3Jfb3V0ID0gcmdiYV90b19oZXgocixnLGIsYSkKCiAgICB1aS5zZXQocmVmZXJlbmNlLm1lbnVfY29sLCB1aS5nZXQobWVudS5jb2xvcjMpKQoKICAgIHVpLnNldChtZW51LmVuYWJsZWRfbGFiZWwsIGdldGhleCgiYW1uZXNpYSAtfC0gIi4uYnVpbGQsIDM1LDM1LDM1LCByLGcsYiwyNTApKQoKICAgIHVpLnNldChhZGRvbnMuYmluZHNfbGFiZWwsICJcYSIuLmNvbG9yX291dC4uIlthYV1cYUZGRkZGRkMyIH4gYWRkb25zIikKCiAgICBmb3IgXywgdiBpbiBwYWlycyhhYV9sb2wuYnVpbGRlci5jb25kaXRpb25zKSBkbwoKICAgICAgICBsb2NhbCBlbGVtZW50cyA9IG1lbnUuYnVpbGRlcl9lbGVtZW50c1t2XQoKICAgICAgICBsb2NhbCByLGcsYixhID0gdWkuZ2V0KG1lbnUuY29sb3IzKQogICAgICAgIGxvY2FsIGNvbG9yX291dCA9IHJnYmFfdG9faGV4KHIsZyxiLGEpCgogICAgICAgIHVpLnNldChlbGVtZW50cy5qaXR0ZXJfdmFsX2wsICJcYSIuLmNvbG9yX291dC4uIiIuLnYuLiIgY3RcYUZGRkZGRkMyIOKAoiBqaXR0ZXIiKQogICAgICAgIHVpLnNldChlbGVtZW50cy5qaXR0ZXJfdmFsX2xfdCwgIlxhIi4uY29sb3Jfb3V0Li4iIi4udi4uIiB0XGFGRkZGRkZDMiDigKIgaml0dGVyIikKCiAgICAgICAgdWkuc2V0KGVsZW1lbnRzLmRlbGF5X2wsICJcYSIuLmNvbG9yX291dC4uIiIuLnYuLiIgY3RcYUZGRkZGRkMyIOKAoiByYXRlICh4KSB0byB1bnN5bmMiKQogICAgICAgIHVpLnNldChlbGVtZW50cy5kZWxheV9sX3QsICJcYSIuLmNvbG9yX291dC4uIiIuLnYuLiIgdFxhRkZGRkZGQzIg4oCiIHJhdGUgKHgpIHRvIHVuc3luYyIpCgogICAgICAgIHVpLnNldChlbGVtZW50cy55YXdfbGVmdF9sLCAiXGEiLi5jb2xvcl9vdXQuLiIiLi52Li4iIGN0XGFGRkZGRkZDMiDigKIgbGVmdCIpCiAgICAgICAgdWkuc2V0KGVsZW1lbnRzLnlhd19sZWZ0X3IsICJcYSIuLmNvbG9yX291dC4uIiIuLnYuLiIgY3RcYUZGRkZGRkMyIOKAoiByaWdodCIpCgogICAgICAgIHVpLnNldChlbGVtZW50cy55YXdfbGVmdF9sX3QsICJcYSIuLmNvbG9yX291dC4uIiIuLnYuLiIgdFxhRkZGRkZGQzIg4oCiIGxlZnQiKQogICAgICAgIHVpLnNldChlbGVtZW50cy55YXdfbGVmdF9yX3QsICJcYSIuLmNvbG9yX291dC4uIiIuLnYuLiIgdFxhRkZGRkZGQzIg4oCiIHJpZ2h0IikKCiAgICBlbmQKZW5kKQoKbG9jYWwgY29uZmlnID0ge30KCmxvY2FsIGFtbmVzaWEgPSB7fQoKYW1uZXNpYS5kYXRhYmFzZSA9IHsKICAgIGNvbmZpZ3MgPSAiOmFtbmVzaWE6OmNvbmZpZ3M6IiwKfQoKYW1uZXNpYS5wcmVzZXRzID0ge30KCmZ1bmN0aW9uIGdldF9jb25maWcoYSlsb2NhbCBkYXRhYmFzZT1kYXRhYmFzZS5yZWFkKGFtbmVzaWEuZGF0YWJhc2UuY29uZmlncylvcnt9Zm9yIGIsYyBpbiBwYWlycyhkYXRhYmFzZSlkbyBpZiBjLm5hbWU9PWEgdGhlbiByZXR1cm57Y29uZmlnPWMuY29uZmlnLGluZGV4PWJ9ZW5kIGVuZDtmb3IgYixjIGluIHBhaXJzKGFtbmVzaWEucHJlc2V0cylkbyBpZiBjLm5hbWU9PWEgdGhlbiByZXR1cm57Y29uZmlnPWJhc2U2NC5kZWNvZGUoYy5jb25maWcpLGluZGV4PWJ9ZW5kIGVuZDtyZXR1cm4gZmFsc2UgZW5kCmZ1bmN0aW9uIHNhdmVfY29uZmlnKGEpbG9jYWwgYj1kYXRhYmFzZS5yZWFkKGFtbmVzaWEuZGF0YWJhc2UuY29uZmlncylvcnt9bG9jYWwgYz17fWlmIGE6bWF0Y2goIlteJXddIil+PW5pbCB0aGVuIHJldHVybiBlbmQ7bG9jYWwgZD17fWZvciBlLGYgaW4gcGFpcnMoYWFfbG9sLmJ1aWxkZXIuY29uZGl0aW9ucylkbyBkW2ZdPXt9Zm9yIGcsaCBpbiBwYWlycyhtZW51LmJ1aWxkZXJfZWxlbWVudHNbZl0pZG8gZFtmXVtnXT11aS5nZXQoaCllbmQgZW5kO3RhYmxlLmluc2VydChjLGpzb24uc3RyaW5naWZ5KGQpKWxvY2FsIGQ9Z2V0X2NvbmZpZyhhKWlmIG5vdCBkIHRoZW4gdGFibGUuaW5zZXJ0KGIse25hbWU9YSxjb25maWc9dGFibGUuY29uY2F0KGMsIjoiKX0pZWxzZSBiW2QuaW5kZXhdLmNvbmZpZz10YWJsZS5jb25jYXQoYywiOiIpZW5kO2RhdGFiYXNlLndyaXRlKGFtbmVzaWEuZGF0YWJhc2UuY29uZmlncyxiKWVuZApmdW5jdGlvbiBkZWxldGVfY29uZmlnKGEpbG9jYWwgYj1kYXRhYmFzZS5yZWFkKGFtbmVzaWEuZGF0YWJhc2UuY29uZmlncylvcnt9Zm9yIGMsZCBpbiBwYWlycyhiKWRvIGlmIGQubmFtZT09YSB0aGVuIHRhYmxlLnJlbW92ZShiLGMpYnJlYWsgZW5kIGVuZDtmb3IgYyxkIGluIHBhaXJzKGFtbmVzaWEucHJlc2V0cylkbyBpZiBkLm5hbWU9PWEgdGhlbiByZXR1cm4gZmFsc2UgZW5kIGVuZDtkYXRhYmFzZS53cml0ZShhbW5lc2lhLmRhdGFiYXNlLmNvbmZpZ3MsYillbmQKZnVuY3Rpb24gZ2V0X2NvbmZpZ19saXN0KClsb2NhbCBkYXRhYmFzZT1kYXRhYmFzZS5yZWFkKGFtbmVzaWEuZGF0YWJhc2UuY29uZmlncylvcnt9bG9jYWwgYT17fWxvY2FsIGI9YW1uZXNpYS5wcmVzZXRzO2ZvciBjLGQgaW4gcGFpcnMoYilkbyB0YWJsZS5pbnNlcnQoYSxkLm5hbWUpZW5kO2ZvciBjLGQgaW4gcGFpcnMoZGF0YWJhc2UpZG8gdGFibGUuaW5zZXJ0KGEsZC5uYW1lKWVuZDtyZXR1cm4gYSBlbmQKZnVuY3Rpb24gY29uZmlnX3Rvc3RyaW5nKClsb2NhbCBhPXt9Zm9yIGIsYyBpbiBwYWlycyhhYV9sb2wuYnVpbGRlci5jb25kaXRpb25zKWRvIGFbY109e31mb3IgZCxlIGluIHBhaXJzKG1lbnUuYnVpbGRlcl9lbGVtZW50c1tjXSlkbyBhW2NdW2RdPXVpLmdldChlKWVuZCBlbmQ7Y2xpcGJvYXJkLnNldChqc29uLnN0cmluZ2lmeShhKSllbmQKZnVuY3Rpb24gbG9hZF9zZXR0aW5ncyhhKWlmIG5vdCBwY2FsbChmdW5jdGlvbigpanNvbi5wYXJzZShhKWVuZCl0aGVuIGVycm9yKCJpbnZhbGlkIGNvbmZpZyBmb3JtYXQuIilyZXR1cm4gZW5kO2xvY2FsIGI9anNvbi5wYXJzZShhKWZvciBjLGQgaW4gcGFpcnMoYilkbyBmb3IgZSxmIGluIHBhaXJzKGQpZG8gdWkuc2V0KG1lbnUuYnVpbGRlcl9lbGVtZW50c1tjXVtlXSxmKWVuZCBlbmQgZW5kCmZ1bmN0aW9uIGV4cG9ydF9zZXR0aW5ncygpbG9jYWwgYT17fWZvciBiLGMgaW4gcGFpcnMoYWFfbG9sLmJ1aWxkZXIuY29uZGl0aW9ucylkbyBhW2NdPXt9Zm9yIGQsZSBpbiBwYWlycyhtZW51LmJ1aWxkZXJfZWxlbWVudHNbY10pZG8gYVtjXVtkXT11aS5nZXQoZSllbmQgZW5kO2NsaXBib2FyZC5zZXQoanNvbi5zdHJpbmdpZnkoYSkpZW5kCmZ1bmN0aW9uIGltcG9ydF9zZXR0aW5ncyhhKWlmIG5vdCBwY2FsbChmdW5jdGlvbigpanNvbi5wYXJzZShhKWVuZCl0aGVuIGVycm9yKCJpbnZhbGlkIGNvbmZpZyBmb3JtYXQuIilyZXR1cm4gZW5kO2xvY2FsIGI9anNvbi5wYXJzZShhKWZvciBjLGQgaW4gcGFpcnMoYilkbyBmb3IgZSxmIGluIHBhaXJzKGQpZG8gdWkuc2V0KG1lbnUuYnVpbGRlcl9lbGVtZW50c1tjXVtlXSxmKWVuZCBlbmQgZW5kCmZ1bmN0aW9uIGxvYWRfY29uZmlnKGEpbG9jYWwgYj1nZXRfY29uZmlnKGEpbG9hZF9zZXR0aW5ncyhiLmNvbmZpZylpZiBhPT0iYnJhbmRvbiJ0aGVuIGhpZGVfY29uZmlnPXRydWUgZWxzZSBoaWRlX2NvbmZpZz1mYWxzZSBlbmQ7cmV0dXJuIGhpZGVfY29uZmlnIGVuZAoKZnVuY3Rpb24gbWVudTp2aXNpYmlsaXR5KCkKCiAgICBsb2NhbCBzaG93ID0gdHJ1ZQoKICAgIGxvY2FsIGRpc2FibGVycyA9IHVpLmdldChhZGRvbnMuYmluZHMpCiAgICBsb2NhbCBhbnRpYWltbW9kZSA9IHVpLmdldChtZW51LmFudGlhaW1fbW9kZSkKCiAgICB1aS5zZXQocmVmZXJlbmNlLmVuYWJsZWQsIHRydWUpCgogICAgLS1za2VldCBtZW51IGFhIGhpZGRlbiAobWluaWZpZWQpCiAgICB1aVtwcm90ZWN0ZWRbMV1dKHJlZmVyZW5jZS5lbmFibGVkLG5vdCBzaG93KXVpW3Byb3RlY3RlZFsxXV0ocmVmZXJlbmNlLnBpdGNoLG5vdCBzaG93KXVpW3Byb3RlY3RlZFsxXV0ocmVmZXJlbmNlLnlhd19iYXNlLG5vdCBzaG93KXVpW3Byb3RlY3RlZFsxXV0ocmVmZXJlbmNlLnlhd1sxXSxub3Qgc2hvdyl1aVtwcm90ZWN0ZWRbMV1dKHJlZmVyZW5jZS55YXdbMl0sbm90IHNob3cpdWlbcHJvdGVjdGVkWzFdXShyZWZlcmVuY2UueWF3X2ppdHRlclsxXSxub3Qgc2hvdyl1aVtwcm90ZWN0ZWRbMV1dKHJlZmVyZW5jZS55YXdfaml0dGVyWzJdLG5vdCBzaG93KXVpW3Byb3RlY3RlZFsxXV0ocmVmZXJlbmNlLmJvZHlfeWF3WzFdLG5vdCBzaG93KXVpW3Byb3RlY3RlZFsxXV0ocmVmZXJlbmNlLmJvZHlfeWF3WzJdLG5vdCBzaG93KXVpW3Byb3RlY3RlZFsxXV0ocmVmZXJlbmNlLmZyZWVzdGFuZGluZ19ib2R5X3lhdyxub3Qgc2hvdyl1aVtwcm90ZWN0ZWRbMV1dKHJlZmVyZW5jZS5lZGdlX3lhdyxub3Qgc2hvdyl1aVtwcm90ZWN0ZWRbMV1dKHJlZmVyZW5jZS5mcmVlc3RhbmRpbmdbMV0sbm90IHNob3cpdWlbcHJvdGVjdGVkWzFdXShyZWZlcmVuY2UuZnJlZXN0YW5kaW5nWzJdLG5vdCBzaG93KXVpW3Byb3RlY3RlZFsxXV0ocmVmZXJlbmNlLnJvbGwsbm90IHNob3cpCgogICAgdWlbcHJvdGVjdGVkWzFdXShtZW51LnRhYnMsIHNob3cpCgogICAgbG9jYWwgc2hvd19hYSA9IHVpLmdldChtZW51LnRhYnMpID09ICJhbnRpLWFpbSIgYW5kIHVpLmdldChtZW51LmFhX2FkZG9ucykgPT0gImJ1aWxkZXIiCgogICAgbG9jYWwgc2hvd19taXNjID0gc2hvdyBhbmQgdWkuZ2V0KG1lbnUudGFicykgPT0gIm1pc2MiCgogICAgbG9jYWwgc2hvd19jb25maWcgPSBzaG93IGFuZCB1aS5nZXQobWVudS50YWJzKSA9PSAiY29uZmlnIgoKICAgIHVpW3Byb3RlY3RlZFsxXV0oYWRkb25zLnJlZHVjZV90aWNrcywgdWkuZ2V0KG1lbnUudGFicykgPT0gImFudGktYWltIiBhbmQgdWkuZ2V0KG1lbnUuYWFfYWRkb25zKSA9PSAiYWRkb25zIikKICAgIHVpW3Byb3RlY3RlZFsxXV0oYWRkb25zLm1hbmlwdWxhdGVfdGljaywgdWkuZ2V0KG1lbnUudGFicykgPT0gImFudGktYWltIiBhbmQgdWkuZ2V0KG1lbnUuYWFfYWRkb25zKSA9PSAiYWRkb25zIikKICAgIHVpW3Byb3RlY3RlZFsxXV0oY29uZmlnX2xpc3QsIHNob3dfY29uZmlnKQogICAgdWlbcHJvdGVjdGVkWzFdXShjb25maWdfbmFtZSwgc2hvd19jb25maWcpCiAgICB1aVtwcm90ZWN0ZWRbMV1dKGNvbmZpZ19sb2FkLCBzaG93X2NvbmZpZykKICAgIHVpW3Byb3RlY3RlZFsxXV0oY29uZmlnX3NhdmUsIHNob3dfY29uZmlnKQogICAgdWlbcHJvdGVjdGVkWzFdXShjb25maWdfZGVsZXRlLCBzaG93X2NvbmZpZykKICAgIHVpW3Byb3RlY3RlZFsxXV0oY29uZmlnX2ltcG9ydCwgc2hvd19jb25maWcpCiAgICB1aVtwcm90ZWN0ZWRbMV1dKGNvbmZpZ19leHBvcnQsIHNob3dfY29uZmlnKQogICAgdWlbcHJvdGVjdGVkWzFdXShhZGRvbnMuYmluZHMsIHNob3dfYWEpCiAgICB1aVtwcm90ZWN0ZWRbMV1dKGFkZG9ucy5iaW5kc19sYWJlbCwgc2hvd19hYSkKICAgIHVpW3Byb3RlY3RlZFsxXV0obWVudS5hYV9hZGRvbnMsIHVpLmdldChtZW51LnRhYnMpID09ICJhbnRpLWFpbSIpCiAgICB1aVtwcm90ZWN0ZWRbMV1dKG1lbnUuYW50aWFpbV9tb2RlLCBmYWxzZSkKICAgIAogICAgaWYgY29udGFpbnMoZGlzYWJsZXJzLCAibWFudWFsIGFhIikgdGhlbgoJICAgIHVpW3Byb3RlY3RlZFsxXV0oYWRkb25zLm1hbnVhbF9sZWZ0X2tleSwgc2hvd19hYSkKCSAgICB1aVtwcm90ZWN0ZWRbMV1dKGFkZG9ucy5tYW51YWxfcmlnaHRfa2V5LCBzaG93X2FhKQoJICAgIHVpW3Byb3RlY3RlZFsxXV0oYWRkb25zLm1hbnVhbF9mb3J3YXJkX2tleSwgc2hvd19hYSkKICAgIGVsc2UKICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGFkZG9ucy5tYW51YWxfbGVmdF9rZXksIGZhbHNlKQoJICAgIHVpW3Byb3RlY3RlZFsxXV0oYWRkb25zLm1hbnVhbF9yaWdodF9rZXksIGZhbHNlKQoJICAgIHVpW3Byb3RlY3RlZFsxXV0oYWRkb25zLm1hbnVhbF9mb3J3YXJkX2tleSwgZmFsc2UpCiAgICBlbmQKCiAgICBpZiBjb250YWlucyhkaXNhYmxlcnMsICJmcmVlc3RhbmRpbmciKSB0aGVuCgkgICAgdWlbcHJvdGVjdGVkWzFdXShhZGRvbnMuZnJlZXN0YW5kaW5nX2tleSwgc2hvd19hYSkKICAgIGVsc2UKICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGFkZG9ucy5mcmVlc3RhbmRpbmdfa2V5LCBmYWxzZSkKICAgIGVuZAoKICAgIGlmIGNvbnRhaW5zKGRpc2FibGVycywgImZyZWVzdGFuZCBkaXNhYmxlcnMiKSB0aGVuCgkgICAgdWlbcHJvdGVjdGVkWzFdXShhZGRvbnMuZnJlZXN0YW5kaW5nX2Rpc2FibGVycywgc2hvd19hYSkKICAgIGVsc2UKICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGFkZG9ucy5mcmVlc3RhbmRpbmdfZGlzYWJsZXJzLCBmYWxzZSkKICAgIGVuZAoKICAgIGlmIGNvbnRhaW5zKGRpc2FibGVycywgImVkZ2UgeWF3IikgdGhlbgoJICAgIHVpW3Byb3RlY3RlZFsxXV0oYWRkb25zLmVkZ2VfeWF3X2tleSwgc2hvd19hYSkKICAgIGVsc2UKICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGFkZG9ucy5lZGdlX3lhd19rZXksIGZhbHNlKQogICAgZW5kCgogICAgdWlbcHJvdGVjdGVkWzFdXShhbnRpYWltX2NvbmRpdGlvbiwgc2hvd19hYSkKCgogICAgdWlbcHJvdGVjdGVkWzFdXShkeW5hbWljX21vZGUsIGZhbHNlKQoKICAgIC0tY3VzdG9tIGFhIGxvb3AgKG1pbmlmaWVkIGJjIG9tZyBpdHMgbG9uZyBhbmQgdWdseSBidXQgaW0gdG9vIGxhenkgdG8gZml4IGl0Li4pCiAgICAtLT4gY3VzdG9tIGFudGlhaW0KICAgIGZvciBfLCB2IGluIHBhaXJzKGFhX2xvbC5idWlsZGVyLmNvbmRpdGlvbnMpIGRvCiAgICAgICAgbG9jYWwgc2VsZWN0ZWQgPSB1aS5nZXQoYW50aWFpbV9jb25kaXRpb24pID09IHYgYW5kIHNob3dfYWEgYW5kIG5vdCBoaWRlX2NvbmZpZwoKICAgICAgICBsb2NhbCBlbGVtZW50cyA9IG1lbnUuYnVpbGRlcl9lbGVtZW50c1t2XQoKICAgICAgICBpZiB1aS5nZXQobWVudS5hYV9hZGRvbnMpID09ICJidWlsZGVyIiB0aGVuCiAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0obWVudS50ZWFtX21vZGUsIHNob3dfYWEpCiAgICAgICAgICAgIHVpLnNldChtZW51LmJ1aWxkZXJfZWxlbWVudHNbImdsb2JhbCJdLmVuYWJsZV9zdGF0ZSwgc2hvd19hYSkKICAgICAgICAgICAgdWkuc2V0KG1lbnUuYnVpbGRlcl9lbGVtZW50c1siZ2xvYmFsIl0uZW5hYmxlX3N0YXRlX3QsIHNob3dfYWEpCiAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0obWVudS5idWlsZGVyX2VsZW1lbnRzWyJnbG9iYWwiXS5lbmFibGVfc3RhdGUsIGZhbHNlKQogICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKG1lbnUuYnVpbGRlcl9lbGVtZW50c1siZ2xvYmFsIl0uZW5hYmxlX3N0YXRlX3QsIGZhbHNlKQogICAgICAgICAgICBpZiB1aS5nZXQobWVudS50ZWFtX21vZGUpID09ICJjb3VudGVydGVycm9yaXN0IiB0aGVuCiAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmVuYWJsZV9zdGF0ZV90LCBmYWxzZSkKICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMuZW5hYmxlX3N0YXRlLCBzZWxlY3RlZCkKCiAgICAgICAgICAgICAgICBpZiB1aS5nZXQoZWxlbWVudHMuZW5hYmxlX3N0YXRlKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgdWkuZ2V0KGVsZW1lbnRzLnlhd19tb2RlKSA9PSAiYXN5bmMiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5kZWxheSwgc2VsZWN0ZWQpCiAgICAgICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMuZGVsYXlfbCwgc2VsZWN0ZWQpCiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmRlbGF5X2wsIGZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmRlbGF5LCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmppdHRlcl92YWwsIHNlbGVjdGVkKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMuaml0dGVyX3ZhbF9sLCBzZWxlY3RlZCkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLnlhd19tb2RlLCBzZWxlY3RlZCkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLnlhd19sZWZ0X2wsIHNlbGVjdGVkKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMueWF3X2xlZnQsIHNlbGVjdGVkKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMueWF3X2xlZnRfciwgc2VsZWN0ZWQpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfcmlnaHQsIHNlbGVjdGVkKQoKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmppdHRlcl92YWxfdCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5qaXR0ZXJfdmFsX2xfdCwgZmFsc2UpCgogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMueWF3X21vZGVfdCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5kZWxheV9sX3QsIGZhbHNlKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMueWF3X2xlZnRfbF90LCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLnlhd19sZWZ0X3JfdCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfbGVmdF90LCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLnlhd19yaWdodF90LCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmRlbGF5X3QsIGZhbHNlKQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMuZGVsYXlfbCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5kZWxheSwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5qaXR0ZXJfdmFsLCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmppdHRlcl92YWxfbCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfbW9kZSwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfbGVmdF9sLCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLnlhd19sZWZ0LCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLnlhd19sZWZ0X3IsIGZhbHNlKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMueWF3X3JpZ2h0LCBmYWxzZSkKCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5qaXR0ZXJfdmFsX3QsIGZhbHNlKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMuaml0dGVyX3ZhbF9sX3QsIGZhbHNlKQoKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLnlhd19tb2RlX3QsIGZhbHNlKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMuZGVsYXlfbF90LCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLnlhd19sZWZ0X2xfdCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfbGVmdF9yX3QsIGZhbHNlKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMueWF3X2xlZnRfdCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfcmlnaHRfdCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5kZWxheV90LCBmYWxzZSkKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgZWxzZWlmIHVpLmdldChtZW51LnRlYW1fbW9kZSkgPT0gInRlcnJvcmlzdCIgdGhlbgogICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5lbmFibGVfc3RhdGUsIGZhbHNlKQogICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5lbmFibGVfc3RhdGVfdCwgc2VsZWN0ZWQpCgogICAgICAgICAgICAgICAgaWYgdWkuZ2V0KGVsZW1lbnRzLmVuYWJsZV9zdGF0ZV90KSB0aGVuCgogICAgICAgICAgICAgICAgICAgIGlmIHVpLmdldChlbGVtZW50cy55YXdfbW9kZV90KSA9PSAiYXN5bmMiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5kZWxheV9sX3QsIHNlbGVjdGVkKQogICAgICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmRlbGF5X3QsIHNlbGVjdGVkKQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5kZWxheV9sX3QsIGZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmRlbGF5X3QsIGZhbHNlKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMuaml0dGVyX3ZhbF9sX3QsIHNlbGVjdGVkKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMueWF3X21vZGVfdCwgc2VsZWN0ZWQpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfbGVmdF9sX3QsIHNlbGVjdGVkKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMueWF3X2xlZnRfdCwgc2VsZWN0ZWQpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfbGVmdF9yX3QsIHNlbGVjdGVkKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMueWF3X3JpZ2h0X3QsIHNlbGVjdGVkKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMuaml0dGVyX3ZhbF90LCBzZWxlY3RlZCkKCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5qaXR0ZXJfdmFsLCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmppdHRlcl92YWxfbCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfbW9kZSwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfbGVmdF9sLCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmRlbGF5X2wsIGZhbHNlKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMueWF3X2xlZnRfciwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfbGVmdCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfcmlnaHQsIGZhbHNlKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMuZGVsYXksIGZhbHNlKQogICAgICAgICAgICAgICAgZWxzZQoKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmRlbGF5X2xfdCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5kZWxheV90LCBmYWxzZSkKCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5qaXR0ZXJfdmFsX2xfdCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfbW9kZV90LCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLnlhd19sZWZ0X2xfdCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfbGVmdF90LCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLnlhd19sZWZ0X3JfdCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfcmlnaHRfdCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5qaXR0ZXJfdmFsX3QsIGZhbHNlKQoKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmppdHRlcl92YWwsIGZhbHNlKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMuaml0dGVyX3ZhbF9sLCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLnlhd19tb2RlLCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLnlhd19sZWZ0X2wsIGZhbHNlKQogICAgICAgICAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMuZGVsYXlfbCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfbGVmdF9yLCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLnlhd19sZWZ0LCBmYWxzZSkKICAgICAgICAgICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLnlhd19yaWdodCwgZmFsc2UpCiAgICAgICAgICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5kZWxheSwgZmFsc2UpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZWxzZQoJCQogICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmVuYWJsZV9zdGF0ZV90LCBmYWxzZSkKICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5lbmFibGVfc3RhdGUsIGZhbHNlKQogICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmppdHRlcl92YWwsIGZhbHNlKQogICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmppdHRlcl92YWxfdCwgZmFsc2UpCiAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMuaml0dGVyX3ZhbF9sLCBmYWxzZSkKICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy5qaXR0ZXJfdmFsX2xfdCwgZmFsc2UpCiAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMuZGVsYXlfbCwgZmFsc2UpCiAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMuZGVsYXlfbF90LCBmYWxzZSkKICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfbW9kZV90LCBmYWxzZSkKICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfbW9kZSwgZmFsc2UpCiAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMueWF3X2xlZnRfbCwgZmFsc2UpCiAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMueWF3X2xlZnRfciwgZmFsc2UpCiAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMueWF3X2xlZnQsIGZhbHNlKQogICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmRlbGF5X3QsIGZhbHNlKQogICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLmRlbGF5LCBmYWxzZSkKICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfcmlnaHQsIGZhbHNlKQoKICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShlbGVtZW50cy55YXdfbGVmdF9sX3QsIGZhbHNlKQogICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGVsZW1lbnRzLnlhd19sZWZ0X3JfdCwgZmFsc2UpCiAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMueWF3X2xlZnRfdCwgZmFsc2UpCiAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oZWxlbWVudHMueWF3X3JpZ2h0X3QsIGZhbHNlKQoKICAgICAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShtZW51LnRlYW1fbW9kZSwgZmFsc2UpCgogICAgICAgIGVuZAoJCQkKICAgIGVuZAoKICAgIGxvY2FsIHNob3dfdmlzdWFscyA9IHNob3cgYW5kIHVpLmdldChtZW51LnRhYnMpID09ICJ2aXN1YWxzIHttaXNjfSIKICAgIHVpW3Byb3RlY3RlZFsxXV0oYWRkb25zLnZpc19zZWxlY3RzLCBzaG93X3Zpc3VhbHMpCiAgICB1aVtwcm90ZWN0ZWRbMV1dKGFkZG9ucy5taXNjX3NlbGVjdHMsIHNob3dfdmlzdWFscykKICAgIHVpW3Byb3RlY3RlZFsxXV0oYWRkb25zLnNjYWxlX2NsciwgZmFsc2UpCgogICAgaWYgY29udGFpbnModWkuZ2V0KGFkZG9ucy52aXNfc2VsZWN0cyksICJzY3JlZW4gaW5kaWNhdG9yIikgdGhlbgogICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oYWRkb25zLmVuYWJsZV9pbmRpY2F0b3JzLCBzaG93X3Zpc3VhbHMpCiAgICAgICAgaWYgc2hvd192aXN1YWxzIGFuZCB1aS5nZXQoYWRkb25zLmVuYWJsZV9pbmRpY2F0b3JzKSB0aGVuCiAgICAgICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oYWRkb25zLmluZGljYXRvcnMsIHRydWUpCiAgICAgICAgZWxzZQogICAgICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGFkZG9ucy5pbmRpY2F0b3JzLCBmYWxzZSkKICAgICAgICBlbmQKICAgIGVsc2UKICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGFkZG9ucy5lbmFibGVfaW5kaWNhdG9ycywgZmFsc2UpCiAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShhZGRvbnMuaW5kaWNhdG9ycywgZmFsc2UpCiAgICBlbmQKCiAgICBpZiBjb250YWlucyh1aS5nZXQoYWRkb25zLnZpc19zZWxlY3RzKSwgIndhdGVybWFyayIpIHRoZW4KICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGFkZG9ucy5lbmFibGVfdmlzdWFscywgc2hvd192aXN1YWxzKQogICAgZWxzZQogICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oYWRkb25zLmVuYWJsZV92aXN1YWxzLCBmYWxzZSkKICAgIGVuZAoKICAgIGlmIGNvbnRhaW5zKHVpLmdldChhZGRvbnMudmlzX3NlbGVjdHMpLCAic2xvd2Rvd24iKSB0aGVuCiAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShhZGRvbnMuZW5hYmxlX3Nsb3dkb3duLCBzaG93X3Zpc3VhbHMpCiAgICBlbHNlCiAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShhZGRvbnMuZW5hYmxlX3Nsb3dkb3duLCBmYWxzZSkKICAgIGVuZAoKICAgIHVpW3Byb3RlY3RlZFsxXV0ocmVmZXJlbmNlLmZsX2xpbWl0LCBub3Qgc2hvdykKICAgIHVpW3Byb3RlY3RlZFsxXV0obWVudS5mbF9saW1pdCwgc2hvdykKZW5kCgpmdW5jdGlvbiBtZW51OnNob3dfb2coKXVpW3Byb3RlY3RlZFsxXV0ocmVmZXJlbmNlLmVuYWJsZWQsdHJ1ZSl1aVtwcm90ZWN0ZWRbMV1dKHJlZmVyZW5jZS5waXRjaCx0cnVlKXVpW3Byb3RlY3RlZFsxXV0ocmVmZXJlbmNlLnlhd19iYXNlLHRydWUpdWlbcHJvdGVjdGVkWzFdXShyZWZlcmVuY2UueWF3WzFdLHRydWUpdWlbcHJvdGVjdGVkWzFdXShyZWZlcmVuY2UueWF3WzJdLHRydWUpdWlbcHJvdGVjdGVkWzFdXShyZWZlcmVuY2UueWF3X2ppdHRlclsxXSx0cnVlKXVpW3Byb3RlY3RlZFsxXV0ocmVmZXJlbmNlLnlhd19qaXR0ZXJbMl0sdHJ1ZSl1aVtwcm90ZWN0ZWRbMV1dKHJlZmVyZW5jZS5ib2R5X3lhd1sxXSx0cnVlKXVpW3Byb3RlY3RlZFsxXV0ocmVmZXJlbmNlLmJvZHlfeWF3WzJdLHRydWUpdWlbcHJvdGVjdGVkWzFdXShyZWZlcmVuY2UuZnJlZXN0YW5kaW5nX2JvZHlfeWF3LHRydWUpdWlbcHJvdGVjdGVkWzFdXShyZWZlcmVuY2UuZWRnZV95YXcsdHJ1ZSl1aVtwcm90ZWN0ZWRbMV1dKHJlZmVyZW5jZS5mcmVlc3RhbmRpbmdbMV0sdHJ1ZSl1aVtwcm90ZWN0ZWRbMV1dKHJlZmVyZW5jZS5mcmVlc3RhbmRpbmdbMl0sdHJ1ZSl1aVtwcm90ZWN0ZWRbMV1dKHJlZmVyZW5jZS5yb2xsLHRydWUpdWlbcHJvdGVjdGVkWzFdXShyZWZlcmVuY2UuZmxfbGltaXQsdHJ1ZSllbmQKCnJlZ2lzdGVyKCJzaHV0ZG93biIsIGZ1bmN0aW9uICgpIG1lbnU6c2hvd19vZygpIGVuZCkKcmVnaXN0ZXIocHJvdGVjdGVkWzVdLCBmdW5jdGlvbiAoKSBtZW51OnZpc2liaWxpdHkoKSBlbmQpCgpsb2NhbCBmdW5jdGlvbiBjb2xvcl9sb2codGV4dCwgcixnLGIpCiAgICBjbGllbnQuY29sb3JfbG9nKHIsZyxiLCAiYW1uZXNpYSBcMCIpCiAgICBjbGllbnQuY29sb3JfbG9nKDExMCwgMTEwLCAxMTAsICJ+IFwwIikKICAgIGNsaWVudC5jb2xvcl9sb2coMjAwLDIwMCwyMDAsIHRleHQpCmVuZAoKZnVuY3Rpb24gaW1wb3J0X3NldHRpbmdzX2ZpeCgpCiAgICBsb2NhbCBjZmdfc3RyaW5nID0gY2xpcGJvYXJkLmdldCgpCiAgICBpZiBub3QgcGNhbGwoZnVuY3Rpb24oKSBqc29uLnBhcnNlKGNmZ19zdHJpbmcpIGVuZCkgdGhlbgogICAgICAgIGVycm9yKCJJbnZhbGlkIGNvbmZpZyBmb3JtYXQhIikKICAgICAgICByZXR1cm4KICAgIGVuZAogICAgbG9jYWwgY2ZnID0ganNvbi5wYXJzZShjZmdfc3RyaW5nKQogICAgbG9jYWwgaW5wdXQgPSAiIgogICAgbG9jYWwgdGVhbSA9ICIiCiAgICBmb3IgY29uZGl0aW9uLCBzZXR0aW5ncyBpbiBwYWlycyhjZmcpIGRvCiAgICAgICAgaW5wdXQgPSBjb25kaXRpb24KICAgICAgICBmb3Igc2V0dGluZ19uYW1lLCBzZXR0aW5nX3ZhbHVlIGluIHBhaXJzKHNldHRpbmdzKSBkbwogICAgICAgICAgICBpZiB0ZWFtID09ICIiIHRoZW4KICAgICAgICAgICAgICAgIGlmIHNldHRpbmdfbmFtZTpmaW5kKCJfdCIpIHRoZW4KICAgICAgICAgICAgICAgICAgICB0ZWFtID0gInRlcnJvcmlzdCIKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB0ZWFtID0gImNvdW50ZXJ0ZXJyb3Jpc3QiCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIHVpLnNldChtZW51LmJ1aWxkZXJfZWxlbWVudHNbY29uZGl0aW9uXVtzZXR0aW5nX25hbWVdLCBzZXR0aW5nX3ZhbHVlKQogICAgICAgIGVuZAogICAgZW5kCmVuZAoKdWkudXBkYXRlKGNvbmZpZ19saXN0LCBnZXRfY29uZmlnX2xpc3QoKSkKLS11aS5zZXQoY29uZmlnX25hbWUsICNkYXRhYmFzZS5yZWFkKGFtbmVzaWEuZGF0YWJhc2UuY29uZmlncykgPT0gMCBhbmQgIiIgb3IgZGF0YWJhc2UucmVhZChhbW5lc2lhLmRhdGFiYXNlLmNvbmZpZ3MpW3VpLmdldChjb25maWdfbGlzdCkrMV0ubmFtZSkKdWkuc2V0X2NhbGxiYWNrKGNvbmZpZ19saXN0LGZ1bmN0aW9uKGEpbG9jYWwgYj0iImxvY2FsIGM9Z2V0X2NvbmZpZ19saXN0KClsb2NhbCBkPWZ1bmN0aW9uKCliPWNbdWkuZ2V0KGEpKzFdb3IiInVpLnNldChjb25maWdfbmFtZSxiKWVuZDtpZiBwY2FsbChkKXRoZW4gY29sb3JfbG9nKCJjb25maWdzIGZldGNoZWQgW3N1Y2Nlc3NdIiwyMjcsMTg5LDI1NSllbHNlIGNvbG9yX2xvZygiY29uZmlncyBmZXRjaGVkIFtmYWlsZWQuLl0iLDIyNywxODksMjU1KWVuZCBlbmQpCnVpLnNldF9jYWxsYmFjayhjb25maWdfbG9hZCxmdW5jdGlvbigpbG9jYWwgYT11aS5nZXQoY29uZmlnX25hbWUpaWYgYT09IiJ0aGVuIHJldHVybiBlbmQ7bG9jYWwgYj1mdW5jdGlvbigpbG9hZF9jb25maWcoYSllbmQ7aWYgcGNhbGwoYil0aGVuIHByaW50KCJsb2FkZWQgY29uZmlnIC0gIi4uYSllbHNlIHByaW50KCJmYWlsZWQgdG8gbG9hZCBjb25maWciKWVuZCBlbmQpCnVpLnNldF9jYWxsYmFjayhjb25maWdfc2F2ZSxmdW5jdGlvbigpbG9jYWwgYT11aS5nZXQoY29uZmlnX25hbWUpaWYgYT09IiJ0aGVuIHJldHVybiBlbmQ7aWYgYTptYXRjaCgiW14ld10iKX49bmlsIHRoZW4gcHJpbnQoImNvbnRhaW5zIG5vdCBhbGxvd2VkIGxldHRlcnMgXiV3IilyZXR1cm4gZW5kO2xvY2FsIGI9ZnVuY3Rpb24oKXNhdmVfY29uZmlnKGEpZW5kO2lmIHBjYWxsKGIpdGhlbiB1aS51cGRhdGUoY29uZmlnX2xpc3QsZ2V0X2NvbmZpZ19saXN0KCkpcHJpbnQoInNhdmVkIHRoZSBjb25maWcgLSAiLi5hKWVsc2UgcHJpbnQoImZhaWxlZCB0byBzYXZlIHRoZSBjb25maWcgLSAiLi5hKWVuZCBlbmQpCnVpLnNldF9jYWxsYmFjayhjb25maWdfZGVsZXRlLGZ1bmN0aW9uKClsb2NhbCBhPXVpLmdldChjb25maWdfbmFtZSlpZiBhPT0iInRoZW4gcmV0dXJuIGVuZDtpZiBkZWxldGVfY29uZmlnKGEpPT1mYWxzZSB0aGVuIHByaW50KCJmYWlsZWQgdG8gZGVsZXRlIil1aS51cGRhdGUoY29uZmlnX2xpc3QsZ2V0X2NvbmZpZ19saXN0KCkpcmV0dXJuIGVuZDtsb2NhbCBiPWZ1bmN0aW9uKClkZWxldGVfY29uZmlnKGEpZW5kO2lmIHBjYWxsKGIpdGhlbiB1aS51cGRhdGUoY29uZmlnX2xpc3QsZ2V0X2NvbmZpZ19saXN0KCkpdWkuc2V0KGNvbmZpZ19saXN0LCNhbW5lc2lhLnByZXNldHMrI2RhdGFiYXNlLnJlYWQoYW1uZXNpYS5kYXRhYmFzZS5jb25maWdzKS0jZGF0YWJhc2UucmVhZChhbW5lc2lhLmRhdGFiYXNlLmNvbmZpZ3MpKXVpLnNldChjb25maWdfbmFtZSwjZGF0YWJhc2UucmVhZChhbW5lc2lhLmRhdGFiYXNlLmNvbmZpZ3MpPT0wIGFuZCIib3IgZ2V0X2NvbmZpZ19saXN0KClbI2FtbmVzaWEucHJlc2V0cysjZGF0YWJhc2UucmVhZChhbW5lc2lhLmRhdGFiYXNlLmNvbmZpZ3MpLSNkYXRhYmFzZS5yZWFkKGFtbmVzaWEuZGF0YWJhc2UuY29uZmlncykrMV0pcHJpbnQoImRlbGV0ZWQgY29uZmlnIC0gIi4uYSllbHNlIHByaW50KCJmYWlsZWQgdG8gZGVsZXRlIGNvbmZpZyAtICIuLmEpZW5kIGVuZCkKdWkuc2V0X2NhbGxiYWNrKGNvbmZpZ19pbXBvcnQsZnVuY3Rpb24oKWxvY2FsIGE9ZnVuY3Rpb24oKWltcG9ydF9zZXR0aW5nc19maXgoKWVuZDtpZiBwY2FsbChhKXRoZW4gcHJpbnQoImltcG9ydGVkIillbHNlIHByaW50KCJmYWlsZWQgaW1wb3J0IillbmQgZW5kKQp1aS5zZXRfY2FsbGJhY2soY29uZmlnX2V4cG9ydCxmdW5jdGlvbigpbG9jYWwgYT1mdW5jdGlvbigpZXhwb3J0X3NldHRpbmdzKCllbmQ7aWYgcGNhbGwoYSl0aGVuIHByaW50KCJleHBvcnRlZCIpZWxzZSBwcmludCgiZmFpbGVkIGV4cG9ydCIpZW5kIGVuZCkKCmxvY2FsIHN0YXRlID0gewogICAgZ3JvdW5kX3RpbWVyID0gMCwKICAgIGxhZ190aW1lciA9IDAKfQoKZnVuY3Rpb24gc3RhdGU6ZmFrZWxhZygpbG9jYWwgYT11aS5nZXQocmVmZXJlbmNlLmR0WzFdKWFuZCB1aS5nZXQocmVmZXJlbmNlLmR0WzJdKWxvY2FsIGI9dWkuZ2V0KHJlZmVyZW5jZS5vbl9zaG90X2FhWzFdKWFuZCB1aS5nZXQocmVmZXJlbmNlLm9uX3Nob3RfYWFbMl0pbG9jYWwgYz11aS5nZXQocmVmZXJlbmNlLmZha2VfZHVjaylpZiBhIG9yIGIgb3IgYyB0aGVuIHJldHVybiBmYWxzZSBlbHNlIHJldHVybiB0cnVlIGVuZCBlbmQKCmZ1bmN0aW9uIHN0YXRlOmluX2FpcihhKWlmIG5vdCBhIHRoZW4gcmV0dXJuIGZhbHNlIGVuZDtsb2NhbCBiPWVudGl0eS5nZXRfcHJvcChhLCJtX2ZGbGFncyIpbG9jYWwgYz1iaXQuYmFuZChiLDEpfj0wO2lmIGMgdGhlbiBpZiBzZWxmLmdyb3VuZF90aW1lcj09NSB0aGVuIHJldHVybiBmYWxzZSBlbmQ7c2VsZi5ncm91bmRfdGltZXI9c2VsZi5ncm91bmRfdGltZXIrMSBlbHNlIHNlbGYuZ3JvdW5kX3RpbWVyPTAgZW5kO3JldHVybiB0cnVlIGVuZAoKbG9jYWwgbGVycCA9IGZ1bmN0aW9uKGEsIGIsIHBlcmNlbnRhZ2UpCiAgICByZXR1cm4gYSArIChiIC0gYSkgKiBwZXJjZW50YWdlCmVuZAoKbG9jYWwgc2NyZWVuX3NpemUgPSBmdW5jdGlvbigpCiAgICByZXR1cm4gdmVjdG9yKGNsaWVudC5zY3JlZW5fc2l6ZSgpKQplbmQKCmxvY2FsIG1lYXN1cmVfdGV4dCA9IGZ1bmN0aW9uKGZsYWdzLCAuLi4pCiAgICBsb2NhbCBhcmdzID0gey4uLn0KICAgIGxvY2FsIHN0cmluZyA9IHRhYmxlLmNvbmNhdChhcmdzLCAiIikKCiAgICByZXR1cm4gdmVjdG9yKHJlbmRlcmVyLm1lYXN1cmVfdGV4dChmbGFncywgc3RyaW5nKSkKZW5kCgpsb2NhbCBtX3JlbmRlciA9IChmdW5jdGlvbigpCiAgICBsb2NhbCBBID0ge30KCiAgICBBLnJlYyA9IGZ1bmN0aW9uKHgsIHksIHcsIGgsIHIsIGcsIGIsIGEsIHJhZGl1cykKICAgICAgICByYWRpdXMgPSBtYXRoLm1pbih4LzIsIHkvMiwgcmFkaXVzKQogICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4LCB5ICsgcmFkaXVzLCB3LCBoIC0gcmFkaXVzKjIsIHIsIGcsIGIsIGEpCiAgICAgICAgcmVuZGVyZXIucmVjdGFuZ2xlKHggKyByYWRpdXMsIHksIHcgLSByYWRpdXMqMiwgcmFkaXVzLCByLCBnLCBiLCBhKQogICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4ICsgcmFkaXVzLCB5ICsgaCAtIHJhZGl1cywgdyAtIHJhZGl1cyoyLCByYWRpdXMsIHIsIGcsIGIsIGEpCiAgICAgICAgcmVuZGVyZXIuY2lyY2xlKHggKyByYWRpdXMsIHkgKyByYWRpdXMsIHIsIGcsIGIsIGEsIHJhZGl1cywgMTgwLCAuMjUpCiAgICAgICAgcmVuZGVyZXIuY2lyY2xlKHggLSByYWRpdXMgKyB3LCB5ICsgcmFkaXVzLCByLCBnLCBiLCBhLCByYWRpdXMsIDkwLCAuMjUpCiAgICAgICAgcmVuZGVyZXIuY2lyY2xlKHggLSByYWRpdXMgKyB3LCB5IC0gcmFkaXVzICsgaCwgciwgZywgYiwgYSwgcmFkaXVzLCAwLCAuMjUpCiAgICAgICAgcmVuZGVyZXIuY2lyY2xlKHggKyByYWRpdXMsIHkgLSByYWRpdXMgKyBoLCByLCBnLCBiLCBhLCByYWRpdXMsIC05MCwgLjI1KQogICAgZW5kCgogICAgQS5yZWNfb3V0bGluZSA9IGZ1bmN0aW9uKHgsIHksIHcsIGgsIHIsIGcsIGIsIGEsIHJhZGl1cywgdGhpY2tuZXNzKQogICAgICAgIHJhZGl1cyA9IG1hdGgubWluKHcvMiwgaC8yLCByYWRpdXMpCiAgICAgICAgaWYgcmFkaXVzID09IDEgdGhlbgogICAgICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoeCwgeSwgdywgdGhpY2tuZXNzLCByLCBnLCBiLCBhKQogICAgICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoeCwgeSArIGggLSB0aGlja25lc3MsIHcgLCB0aGlja25lc3MsIHIsIGcsIGIsIGEpCiAgICAgICAgZWxzZQogICAgICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoeCArIHJhZGl1cywgeSwgdyAtIHJhZGl1cyoyLCB0aGlja25lc3MsIHIsIGcsIGIsIGEpCiAgICAgICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4ICsgcmFkaXVzLCB5ICsgaCAtIHRoaWNrbmVzcywgdyAtIHJhZGl1cyoyLCB0aGlja25lc3MsIHIsIGcsIGIsIGEpCiAgICAgICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4LCB5ICsgcmFkaXVzLCB0aGlja25lc3MsIGggLSByYWRpdXMqMiwgciwgZywgYiwgYSkKICAgICAgICAgICAgcmVuZGVyZXIucmVjdGFuZ2xlKHggKyB3IC0gdGhpY2tuZXNzLCB5ICsgcmFkaXVzLCB0aGlja25lc3MsIGggLSByYWRpdXMqMiwgciwgZywgYiwgYSkKICAgICAgICAgICAgcmVuZGVyZXIuY2lyY2xlX291dGxpbmUoeCArIHJhZGl1cywgeSArIHJhZGl1cywgciwgZywgYiwgYSwgcmFkaXVzLCAxODAsIC4yNSwgdGhpY2tuZXNzKQogICAgICAgICAgICByZW5kZXJlci5jaXJjbGVfb3V0bGluZSh4ICsgcmFkaXVzLCB5ICsgaCAtIHJhZGl1cywgciwgZywgYiwgYSwgcmFkaXVzLCA5MCwgLjI1LCB0aGlja25lc3MpCiAgICAgICAgICAgIHJlbmRlcmVyLmNpcmNsZV9vdXRsaW5lKHggKyB3IC0gcmFkaXVzLCB5ICsgcmFkaXVzLCByLCBnLCBiLCBhLCByYWRpdXMsIC05MCwgLjI1LCB0aGlja25lc3MpCiAgICAgICAgICAgIHJlbmRlcmVyLmNpcmNsZV9vdXRsaW5lKHggKyB3IC0gcmFkaXVzLCB5ICsgaCAtIHJhZGl1cywgciwgZywgYiwgYSwgcmFkaXVzLCAwLCAuMjUsIHRoaWNrbmVzcykKICAgICAgICBlbmQKICAgIGVuZAoKICAgIEEuZ2xvd19tb2R1bGVfbm90aWZ5ID0gZnVuY3Rpb24oeCwgeSwgdywgaCwgd2lkdGgsIHJvdW5kaW5nLCBjciwgY2csIGNiLCBjYSwgZ19jciwgZ19jZywgZ19jYiwgZ19jYSwgc2hvdykKICAgICAgICBsb2NhbCB0aGlja25lc3MgPSAxCiAgICAgICAgbG9jYWwgb2Zmc2V0ID0gMQogICAgICAgIGlmIHNob3cgdGhlbgogICAgICAgICAgICBBLnJlYyh4ICwgeSwgdywgaCwgY3IsIGNnLCBjYiwgY2EsIHJvdW5kaW5nKQogICAgICAgICAgICAtLXJlbmRlcmVyLmJsdXIoeCAsIHksIHcsIGgpCiAgICAgICAgICAgIC0tbV9yZW5kZXIucmVjX291dGxpbmUoeCArIHdpZHRoKnRoaWNrbmVzcyAtIHdpZHRoKnRoaWNrbmVzcywgeSArIHdpZHRoKnRoaWNrbmVzcyAtIHdpZHRoKnRoaWNrbmVzcywgdyAtIHdpZHRoKnRoaWNrbmVzcyoyICsgd2lkdGgqdGhpY2tuZXNzKjIsIGggLSB3aWR0aCp0aGlja25lc3MqMiArIHdpZHRoKnRoaWNrbmVzcyoyLCBjb2xvcihyLCBnLCBiLCAyNTUpLCByb3VuZGluZywgdGhpY2tuZXNzKQogICAgICAgIGVuZAogICAgICAgIGZvciBrID0gMCwgd2lkdGggZG8KICAgICAgICAgICAgbG9jYWwgYSA9IGNhIC8gMiAqIChrL3dpZHRoKSBeIDMKICAgICAgICAgICAgQS5yZWNfb3V0bGluZSh4ICsgKGsgLSB3aWR0aCAtIG9mZnNldCkqdGhpY2tuZXNzLCB5ICsgKGsgLSB3aWR0aCAtIG9mZnNldCkgKiB0aGlja25lc3MsIHcgLSAoayAtIHdpZHRoIC0gb2Zmc2V0KSp0aGlja25lc3MqMiwgaCAtIChrIC0gd2lkdGggLSBvZmZzZXQpKnRoaWNrbmVzcyoyLCBnX2NyLCBnX2NnLCBnX2NiLCBhIC8gMS41LCByb3VuZGluZyArIHRoaWNrbmVzcyAqICh3aWR0aCAtIGsgKyBvZmZzZXQpLCB0aGlja25lc3MpCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICByZXR1cm4gQQplbmQpKCkKCmxvY2FsIGVudGl0eTIgPSByZXF1aXJlICJnYW1lc2Vuc2UvZW50aXR5IgoKbG9jYWwgZGF0YSA9IHsKICAgIGxhc3Rfc2ltX3RpbWUgPSAwLAogICAgZGVmZW5zaXZlX2FjdGl2ZV91bnRpbCA9IDAsCiAgICBkdF9jaGFyZ2VkID0gZmFsc2UsCn0KCmxvY2FsIGZ1bmN0aW9uIHRpbWVfdG9fdGlja3ModCkKICAgIHJldHVybiBtYXRoLmZsb29yKDAuNSArICh0IC8gZ2xvYmFscy50aWNraW50ZXJ2YWwoKSkpCmVuZAoKCmxvY2FsIGZ1bmN0aW9uIG9uX3NldHVwX2NvbW1hbmQgKGMpCiAgICBsb2NhbCBwbGF5ZXIgPSBlbnRpdHkyLmdldF9sb2NhbF9wbGF5ZXIoKQoKICAgIGxvY2FsIHNpbV90aW1lID0gdGltZV90b190aWNrcyhwbGF5ZXI6Z2V0X3Byb3AoIm1fZmxTaW11bGF0aW9uVGltZSIpKQogICAgbG9jYWwgZGVsdGEgPSBzaW1fdGltZSAtIGRhdGEubGFzdF9zaW1fdGltZQoKICAgIGlmIGRhdGEuZHRfY2hhcmdlZCB0aGVuCiAgICAgICAgaWYgZGVsdGEgPCAwIHRoZW4gCiAgICAgICAgICAgIGRhdGEuZGVmZW5zaXZlX2FjdGl2ZV91bnRpbCA9IGdsb2JhbHMudGlja2NvdW50KCkgKyBtYXRoLmFicyhkZWx0YSkKICAgICAgICBlbmQKICAgIAogICAgICAgIGRhdGEubGFzdF9zaW1fdGltZSA9IHNpbV90aW1lICAgIAogICAgZW5kCmVuZAoKCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInNldHVwX2NvbW1hbmQiLCBvbl9zZXR1cF9jb21tYW5kKQoKbG9jYWwgaHR0cCA9IHJlcXVpcmUoJ2dhbWVzZW5zZS9odHRwJykKbG9jYWwgaW1hZ2VzID0gcmVxdWlyZSgnZ2FtZXNlbnNlL2ltYWdlcycpCgpsb2NhbCBSZW5kZXJfZW5naW5lID0gKGZ1bmN0aW9uKCkKCWxvY2FsIHNlbGYgPSB7fQoKCWxvY2FsIGJhY2tncm91bmQgPSBmdW5jdGlvbih4LCB5LCB3LCBoLCByLCBnLCBiLCBhLCByb3VuZG5lc3MsIGFkZGVyKQoJCS0tbG9jYWwgYWRkZXIgPSAxCiAgICAgICAgbG9jYWwgcm91bmRuZXNzID0gcm91bmRuZXNzID4gMCBhbmQgcm91bmRuZXNzIC0gMSBvciByb3VuZG5lc3MKCQlpZiBhID09IDAgdGhlbiByZXR1cm4gZW5kCgkJcmVuZGVyZXIucmVjdGFuZ2xlKHggKyByb3VuZG5lc3MgKyBhZGRlciwgeSArIHJvdW5kbmVzcyArIGFkZGVyLCB3IC0gcm91bmRuZXNzICogMiAtIGFkZGVyICogMiwgaCAtIHJvdW5kbmVzcyAqIDIgLSBhZGRlciAqIDIsIHIsIGcsIGIsIGEpIC0tYmFja2dyb3VuZAoJCXJlbmRlcmVyLmNpcmNsZSh4ICsgdyAtIHJvdW5kbmVzcyAtIGFkZGVyLCB5ICsgcm91bmRuZXNzICsgYWRkZXIsIHIsIGcsIGIsIGEsIHJvdW5kbmVzcywgOTAsIDAuMjUpIC0tIHJpZ2h0IHRvcCBjb3JuZXIKCQlyZW5kZXJlci5jaXJjbGUoeCArIHcgLSByb3VuZG5lc3MgLSBhZGRlciwgeSArIGggLSByb3VuZG5lc3MgLSBhZGRlciwgciwgZywgYiwgYSwgcm91bmRuZXNzLCAzNjAsIDAuMjUpIC0tcmlnaHQgYm90dG9tIGNvcm5lcgoJCXJlbmRlcmVyLmNpcmNsZSh4ICsgcm91bmRuZXNzICsgYWRkZXIsIHkgKyBoIC0gcm91bmRuZXNzIC0gYWRkZXIsIHIsIGcsIGIsIGEsIHJvdW5kbmVzcywgMjcwLCAwLjI1KSAtLSBsZWZ0IGJvdHRvbSBjb3JuZXIKCQlyZW5kZXJlci5jaXJjbGUoeCArIHJvdW5kbmVzcyArIGFkZGVyLCB5ICsgcm91bmRuZXNzICsgYWRkZXIsIHIsIGcsIGIsIGEsIHJvdW5kbmVzcywgMTgwLCAwLjI1KSAtLSBsZWZ0IHRvcCBjb3JuZXIKCQlyZW5kZXJlci5yZWN0YW5nbGUoeCArIHJvdW5kbmVzcyArIGFkZGVyLCB5ICsgYWRkZXIsIHcgLSByb3VuZG5lc3MgKiAyIC0gYWRkZXIgKiAyLCByb3VuZG5lc3MsIHIsIGcsIGIsIGEpCgkJcmVuZGVyZXIucmVjdGFuZ2xlKHggKyB3IC0gcm91bmRuZXNzIC0gYWRkZXIsIHkgKyByb3VuZG5lc3MgKyBhZGRlciwgcm91bmRuZXNzLCBoIC0gcm91bmRuZXNzICogMiAtIGFkZGVyICogMiwgciwgZywgYiwgYSkKCQlyZW5kZXJlci5yZWN0YW5nbGUoeCArIHJvdW5kbmVzcyArIGFkZGVyLCB5ICsgaCAtIHJvdW5kbmVzcyAtIGFkZGVyLCB3IC0gcm91bmRuZXNzICogMiAtIGFkZGVyICogMiwgcm91bmRuZXNzLCByLCBnLCBiLCBhKQoJCXJlbmRlcmVyLnJlY3RhbmdsZSh4ICsgYWRkZXIsIHkgKyByb3VuZG5lc3MgKyBhZGRlciwgcm91bmRuZXNzLCBoIC0gcm91bmRuZXNzICogMiAtIGFkZGVyICogMiwgciwgZywgYiwgYSkKCWVuZAoKCWxvY2FsIG91dGxpbmUgPSBmdW5jdGlvbih4LCB5LCB3LCBoLCByLCBnLCBiLCBhLCBsb3dlcl9saW5lX2FscGhhLCByb3VuZG5lc3MsIGxpbmVfdGhpY2tuZXNzKQoJCWxvY2FsIGFkZGVyID0gMC0tcm91bmRuZXNzID09IDAgYW5kIGxpbmVfdGhpY2tuZXNzIG9yIDAKCQlyZW5kZXJlci5yZWN0YW5nbGUoeCArIHJvdW5kbmVzcywgeSwgdyAtIHJvdW5kbmVzcyAqIDIsIGxpbmVfdGhpY2tuZXNzLCByLCBnLCBiLCBhKSAtLXRvcCBsaW5lCgkJcmVuZGVyZXIuY2lyY2xlX291dGxpbmUoeCArIHcgLSByb3VuZG5lc3MsIHkgKyByb3VuZG5lc3MsIHIsIGcsIGIsIGEsIHJvdW5kbmVzcywgMjcwLCAwLjI1LCBsaW5lX3RoaWNrbmVzcykgLS0gcmlnaHQgdG9wIGNvcm5lcgoJCXJlbmRlcmVyLmdyYWRpZW50KHggKyB3IC0gbGluZV90aGlja25lc3MsIHkgKyByb3VuZG5lc3MgKyBhZGRlciwgbGluZV90aGlja25lc3MsIGggLSByb3VuZG5lc3MgKiAyIC0gYWRkZXIgKiAyLCByLCBnLCBiLCBhLCByLCBnLCBiLCBsb3dlcl9saW5lX2FscGhhLCBmYWxzZSkgLS1sZWZ0IGdyYWRpZW50CgkJcmVuZGVyZXIuY2lyY2xlX291dGxpbmUoeCArIHcgLSByb3VuZG5lc3MsIHkgKyBoIC0gcm91bmRuZXNzLCByLCBnLCBiLCBsb3dlcl9saW5lX2FscGhhLCByb3VuZG5lc3MsIDM2MCwgMC4yNSwgbGluZV90aGlja25lc3MpIC0tcmlnaHQgYm90dG9tIGNvcm5lcgoJCXJlbmRlcmVyLnJlY3RhbmdsZSh4ICsgcm91bmRuZXNzLCB5ICsgaCAtIGxpbmVfdGhpY2tuZXNzLCB3IC0gcm91bmRuZXNzICogMiwgbGluZV90aGlja25lc3MsIHIsIGcsIGIsIGxvd2VyX2xpbmVfYWxwaGEpIC0tIGJvdHRvbSBsaW5lCgkJcmVuZGVyZXIuY2lyY2xlX291dGxpbmUoeCArIHJvdW5kbmVzcywgeSArIGggLSByb3VuZG5lc3MsIHIsIGcsIGIsIGxvd2VyX2xpbmVfYWxwaGEsIHJvdW5kbmVzcywgOTAsIDAuMjUsIGxpbmVfdGhpY2tuZXNzKSAtLSBsZWZ0IGJvdHRvbSBjb3JuZXIKCQlyZW5kZXJlci5ncmFkaWVudCh4LCB5ICsgcm91bmRuZXNzICsgYWRkZXIsIGxpbmVfdGhpY2tuZXNzLCBoIC0gcm91bmRuZXNzICogMiAtIGFkZGVyICogMiwgciwgZywgYiwgYSwgciwgZywgYiwgbG93ZXJfbGluZV9hbHBoYSwgZmFsc2UpIC0tcmlnaHQgZ3JhZGllbnQKCQlyZW5kZXJlci5jaXJjbGVfb3V0bGluZSh4ICsgcm91bmRuZXNzLCB5ICsgcm91bmRuZXNzLCByLCBnLCBiLCBhLCByb3VuZG5lc3MsIDE4MCwgMC4yNSwgbGluZV90aGlja25lc3MpIC0tIGxlZnQgdG9wIGNvcm5lcgoJZW5kCgogICAgbG9jYWwgd2F0ZXJtYXJrX2ljb251cmwsIHdhdGVybWFya19pY29uID0gImh0dHBzOi8vY2RuLmRpc2NvcmRhcHAuY29tL2F0dGFjaG1lbnRzLzEwMDkxMDI4MjQ5NzU2MzA0NzYvMTAyMzUzNTY2MDE3NjUyMzM0Ni9iZWhpbmRfd2F0ZXIucG5nIiwgbmlsCiAgICBodHRwLmdldCh3YXRlcm1hcmtfaWNvbnVybCwgZnVuY3Rpb24ocywgcikKICAgICAgICBpZiBzIGFuZCByLnN0YXR1cyA9PSAyMDAgdGhlbgogICAgICAgICAgICB3YXRlcm1hcmtfaWNvbiA9IGltYWdlcy5sb2FkKHIuYm9keSkKICAgICAgICBlbmQKICAgIGVuZCkKCiAgICBzZWxmLnBhbmRvcmFfcmVjdGFuZ2xlID0gZnVuY3Rpb24oeCwgeSwgdywgaCwgciwgZywgYiwgYSwgcjIsIGcyLCBiMiwgYTIsIGJnciwgYmdnLCBiZ2IsIGJnYSwgcjMsIGczLCBiMywgYTMsIHJvdW5kbmVzcywgc2hvdykKICAgICAgICBsb2NhbCBzaG93ID0gc2hvdyB+PSBuaWwgYW5kIHNob3cgb3IgZmFsc2UKICAgICAgICBiYWNrZ3JvdW5kKHggKyAzLCB5ICsgMywgdyAtIDYsIGggLSA2LCBiZ3IsIGJnZywgYmdiLCBiZ2EsIDAsIDApCiAgICAgICAgb3V0bGluZSh4LCB5LCB3LCBoLCByMiwgZzIsIGIyLCBhMiwgYSwgcm91bmRuZXNzLCAzKQogICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4ICsgMywgeSArIDMsIDEsIDEsIHIyLCBnMiwgYjIsIGEyKQogICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4ICsgdyAtIDQsIHkgKyAzLCAxLCAxLCByMiwgZzIsIGIyLCBhMikKICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoeCArIHcgLSA0LCB5ICsgaCAtIDQsIDEsIDEsIHIyLCBnMiwgYjIsIGEyKQogICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4ICsgMywgeSArIGggLSA0LCAxLCAxLCByMiwgZzIsIGIyLCBhMikKCQlvdXRsaW5lKHggKyAxLCB5ICsgMSwgdyAtIDIsIGggLSAyLCByLCBnLCBiLCBhLCBhLCByb3VuZG5lc3MsIDEpCgogICAgICAgIGlmIHNob3cgYW5kIHdhdGVybWFya19pY29uIH49IG5pbCB0aGVuCiAgICAgICAgICAgIHdhdGVybWFya19pY29uOmRyYXcoeCAtIDEwLCB5ICsgMywgdywgMTgsIHIzLCBnMywgYjMsIGEzLCB0cnVlKQogICAgICAgIGVuZAogICAgZW5kCgoJcmV0dXJuIHNlbGYKZW5kKSgpCgpsb2NhbCB3X2FuaW0gPSAtMjUwCgpsb2NhbCBjdHggPSAoZnVuY3Rpb24oKQoJbG9jYWwgY3R4ID0gewoJCWxvZ28gPSBuaWwKCX0KCglodHRwLmdldCgiaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXR0YWNobWVudHMvMTA1OTkyMzIwNDcxNTU4OTc5My8xMDYxNzgyNDE3NTU3NDQyNjAxL3N0cmlrZV9zaGl0X2x1YS1yZW1vdmViZy5wbmciLCBmdW5jdGlvbihzdWNjZXNzLCByZXNwb25zZSkKCQlpZiBub3Qgc3VjY2VzcyBvciByZXNwb25zZS5zdGF0dXMgfj0gMjAwIHRoZW4KCQkJcmV0dXJuCgkJZW5kCgkKCQljdHgubG9nbyA9IGltYWdlcy5sb2FkX3BuZyhyZXNwb25zZS5ib2R5KQoJZW5kKQoKICAgIGN0eC5yZWYgPSB7CgkJZmQgPSB1aS5yZWZlcmVuY2UoIlJhZ2UiLCAiT3RoZXIiLCAiRHVjayBwZWVrIGFzc2lzdCIpLAoJCWR0ID0ge3VpLnJlZmVyZW5jZSgiUmFnZSIsICJhaW1ib3QiLCAiRG91YmxlIFRhcCIpfSwKCQlkdF9mbCA9IHVpLnJlZmVyZW5jZSgiUmFnZSIsICJhaW1ib3QiLCAiRG91YmxlIHRhcCBmYWtlIGxhZyBsaW1pdCIpLAoJCWhzID0ge3VpLnJlZmVyZW5jZSgiQUEiLCAiT3RoZXIiLCAiT24gc2hvdCBhbnRpLWFpbSIpfSwKCQlzaWxlbnQgPSB1aS5yZWZlcmVuY2UoIlJhZ2UiLCAib3RoZXIiLCAiU2lsZW50IGFpbSIpLAoJCXNsb3dfbW90aW9uID0ge3VpLnJlZmVyZW5jZSgiQUEiLCAiT3RoZXIiLCAiU2xvdyBtb3Rpb24iKX0KCX0KCgljdHguaGVscGVycyA9IHsKCQlkZWZlbnNpdmUgPSAwLAoJCWNoZWNrZXIgPSAwLAoJCWNvbnRhaW5zID0gZnVuY3Rpb24oc2VsZiwgdGJsLCB2YWwpCgkJCWZvciBrLCB2IGluIHBhaXJzKHRibCkgZG8KCQkJCWlmIHYgPT0gdmFsIHRoZW4KCQkJCQlyZXR1cm4gdHJ1ZQoJCQkJZW5kCgkJCWVuZAoJCQlyZXR1cm4gZmFsc2UKCQllbmQsCgoJCWVhc2VJbk91dCA9IGZ1bmN0aW9uKHNlbGYsIHQpCgkJCXJldHVybiAodCA+IDAuNSkgYW5kIDQqKCh0LTEpXjMpKzEgb3IgNCp0XjM7CgkJZW5kLAoKCQljbGFtcCA9IGZ1bmN0aW9uKHNlbGYsIHZhbCwgbG93ZXIsIHVwcGVyKQoJCQlhc3NlcnQodmFsIGFuZCBsb3dlciBhbmQgdXBwZXIsICJub3QgdmVyeSB1c2VmdWwgZXJyb3IgbWVzc2FnZSBoZXJlIikKCQkJaWYgbG93ZXIgPiB1cHBlciB0aGVuIGxvd2VyLCB1cHBlciA9IHVwcGVyLCBsb3dlciBlbmQgLS0gc3dhcCBpZiBib3VuZGFyaWVzIHN1cHBsaWVkIHRoZSB3cm9uZyB3YXkKCQkJcmV0dXJuIG1hdGgubWF4KGxvd2VyLCBtYXRoLm1pbih1cHBlciwgdmFsKSkKCQllbmQsCgoJCXNwbGl0ID0gZnVuY3Rpb24oc2VsZiwgaW5wdXRzdHIsIHNlcCkKCQkJaWYgc2VwID09IG5pbCB0aGVuCgkJCQkJc2VwID0gIiVzIgoJCQllbmQKCQkJbG9jYWwgdD17fQoJCQlmb3Igc3RyIGluIHN0cmluZy5nbWF0Y2goaW5wdXRzdHIsICIoW14iLi5zZXAuLiJdKykiKSBkbwoJCQkJCXRhYmxlLmluc2VydCh0LCBzdHIpCgkJCWVuZAoJCQlyZXR1cm4gdAoJCWVuZCwKCgkJcmdiYV90b19oZXggPSBmdW5jdGlvbihzZWxmLCByLCBnLCBiLCBhKQoJCSAgcmV0dXJuIGJpdC50b2hleCgKCQkgICAgKG1hdGguZmxvb3IociArIDAuNSkgKiAxNjc3NzIxNikgKyAKCQkgICAgKG1hdGguZmxvb3IoZyArIDAuNSkgKiA2NTUzNikgKyAKCQkgICAgKG1hdGguZmxvb3IoYiArIDAuNSkgKiAyNTYpICsgCgkJICAgIChtYXRoLmZsb29yKGEgKyAwLjUpKQoJCSAgKQoJCWVuZCwKCgkJaGV4X3RvX3JnYmEgPSBmdW5jdGlvbihzZWxmLCBoZXgpCiAgICAJbG9jYWwgY29sb3IgPSB0b251bWJlcihoZXgsIDE2KQoKICAgIAlyZXR1cm4gCiAgICAgICAgbWF0aC5mbG9vcihjb2xvciAvIDE2Nzc3MjE2KSAlIDI1NiwgCiAgICAgICAgbWF0aC5mbG9vcihjb2xvciAvIDY1NTM2KSAlIDI1NiwgCiAgICAgICAgbWF0aC5mbG9vcihjb2xvciAvIDI1NikgJSAyNTYsIAogICAgICAgIGNvbG9yICUgMjU2CgkJZW5kLAoKCQljb2xvcl90ZXh0ID0gZnVuY3Rpb24oc2VsZiwgc3RyaW5nLCByLCBnLCBiLCBhKQoJCQlsb2NhbCBhY2NlbnQgPSAiXGEiIC4uIHNlbGY6cmdiYV90b19oZXgociwgZywgYiwgYSkKCQkJbG9jYWwgd2hpdGUgPSAiXGEiIC4uIHNlbGY6cmdiYV90b19oZXgoMjU1LCAyNTUsIDI1NSwgYSkKCgkJCWxvY2FsIHN0ciA9ICIiCgkJCWZvciBpLCBzIGluIGlwYWlycyhzZWxmOnNwbGl0KHN0cmluZywgIiQiKSkgZG8KCQkJCXN0ciA9IHN0ciAuLiAoaSAlIDIgPT0oIHN0cmluZzpzdWIoMSwgMSkgPT0gIiQiIGFuZCAwIG9yIDEpIGFuZCB3aGl0ZSBvciBhY2NlbnQpIC4uIHMKCQkJZW5kCgoJCQlyZXR1cm4gc3RyCgkJZW5kLAoKCQlhbmltYXRlX3RleHQgPSBmdW5jdGlvbihzZWxmLCB0aW1lLCBzdHJpbmcsIHIsIGcsIGIsIGEpCgkJCWxvY2FsIHRfb3V0LCB0X291dF9pdGVyID0geyB9LCAxCgoJCQlsb2NhbCBsID0gc3RyaW5nOmxlbiggKSAtIDEKCQoJCQlsb2NhbCByX2FkZCA9ICgyNTUgLSByKQoJCQlsb2NhbCBnX2FkZCA9ICgyNTUgLSBnKQoJCQlsb2NhbCBiX2FkZCA9ICgyNTUgLSBiKQoJCQlsb2NhbCBhX2FkZCA9ICgxNTUgLSBhKQoJCgkJCWZvciBpID0gMSwgI3N0cmluZyBkbwoJCQkJbG9jYWwgaXRlciA9IChpIC0gMSkvKCNzdHJpbmcgLSAxKSArIHRpbWUKCQkJCXRfb3V0W3Rfb3V0X2l0ZXJdID0gIlxhIiAuLiBjdHguaGVscGVyczpyZ2JhX3RvX2hleCggciArIHJfYWRkICogbWF0aC5hYnMobWF0aC5jb3MoIGl0ZXIgKSksIGcgKyBnX2FkZCAqIG1hdGguYWJzKG1hdGguY29zKCBpdGVyICkpLCBiICsgYl9hZGQgKiBtYXRoLmFicyhtYXRoLmNvcyggaXRlciApKSwgYSArIGFfYWRkICogbWF0aC5hYnMobWF0aC5jb3MoIGl0ZXIgKSkgKQoJCgkJCQl0X291dFt0X291dF9pdGVyICsgMV0gPSBzdHJpbmc6c3ViKCBpLCBpICkKCQoJCQkJdF9vdXRfaXRlciA9IHRfb3V0X2l0ZXIgKyAyCgkJCWVuZAoJCgkJCXJldHVybiB0X291dAoJCWVuZCwKCiAgICAgICAgZ2V0X3ZlbG9jaXR5ID0gZnVuY3Rpb24oc2VsZiwgZW50KQoJCQlyZXR1cm4gdmVjdG9yKGVudGl0eS5nZXRfcHJvcChlbnQsICJtX3ZlY1ZlbG9jaXR5IikpOmxlbmd0aCgpCgkJZW5kLAoKCQlpbl9haXIgPSBmdW5jdGlvbihzZWxmLCBfZW50KQoJCQlsb2NhbCBmbGFncyA9IGVudGl0eS5nZXRfcHJvcChfZW50LCAibV9mRmxhZ3MiKQoJCgkJCWlmIGJpdC5iYW5kKGZsYWdzLCAxKSA9PSAwIHRoZW4KCQkJCXJldHVybiB0cnVlCgkJCWVuZAoJCQkKCQkJcmV0dXJuIGZhbHNlCgkJZW5kLAoKCQlpbl9kdWNrID0gZnVuY3Rpb24oc2VsZiwgX2VudCkKCQkJbG9jYWwgZmxhZ3MgPSBlbnRpdHkuZ2V0X3Byb3AoX2VudCwgIm1fZkZsYWdzIikKCQkJCgkJCWlmIGJpdC5iYW5kKGZsYWdzLCA0KSA9PSA0IHRoZW4KCQkJCXJldHVybiB0cnVlCgkJCWVuZAoJCQkKCQkJcmV0dXJuIGZhbHNlCgkJZW5kLAoKCQlnZXRfc3RhdGUgPSBmdW5jdGlvbihzZWxmLCBlbnQpCgkJCWxvY2FsIHZlbCA9IHNlbGY6Z2V0X3ZlbG9jaXR5KGVudCkKCQkJbG9jYWwgYWlyID0gc2VsZjppbl9haXIoZW50KQoJCQlsb2NhbCBkdWNrID0gc2VsZjppbl9kdWNrKGVudCkKCgkJCWxvY2FsIHN0YXRlID0gdmVsID4gMyBhbmQgInJ1bm5pbmciIG9yICJzdGFuZGluZyIKCQkJaWYgYWlyIHRoZW4KCQkJCXN0YXRlID0gZHVjayBhbmQgImFpciBjcm91Y2giIG9yICJqdW1waW5nIgoJCQllbHNlaWYgdWkuZ2V0KGN0eC5yZWYuc2xvd19tb3Rpb25bMV0pIGFuZCB1aS5nZXQoY3R4LnJlZi5zbG93X21vdGlvblsyXSkgYW5kIGVudCA9PSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpIHRoZW4KCQkJCXN0YXRlID0gInNsb3dtb3Rpb24iCgkJCWVsc2VpZiBkdWNrIHRoZW4KCQkJCXN0YXRlID0gImNyb3VjaGluZyIKCQkJZW5kCgoJCQlyZXR1cm4gc3RhdGUKCQllbmQsCgoJCWdldF90aW1lID0gZnVuY3Rpb24oc2VsZiwgaDEyKQoJCQlsb2NhbCBob3VycywgbWludXRlcywgc2Vjb25kcyA9IGNsaWVudC5zeXN0ZW1fdGltZSgpCgoJCQlpZiBoMTIgdGhlbgoJCQkJCWxvY2FsIGhycyA9IGhvdXJzICUgMTIKCgkJCQkJaWYgaHJzID09IDAgdGhlbgoJCQkJCQkJaHJzID0gMTIKCQkJCQllbHNlCgkJCQkJCQlocnMgPSBocnMgPCAxMCBhbmQgaHJzIG9yICgnJTAyZCcpOmZvcm1hdChocnMpCgkJCQkJZW5kCgoJCQkJCXJldHVybiAoJyVzOiUwMmQgJXMnKTpmb3JtYXQoCgkJCQkJCQlocnMsCgkJCQkJCQltaW51dGVzLAoJCQkJCQkJaG91cnMgPj0gMTIgYW5kICdwbScgb3IgJ2FtJwoJCQkJCSkKCQkJZW5kCgoJCQlyZXR1cm4gKCclMDJkOiUwMmQ6JTAyZCcpOmZvcm1hdCgKCQkJCQlob3VycywKCQkJCQltaW51dGVzLAoJCQkJCXNlY29uZHMKCQkJKQoJZW5kLAoJfQoKCWN0eC5tX3JlbmRlciA9IHsKCQlyZWMgPSBmdW5jdGlvbihzZWxmLCB4LCB5LCB3LCBoLCByYWRpdXMsIGNvbG9yKQoJCQlsb2NhbCByLCBnLCBiLCBhID0gdW5wYWNrKGNvbG9yKQoKICAgICAgICAgICAgcmFkaXVzID0gbWF0aC5taW4oeC8yLCB5LzIsIHJhZGl1cykKICAgICAgICAgICAgcmVuZGVyZXIucmVjdGFuZ2xlKHgsIHkgKyByYWRpdXMsIHcsIGggLSByYWRpdXMqMiwgciwgZywgYiwgYSkKICAgICAgICAgICAgcmVuZGVyZXIucmVjdGFuZ2xlKHggKyByYWRpdXMsIHksIHcgLSByYWRpdXMqMiwgcmFkaXVzLCByLCBnLCBiLCBhKQogICAgICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoeCArIHJhZGl1cywgeSArIGggLSByYWRpdXMsIHcgLSByYWRpdXMqMiwgcmFkaXVzLCByLCBnLCBiLCBhKQogICAgICAgICAgICByZW5kZXJlci5jaXJjbGUoeCArIHJhZGl1cywgeSArIHJhZGl1cywgciwgZywgYiwgYSwgcmFkaXVzLCAxODAsIC4yNSkKICAgICAgICAgICAgcmVuZGVyZXIuY2lyY2xlKHggLSByYWRpdXMgKyB3LCB5ICsgcmFkaXVzLCByLCBnLCBiLCBhLCByYWRpdXMsIDkwLCAuMjUpCiAgICAgICAgICAgIHJlbmRlcmVyLmNpcmNsZSh4IC0gcmFkaXVzICsgdywgeSAtIHJhZGl1cyArIGgsIHIsIGcsIGIsIGEsIHJhZGl1cywgMCwgLjI1KQogICAgICAgICAgICByZW5kZXJlci5jaXJjbGUoeCArIHJhZGl1cywgeSAtIHJhZGl1cyArIGgsIHIsIGcsIGIsIGEsIHJhZGl1cywgLTkwLCAuMjUpCgkJZW5kLAoKCQlyZWNfb3V0bGluZSA9IGZ1bmN0aW9uKHNlbGYsIHgsIHksIHcsIGgsIHJhZGl1cywgdGhpY2tuZXNzLCBjb2xvcikKCgkJCWxvY2FsIHIsIGcsIGIsIGEgPSB1bnBhY2soY29sb3IpCgogICAgICAgICAgICByYWRpdXMgPSBtYXRoLm1pbih3LzIsIGgvMiwgcmFkaXVzKQogICAgICAgICAgICBpZiByYWRpdXMgPT0gMSB0aGVuCiAgICAgICAgICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoeCwgeSwgdywgdGhpY2tuZXNzLCByLCBnLCBiLCBhKQogICAgICAgICAgICAgICAgcmVuZGVyZXIucmVjdGFuZ2xlKHgsIHkgKyBoIC0gdGhpY2tuZXNzLCB3ICwgdGhpY2tuZXNzLCByLCBnLCBiLCBhKQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoeCArIHJhZGl1cywgeSwgdyAtIHJhZGl1cyoyLCB0aGlja25lc3MsIHIsIGcsIGIsIGEpCiAgICAgICAgICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoeCArIHJhZGl1cywgeSArIGggLSB0aGlja25lc3MsIHcgLSByYWRpdXMqMiwgdGhpY2tuZXNzLCByLCBnLCBiLCBhKQogICAgICAgICAgICAgICAgcmVuZGVyZXIucmVjdGFuZ2xlKHgsIHkgKyByYWRpdXMsIHRoaWNrbmVzcywgaCAtIHJhZGl1cyoyLCByLCBnLCBiLCBhKQogICAgICAgICAgICAgICAgcmVuZGVyZXIucmVjdGFuZ2xlKHggKyB3IC0gdGhpY2tuZXNzLCB5ICsgcmFkaXVzLCB0aGlja25lc3MsIGggLSByYWRpdXMqMiwgciwgZywgYiwgYSkKICAgICAgICAgICAgICAgIHJlbmRlcmVyLmNpcmNsZV9vdXRsaW5lKHggKyByYWRpdXMsIHkgKyByYWRpdXMsIHIsIGcsIGIsIGEsIHJhZGl1cywgMTgwLCAuMjUsIHRoaWNrbmVzcykKICAgICAgICAgICAgICAgIHJlbmRlcmVyLmNpcmNsZV9vdXRsaW5lKHggKyByYWRpdXMsIHkgKyBoIC0gcmFkaXVzLCByLCBnLCBiLCBhLCByYWRpdXMsIDkwLCAuMjUsIHRoaWNrbmVzcykKICAgICAgICAgICAgICAgIHJlbmRlcmVyLmNpcmNsZV9vdXRsaW5lKHggKyB3IC0gcmFkaXVzLCB5ICsgcmFkaXVzLCByLCBnLCBiLCBhLCByYWRpdXMsIC05MCwgLjI1LCB0aGlja25lc3MpCiAgICAgICAgICAgICAgICByZW5kZXJlci5jaXJjbGVfb3V0bGluZSh4ICsgdyAtIHJhZGl1cywgeSArIGggLSByYWRpdXMsIHIsIGcsIGIsIGEsIHJhZGl1cywgMCwgLjI1LCB0aGlja25lc3MpCiAgICAgICAgICAgIGVuZAoJCWVuZCwKCgkJZ2xvd19tb2R1bGUgPSBmdW5jdGlvbihzZWxmLCB4LCB5LCB3LCBoLCB3aWR0aCwgcm91bmRpbmcsIGFjY2VudCwgYWNjZW50X2lubmVyKQoJCQlsb2NhbCB0aGlja25lc3MgPSAxCgkJCWxvY2FsIG9mZnNldCA9IDEKCQkJbG9jYWwgciwgZywgYiwgYSA9IHVucGFjayhhY2NlbnQpCgkJCWlmIGFjY2VudF9pbm5lciB0aGVuCgkJCQlzZWxmOnJlYyh4ICwgeSwgdywgaCArIDEsIHJvdW5kaW5nLCBhY2NlbnRfaW5uZXIpCgkJCQktLXJlbmRlcmVyLmJsdXIoeCAsIHksIHcsIGgpCgkJCQktLW1fcmVuZGVyLnJlY19vdXRsaW5lKHggKyB3aWR0aCp0aGlja25lc3MgLSB3aWR0aCp0aGlja25lc3MsIHkgKyB3aWR0aCp0aGlja25lc3MgLSB3aWR0aCp0aGlja25lc3MsIHcgLSB3aWR0aCp0aGlja25lc3MqMiArIHdpZHRoKnRoaWNrbmVzcyoyLCBoIC0gd2lkdGgqdGhpY2tuZXNzKjIgKyB3aWR0aCp0aGlja25lc3MqMiwgY29sb3IociwgZywgYiwgMjU1KSwgcm91bmRpbmcsIHRoaWNrbmVzcykKCQkJZW5kCgkJCWZvciBrID0gMCwgd2lkdGggZG8KCQkJCWlmIGEgKiAoay93aWR0aCleKDEpID4gNSB0aGVuCgkJCQkJbG9jYWwgYWNjZW50ID0ge3IsIGcsIGIsIGEgKiAoay93aWR0aCkgXiA4fQoJCQkJCXNlbGY6cmVjX291dGxpbmUoeCArIChrIC0gd2lkdGggLSBvZmZzZXQpKnRoaWNrbmVzcywgeSArIChrIC0gd2lkdGggLSBvZmZzZXQpICogdGhpY2tuZXNzLCB3IC0gKGsgLSB3aWR0aCAtIG9mZnNldCkqdGhpY2tuZXNzKjIsIGggKyAxIC0gKGsgLSB3aWR0aCAtIG9mZnNldCkqdGhpY2tuZXNzKjIsIHJvdW5kaW5nICsgdGhpY2tuZXNzICogKHdpZHRoIC0gayArIG9mZnNldCksIHRoaWNrbmVzcywgYWNjZW50KQoJCQkJZW5kCgkJCWVuZAoJCWVuZAoJfQoKCWN0eC5ub3RpZmljYXRpb25zID0gewoJCWFuaW1fdGltZSA9IDAuMzAsCgkJbWF4X25vdGlmcyA9IDYsCgkJZGF0YSA9IHt9LAoKCQluZXcgPSBmdW5jdGlvbihzZWxmLCBzdHJpbmcsIHIsIGcsIGIpCgkJCXRhYmxlLmluc2VydChzZWxmLmRhdGEsIHsKCQkJCXRpbWUgPSBnbG9iYWxzLmN1cnRpbWUoKSwKCQkJCXN0cmluZyA9IHN0cmluZywKCQkJCWNvbG9yID0ge3IsIGcsIGIsIDI1NX0sCgkJCQlmcmFjdGlvbiA9IDAKCQkJfSkKCQkJbG9jYWwgdGltZSA9IDUKCQkJZm9yIGkgPSAjc2VsZi5kYXRhLCAxLCAtMSBkbwoJCQkJbG9jYWwgbm90aWYgPSBzZWxmLmRhdGFbaV0KCQkJCWlmICNzZWxmLmRhdGEgLSBpICsgMSA+IHNlbGYubWF4X25vdGlmcyBhbmQgbm90aWYudGltZSArIHRpbWUgLSBnbG9iYWxzLmN1cnRpbWUoKSA+IDAgdGhlbgoJCQkJCW5vdGlmLnRpbWUgPSBnbG9iYWxzLmN1cnRpbWUoKSAtIHRpbWUKCQkJCWVuZAoJCQllbmQKCQllbmQsCgoJCXJlbmRlciA9IGZ1bmN0aW9uKHNlbGYpCgkJCWxvY2FsIHgsIHkgPSBjbGllbnQuc2NyZWVuX3NpemUoKQoJCQlsb2NhbCB0b19yZW1vdmUgPSB7fQoJCQlsb2NhbCBvZmZzZXQgPSAwCgkJCWZvciBpID0gMSwgI3NlbGYuZGF0YSBkbwoJCQkJbG9jYWwgbm90aWYgPSBzZWxmLmRhdGFbaV0KCgkJCQlsb2NhbCBkYXRhID0ge3JvdW5kaW5nID0gNCwgc2l6ZSA9IDUsIGdsb3cgPSAzNSwgdGltZSA9IDV9CgoJCQkJaWYgbm90aWYudGltZSArIGRhdGEudGltZSAtIGdsb2JhbHMuY3VydGltZSgpID4gMCB0aGVuCgkJCQkJbm90aWYuZnJhY3Rpb24gPSBjdHguaGVscGVyczpjbGFtcChub3RpZi5mcmFjdGlvbiArIGdsb2JhbHMuZnJhbWV0aW1lKCkgLyBzZWxmLmFuaW1fdGltZSwgMCwgMSkKCQkJCWVsc2UKCQkJCQlub3RpZi5mcmFjdGlvbiA9IGN0eC5oZWxwZXJzOmNsYW1wKG5vdGlmLmZyYWN0aW9uIC0gZ2xvYmFscy5mcmFtZXRpbWUoKSAvIHNlbGYuYW5pbV90aW1lLCAwLCAxKQoJCQkJZW5kCgoJCQkJaWYgbm90aWYuZnJhY3Rpb24gPD0gMCBhbmQgbm90aWYudGltZSArIGRhdGEudGltZSAtIGdsb2JhbHMuY3VydGltZSgpIDw9IDAgdGhlbgoJCQkJCXRhYmxlLmluc2VydCh0b19yZW1vdmUsIGkpCgkJCQllbmQKCiAgICAgICAgICAgICAgICB3X2FuaW0gPSBsZXJwKHdfYW5pbSwgNy45LCBnbG9iYWxzLmZyYW1ldGltZSgpICogOSkKCgkJCQlsb2NhbCBmcmFjdGlvbiA9IGN0eC5oZWxwZXJzOmVhc2VJbk91dChub3RpZi5mcmFjdGlvbikKCgkJCQlsb2NhbCByLCBnLCBiLCBhID0gdW5wYWNrKG5vdGlmLmNvbG9yKQoJCQkJbG9jYWwgc3RyaW5nID0gY3R4LmhlbHBlcnM6Y29sb3JfdGV4dChub3RpZi5zdHJpbmcsIHIsIGcsIGIsIGEgKiBmcmFjdGlvbikKCgkJCQlsb2NhbCBzdHJ3LCBzdHJoID0gcmVuZGVyZXIubWVhc3VyZV90ZXh0KCIiLCBzdHJpbmcpCgkJCQlsb2NhbCBzdHJ3MiA9IHJlbmRlcmVyLm1lYXN1cmVfdGV4dCgiYiIsICIgICAgICAgICIpCgoJCQkJbG9jYWwgcGFkZGluZ3gsIHBhZGRpbmd5ID0gNywgZGF0YS5zaXplCgkJCQlkYXRhLnJvdW5kaW5nID0gbWF0aC5jZWlsKGRhdGEucm91bmRpbmcvMTAgKiAoc3RyaCArIHBhZGRpbmd5KjIpLzIpCgoJCQkJb2Zmc2V0ID0gb2Zmc2V0ICsgKHN0cmggKyBwYWRkaW5neSoyICsgCW1hdGguc3FydChkYXRhLmdsb3cvMTApKjEwIC0gNykgKiBmcmFjdGlvbgoKICAgICAgICAgICAgICAgIC0tUmVuZGVyX2VuZ2luZS5wYW5kb3JhX3JlY3RhbmdsZSh4LzIgLSAoc3RydyArIHN0cncyKS8yIC0gd19hbmltLCB5IC0gMTAwIC0gc3RyaC8yIC0gcGFkZGluZ3kgLSBvZmZzZXQsIHN0cncgKyBzdHJ3MiArIHdfYW5pbSoyLCBzdHJoICsgcGFkZGluZ3kqMiArIDIsIDQwLCA0MCwgNDAsIGEgKiBmcmFjdGlvbiwgMCwgMCwgMCwgYSAqIGZyYWN0aW9uLCAxNSwgMTUsIDE1LCBhICogZnJhY3Rpb24sIHIsIGcsIGIsIDE1ICogZnJhY3Rpb24sIDMsIHRydWUpCiAgICAgICAgICAgICAgICAtLW1fcmVuZGVyLmdsb3dfbW9kdWxlX25vdGlmeSh4LzIgLSAoc3RydyArIHN0cncyKS8yIC0gcGFkZGluZ3gsIHkgLSAxMDAgLSBzdHJoLzIgLSBwYWRkaW5neSAtIG9mZnNldCwgc3RydyArIHN0cncyICsgcGFkZGluZ3gqMiwgc3RyaCArIHBhZGRpbmd5KjIsIDE1LCA4LCAyNSwgMjUsIDI1LCBhICogZnJhY3Rpb24sIHIsIGcsIGIsIGEgKiBmcmFjdGlvbiwgdHJ1ZSkKCgkJCQljdHgubV9yZW5kZXI6Z2xvd19tb2R1bGUoeC8yIC0gKHN0cncgKyBzdHJ3MikvMiAtIHBhZGRpbmd4LCB5IC0gMTAwIC0gc3RyaC8yIC0gcGFkZGluZ3kgLSBvZmZzZXQsIHN0cncgKyBzdHJ3MiArIHBhZGRpbmd4KjIsIHN0cmggKyBwYWRkaW5neSoyICsgMywgZGF0YS5nbG93LCBkYXRhLnJvdW5kaW5nLCB7MCwgMCwgMCwgNDUgKiBmcmFjdGlvbn0sIHsyNSwyNSwyNSwyNTUgKiBmcmFjdGlvbn0pCgkJCQlyZW5kZXJlci50ZXh0KHgvMiArIHN0cncyLzIsIHkgLSA5OSAtIG9mZnNldCwgMjU1LCAyNTUsIDI1NSwgMjU1ICogZnJhY3Rpb24sICJjIiwgMCwgc3RyaW5nKQoKICAgICAgICAgICAgICAgIGlmIG5vdGlmc19pY29uIHRoZW4KICAgICAgICAgICAgICAgICAgICBub3RpZnNfaWNvbjpkcmF3KHgvMiAtIHN0cncvMiAtIDE1LCB5IC0gMTA5IC0gb2Zmc2V0LCBuaWwsIDIyLCAyNTUsIDI1NSwgMjU1LCAyNTUgKiBmcmFjdGlvbiwgdHJ1ZSwgImYiKQogICAgICAgICAgICAgICAgICAgIC0tcmVuZGVyZXIudGV4dHVyZShhbW5lc2lhX2ljb25fc21hbGwsIHgvMiAtIHN0cncvMiAtIDEwLCB5IC0gMTA1IC0gb2Zmc2V0LCBuaWwsIDEyLCAyNTUsIDI1NSwgMjU1LCAyNTUgKiBmcmFjdGlvbikKICAgICAgICAgICAgICAgIGVuZAoJCQllbmQKCgkJCWZvciBpID0gI3RvX3JlbW92ZSwgMSwgLTEgZG8KCQkJCXRhYmxlLnJlbW92ZShzZWxmLmRhdGEsIHRvX3JlbW92ZVtpXSkKCQkJZW5kCgkJZW5kLAoKCQljbGVhciA9IGZ1bmN0aW9uKHNlbGYpCgkJCXNlbGYuZGF0YSA9IHt9CgkJZW5kCgl9CgogICAgY3R4LmluZGljYXRvcnMgPSB7CgkJYWN0aXZlX2ZyYWN0aW9uID0gMCwKCQlpbmFjdGl2ZV9mcmFjdGlvbiA9IDAsCgkJaGlkZV9mcmFjdGlvbiA9IDAsCgkJc2NvcGVkX2ZyYWN0aW9uID0gMCwKCQlmcmFjdGlvbiA9IDAsCgkJcmVuZGVyID0gZnVuY3Rpb24oc2VsZikKCQkJbG9jYWwgbWUgPSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpCgoJCQlpZiBub3QgbWUgb3Igbm90IGVudGl0eS5pc19hbGl2ZShtZSkgdGhlbgoJCQkJcmV0dXJuCgkJCWVuZAoKCQkJbG9jYWwgc3RhdGUgPSBjdHguaGVscGVyczpnZXRfc3RhdGUobWUpCgkJCWxvY2FsIHgsIHkgPSBjbGllbnQuc2NyZWVuX3NpemUoKQoJCQlsb2NhbCByLCBnLCBiID0gdWkuZ2V0KG1lbnUuY29sb3IzKQoKCQkJbG9jYWwgc2NvcGVkID0gZW50aXR5LmdldF9wcm9wKG1lLCAibV9iSXNTY29wZWQiKSA9PSAxCgoJCQlpZiBzY29wZWQgdGhlbgoJCQkJc2VsZi5zY29wZWRfZnJhY3Rpb24gPSBjdHguaGVscGVyczpjbGFtcChzZWxmLnNjb3BlZF9mcmFjdGlvbiArIGdsb2JhbHMuZnJhbWV0aW1lKCkvMC41LCAwLCAxKQoJCQllbHNlCgkJCQlzZWxmLnNjb3BlZF9mcmFjdGlvbiA9IGN0eC5oZWxwZXJzOmNsYW1wKHNlbGYuc2NvcGVkX2ZyYWN0aW9uIC0gZ2xvYmFscy5mcmFtZXRpbWUoKS8wLjUsIDAsIDEpCgkJCWVuZAoKCQkJbG9jYWwgc2NvcGVkX2ZyYWN0aW9uID0gY3R4LmhlbHBlcnM6ZWFzZUluT3V0KHNlbGYuc2NvcGVkX2ZyYWN0aW9uKQoKICAgICAgICAgICAgaWYgdWkuZ2V0KGFkZG9ucy5pbmRpY2F0b3JzKSA9PSAiYW1uZXNpYSIgYW5kIHVpLmdldChhZGRvbnMuZW5hYmxlX2luZGljYXRvcnMpIHRoZW4KCQkJCWxvY2FsIHN0cmlrZV93LCBzdHJpa2VfaCA9IHJlbmRlcmVyLm1lYXN1cmVfdGV4dCgiLSIsICJBTU5FU0lBIFlBVyIpCgoJCQkJLS1jdHgubV9yZW5kZXI6Z2xvd19tb2R1bGUoeC8yICsgKChzdHJpa2VfdyArIDIpLzIpICogc2NvcGVkX2ZyYWN0aW9uIC0gc3RyaWtlX3cvMiArIDQsIHkvMiArIDIwLCBzdHJpa2VfdyAtIDMsIDUsIDEwLCAwLCB7ciwgZywgYiwgMTAwICogbWF0aC5hYnMobWF0aC5jb3MoZ2xvYmFscy5jdXJ0aW1lKCkqMikpfSwge3IsIGcsIGIsIDEwMCAqIG1hdGguYWJzKG1hdGguY29zKGdsb2JhbHMuY3VydGltZSgpKjIpKX0pCgkJCQlyZW5kZXJlci50ZXh0KHgvMiArICgoc3RyaWtlX3cgKyAyKS8yKSAqIHNjb3BlZF9mcmFjdGlvbiwgeS8yICsgMjAsIDI1NSwgMjU1LCAyNTUsIDI1NSwgImMtIiwgMCwgIkFNTkVTSUEgIiwgIlxhIiAuLiBjdHguaGVscGVyczpyZ2JhX3RvX2hleCggciwgZywgYiwgMjU1ICogbWF0aC5hYnMobWF0aC5jb3MoZ2xvYmFscy5jdXJ0aW1lKCkqMikpKSAuLiAiWUFXIikKCgkJCQlsb2NhbCBuZXh0X2F0dGFjayA9IGVudGl0eS5nZXRfcHJvcChtZSwgIm1fZmxOZXh0QXR0YWNrIikKCQkJCWxvY2FsIG5leHRfcHJpbWFyeV9hdHRhY2sgPSBlbnRpdHkuZ2V0X3Byb3AoZW50aXR5LmdldF9wbGF5ZXJfd2VhcG9uKG1lKSwgIm1fZmxOZXh0UHJpbWFyeUF0dGFjayIpCgoJCQkJbG9jYWwgZHRfdG9nZ2xlZCA9IHVpLmdldChjdHgucmVmLmR0WzFdKSBhbmQgdWkuZ2V0KGN0eC5yZWYuZHRbMl0pCgkJCQlsb2NhbCBkdF9hY3RpdmUgPSBkYXRhLmR0X2NoYXJnZWQgIC0tb3IgKGN0eC5oZWxwZXJzLmRlZmVuc2l2ZSBhbmQgY3R4LmhlbHBlcnMuZGVmZW5zaXZlID4gdWkuZ2V0KGN0eC5yZWYuZHRfZmwpKQoKCQkJCWlmIGR0X3RvZ2dsZWQgYW5kIGR0X2FjdGl2ZSB0aGVuCgkJCQkJc2VsZi5hY3RpdmVfZnJhY3Rpb24gPSBjdHguaGVscGVyczpjbGFtcChzZWxmLmFjdGl2ZV9mcmFjdGlvbiArIGdsb2JhbHMuZnJhbWV0aW1lKCkvMC4xNSwgMCwgMSkKCQkJCWVsc2UKCQkJCQlzZWxmLmFjdGl2ZV9mcmFjdGlvbiA9IGN0eC5oZWxwZXJzOmNsYW1wKHNlbGYuYWN0aXZlX2ZyYWN0aW9uIC0gZ2xvYmFscy5mcmFtZXRpbWUoKS8wLjE1LCAwLCAxKQoJCQkJZW5kCgoJCQkJaWYgZHRfdG9nZ2xlZCBhbmQgbm90IGR0X2FjdGl2ZSB0aGVuCgkJCQkJc2VsZi5pbmFjdGl2ZV9mcmFjdGlvbiA9IGN0eC5oZWxwZXJzOmNsYW1wKHNlbGYuaW5hY3RpdmVfZnJhY3Rpb24gKyBnbG9iYWxzLmZyYW1ldGltZSgpLzAuMTUsIDAsIDEpCgkJCQllbHNlCgkJCQkJc2VsZi5pbmFjdGl2ZV9mcmFjdGlvbiA9IGN0eC5oZWxwZXJzOmNsYW1wKHNlbGYuaW5hY3RpdmVfZnJhY3Rpb24gLSBnbG9iYWxzLmZyYW1ldGltZSgpLzAuMTUsIDAsIDEpCgkJCQllbmQKCgkJCQlpZiB1aS5nZXQoY3R4LnJlZi5oc1sxXSkgYW5kIHVpLmdldChjdHgucmVmLmhzWzJdKSBhbmQgdWkuZ2V0KGN0eC5yZWYuc2lsZW50KSBhbmQgbm90IGR0X3RvZ2dsZWQgdGhlbgoJCQkJCXNlbGYuaGlkZV9mcmFjdGlvbiA9IGN0eC5oZWxwZXJzOmNsYW1wKHNlbGYuaGlkZV9mcmFjdGlvbiArIGdsb2JhbHMuZnJhbWV0aW1lKCkvMC4xNSwgMCwgMSkKCQkJCWVsc2UKCQkJCQlzZWxmLmhpZGVfZnJhY3Rpb24gPSBjdHguaGVscGVyczpjbGFtcChzZWxmLmhpZGVfZnJhY3Rpb24gLSBnbG9iYWxzLmZyYW1ldGltZSgpLzAuMTUsIDAsIDEpCgkJCQllbmQKCgkJCQlpZiBtYXRoLm1heChzZWxmLmhpZGVfZnJhY3Rpb24sIHNlbGYuaW5hY3RpdmVfZnJhY3Rpb24sIHNlbGYuYWN0aXZlX2ZyYWN0aW9uKSA+IDAgdGhlbgoJCQkJCXNlbGYuZnJhY3Rpb24gPSBjdHguaGVscGVyczpjbGFtcChzZWxmLmZyYWN0aW9uICsgZ2xvYmFscy5mcmFtZXRpbWUoKS8wLjIsIDAsIDEpCgkJCQllbHNlCgkJCQkJc2VsZi5mcmFjdGlvbiA9IGN0eC5oZWxwZXJzOmNsYW1wKHNlbGYuZnJhY3Rpb24gLSBnbG9iYWxzLmZyYW1ldGltZSgpLzAuMiwgMCwgMSkKCQkJCWVuZAoKCQkJCWxvY2FsIGR0X3NpemUgPSByZW5kZXJlci5tZWFzdXJlX3RleHQoIi0iLCAiRFQgIikKCQkJCWxvY2FsIHJlYWR5X3NpemUgPSByZW5kZXJlci5tZWFzdXJlX3RleHQoIi0iLCAiUkVBRFkiKQoJCQkJcmVuZGVyZXIudGV4dCh4LzIgKyAoKGR0X3NpemUgKyByZWFkeV9zaXplICsgMikvMikgKiBzY29wZWRfZnJhY3Rpb24sIHkvMiArIDMwLCAyNTUsIDI1NSwgMjU1LCBzZWxmLmFjdGl2ZV9mcmFjdGlvbiAqIDI1NSwgImMtIiwgZHRfc2l6ZSArIHNlbGYuYWN0aXZlX2ZyYWN0aW9uICogcmVhZHlfc2l6ZSArIDEsICJEVCAiLCAiXGEiIC4uIGN0eC5oZWxwZXJzOnJnYmFfdG9faGV4KDIxMCwgMjU1LCAxMjAsIDI1NSAqIHNlbGYuYWN0aXZlX2ZyYWN0aW9uKSAuLiAiUkVBRFkiKQoKCQkJCWxvY2FsIGNoYXJnaW5nX3NpemUgPSByZW5kZXJlci5tZWFzdXJlX3RleHQoIi0iLCAiQ0hBUkdJTkciKQoJCQkJbG9jYWwgcmV0ID0gY3R4LmhlbHBlcnM6YW5pbWF0ZV90ZXh0KGdsb2JhbHMuY3VydGltZSgpLCAiQ0hBUkdJTkciLCAyNTUsIDEwMCwgMTAwLCAyNTUpCgkJCQlyZW5kZXJlci50ZXh0KHgvMiArICgoZHRfc2l6ZSArIGNoYXJnaW5nX3NpemUgKyAyKS8yKSAqIHNjb3BlZF9mcmFjdGlvbiwgeS8yICsgMzAsIDI1NSwgMjU1LCAyNTUsIHNlbGYuaW5hY3RpdmVfZnJhY3Rpb24gKiAyNTUsICJjLSIsIGR0X3NpemUgKyBzZWxmLmluYWN0aXZlX2ZyYWN0aW9uICogY2hhcmdpbmdfc2l6ZSArIDEsICJEVCAiLCB1bnBhY2socmV0KSkKCgkJCQlsb2NhbCBoaWRlX3NpemUgPSByZW5kZXJlci5tZWFzdXJlX3RleHQoIi0iLCAiSElERSAiKQoJCQkJbG9jYWwgYWN0aXZlX3NpemUgPSByZW5kZXJlci5tZWFzdXJlX3RleHQoIi0iLCAiQUNUSVZFIikKCQkJCXJlbmRlcmVyLnRleHQoeC8yICsgKChoaWRlX3NpemUgKyBhY3RpdmVfc2l6ZSArIDIpLzIpICogc2NvcGVkX2ZyYWN0aW9uLCB5LzIgKyAzMCwgMjU1LCAyNTUsIDI1NSwgc2VsZi5oaWRlX2ZyYWN0aW9uICogMjU1LCAiYy0iLCBoaWRlX3NpemUgKyBzZWxmLmhpZGVfZnJhY3Rpb24gKiBhY3RpdmVfc2l6ZSArIDEsICJISURFICIsICJcYSIgLi4gY3R4LmhlbHBlcnM6cmdiYV90b19oZXgoMTU1LCAxNTUsIDIwMCwgMjU1ICogc2VsZi5oaWRlX2ZyYWN0aW9uKSAuLiAiQUNUSVZFIikKCQkJCgkJCQlsb2NhbCBzdGF0ZV9zaXplID0gcmVuZGVyZXIubWVhc3VyZV90ZXh0KCItIiwgJy0gJyAuLiBzdHJpbmcudXBwZXIoc3RhdGUpIC4uICcgLScpCgkJCQlyZW5kZXJlci50ZXh0KHgvMiArICgoc3RhdGVfc2l6ZSArIDIpLzIpICogc2NvcGVkX2ZyYWN0aW9uLCB5LzIgKyAzMCArIDEwICogY3R4LmhlbHBlcnM6ZWFzZUluT3V0KHNlbGYuZnJhY3Rpb24pLCAyNTUsIDI1NSwgMjU1LCAyNTUsICJjLSIsIDAsICctICcgLi4gc3RyaW5nLnVwcGVyKHN0YXRlKSAuLiAnIC0nKQoJCQllbmQKCQllbmQKCX0KCiAgICByZXR1cm4gY3R4CmVuZCkoKQoKbG9jYWwgbm90aWZ5ID0gewogICAgbm90aWZpY2F0aW9ucyA9IHsKICAgICAgICBib3R0b20gPSB7fQogICAgfSwKICAgIG1heCA9IHsKICAgICAgICBib3R0b20gPSA2CiAgICB9Cn0KCm5vdGlmeS5fX2luZGV4ID0gbm90aWZ5Cgpub3RpZnkucXVldWVfYm90dG9tID0gZnVuY3Rpb24oKQogICAgaWYgI25vdGlmeS5ub3RpZmljYXRpb25zLmJvdHRvbSA8PSBub3RpZnkubWF4LmJvdHRvbSB0aGVuCiAgICAgICAgcmV0dXJuIDAKICAgIGVuZAoKICAgIHJldHVybiAjbm90aWZ5Lm5vdGlmaWNhdGlvbnMuYm90dG9tIC0gbm90aWZ5Lm1heC5ib3R0b20KZW5kCgpub3RpZnkuY2xlYXJfYm90dG9tID0gZnVuY3Rpb24oKQogICAgZm9yIGkgPSAxLCBub3RpZnkucXVldWVfYm90dG9tKCkgZG8KICAgICAgICB0YWJsZS5yZW1vdmUobm90aWZ5Lm5vdGlmaWNhdGlvbnMuYm90dG9tLCAjbm90aWZ5Lm5vdGlmaWNhdGlvbnMuYm90dG9tKQogICAgZW5kCmVuZAoKbm90aWZ5Lm5ld19ib3R0b20gPSBmdW5jdGlvbih0aW1lb3V0LCBjb2xvciwgLi4uKQogICAgdGFibGUuaW5zZXJ0KG5vdGlmeS5ub3RpZmljYXRpb25zLmJvdHRvbSwgewogICAgICAgIHN0YXJ0ZWQgPSBmYWxzZSwKICAgICAgICBpbnN0YW5jZSA9IHNldG1ldGF0YWJsZSh7CiAgICAgICAgICAgIGFjdGl2ZSAgPSBmYWxzZSwKICAgICAgICAgICAgdGltZW91dCA9IHRpbWVvdXQsCiAgICAgICAgICAgIGNvbG9yICAgPSB7IHIgPSBjb2xvclsxXSwgZyA9IGNvbG9yWzJdLCBiID0gY29sb3JbM10sIGEgPSAwIH0sCiAgICAgICAgICAgIHggICAgICAgPSBzY3JlZW5fc2l6ZSgpLnggLyAyLAogICAgICAgICAgICB5ICAgICAgID0gc2NyZWVuX3NpemUoKS55LAogICAgICAgICAgICB0ZXh0ICAgID0gLi4uLAogICAgICAgIH0sIG5vdGlmeSkKICAgIH0pCmVuZAoKZnVuY3Rpb24gbm90aWZ5OmhhbmRsZXIoKQogICAgbG9jYWwgYm90dG9tX2NvdW50ID0gMAogICAgbG9jYWwgYm90dG9tX3Zpc2libGVfYW1vdW50ID0gMAoKICAgIGZvciBpbmRleCwgbm90aWZpY2F0aW9uIGluIHBhaXJzKG5vdGlmeS5ub3RpZmljYXRpb25zLmJvdHRvbSkgZG8KICAgICAgICBpZiBub3Qgbm90aWZpY2F0aW9uLmluc3RhbmNlLmFjdGl2ZSBhbmQgbm90aWZpY2F0aW9uLnN0YXJ0ZWQgdGhlbgogICAgICAgICAgICB0YWJsZS5yZW1vdmUobm90aWZ5Lm5vdGlmaWNhdGlvbnMuYm90dG9tLCBpbmRleCkKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGZvciBpID0gMSwgI25vdGlmeS5ub3RpZmljYXRpb25zLmJvdHRvbSBkbwogICAgICAgIGlmIG5vdGlmeS5ub3RpZmljYXRpb25zLmJvdHRvbVtpXS5pbnN0YW5jZS5hY3RpdmUgdGhlbgogICAgICAgICAgICBib3R0b21fdmlzaWJsZV9hbW91bnQgPSBib3R0b21fdmlzaWJsZV9hbW91bnQgKyAxCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBmb3IgaW5kZXgsIG5vdGlmaWNhdGlvbiBpbiBwYWlycyhub3RpZnkubm90aWZpY2F0aW9ucy5ib3R0b20pIGRvCiAgICAgICAgaWYgaW5kZXggPiBub3RpZnkubWF4LmJvdHRvbSB0aGVuCiAgICAgICAgICAgIGdvdG8gc2tpcAogICAgICAgIGVuZAoKICAgICAgICBpZiBub3RpZmljYXRpb24uaW5zdGFuY2UuYWN0aXZlIHRoZW4KICAgICAgICAgICAgbm90aWZpY2F0aW9uLmluc3RhbmNlOnJlbmRlcl9ib3R0b20oYm90dG9tX2NvdW50LCBib3R0b21fdmlzaWJsZV9hbW91bnQpCiAgICAgICAgICAgIGJvdHRvbV9jb3VudCA9IGJvdHRvbV9jb3VudCArIDEKICAgICAgICBlbmQKCiAgICAgICAgaWYgbm90IG5vdGlmaWNhdGlvbi5zdGFydGVkIHRoZW4KICAgICAgICAgICAgbm90aWZpY2F0aW9uLmluc3RhbmNlOnN0YXJ0KCkKICAgICAgICAgICAgbm90aWZpY2F0aW9uLnN0YXJ0ZWQgPSB0cnVlCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICA6OnNraXA6OgplbmQKCmZ1bmN0aW9uIG5vdGlmeTpzdGFydCgpCiAgICBzZWxmLmFjdGl2ZSA9IHRydWUKICAgIHNlbGYuZGVsYXkgPSBnbG9iYWxzLnJlYWx0aW1lKCkgKyBzZWxmLnRpbWVvdXQKZW5kCgpmdW5jdGlvbiBub3RpZnk6Z2V0X3RleHQoKQogICAgbG9jYWwgdGV4dCA9ICcnCgogICAgZm9yIGksIGN1cnJfdGV4dCBpbiBwYWlycyhzZWxmLnRleHQpIGRvCiAgICAgICAgbG9jYWwgdGV4dF9zaXplID0gbWVhc3VyZV90ZXh0KCcnLCBjdXJyX3RleHRbMV0pCgogICAgICAgIGxvY2FsIHIsIGcsIGIgPSAyNTUsIDI1NSwgMjU1LS11aS5nZXQobWVudS5jb2xvcjMpCgogICAgICAgIGlmIGN1cnJfdGV4dFsyXSB0aGVuCiAgICAgICAgICAgIHIsIGcsIGIgPSBzZWxmLmNvbG9yLnIsIHNlbGYuY29sb3IuZywgc2VsZi5jb2xvci5iLS11aS5nZXQobWVudS5jb2xvcjMpCiAgICAgICAgZW5kCgogICAgICAgIHRleHQgPSB0ZXh0IC4uICgnXGElMDJ4JTAyeCUwMnglMDJ4JXMnKTpmb3JtYXQociwgZywgYiwgc2VsZi5jb2xvci5hLCBjdXJyX3RleHRbMV0pIC4uICcgJwogICAgZW5kCgogICAgcmV0dXJuIHRleHQKZW5kCgpmdW5jdGlvbiBub3RpZnk6cmVuZGVyX2JvdHRvbShpbmRleCwgdmlzaWJsZV9hbW91bnQpCiAgICBsb2NhbCBzY3JlZW4gPSBzY3JlZW5fc2l6ZSgpCgogICAgbG9jYWwgcHJlZml4X3N0eWxlID0gdWkuZ2V0KG5vdGlmX3ByZWZpeCkKCiAgICBsb2NhbCBwcmVmaXhfcGFkZGluZyA9IDYKICAgIGxvY2FsIHByZWZpeF9zaXplID0gbWVhc3VyZV90ZXh0KCdjJywgcHJlZml4X3N0eWxlKQogICAgCiAgICBpZiBwcmVmaXhfc3R5bGUgPT0gJ2ljb24nIHRoZW4KICAgICAgICBwcmVmaXhfc2l6ZSA9IHZlY3Rvcihub3RpZnNfaWNvbjptZWFzdXJlKCkgLSAxMikKICAgIGVuZAoKICAgIGxvY2FsIHRleHQgPSBzZWxmOmdldF90ZXh0KCkKICAgIGxvY2FsIHRleHRfc2l6ZSA9IG1lYXN1cmVfdGV4dCgnJywgdGV4dCkKICAgIAogICAgbG9jYWwgZ2xvd19zdGVwcyA9IDgKICAgIGxvY2FsIHBhZGRpbmcgPSA1CiAgICBsb2NhbCB0ZXh0X3dpZHRoID0gcHJlZml4X3NpemUueCArIHByZWZpeF9wYWRkaW5nICsgdGV4dF9zaXplLngKICAgIGxvY2FsIHcsIGggPSB0ZXh0X3dpZHRoICsgcGFkZGluZyAqIDIsIDEyICsgMTAgKyAxLS11aS5nZXQobm90aWZfc2l6ZSkKICAgIGxvY2FsIHgsIHkgPSBzZWxmLnggLSB3IC8gMiwgbWF0aC5jZWlsKHNlbGYueSAtIDQwICsgLjQpCiAgICBsb2NhbCBmcmFtZXRpbWUgPSBnbG9iYWxzLmZyYW1ldGltZSgpCgogICAgaWYgZ2xvYmFscy5yZWFsdGltZSgpIDwgc2VsZi5kZWxheSB0aGVuCiAgICAgICAgc2VsZi55ID0gbGVycChzZWxmLnksIChzY3JlZW4ueSAtIDQ1KSAtICgodmlzaWJsZV9hbW91bnQgLSBpbmRleCkgKiBoICogMS40KSwgZnJhbWV0aW1lICogNykKICAgICAgICBzZWxmLmNvbG9yLmEgPSBsZXJwKHNlbGYuY29sb3IuYSwgMjU1LCBmcmFtZXRpbWUgKiAyKQogICAgZWxzZQogICAgICAgIHNlbGYueSA9IGxlcnAoc2VsZi55LCBzZWxmLnkgLSAxMCwgZnJhbWV0aW1lICogMTUpCiAgICAgICAgc2VsZi5jb2xvci5hID0gbGVycChzZWxmLmNvbG9yLmEsIDAsIGZyYW1ldGltZSAqIDIwKQoKICAgICAgICBpZiBzZWxmLmNvbG9yLmEgPD0gMSB0aGVuCiAgICAgICAgICAgIHNlbGYuYWN0aXZlID0gZmFsc2UKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGxvY2FsIHIsIGcsIGIsIGEgPSBzZWxmLmNvbG9yLnIsIHNlbGYuY29sb3IuZywgc2VsZi5jb2xvci5iLCBzZWxmLmNvbG9yLmEKCiAgICBtX3JlbmRlci5nbG93X21vZHVsZV9ub3RpZnkoeCwgeSwgdywgaCwgMTUsIGdsb3dfc3RlcHMsIDI1LCAyNSwgMjUsIGEsIHIsIGcsIGIsIGEsIHRydWUpCgogICAgbG9jYWwgb2Zmc2V0ID0gcGFkZGluZyArIDIKCiAgICBpZiBwcmVmaXhfc3R5bGUgPT0gImljb24iIGFuZCBub3RpZnNfaWNvbiB0aGVuCiAgICAgICAgbG9jYWwgY29sb3IgPSB1aS5nZXQoYWRkb25zLnNjYWxlX2NscikgYW5kIHsgciwgZywgYiB9IG9yIHsgMjU1LCAyNTUsIDI1NSB9CiAgICAgICAgCiAgICAgICAgbm90aWZzX2ljb246ZHJhdyh4ICsgb2Zmc2V0ICsgMSwgeSArIDYsIG5pbCwgMTIgKyB1aS5nZXQobm90aWZfc2l6ZSksIGNvbG9yWzFdLCBjb2xvclsyXSwgY29sb3JbM10sIGEsIHRydWUsICJmIikKICAgICAgICBvZmZzZXQgPSBvZmZzZXQgKyBwcmVmaXhfc2l6ZS54ICsgcHJlZml4X3BhZGRpbmcKICAgIGVsc2UKICAgICAgICByZW5kZXJlci50ZXh0KHggKyBvZmZzZXQsIHkgKyBoIC8gMiAtIHByZWZpeF9zaXplLnkgLyAyLCByLCBnLCBiLCBhLCAnYicsIG5pbCwgcHJlZml4X3N0eWxlKQogICAgICAgIG9mZnNldCA9IG9mZnNldCArIHByZWZpeF9zaXplLnggKyBwcmVmaXhfcGFkZGluZwogICAgZW5kCgogICAgcmVuZGVyZXIudGV4dCh4ICsgb2Zmc2V0LCB5ICsgaCAvIDIgLSB0ZXh0X3NpemUueSAvIDIsIHIsIGcsIGIsIGEsICcnLCBuaWwsIHRleHQpCmVuZAoKbG9jYWwgbG9hZF9hID0gMApsb2NhbCBsb2FkX2EyID0gMApsb2NhbCBkcmF3ID0gdHJ1ZQpsb2NhbCB3ZWxjb21lID0gZmFsc2UKCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInBhaW50X3VpIiwgZnVuY3Rpb24oKQogICAgaWYgdHlwZShnaWYxKSB+PSAibmlsIiB0aGVuCiAgICAgICAgaWYgZHJhdyA9PSB0cnVlIHRoZW4KICAgICAgICAgICAgbG9hZF9hID0gbGVycChsb2FkX2EsIDI1NSwgZ2xvYmFscy5mcmFtZXRpbWUoKSAqIDEpCiAgICAgICAgICAgIGxvYWRfYTIgPSBsZXJwKGxvYWRfYTIsIDMwLCBnbG9iYWxzLmZyYW1ldGltZSgpICogMSkKCSAgICAgICAgbG9jYWwgeCwgeSA9IGNsaWVudC5zY3JlZW5fc2l6ZSgpCiAgICAgICAgICAgIGxvY2FsIHIsZyxiLGEgPSB1aS5nZXQobWVudS5jb2xvcjMpCgkgICAgICAgIGdpZjE6ZHJhdyhnbG9iYWxzLnJlYWx0aW1lKCktc3RhcnRfdGltZSwgeCAvIDIgLSA1MywgeSAvIDIgLSA1MiwgZ2lmMS53aWR0aCAtIDcwLCBnaWYxLmhlaWdodCAtIDcwLCByLGcsYiwgbG9hZF9hKQogICAgICAgICAgICByZW5kZXJlci50ZXh0KHggLyAyLCB5IC8gMiArIDY1LCAyNTUsMjU1LDI1NSxsb2FkX2EsICJjIiwgMCwgImFtbmVzaWEgaXMgbG9hZGluZy4uLiIpCiAgICAgICAgICAgIC0tcmVuZGVyZXIucmVjdGFuZ2xlKHggLyAyIC0geCwgeSAvIDIgLSA1NDAsIHggKyAxMDAwLCB5ICsgMTAwLCByLGcsYixsb2FkX2EyKQogICAgICAgICAgICBjbGllbnQuZGVsYXlfY2FsbCgyLCBmdW5jdGlvbigpIGRyYXcgPSBmYWxzZSBlbmQpCiAgICAgICAgZWxzZQogICAgICAgICAgICBsb2FkX2EgPSBsZXJwKGxvYWRfYSwgMCwgZ2xvYmFscy5mcmFtZXRpbWUoKSAqIDMpCiAgICAgICAgICAgIGxvY2FsIHgsIHkgPSBjbGllbnQuc2NyZWVuX3NpemUoKQogICAgICAgICAgICBsb2NhbCByLGcsYixhID0gdWkuZ2V0KG1lbnUuY29sb3IzKQogICAgICAgICAgICBsb2FkX2EyID0gbGVycChsb2FkX2EyLCAwLCBnbG9iYWxzLmZyYW1ldGltZSgpICogMSkKCSAgICAgICAgZ2lmMTpkcmF3KGdsb2JhbHMucmVhbHRpbWUoKS1zdGFydF90aW1lLCB4IC8gMiAtIDUzLCB5IC8gMiAtIDUyLCBnaWYxLndpZHRoIC0gNzAsIGdpZjEuaGVpZ2h0IC0gNzAsIHIsZyxiLCBsb2FkX2EpCiAgICAgICAgICAgIHJlbmRlcmVyLnRleHQoeCAvIDIsIHkgLyAyICsgNjUsIDI1NSwyNTUsMjU1LGxvYWRfYSwgImMiLCAwLCAiYW1uZXNpYSBpcyBsb2FkaW5nLi4uIikKICAgICAgICAgICAgLS1yZW5kZXJlci5yZWN0YW5nbGUoeCAvIDIgLSB4LCB5IC8gMiAtIDU0MCwgeCArIDEwMDAsIHkgKyAxMDAsIHIsZyxiLGxvYWRfYTIpCiAgICAgICAgZW5kCiAgICBlbmQKZW5kKQoKbG9jYWwgcixnLGIgPSB1aS5nZXQobWVudS5jb2xvcjMpCmN0eC5ub3RpZmljYXRpb25zOm5ldygid2VsY29tZSB0byBhbW5lc2lhIH4gJCIuLmJ1aWxkLi4iJCAhIiwgcixnLGIpCgpmdW5jdGlvbiBzdGF0ZTppc19tb3ZpbmcoZW50KQogICAgbG9jYWwgdmVsb2NpdHkgPSB2ZWN0b3IoZW50aXR5LmdldF9wcm9wKGVudCwgIm1fdmVjVmVsb2NpdHkiKSkKICAgIHJldHVybiBtYXRoLnNxcnQodmVsb2NpdHkueCAqIHZlbG9jaXR5LnggKyB2ZWxvY2l0eS55ICogdmVsb2NpdHkueSkgPiAyCmVuZAoKZnVuY3Rpb24gc3RhdGU6aXNfY3JvdWNoaW5nKGVudCkKICAgIGxvY2FsIGR1Y2tlZCA9IGVudGl0eS5nZXRfcHJvcChlbnQsICJtX2JEdWNrZWQiKQogICAgcmV0dXJuIGR1Y2tlZCA9PSAxCmVuZAoKZnVuY3Rpb24gc3RhdGU6dGVhbV9udW1iZXIoZW50KQoJbG9jYWwgdGVhbV9udW0gPSBlbnRpdHkuZ2V0X3Byb3AoZW50LCAibV9pVGVhbU51bSIpCglyZXR1cm4gdGVhbV9udW0KZW5kCgpsb2NhbCBkZWZlbnNpdmVfdW50aWwgPSAwCmxvY2FsIGxhc3Rfc2ltX3RpbWUgPSAwCmxvY2FsIHZ1bG5lcmFibGVfdGlja3MgPSAwCmxvY2FsIGxhc3Rfb3JpZ2luID0gdmVjdG9yKDAsIDAsIDApCgotLS0gQHJldHVybiBib29sZWFuIGJvb2xlYW4gUmV0dXJucyB0cnVlIGlmIHRoZSBwbGF5ZXIgY2FuIGJlIGhpdCBieSBhbiBlbmVteQpsb2NhbCBmdW5jdGlvbiBpc192dWxuZXJhYmxlKCkKICAgIGZvciBfLCB2IGluIGlwYWlycyhlbnRpdHkuZ2V0X3BsYXllcnModHJ1ZSkpIGRvCiAgICAgICAgbG9jYWwgZmxhZ3MgPSAoZW50aXR5LmdldF9lc3BfZGF0YSh2KSkuZmxhZ3MKCiAgICAgICAgaWYgYml0LmJhbmQoZmxhZ3MsIGJpdC5sc2hpZnQoMSwgMTEpKSB+PSAwIHRoZW4KICAgICAgICAgICAgdnVsbmVyYWJsZV90aWNrcyA9IHZ1bG5lcmFibGVfdGlja3MgKyAxCiAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICAtLSBJZiB3ZSBhcmVuJ3QgdnVsbmVyYWJsZSB0aGVuIHdlIGhhdmUgYmVlbiB2dWxuZXJhYmxlIGZvciAwIHRpY2tzCiAgICB2dWxuZXJhYmxlX3RpY2tzID0gMAogICAgcmV0dXJuIGZhbHNlCmVuZAoKLS0tIEBwYXJhbSBsb2NhbF9wbGF5ZXIgbnVtYmVyIFRoZSBlbnRpbmRleCBvZiB0aGUgbG9jYWwgcGxheWVyCi0tLSBAcmV0dXJuIGJvb2xlYW4gYm9vbGVhbiBSZXR1cm5zIHRydWUgaWYgZGVmZW5zaXZlIGR0IGlzIGN1cnJlbnRseSBhY3RpdmUKbG9jYWwgZnVuY3Rpb24gaXNfZGVmZW5zaXZlX2FjdGl2ZShsb2NhbF9wbGF5ZXIpCiAgICBsb2NhbCB0aWNrY291bnQgPSBnbG9iYWxzLnRpY2tjb3VudCgpCiAgICBsb2NhbCBzaW1fdGltZSA9IHRvdGlja3MoZW50aXR5LmdldF9wcm9wKGxvY2FsX3BsYXllciwgIm1fZmxTaW11bGF0aW9uVGltZSIpKQogICAgbG9jYWwgc2ltX2RpZmYgPSBzaW1fdGltZSAtIGxhc3Rfc2ltX3RpbWUKCiAgICBpZiBzaW1fZGlmZiA8IDAgdGhlbgogICAgICAgIGRlZmVuc2l2ZV91bnRpbCA9IHRpY2tjb3VudCArIG1hdGguYWJzKHNpbV9kaWZmKSAtIHRvdGlja3MoY2xpZW50LmxhdGVuY3koKSkKICAgIGVuZAogICAgCiAgICBsYXN0X3NpbV90aW1lID0gc2ltX3RpbWUKCiAgICByZXR1cm4gZGVmZW5zaXZlX3VudGlsID4gdGlja2NvdW50CmVuZAoKZnVuY3Rpb24gc3RhdGU6Z2V0X3N0YXRlKGVudCwgY21kKQogICAgbG9jYWwgZ2FtZV9ydWxlcyA9IGVudGl0eS5nZXRfZ2FtZV9ydWxlcygpCgogICAgbG9jYWwgdnVsbmVyYWJsZSA9IGlzX3Z1bG5lcmFibGUoKQogICAgbG9jYWwgZW5lbWllcyA9IGVudGl0eS5nZXRfcGxheWVycyh0cnVlKQoKICAgIGxvY2FsIHdlYXBvbiA9IGVudGl0eS5nZXRfcGxheWVyX3dlYXBvbihlbnQpCiAgICBpZiB3ZWFwb24gPT0gbmlsIHRoZW4gcmV0dXJuIGVuZAoKICAgIGxvY2FsIHdwbmNsYXNzID0gZW50aXR5LmdldF9jbGFzc25hbWUod2VhcG9uKQoKICAgIGxvY2FsIGluX2tuaWZlID0gd3BuY2xhc3M6ZmluZCgiQ0tuaWZlIikKCiAgICBsb2NhbCBpbl9kZWYgPSBpc19kZWZlbnNpdmVfYWN0aXZlKGVudCkKCiAgICBsb2NhbCB0aHJlYXQgPSBjbGllbnQuY3VycmVudF90aHJlYXQoKQogICAgbG9jYWwgaGVpZ2h0X3RvX3RocmVhdCA9IDAKCiAgICBsb2NhbCBpc19tb3ZpbmcgPSBzZWxmOmlzX21vdmluZyhlbnQpCiAgICBsb2NhbCBpc19jcm91Y2hpbmcgPSBzZWxmOmlzX2Nyb3VjaGluZyhlbnQpCiAgICBsb2NhbCBpbl9haXIgPSBzZWxmOmluX2FpcihlbnQpCgogICAgbG9jYWwgb3JpZ2luID0gdmVjdG9yKGVudGl0eS5nZXRfb3JpZ2luKGVudCkpCiAgICBsb2NhbCBicmVha2luZ19sYyA9IChsYXN0X29yaWdpbiAtIG9yaWdpbik6bGVuZ3RoMmRzcXIoKSA+IDQwOTYKCiAgICBsb2NhbCBoaWRlc2hvdF9hY3RpdmUgPSB1aS5nZXQocmVmZXJlbmNlLm9uX3Nob3RfYWFbMV0pIGFuZCB1aS5nZXQocmVmZXJlbmNlLm9uX3Nob3RfYWFbMl0pCgogICAgaWYgY21kLmNob2tlZGNvbW1hbmRzID09IDAgdGhlbgogICAgICAgIGxhc3Rfb3JpZ2luID0gb3JpZ2luCiAgICBlbmQKCiAgICBpZiB0aHJlYXQgdGhlbgogICAgICAgIGxvY2FsIHRocmVhdF9vcmlnaW4gPSB2ZWN0b3IoZW50aXR5LmdldF9vcmlnaW4odGhyZWF0KSkKICAgICAgICBoZWlnaHRfdG9fdGhyZWF0ID0gb3JpZ2luLnotdGhyZWF0X29yaWdpbi56CiAgICBlbmQKCiAgICBpZiBpbl9rbmlmZSB0aGVuCiAgICAgICAgcmV0dXJuICJrbmlmZSIKICAgIGVuZAoKICAgIGlmIGhpZGVzaG90X2FjdGl2ZSB0aGVuCiAgICAgICAgcmV0dXJuICJoaWRlc2hvdCIKICAgIGVuZAoKICAgIGlmIChlbnRpdHkuZ2V0X3Byb3AoZ2FtZV9ydWxlcywgIm1fZlJvdW5kU3RhcnRUaW1lIikgLSBnbG9iYWxzLmN1cnRpbWUoKSkgPiAwIHRoZW4KICAgICAgICByZXR1cm4gInJvdW5kLXN0YXJ0IgogICAgZW5kCgogICAgaWYgZW50aXR5LmdldF9wcm9wKGdhbWVfcnVsZXMsICJtX2lSb3VuZFdpblN0YXR1cyIpIH49IDAgdGhlbgogICAgICAgIHJldHVybiAicm91bmQtZW5kIgogICAgZW5kCgogICAgaWYgI2VuZW1pZXMgPT0gMCB0aGVuCiAgICAgICAgcmV0dXJuICJkb3JtYW50IgogICAgZW5kCgogICAgaWYgaW5fZGVmIHRoZW4KICAgICAgICBpZiBtYXRoLnJhbmRvbSgwLDEpID09IDEgdGhlbgogICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnBpdGNoLCAidXAiKQogICAgICAgIGVsc2UKICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5waXRjaCwgIm9mZiIpCiAgICAgICAgZW5kCiAgICBlbHNlCiAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5waXRjaCwgIm1pbmltYWwiKQogICAgZW5kCgogICAgaWYgaW5fZGVmIHRoZW4KICAgICAgICByZXR1cm4gImRlZmVuc2l2ZSIKICAgIGVuZAoKICAgIGlmIGJyZWFraW5nX2xjIHRoZW4KICAgICAgICByZXR1cm4gImJyZWFraW5nIGxjIgogICAgZW5kCgogICAgaWYgc3RhdGU6ZmFrZWxhZygpIHRoZW4KICAgICAgICByZXR1cm4gImZha2VsYWciCiAgICBlbmQKCiAgICBpZiB1aS5nZXQocmVmZXJlbmNlLnNsb3dfbW90aW9uWzFdKSBhbmQgdWkuZ2V0KHJlZmVyZW5jZS5zbG93X21vdGlvblsyXSkgdGhlbgogICAgICAgIHJldHVybiAic2xvdyIKICAgIGVuZAoKICAgIGlmIGluX2FpciB0aGVuCiAgICAgICAgY21kLmZvcmNlX2RlZmVuc2l2ZSA9IHRydWUKICAgICAgICBpZiBpc19jcm91Y2hpbmcgdGhlbgogICAgICAgICAgICByZXR1cm4gImFpciBjcm91Y2giCiAgICAgICAgZW5kCgogICAgICAgIHJldHVybiAiYWlyIgogICAgZW5kCgogICAgaWYgdnVsbmVyYWJsZSBhbmQgdnVsbmVyYWJsZV90aWNrcyA8PSAxNiB0aGVuCiAgICAgICAgY21kLmZvcmNlX2RlZmVuc2l2ZSA9IHRydWUKICAgICAgICByZXR1cm4gIm9uIHBlZWsiCiAgICBlbmQKCiAgICBpZiBpc19jcm91Y2hpbmcgYW5kIGlzX21vdmluZyB0aGVuCiAgICAgICAgY21kLmZvcmNlX2RlZmVuc2l2ZSA9IHRydWUKICAgICAgICByZXR1cm4gImNyb3VjaCBtb3ZpbmciCiAgICBlbmQKCiAgICBpZiBpc19jcm91Y2hpbmcgdGhlbgogICAgICAgIGNtZC5mb3JjZV9kZWZlbnNpdmUgPSB0cnVlCiAgICAgICAgcmV0dXJuICJjcm91Y2giCiAgICBlbmQKCiAgICBpZiBpc19tb3ZpbmcgdGhlbgogICAgICAgIHJldHVybiAicnVuIgogICAgZW5kCgogICAgaWYgbm90IGlzX21vdmluZyB0aGVuCiAgICAgICAgcmV0dXJuICJzdGFuZCIKICAgIGVuZAoKICAgIHJldHVybiAiZ2xvYmFsIgplbmQKCmxvY2FsIGxhc3RtaXNzID0gMAoKbG9jYWwgZnVuY3Rpb24gR2V0Q2xvc2VzdFBvaW50KEEsIEIsIFApCiAgICBhX3RvX3AgPSB7IFBbMV0gLSBBWzFdLCBQWzJdIC0gQVsyXSB9CiAgICBhX3RvX2IgPSB7IEJbMV0gLSBBWzFdLCBCWzJdIC0gQVsyXSB9CgogICAgYXRiMiA9IGFfdG9fYlsxXV4yICsgYV90b19iWzJdXjIKCiAgICBhdHBfZG90X2F0YiA9IGFfdG9fcFsxXSphX3RvX2JbMV0gKyBhX3RvX3BbMl0qYV90b19iWzJdCiAgICB0ID0gYXRwX2RvdF9hdGIgLyBhdGIyCgogICAgcmV0dXJuIHsgQVsxXSArIGFfdG9fYlsxXSp0LCBBWzJdICsgYV90b19iWzJdKnQgfQplbmQKCmxvY2FsIGJydXRlZm9yY2VfcmVzZXQgPSB0cnVlCmxvY2FsIHN0YWdlID0gMApsb2NhbCBzaG90X3RpbWUgPSAwCgpsb2NhbCB2ZWN0ID0gcmVxdWlyZSAidmVjdG9yIgoKbG9jYWwgcHJlc2V0X2RhdGEgPSB7fQoKbG9jYWwgcHJlc2V0c19saXN0ID0ge30KCmxvY2FsIGZ1bmN0aW9uIGFkZHByZXNldChzdGF0ZSwgcHJlc2V0LCByZXNldCkKICAgIGlmIHJlc2V0IHRoZW4KICAgICAgICBwcmVzZXRzX2xpc3Rbc3RhdGVdID0ge30gLS0gcmVtb3ZlIHRoZSBkZWZhdWx0LCBhcyB3ZSBhZGRlZCBjdXN0b20gb25lCiAgICBlbmQKICAgIHByZXNldHNfbGlzdFtzdGF0ZV1bI3ByZXNldHNfbGlzdFtzdGF0ZV0rMV0gPSBwcmVzZXQKZW5kCgpmb3IgaSwgdiBpbiBuZXh0LCB7InN0YW5kIiwicnVuIiwic2xvdyIsImNyb3VjaCIsImNyb3VjaCBtb3ZpbmciLCJhaXIiLCJhaXIgY3JvdWNoIiwiZmFrZWxhZyJ9IGRvCiAgICBwcmVzZXRzX2xpc3Rbdl0gPSB7fQogICAgcHJlc2V0X2RhdGFbdl0gPSB7fQogICAgYWRkcHJlc2V0KHYsIHszMCwgNDUsIDYxLCA2MX0pIC0tIGRlZmF1bHQKZW5kCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJidWxsZXRfaW1wYWN0IiwgZnVuY3Rpb24oZSkKCiAgICBpZiBub3QgZW50aXR5LmlzX2FsaXZlKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkpIHRoZW4gcmV0dXJuIGVuZAogICAgbG9jYWwgZW50ID0gY2xpZW50LnVzZXJpZF90b19lbnRpbmRleChlLnVzZXJpZCkKICAgIGlmIGVudCB+PSBjbGllbnQuY3VycmVudF90aHJlYXQoKSB0aGVuIHJldHVybiBlbmQKICAgIGlmIGVudGl0eS5pc19kb3JtYW50KGVudCkgb3Igbm90IGVudGl0eS5pc19lbmVteShlbnQpIHRoZW4gcmV0dXJuIGVuZAoKICAgIGxvY2FsIGVudF9vcmlnaW4gPSB7IGVudGl0eS5nZXRfcHJvcChlbnQsICJtX3ZlY09yaWdpbiIpIH0KICAgIGVudF9vcmlnaW5bM10gPSBlbnRfb3JpZ2luWzNdICsgZW50aXR5LmdldF9wcm9wKGVudCwgIm1fdmVjVmlld09mZnNldFsyXSIpCiAgICBsb2NhbCBsb2NhbF9oZWFkID0geyBlbnRpdHkuaGl0Ym94X3Bvc2l0aW9uKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCksIDApIH0KICAgIGxvY2FsIGNsb3Nlc3QgPSBHZXRDbG9zZXN0UG9pbnQoZW50X29yaWdpbiwgeyBlLngsIGUueSwgZS56IH0sIGxvY2FsX2hlYWQpCiAgICBsb2NhbCBkZWx0YSA9IHsgbG9jYWxfaGVhZFsxXS1jbG9zZXN0WzFdLCBsb2NhbF9oZWFkWzJdLWNsb3Nlc3RbMl0gfQogICAgbG9jYWwgZGVsdGFfMmQgPSBtYXRoLnNxcnQoZGVsdGFbMV1eMitkZWx0YVsyXV4yKQoKICAgIGxvY2FsIGludmVydGVkID0gKG1hdGguZmxvb3IoZW50aXR5LmdldF9wcm9wKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCksICJtX2ZsUG9zZVBhcmFtZXRlciIsIDExKSAqIDEyMCAtIDYwKSkKCiAgICBsb2NhbCByLGcsYixhID0gdWkuZ2V0KG1lbnUuY29sb3IzKQoKICAgIGxvY2FsIGNvbCA9IHJnYmFfdG9faGV4KHIsZyxiLGEpCiAgICBsb2NhbCBzdGF0ZSA9IGFhX2xvbC5zdGF0ZQoKICAgIGlmIG5vdCB1aS5nZXQobWVudS5hbnRpYWltX21vZGUpID09ICJkeW5hbWljIiB0aGVuIHJldHVybiBuaWwgZW5kCiAgICBpZiBtYXRoLmFicyhkZWx0YV8yZCkgPD0gNDUgYW5kIGdsb2JhbHMuY3VydGltZSgpIC0gbGFzdG1pc3MgPiAwLjAxNSB0aGVuCgogICAgICAgIGN0eC5ub3RpZmljYXRpb25zOm5ldygiY2hhbmdlZCBbJyR0aWNrIHNwZWVkJCddIGR1ZSB0byAkYnVsbGV0JCBmcm9tICQiLi5lbnRpdHkuZ2V0X3BsYXllcl9uYW1lKGVudCk6bG93ZXIoKS4uIiQgISIsIHIsZyxiKQoKICAgICAgICBsYXN0bWlzcyA9IGdsb2JhbHMuY3VydGltZSgpCiAgICAgICAgYnJ1dGVmb3JjZSA9IHRydWUKICAgICAgICBzaG90X3RpbWUgPSBnbG9iYWxzLnJlYWx0aW1lKCkKICAgICAgICBzdGFnZSA9IHN0YWdlID49IDMgYW5kIDAgb3Igc3RhZ2UgKyAxCiAgICAgICAgc3RhZ2UgPSBzdGFnZSA9PSAwIGFuZCAxIG9yIHN0YWdlCiAgICBlbmQKZW5kKQoKbG9jYWwgZnVuY3Rpb24gUmV0dXJuZXIoKQogICAgYnJ1dDMgPSB0cnVlCgogICAgcmV0dXJuIGJydXQzCmVuZAoKZnVuY3Rpb24gYWFfbG9sOmJydXRlZm9yY2UgKGNtZCkKICAgIGxvY2FsIHIsZyxiLGEgPSB1aS5nZXQobWVudS5jb2xvcjMpCgogICAgbG9jYWwgY29sID0gcmdiYV90b19oZXgocixnLGIsYSkKICAgIGlmIGJydXRlZm9yY2UgdGhlbgogICAgICAgIGNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInBhaW50X3VpIiwgUmV0dXJuZXIpCiAgICAgICAgYnJ1dGVmb3JjZSA9IGZhbHNlCiAgICAgICAgYnJ1dGVmb3JjZV9yZXNldCA9IGZhbHNlCiAgICAgICAgc3RhZ2UgPSBzdGFnZSA9PSAwIGFuZCAxIG9yIHN0YWdlCiAgICAgICAgc2V0X2JydXRlID0gdHJ1ZQogICAgZWxzZQogICAgICAgIGlmIHNob3RfdGltZSArIDMgPCBnbG9iYWxzLnJlYWx0aW1lKCkKICAgICAgICB0aGVuCiAgICAgICAgICAgIGNsaWVudC51bnNldF9ldmVudF9jYWxsYmFjaygicGFpbnRfdWkiLCBSZXR1cm5lcikKICAgICAgICAgICAgc2V0X2JydXRlID0gZmFsc2UKICAgICAgICAgICAgYnJ1dDMgPSBmYWxzZQogICAgICAgICAgICBzdGFnZSA9IDAKICAgICAgICAgICAgYnJ1dGVmb3JjZV9yZXNldCA9IHRydWUKICAgICAgICAgICAgc2V0X2JydXRlID0gZmFsc2UKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuIHNob3RfdGltZQplbmQKCmZ1bmN0aW9uIGFhX2xvbDpoYW5kbGVfeWF3KGxlZnQsIHJpZ2h0LCBjbWQpCgogICAgaWYgcGNhbGwoY21kLmNob2tlZGNvbW1hbmRzIH49IDApIHRoZW4gcmV0dXJuIGVuZAoKICAgIGlmIHNlbGYuZGVsdGEgPiAwIHRoZW4KICAgICAgICByZXR1cm4gbGVmdAogICAgZWxzZQogICAgICAgIHJldHVybiByaWdodAogICAgZW5kCmVuZAoKbG9jYWwgZXhwb3J0X2J1dHRvbiA9IHVpLm5ld19idXR0b24ocHJvdGVjdGVkWzZdLCBwcm90ZWN0ZWRbOF0sICJleHBvcnQgY3VycmVudCBzdGF0ZSIsIGZ1bmN0aW9uKCkKICAgIGxvY2FsIGNvbmRpdGlvbiA9IHVpLmdldChhbnRpYWltX2NvbmRpdGlvbikKICAgIGxvY2FsIHRlYW0gPSB1aS5nZXQobWVudS50ZWFtX21vZGUpCiAgICBsb2NhbCBjZmcgPSB7CiAgICAgICAgW2NvbmRpdGlvbl0gPSB7fQogICAgfQogICAgZm9yIHNldHRpbmdfbmFtZSwgc2V0dGluZ192YWx1ZSBpbiBwYWlycyhtZW51LmJ1aWxkZXJfZWxlbWVudHNbY29uZGl0aW9uXSkgZG8KICAgICAgICBpZiB0ZWFtID09ICJjb3VudGVydGVycm9yaXN0IiB0aGVuCiAgICAgICAgICAgIGlmIG5vdCBzZXR0aW5nX25hbWU6ZmluZCgiX3QiKSB0aGVuCiAgICAgICAgICAgICAgICBzZXR0aW5nX25hbWUgPSBzZXR0aW5nX25hbWUgLi4gIl90IgogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBnb3RvIHNraXAKICAgICAgICAgICAgZW5kCiAgICAgICAgZWxzZQogICAgICAgICAgICBpZiBzZXR0aW5nX25hbWU6ZmluZCgiX3QiKSB0aGVuCiAgICAgICAgICAgICAgICBzZXR0aW5nX25hbWUgPSBzZXR0aW5nX25hbWU6Z3N1YigiX3QiLCAiIikKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgZ290byBza2lwCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIGNmZ1tjb25kaXRpb25dW3NldHRpbmdfbmFtZV0gPSB1aS5nZXQoc2V0dGluZ192YWx1ZSkKICAgICAgICA6OnNraXA6OgogICAgZW5kCiAgICAtLXByaW50KGpzb24uc3RyaW5naWZ5KGNmZykpCiAgICBjbGlwYm9hcmQuc2V0KGpzb24uc3RyaW5naWZ5KGNmZykpCgplbmQpCgpsb2NhbCBpbXBvcnRfYnV0dG9uID0gdWkubmV3X2J1dHRvbihwcm90ZWN0ZWRbNl0sIHByb3RlY3RlZFs4XSwgImltcG9ydCIsIGZ1bmN0aW9uKCkKICAgIGxvY2FsIGNmZ19zdHJpbmcgPSBjbGlwYm9hcmQuZ2V0KCkKICAgIGlmIG5vdCBwY2FsbChmdW5jdGlvbigpIGpzb24ucGFyc2UoY2ZnX3N0cmluZykgZW5kKSB0aGVuCiAgICAgICAgZXJyb3IoIkludmFsaWQgY29uZmlnIGZvcm1hdCEiKQogICAgICAgIHJldHVybgogICAgZW5kCiAgICBsb2NhbCBjZmcgPSBqc29uLnBhcnNlKGNmZ19zdHJpbmcpCiAgICBsb2NhbCBpbnB1dCA9ICIiCiAgICBsb2NhbCB0ZWFtID0gIiIKICAgIGZvciBjb25kaXRpb24sIHNldHRpbmdzIGluIHBhaXJzKGNmZykgZG8KICAgICAgICBpbnB1dCA9IGNvbmRpdGlvbgogICAgICAgIGZvciBzZXR0aW5nX25hbWUsIHNldHRpbmdfdmFsdWUgaW4gcGFpcnMoc2V0dGluZ3MpIGRvCiAgICAgICAgICAgIGlmIHRlYW0gPT0gIiIgdGhlbgogICAgICAgICAgICAgICAgaWYgc2V0dGluZ19uYW1lOmZpbmQoIl90IikgdGhlbgogICAgICAgICAgICAgICAgICAgIHRlYW0gPSAidGVycm9yaXN0IgogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHRlYW0gPSAiY291bnRlcnRlcnJvcmlzdCIKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgdWkuc2V0KG1lbnUuYnVpbGRlcl9lbGVtZW50c1tjb25kaXRpb25dW3NldHRpbmdfbmFtZV0sIHNldHRpbmdfdmFsdWUpCiAgICAgICAgZW5kCiAgICBlbmQKZW5kKQoKbG9jYWwgZnVuY3Rpb24gY29sb3JfbG9nKHRleHQsIHIsZyxiKQogICAgY2xpZW50LmNvbG9yX2xvZyhyLGcsYiwgImFtbmVzaWEgXDAiKQogICAgY2xpZW50LmNvbG9yX2xvZygxMTAsIDExMCwgMTEwLCAifiBcMCIpCiAgICBjbGllbnQuY29sb3JfbG9nKDIwMCwyMDAsMjAwLCB0ZXh0KQplbmQKCmxvY2FsIGZ1bmN0aW9uIGhhbmRsZV9idXR0b25zKCkKICAgIGxvY2FsIHNob3dfYWEgPSB1aS5nZXQobWVudS50YWJzKSA9PSAiYW50aS1haW0iCiAgICBpZiB1aS5nZXQobWVudS5hYV9hZGRvbnMpID09ICJidWlsZGVyIiBhbmQgc2hvd19hYSB0aGVuCiAgICAgICAgdWlbcHJvdGVjdGVkWzFdXShleHBvcnRfYnV0dG9uLCB0cnVlKQogICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oaW1wb3J0X2J1dHRvbiwgdHJ1ZSkKICAgIGVsc2UKICAgICAgICB1aVtwcm90ZWN0ZWRbMV1dKGV4cG9ydF9idXR0b24sIGZhbHNlKQogICAgICAgIHVpW3Byb3RlY3RlZFsxXV0oaW1wb3J0X2J1dHRvbiwgZmFsc2UpCiAgICBlbmQKZW5kCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKHByb3RlY3RlZFs1XSwgaGFuZGxlX2J1dHRvbnMpCgpsb2NhbCBqaXR0ZXIgPSB0cnVlCmxvY2FsIGRlc3luYyA9IHRydWUKbG9jYWwgY291bnRlciA9IDAKbG9jYWwgYW50aV9haW1fZiA9IHJlcXVpcmUoJ2dhbWVzZW5zZS9hbnRpYWltX2Z1bmNzJykKCmxvY2FsIHZlY3RvciA9IHJlcXVpcmUgInZlY3RvciIKCm5fY2FjaGUgPSB7CiAgICBuYWRlID0gMCwKICAgIG9uX2xhZGRlciA9IGZhbHNlLAogICAgaG9sZGluZ19uYWRlID0gZmFsc2UKfQoKbG9jYWwgcnVuX2NvbW1hbmRfY2hlY2sgPSBmdW5jdGlvbigpCiAgICBsb2NhbCBtZSA9IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkKICAgIGlmIG1lID09IG5pbCB0aGVuIHJldHVybiBlbmQKCiAgICBuX2NhY2hlLm9uX2xhZGRlciA9IGVudGl0eS5nZXRfcHJvcChtZSwgIm1fTW92ZVR5cGUiKSA9PSA5CmVuZAoKbG9jYWwgbmFkZV9jaGVjayA9IGZ1bmN0aW9uKHdlYXBvbiwgY21kKQogICAgbG9jYWwgcGluX3B1bGxlZCA9IGVudGl0eS5nZXRfcHJvcCh3ZWFwb24sICJtX2JQaW5QdWxsZWQiKQogICAgaWYgcGluX3B1bGxlZCB+PSBuaWwgdGhlbgogICAgICAgIGlmIHBpbl9wdWxsZWQgPT0gMCBvciBjbWQuaW5fYXR0YWNrID09IDEgb3IgY21kLmluX2F0dGFjazIgPT0gMSB0aGVuCiAgICAgICAgICAgIGxvY2FsIHRocm93X3RpbWUgPSBlbnRpdHkuZ2V0X3Byb3Aod2VhcG9uLCAibV9mVGhyb3dUaW1lIikKICAgICAgICAgICAgaWYgdGhyb3dfdGltZSB+PSBuaWwgYW5kIHRocm93X3RpbWUgPiAwIGFuZCB0aHJvd190aW1lIDwgZ2xvYmFscy5jdXJ0aW1lKCkgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKICAgIHJldHVybiBuaWwKZW5kCgpsb2NhbCBjYW5fZGVzeW5jID0gZnVuY3Rpb24oY21kLCBlbnQsIGNvdW50LCB2ZWwpCiAgICBpZiB1aS5nZXQoYWRkb25zLmZyZWVzdGFuZGluZ19rZXkpIHRoZW4gcmV0dXJuIGVuZAoKICAgIGxvY2FsIHdlYXBvbiA9IGVudGl0eS5nZXRfcGxheWVyX3dlYXBvbihlbnQpCiAgICBpZiB3ZWFwb24gPT0gbmlsIHRoZW4gcmV0dXJuIGVuZAogICAgbG9jYWwgc3J2X3RpbWUgPSBlbnRpdHkuZ2V0X3Byb3AoZW50LCAibV9uVGlja0Jhc2UiKSAqIGdsb2JhbHMudGlja2ludGVydmFsKCkKICAgIGxvY2FsIHdwbmNsYXNzID0gZW50aXR5LmdldF9jbGFzc25hbWUod2VhcG9uKQoKICAgIGlmIHdwbmNsYXNzOmZpbmQoIkdyZW5hZGUiKSA9PSBuaWwgYW5kIGNtZC5pbl9hdHRhY2sgPT0gMSBhbmQgc3J2X3RpbWUgPiBlbnRpdHkuZ2V0X3Byb3Aod2VhcG9uLCAibV9mbE5leHRQcmltYXJ5QXR0YWNrIikgLSAwLjEgdGhlbiByZXR1cm4gZW5kCgogICAgaWYgbmFkZV9jaGVjayh3ZWFwb24sIGNtZCkgdGhlbiByZXR1cm4gZW5kCgogICAgaWYgZW50aXR5LmdldF9wcm9wKGVudGl0eS5nZXRfZ2FtZV9ydWxlcygpLCAibV9iRnJlZXplUGVyaW9kIikgPT0gMSB0aGVuIHJldHVybiBmYWxzZSBlbmQKCiAgICBpZiBuX2NhY2hlLm9uX2xhZGRlciB0aGVuIHJldHVybiBmYWxzZSBlbmQKICAgIGlmIGNtZC5pbl91c2UgPT0gMSB0aGVuIHJldHVybiBmYWxzZSBlbmQKCiAgICByZXR1cm4gdHJ1ZQplbmQKCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInJ1bl9jb21tYW5kIiwgZnVuY3Rpb24oKQogICAgcnVuX2NvbW1hbmRfY2hlY2soKQplbmQpCgpsb2NhbCBjYWxjX2FuZ2xlID0gZnVuY3Rpb24obG9jYWxfcG9zLCBlbmVteV9wb3MpCiAgICBsb2NhbCB5ZGVsdGEgPSBsb2NhbF9wb3MueSAtIGVuZW15X3Bvcy55CiAgICBsb2NhbCB4ZGVsdGEgPSBsb2NhbF9wb3MueCAtIGVuZW15X3Bvcy54CiAgICBsb2NhbCByZWxhdGl2ZXlhdyA9IG1hdGguYXRhbih5ZGVsdGEgLyB4ZGVsdGEpCiAgICByZWxhdGl2ZXlhdyA9IGFudGlfYWltX2Yubm9ybWFsaXplX2FuZ2xlKHJlbGF0aXZleWF3ICogMTgwIC8gbWF0aC5waSkKICAgIGlmIHhkZWx0YSA+PSAwIHRoZW4KICAgICAgICByZWxhdGl2ZXlhdyA9IGFudGlfYWltX2Yubm9ybWFsaXplX2FuZ2xlKHJlbGF0aXZleWF3ICsgMTgwKQogICAgZW5kCiAgICByZXR1cm4gcmVsYXRpdmV5YXcKZW5kCgpsb2NhbCB2YXJfdGFibGUgPSB7fTsKCmxvY2FsIHByZXZfc2ltdWxhdGlvbl90aW1lID0gMAoKCmxvY2FsIGZ1bmN0aW9uIHRpbWVfdG9fdGlja3ModCkKICAgIHJldHVybiBtYXRoLmZsb29yKDAuNSArICh0IC8gZ2xvYmFscy50aWNraW50ZXJ2YWwoKSkpCmVuZApsb2NhbCBkaWZmX3NpbSA9IDAKZnVuY3Rpb24gdmFyX3RhYmxlOnNpbV9kaWZmKCkgCiAgICBsb2NhbCBjdXJyZW50X3NpbXVsYXRpb25fdGltZSA9IHRpbWVfdG9fdGlja3MoZW50aXR5LmdldF9wcm9wKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCksICJtX2ZsU2ltdWxhdGlvblRpbWUiKSkKICAgIGxvY2FsIGRpZmYgPSBjdXJyZW50X3NpbXVsYXRpb25fdGltZSAtIHByZXZfc2ltdWxhdGlvbl90aW1lCiAgICBwcmV2X3NpbXVsYXRpb25fdGltZSA9IGN1cnJlbnRfc2ltdWxhdGlvbl90aW1lCiAgICBkaWZmX3NpbSA9IGRpZmYKICAgIHJldHVybiBkaWZmX3NpbQplbmQKCnNpbV90aW1lX2R0ID0gMAp0b19kcmF3ID0gIm5vIgp0b191cCA9ICJubyIKdG9fZHJhd190aWNrcyA9IDAKZ29fID0gIm5vIgpyZWNoYXJnZV9kZWYgPSAibm8iCmRlZl9pbmRzID0gMAoKbG9jYWwgZnVuY3Rpb24gdGVtcF9maXgoZGVsdGEsIGNtZCkKICAgIGlmIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAwIHRoZW4KICAgICAgICBpZiBqaXR0ZXIgdGhlbgogICAgICAgICAgICAtLXByaW50KG1hdGguYWJzKGRlbHRhKSkKICAgICAgICAgICAgaWYgbWF0aC5hYnMoZGVsdGEpIDwgMjAuMjEgdGhlbgogICAgICAgICAgICAgICAgICAgIHJlY2hhcmdlX2RlZiA9ICJ5ZXMiCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHJlY2hhcmdlX2RlZiA9ICJubyIKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpsb2NhbCBwb3BfdXAgPSB7CiAgICBpY29uX3cgPSAtMTIsCiAgICB0ZXh0X3NpemUgPSAxLAogICAgdGV4dF9zaXplXzIgPSAxLAogICAgYmFyX3kgPSAxNjAsCiAgICBiYXJfeV8yID0gMTYxLAogICAgYmFyX2xlbmdodCA9IDAsCiAgICBiYXJfYWxwaGEgPSAwCn0KCmxvY2FsIGNhY2hlZCA9IDAKbG9jYWwgeWF3X2NhY2hlID0gMApsb2NhbCB5YXdfdF9jYWNoZSA9IDAKbG9jYWwgeWF3X2FkZCA9IDAKbG9jYWwgY2hlY2sxLCBkZWZlbnNpdmUxID0gMCwgMAoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygicHJlZGljdF9jb21tYW5kIiwgZnVuY3Rpb24oKQogICAgbG9jYWwgdGlja2Jhc2UgPSBlbnRpdHkuZ2V0X3Byb3AoZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSwgIm1fblRpY2tCYXNlIikKICAgIGRlZmVuc2l2ZTEgPSBtYXRoLmFicyh0aWNrYmFzZSAtIGNoZWNrMSkKICAgIGNoZWNrMSA9IG1hdGgubWF4KHRpY2tiYXNlLCBjaGVjazEgb3IgMCkKZW5kKQoKbG9jYWwgc3dhcCA9IGZhbHNlCgpmdW5jdGlvbiBhYV9sb2w6cHJlc2V0X21hbmFnZXIobGVmdCwgcmlnaHQsIGNtZCkKCiAgICBsb2NhbCBzdGF0ZSA9IHN0YXRlOmdldF9zdGF0ZShlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpLCBjbWQpCgogICAgbG9jYWwgZGVsYXkgPSA4CgogICAgaWYgc3RhdGUgPT0gInJ1biIgdGhlbgogICAgICAgIGRlbGF5ID0gMTAKICAgIGVsc2UKICAgICAgICBkZWxheSA9IDgKICAgIGVuZAoKICAgIGlmIGRlZmVuc2l2ZTEgJSAzID09IDEgdGhlbgogICAgICAgIHN3YXAgPSBub3Qgc3dhcAogICAgZW5kCgogICAgaWYgc3dhcCB0aGVuCiAgICAgICAgaWYgY21kLmNob2tlZGNvbW1hbmRzID09IDAgdGhlbgogICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzJdLCAtKG1hdGgucmFuZG9tKDUwLDE1MCkpKQogICAgICAgICAgICB5YXdfYWRkID0gbGVmdAogICAgICAgIGVuZAogICAgZWxzZQogICAgICAgIGlmIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAwIHRoZW4KICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5ib2R5X3lhd1syXSwgKG1hdGgucmFuZG9tKDUwLDE1MCkpKQogICAgICAgICAgICB5YXdfYWRkID0gcmlnaHQKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGlmIHNlbGYubWFudWFsX3N0YXRlID09IDEgdGhlbgogICAgICAgIHlhd19hZGQgPSAtOTAKICAgIGVsc2VpZiBzZWxmLm1hbnVhbF9zdGF0ZSA9PSAyIHRoZW4KICAgICAgICB5YXdfYWRkID0gOTAKICAgIGVsc2VpZiBzZWxmLm1hbnVhbF9zdGF0ZSA9PSAzIHRoZW4KICAgICAgICB5YXdfYWRkID0gMTgwCiAgICBlbmQKCiAgICBsb2NhbCB5YXdfYmFzZSA9IHNlbGYubWFudWFsX3N0YXRlID09IDAgYW5kICJhdCB0YXJnZXRzIiBvciAibG9jYWwgdmlldyIKCiAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19iYXNlLCB5YXdfYmFzZSkKICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzFdLCAiMTgwIikKICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzJdLCB5YXdfYWRkKQogICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfaml0dGVyWzFdLCAib2ZmIikKICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2ppdHRlclsyXSwgMCkKICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMV0sICJTdGF0aWMiKQplbmQKCmxvY2FsIGppdHRlciA9IG5vdCBqaXR0ZXIKbG9jYWwgaml0dGVyMiA9IG5vdCBqaXR0ZXIyCgpsb2NhbCBjdXN0b21feWF3XzEgPSB1aS5uZXdfc2xpZGVyKCJsdWEiLCAiYiIsICJ7Y3VzdG9tfSAtPiBsZWZ0IHlhdyIsIC0xODAsMTgwLDApCmxvY2FsIGN1c3RvbV95YXdfMiA9IHVpLm5ld19zbGlkZXIoImx1YSIsICJiIiwgIntjdXN0b219IC0+IHJpZ2h0IHlhdyIsIC0xODAsMTgwLDApCmxvY2FsIGN1c3RvbV9kZXN5bmNfdCA9IHVpLm5ld19zbGlkZXIoImx1YSIsICJiIiwgIntjdXN0b219IC0+IGRlc3luYyIsIC0xODAsMTgwLDApCgpsb2NhbCBlcnJvcmNoZWNrID0gZnVuY3Rpb24oKQogICAgdWkucmVmZXJlbmNlKCJWaXN1YWxzIiwgIk90aGVyIEVTUCIsICJIZWxwZXIiKQogICAgcmV0dXJuIHVpLnJlZmVyZW5jZSgiVmlzdWFscyIsICJPdGhlciBFU1AiLCAiSGVscGVyIikKZW5kCgpsb2NhbCBmdW5jdGlvbiBnZXRfeWF3KGF0X3RhcmdldHMpCiAgICBsb2NhbCB0aHJlYXQgPSBjbGllbnQuY3VycmVudF90aHJlYXQoKQogICAgbG9jYWwgXywgeWF3ID0gY2xpZW50LmNhbWVyYV9hbmdsZXMoKQogICAgaWYgYXRfdGFyZ2V0cyBhbmQgdGhyZWF0IHRoZW4KICAgICAgICBsb2NhbCBwb3MgPSAgdmVjdG9yKGVudGl0eS5nZXRfb3JpZ2luKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkpKQogICAgICAgIGxvY2FsIGVwb3MgPSB2ZWN0b3IoZW50aXR5LmdldF9vcmlnaW4odGhyZWF0KSkKICAgICAgICBfLCB5YXcgPSBwb3M6dG8oZXBvcyk6YW5nbGVzKCkKICAgIGVuZAogICAgcmV0dXJuIHlhdwplbmQKCmxvY2FsIGZ1bmN0aW9uIGN1c3RvbV9kZXN5bmMoY21kLCBzaWRlLCBhdF90YXJnZXRzLCB5YXdfYWRkLCBqaXR0ZXJfYWRkLCBsaW1pdCwgdmVsb2NpdHksIHN0YXRlKQogICAgbG9jYWwgZHQgPSB1aS5nZXQocmVmZXJlbmNlLmR0WzFdKSBhbmQgdWkuZ2V0KHJlZmVyZW5jZS5kdFsyXSkKICAgIGxvY2FsIGhzID0gdWkuZ2V0KHJlZmVyZW5jZS5vbl9zaG90X2FhWzFdKSBhbmQgdWkuZ2V0KHJlZmVyZW5jZS5vbl9zaG90X2FhWzJdKQogICAgbG9jYWwgZmQgPSB1aS5nZXQocmVmZXJlbmNlLmZha2VfZHVjaykKICAgIGxvY2FsIGxpbWl0MiA9IDEzCiAgICBpZiBmZCB0aGVuCiAgICAgICAgbGltaXQyID0gMTMKICAgIGVsc2VpZiBkdCB0aGVuCiAgICAgICAgbGltaXQyID0gMQogICAgZWxzZWlmIG9zIHRoZW4KICAgICAgICBsaW1pdDIgPSAxCiAgICBlbmQKICAgIGxvY2FsIHNlbmRfcGFja2V0ID0gdHJ1ZQoKICAgIGlmIGNtZC5jaG9rZWRjb21tYW5kcyA8IGxpbWl0MiB0aGVuCiAgICAgICAgc2VuZF9wYWNrZXQgPSBmYWxzZQogICAgZW5kCiAgICAKICAgIGxvY2FsIGNvbW1hbmRfZGlmID0gY21kLmNvbW1hbmRfbnVtYmVyIC0gY21kLmNob2tlZGNvbW1hbmRzIC0gZ2xvYmFscy5sYXN0b3V0Z29pbmdjb21tYW5kKCkKICAgIHNlbmRfcGFja2V0ID0gc2VuZF9wYWNrZXQgb3IgY21kLm5vX2Nob2tlIG9yIG5vdCBjbWQuYWxsb3dfc2VuZF9wYWNrZXQgb3IgY29tbWFuZF9kaWYgfj0gMQogICAgY21kLmFsbG93X3NlbmRfcGFja2V0ID0gc2VuZF9wYWNrZXQKCiAgICBqaXR0ZXJfYWRkID0gc3dpdGNoIGFuZCBqaXR0ZXJfYWRkLzIgb3IgLWppdHRlcl9hZGQvMgoKICAgIGxvY2FsIG1lID0gZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKQoKICAgIGxvY2FsIHZlbCA9IGVudGl0eS5nZXRfcHJvcChtZSwgIm1fdmVjVmVsb2NpdHkiKQogICAgbG9jYWwgY291bnQgPSBnbG9iYWxzLnRpY2tjb3VudCgpCgogICAgbG9jYWwgY2FuX2Rlc3luYyA9IGNhbl9kZXN5bmMoY21kLCBtZSwgY291bnQsIHZlbCkKCiAgICBpZiBub3QgY2FuX2Rlc3luYyB0aGVuCiAgICAgICAgcmV0dXJuCiAgICBlbmQKICAgIGlmIHNlbmRfcGFja2V0IHRoZW4KICAgICAgICBsb2NhbCB5YXcgPSBnZXRfeWF3KGF0X3RhcmdldHMpCiAgICAgICAgY21kLnlhdyA9IHlhdyArIDE4MCArIHlhd19hZGQgKyBqaXR0ZXJfYWRkCiAgICAgICAgY21kLnBpdGNoID0gODkKICAgICAgICBjbWQucm9sbCA9IDAKICAgICAgICBpZiBzZW5kX3BhY2tldCB0aGVuCiAgICAgICAgICAgIHN3aXRjaCA9IG5vdCBzd2l0Y2gKICAgICAgICBlbmQKICAgIGVsc2UKICAgICAgICBsb2NhbCB5YXcgPSBnZXRfeWF3KGF0X3RhcmdldHMpCiAgICAgICAgaWYgc2lkZSA9PSAyIHRoZW4KICAgICAgICAgICAgeWF3X2FkZCA9IHlhd19hZGQgKyAobGltaXQqMikgKiAoc3dpdGNoIGFuZCAtMSBvciAxKQogICAgICAgIGVsc2VpZiBzaWRlID09IDMgdGhlbgogICAgICAgICAgICB5YXdfYWRkID0geWF3X2FkZCArIChsaW1pdCoyKSAqIChnbG9iYWxzLnRpY2tjb3VudCgpICUgNCA8IDIgYW5kIC0xIG9yIDEpCiAgICAgICAgZWxzZQogICAgICAgICAgICB5YXdfYWRkID0geWF3X2FkZCArIChsaW1pdCoyKSAqIChzaWRlID09IDEgYW5kIC0xIG9yIDEpCiAgICAgICAgZW5kCiAgICAgICAgY21kLnlhdyA9IHlhdyArIDE4MCArIHlhd19hZGQgKyBqaXR0ZXJfYWRkCiAgICAgICAgY21kLnBpdGNoID0gOTAKICAgICAgICBjbWQucm9sbCA9IDAKICAgIGVuZAoKICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMV0sICJvZmYiKQogICAgdWkuc2V0KHJlZmVyZW5jZS55YXdbMl0sIDApCgogICAgbG9jYWwgaGVscGVyID0gKHtlcnJvcmNoZWNrKCl9KVsyXQogICAgaWYgdG9zdHJpbmcodWkuZ2V0KGhlbHBlcikpIH49ICJmYWxzZSIgdGhlbgogICAgICAgIHJldHVybgogICAgZW5kCgogICAgaWYgbm90IChjbWQuaW5fZm9yd2FyZCA9PSAxIG9yIGNtZC5pbl9tb3ZlbGVmdCA9PSAxIG9yIGNtZC5pbl9tb3ZlcmlnaHQgPT0gMSBvciBjbWQuaW5fYmFjayA9PSAxIG9yIGNtZC5pbl9qdW1wID09IDEpIGFuZCB2ZWxvY2l0eSA8IDEuMiB0aGVuCiAgICAgICAgY21kLnNpZGVtb3ZlID0gc3dpdGNoIGFuZCAtMS4wMSBvciAxLjAxCiAgICBlbmQKZW5kCgpsb2NhbCB0aW1lciA9IDAKbG9jYWwgZGVzdGluYXRpb24gPSAwCmxvY2FsIGR0bW9kZSA9ICJkZWZlbnNpdmUiCmxvY2FsIGVuZW15X2NhY2hlID0gMApsb2NhbCBib2R5XzEgPSAwCmxvY2FsIGJvZHlfMiA9IDAKCmxvY2FsIHRpY2tjb3VudCA9IDAKbG9jYWwgZGVmX2luZGV4ID0gMAoKbG9jYWwgZV9oZWxwID0gewogICAgaml0dGVyID0gZmFsc2UsCglyZWFkeSA9IGZhbHNlLAoJY2FjaGUgPSAwLAoJZGVsYXkgPSAwLAoJY2hlY2sgPSAwLAoJZGVmZW5zaXZldGljayA9IDAKfQoKZnVuY3Rpb24gYWFfbG9sOmZhc3RsYWRkZXIoYXJnLCBteXNlbGYpCiAgICBpZiBub3QgdWkuZ2V0KG1pc2NbIm1pc2NlbGxhbmVvdXMiXVsibGFkZGVyIl0pIHRoZW4gcmV0dXJuIG5pbCBlbmQKICAgIGlmIG15c2VsZi5tX01vdmVUeXBlIH49IDkgdGhlbiByZXR1cm4gbmlsIGVuZAogICAgZm9yIGssIHYgaW4gcGFpcnMoezQzLCA0NCwgNDUsIDQ2LCA0NywgNDh9KSBkbwogICAgICAgIGlmIG15c2VsZjpnZXRfcGxheWVyX3dlYXBvbigpOmdldF93ZWFwb25faW5kZXgoKSA9PSB2IHRoZW4gcmV0dXJuIG5pbCBlbmQKICAgIGVuZAogICAgaWYgYXJnLnNpZGVtb3ZlID09IDAgdGhlbgogICAgICAgIGFyZy52aWV3X2FuZ2xlcy55ID0gYXJnLnZpZXdfYW5nbGVzLnkgKyA0NQogICAgZW5kCiAgICBpZiBhcmcuaW5fZm9yd2FyZCBhbmQgYXJnLnNpZGVtb3ZlIDwgMCB0aGVuCiAgICAgICAgYXJnLnZpZXdfYW5nbGVzLnkgPSBhcmcudmlld19hbmdsZXMueSArIDkwCiAgICBlbmQKICAgIGlmIGFyZy5pbl9iYWNrIGFuZCBhcmcuc2lkZW1vdmUgPiAwIHRoZW4KICAgICAgICBhcmcudmlld19hbmdsZXMueSA9IGFyZy52aWV3X2FuZ2xlcy55ICsgOTAKICAgIGVuZAogICAgYXJnLmluX21vdmVsZWZ0ID0gYXJnLmluX2JhY2sKICAgIGFyZy5pbl9tb3ZlcmlnaHQgPSBhcmcuaW5fZm9yd2FyZAogICAgaWYgYXJnLnZpZXdfYW5nbGVzLnggPCAwIHRoZW4KICAgICAgICBhcmcudmlld19hbmdsZXMueCA9IC00NQogICAgZW5kCmVuZAoKbG9jYWwgY2FjaGUgPSAwCgpsb2NhbCBjc2dvX3dlYXBvbnMgPSByZXF1aXJlKCJnYW1lc2Vuc2UvY3Nnb193ZWFwb25zIikKCmxvY2FsIGdldF92ZWxvY2l0eSA9IGZ1bmN0aW9uKGVudCkKICAgIHJldHVybiB2ZWN0b3IoZW50aXR5LmdldF9wcm9wKGVudCwgIm1fdmVjVmVsb2NpdHkiKSk6bGVuZ3RoKCkKZW5kCgphYV9sb2wubW92ZW1lbnRqaXR0ZXIgPSBmdW5jdGlvbihlKQogICAgbG9jYWwgbWUgPSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcgogICAgbG9jYWwgd2VhcG9uX2VudCA9IGVudGl0eS5nZXRfcGxheWVyX3dlYXBvbihtZSkKICAgIGlmIG5vdCB3ZWFwb25fZW50IHRoZW4KICAgICAgICByZXR1cm4KICAgIGVuZAogICAgbG9jYWwgd2VhcG9uID0gY3Nnb193ZWFwb25zKHdlYXBvbl9lbnQpCiAgICBpZiBub3Qgd2VhcG9uIHRoZW4KICAgICAgICByZXR1cm4KICAgIGVuZAogICAgbG9jYWwgdmVsb2NpdHkgPSBnZXRfdmVsb2NpdHkobWUpCiAgICBsb2NhbCBtYXhfcGxheWVyX3NwZWVkID0gKGVudGl0eS5nZXRfcHJvcChtZSwgIm1fYklzU2NvcGVkIikgPT0gMSkgYW5kIHdlYXBvbi5tYXhfcGxheWVyX3NwZWVkX2FsdCBvciB3ZWFwb24ubWF4X3BsYXllcl9zcGVlZAogICAgbG9jYWwgbWF4X2FjaGlldmVkID0gZmFsc2UKICAgIGxvY2FsIHNwZWVkID0gbWF4X2FjaGlldmVkIGFuZCBtYXhfcGxheWVyX3NwZWVkIG9yIG1heF9wbGF5ZXJfc3BlZWQgKiAwLjk1CiAgICBpZiBtYXhfYWNoaWV2ZWQgdGhlbgogICAgICAgIGlmIHZlbG9jaXR5ID49IG1heF9wbGF5ZXJfc3BlZWQgKiAwLjk5IHRoZW4KICAgICAgICAgICAgbWF4X2FjaGlldmVkID0gZmFsc2UKICAgICAgICBlbmQKICAgIGVsc2VpZiB2ZWxvY2l0eSA8PSBtYXhfcGxheWVyX3NwZWVkICogMC45NSB0aGVuCiAgICAgICAgbWF4X2FjaGlldmVkID0gdHJ1ZQogICAgZW5kCiAgICBsb2NhbCBoZWxwZXIgPSAoe2Vycm9yY2hlY2soKX0pWzJdCiAgICBpZiB0b3N0cmluZyh1aS5nZXQoaGVscGVyKSkgfj0gImZhbHNlIiB0aGVuCiAgICAgICAgcmV0dXJuCiAgICBlbmQKICAgIGN2YXIuY2xfc2lkZXNwZWVkOnNldF9pbnQoc3BlZWQpCiAgICBjdmFyLmNsX2ZvcndhcmRzcGVlZDpzZXRfaW50KHNwZWVkKQogICAgY3Zhci5jbF9iYWNrc3BlZWQ6c2V0X2ludChzcGVlZCkKZW5kCgpsb2NhbCBob2xkX2NvdW50ZXIgPSAwCmxvY2FsIGhvbGRfY291bnRlcjIgPSAwCmxvY2FsIGhvbGRfY291bnRlcjMgPSAwCmxvY2FsIGhvbGRfY291bnRlcjQgPSAwCgpsb2NhbCBkZWxheV9zd2l0Y2ggPSAwCgpmdW5jdGlvbiBhYV9sb2w6YWEobHAsIGNtZCkKCiAgICBpZiBjbWQuY2hva2VkY29tbWFuZHMgPT0gMCB0aGVuCiAgICAgICAgaG9sZF9jb3VudGVyID0gaG9sZF9jb3VudGVyICsgMQogICAgICAgIGhvbGRfY291bnRlcjIgPSBob2xkX2NvdW50ZXIyICsgMQogICAgICAgIGhvbGRfY291bnRlcjMgPSBob2xkX2NvdW50ZXIzICsgMQogICAgICAgIGhvbGRfY291bnRlcjQgPSBob2xkX2NvdW50ZXI0ICsgMQogICAgZW5kCiAgICBpZiBob2xkX2NvdW50ZXIgPj0gNSB0aGVuCiAgICAgICAgaG9sZF9jb3VudGVyID0gMAogICAgZW5kCiAgICBpZiBob2xkX2NvdW50ZXIyID49IDggdGhlbgogICAgICAgIGhvbGRfY291bnRlcjIgPSAwCiAgICBlbmQKICAgIGlmIGhvbGRfY291bnRlcjMgPj0gOCB0aGVuCiAgICAgICAgaG9sZF9jb3VudGVyMyA9IDUKICAgIGVuZAoKICAgIGlmIGdsb2JhbHMudGlja2NvdW50KCkgJSA4ID09IDEgdGhlbgogICAgICAgIGRlbGF5X3N3aXRjaCA9IG5vdCBkZWxheV9zd2l0Y2gKICAgIGVuZAoKICAgIGFhX2xvbC5tb3ZlbWVudGppdHRlcihjbWQpCgogICAgdGVtcF9maXgoc2VsZi5kZWx0YSwgY21kKQoKICAgIHNlbGYuY2hva2VkID0gY21kLmNob2tlZGNvbW1hbmRzCgogICAgbG9jYWwgc3RhdGUgPSBzdGF0ZTpnZXRfc3RhdGUobHAsIGNtZCkKCiAgICBzZWxmLnN0YXRlID0gc3RhdGUKCiAgICBsb2NhbCBidWlsZGVyID0gbWVudS5idWlsZGVyX2VsZW1lbnRzW3N0YXRlXQoKICAgIC0tdGhpcyBpcyBvbWVnYSBnaGV0dG8gcGxzLi4uZGFuaXNoIHRlY2ghIQoKICAgIGxvY2FsIHlhd19iYXNlID0gc2VsZi5tYW51YWxfc3RhdGUgPT0gMCBhbmQgImF0IHRhcmdldHMiIG9yICJsb2NhbCB2aWV3IgoKICAgIGxvY2FsIHlhdyA9ICIxODAiCgogICAgbG9jYWwgZGVzeW5jYm9keXlhdyA9IGVudGl0eS5nZXRfcHJvcChscCwgIm1fZmxQb3NlUGFyYW1ldGVyIiwgMTEpICogMTIwIC0gNjAKICAgIGxvY2FsIHNpZGUgPSBkZXN5bmNib2R5eWF3ID4gMCBhbmQgMSBvciAtMQoKICAgIGxvY2FsIGJvZHl5YXcgPSAiaml0dGVyIgogICAgbG9jYWwgeWF3aml0ID0gImNlbnRlciIKCiAgICBsb2NhbCB0ZWFtX251bSA9IGVudGl0eS5nZXRfcHJvcChscCwgIm1faVRlYW1OdW0iKQoKICAgIGxvY2FsIHRpY2tiYXNlZSA9IGVudGl0eS5nZXRfcHJvcChlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpLCAibV9uVGlja0Jhc2UiKQoKICAgIHRpY2tjb3VudCA9IHRpY2tjb3VudCArIDEKCiAgICBpZiB0aWNrY291bnQgPiA5IHRoZW4KICAgICAgICBkZWZfaW5kZXggPSBtYXRoLnJhbmRvbSgxLDIpCiAgICAgICAgdGlja2NvdW50ID0gMAogICAgZW5kCgogICAgLS1pZiBkZWZfaW5kZXggPT0gMSB0aGVuCiAgICAtLSAgICBjbWQuZm9yY2VfZGVmZW5zaXZlID0gY21kLmNvbW1hbmRfbnVtYmVyICUgNiB+PSAxCiAgIC0tIGVsc2UKICAgIC0tICAgIGNtZC5mb3JjZV9kZWZlbnNpdmUgPSBkZWZlbnNpdmUxICUgNSB+PSAzCiAgIC0tIGVuZAoKICAgIGlmIHVpLmdldChtZW51LmFhX2FkZG9ucykgPT0gImJ1aWxkZXIiIHRoZW4KCiAgICAgICAgaWYgZGVmZW5zaXZlMSAlIDMgPT0gMSB0aGVuCiAgICAgICAgICAgIHN3YXAgPSBub3Qgc3dhcAogICAgICAgIGVuZAoKICAgICAgICBsb2NhbCBtZSA9IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkKCiAgICAgICAgbG9jYWwgZW5lbXkyID0gY2xpZW50LmN1cnJlbnRfdGhyZWF0KCkKCiAgICAgICAgbG9jYWwgdmVsID0gZW50aXR5LmdldF9wcm9wKG1lLCAibV92ZWNWZWxvY2l0eSIpCiAgICAgICAgbG9jYWwgY291bnQgPSBnbG9iYWxzLnRpY2tjb3VudCgpCgogICAgICAgIGxvY2FsIGFsbG93X2Rlc3luYyA9IGNhbl9kZXN5bmMoY21kLCBtZSwgY291bnQsIHZlbCkKCiAgICAgICAgaWYgc2VsZi5tYW51YWxfc3RhdGUgPT0gMSBvciBzZWxmLm1hbnVhbF9zdGF0ZSA9PSAyIG9yIHNlbGYubWFudWFsX3N0YXRlID09IDMgdGhlbgogICAgICAgICAgICBpZiBzZWxmLm1hbnVhbF9zdGF0ZSA9PSAxIHRoZW4KICAgICAgICAgICAgICAgIHlhd19hZGQgPSAtOTAKICAgICAgICAgICAgZWxzZWlmIHNlbGYubWFudWFsX3N0YXRlID09IDIgdGhlbgogICAgICAgICAgICAgICAgeWF3X2FkZCA9IDkwCiAgICAgICAgICAgIGVsc2VpZiBzZWxmLm1hbnVhbF9zdGF0ZSA9PSAzIHRoZW4KICAgICAgICAgICAgICAgIHlhd19hZGQgPSAxODAKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2Jhc2UsIHlhd19iYXNlKQogICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1sxXSwgeWF3KQogICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1syXSwgeWF3X2FkZCkKICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfaml0dGVyWzFdLCAib2ZmIikKICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfaml0dGVyWzJdLCAwKQogICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzFdLCAic3RhdGljIikKICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5ib2R5X3lhd1syXSwgMTgwKQogICAgICAgIGVsc2VpZiB1aS5nZXQoYWRkb25zLmZyZWVzdGFuZGluZ19rZXkpIHRoZW4KICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfYmFzZSwgeWF3X2Jhc2UpCiAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzFdLCB5YXcpCiAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzJdLCAwKQogICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19qaXR0ZXJbMV0sICJvZmYiKQogICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19qaXR0ZXJbMl0sIDApCiAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMV0sICJzdGF0aWMiKQogICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzJdLCAxODApCiAgICAgICAgZWxzZWlmIHVpLmdldChyZWZlcmVuY2UuZmFrZV9kdWNrKSB0aGVuCiAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2Jhc2UsIHlhd19iYXNlKQogICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1sxXSwgeWF3KQogICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1syXSwgMCkKICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfaml0dGVyWzFdLCAib2ZmIikKICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfaml0dGVyWzJdLCAwKQogICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzFdLCAic3RhdGljIikKICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5ib2R5X3lhd1syXSwgMTgwKQogICAgICAgIGVsc2VpZiBzZWxmLnN0YXRlID09ICJmYWtlbGFnIiB0aGVuCiAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2Jhc2UsIHlhd19iYXNlKQogICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1sxXSwgeWF3KQogICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1syXSwgMTApCiAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2ppdHRlclsxXSwgIk9mZiIpCiAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2ppdHRlclsyXSwgNjUpCiAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMV0sICJKaXR0ZXIiKQogICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzJdLCAwKQogICAgICAgIGVsc2VpZiB0ZWFtX251bSA9PSAzIHRoZW4KICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5mcmVlc3RhbmRpbmdfYm9keV95YXcsIGZhbHNlKQogICAgICAgICAgICBpZiB1aS5nZXQoYnVpbGRlci55YXdfbW9kZSkgPT0gImFzeW5jIiBhbmQgbm90IGlzX2Zha2VfZHVja2luZyB0aGVuCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19iYXNlLCB5YXdfYmFzZSkKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzFdLCB5YXcpCiAgICAgICAgICAgICAgICBpZiBjbWQuY29tbWFuZF9udW1iZXIgJSB1aS5nZXQoYnVpbGRlci5kZWxheSkgPCAodWkuZ2V0KGJ1aWxkZXIuZGVsYXkpIC8gMikgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5ib2R5X3lhd1syXSwgLXVpLmdldChidWlsZGVyLmppdHRlcl92YWwpKQogICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1syXSwgbWF0aC5yYW5kb20odWkuZ2V0KGJ1aWxkZXIueWF3X2xlZnQpLCB1aS5nZXQoYnVpbGRlci55YXdfbGVmdCktMTEpKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGlmIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5ib2R5X3lhd1syXSwgdWkuZ2V0KGJ1aWxkZXIuaml0dGVyX3ZhbCkpCiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzJdLCBtYXRoLnJhbmRvbSh1aS5nZXQoYnVpbGRlci55YXdfcmlnaHQpLCB1aS5nZXQoYnVpbGRlci55YXdfcmlnaHQpLTExKSkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfaml0dGVyWzFdLCAiQ2VudGVyIikKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2ppdHRlclsyXSwgMCkKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMV0sICJTdGF0aWMiKQogICAgICAgICAgICBlbHNlaWYgdWkuZ2V0KGJ1aWxkZXIueWF3X21vZGUpID09ICJhZHZhbmNlZCIgdGhlbgogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfYmFzZSwgeWF3X2Jhc2UpCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzFdLCAiU3RhdGljIikKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzFdLCB5YXcpCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19qaXR0ZXJbMV0sICJPZmYiKQogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfaml0dGVyWzJdLCAwKQoKICAgICAgICAgICAgICAgIGlmIGNtZC5jb21tYW5kX251bWJlciAlIG1hdGgucmFuZG9tKDMsNikgPT0gMSB0aGVuCiAgICAgICAgICAgICAgICAgICAgcmVhZHkgPSB0cnVlCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgcmVhZHkgYW5kIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICByZWFkeSA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgaml0dGVyID0gbm90IGppdHRlcgogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMV0sICJTdGF0aWMiKQogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMl0sIGppdHRlciBhbmQgLTE4MCBvciAxODApCiAgICAgICAgICAgICAgICAgICAgaWYgaml0dGVyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUgPSB1aS5nZXQoYnVpbGRlci55YXdfbGVmdCkKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlID0gdWkuZ2V0KGJ1aWxkZXIueWF3X3JpZ2h0KQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1syXSwgY2FjaGUpCiAgICAgICAgICAgIGVsc2VpZiB1aS5nZXQoYnVpbGRlci55YXdfbW9kZSkgPT0gImFkdmFuY2VkKCspIiB0aGVuCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19iYXNlLCB5YXdfYmFzZSkKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMV0sICJTdGF0aWMiKQogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdbMV0sIHlhdykKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2ppdHRlclsxXSwgIk9mZiIpCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19qaXR0ZXJbMl0sIDApCgogICAgICAgICAgICAgICAgaWYgY21kLmNvbW1hbmRfbnVtYmVyICUgKDcrMSkgPT0gMSB0aGVuCiAgICAgICAgICAgICAgICAgICAgcmVhZHkgPSB0cnVlCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgcmVhZHkgYW5kIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICByZWFkeSA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgaml0dGVyID0gbm90IGppdHRlcgogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMV0sICJTdGF0aWMiKQogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMl0sIGppdHRlciBhbmQgLTE4MCBvciAxODApCiAgICAgICAgICAgICAgICAgICAgaWYgaml0dGVyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUgPSB1aS5nZXQoYnVpbGRlci55YXdfbGVmdCkKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlID0gdWkuZ2V0KGJ1aWxkZXIueWF3X3JpZ2h0KQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1syXSwgY2FjaGUpCiAgICAgICAgICAgIGVsc2VpZiB1aS5nZXQoYnVpbGRlci55YXdfbW9kZSkgPT0gImludGVydmFsIiB0aGVuCiAgICAgICAgICAgICAgICBpZiBob2xkX2NvdW50ZXIyID09IDAgYW5kIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAxIHRoZW4KICAgICAgICAgICAgICAgICAgICBjYWNoZSA9IHVpLmdldChidWlsZGVyLnlhd19yaWdodCkKICAgICAgICAgICAgICAgIGVsc2VpZiBob2xkX2NvdW50ZXIyID09IDEgYW5kIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAxIHRoZW4KICAgICAgICAgICAgICAgICAgICBjYWNoZSA9IHVpLmdldChidWlsZGVyLnlhd19sZWZ0KQogICAgICAgICAgICAgICAgZWxzZWlmIGhvbGRfY291bnRlcjIgPT0gMiBhbmQgY21kLmNob2tlZGNvbW1hbmRzID09IDEgdGhlbgogICAgICAgICAgICAgICAgICAgIGNhY2hlID0gdWkuZ2V0KGJ1aWxkZXIueWF3X2xlZnQpCiAgICAgICAgICAgICAgICBlbHNlaWYgaG9sZF9jb3VudGVyMiA9PSAzIGFuZCBjbWQuY2hva2VkY29tbWFuZHMgPT0gMSB0aGVuCiAgICAgICAgICAgICAgICAgICAgY2FjaGUgPSB1aS5nZXQoYnVpbGRlci55YXdfbGVmdCkKICAgICAgICAgICAgICAgIGVsc2VpZiBob2xkX2NvdW50ZXIyID09IDQgYW5kIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAxIHRoZW4KICAgICAgICAgICAgICAgICAgICBjYWNoZSA9IHVpLmdldChidWlsZGVyLnlhd19yaWdodCkKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1syXSwgdWkuZ2V0KGJ1aWxkZXIueWF3X3JpZ2h0KSkKICAgICAgICAgICAgICAgIGVsc2VpZiBob2xkX2NvdW50ZXIyID09IDUgYW5kIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAxIHRoZW4KICAgICAgICAgICAgICAgICAgICBjYWNoZSA9IHVpLmdldChidWlsZGVyLnlhd19sZWZ0KQogICAgICAgICAgICAgICAgZWxzZWlmIGhvbGRfY291bnRlcjIgPT0gNiBhbmQgY21kLmNob2tlZGNvbW1hbmRzID09IDEgdGhlbgogICAgICAgICAgICAgICAgICAgIGNhY2hlID0gdWkuZ2V0KGJ1aWxkZXIueWF3X3JpZ2h0KQogICAgICAgICAgICAgICAgZWxzZWlmIGhvbGRfY291bnRlcjIgPT0gNyBhbmQgY21kLmNob2tlZGNvbW1hbmRzID09IDEgdGhlbgogICAgICAgICAgICAgICAgICAgIGNhY2hlID0gdWkuZ2V0KGJ1aWxkZXIueWF3X3JpZ2h0KQogICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgY3VzdG9tX2Rlc3luYyhjbWQsIDIsIHRydWUsIGNhY2hlLCAwLCB1aS5nZXQoYnVpbGRlci5qaXR0ZXJfdmFsKSwgZ2V0X3ZlbG9jaXR5KGxwKSwgc3RhdGUpCiAgICAgICAgICAgIGVsc2VpZiB1aS5nZXQoYnVpbGRlci55YXdfbW9kZSkgPT0gImxpZ2h0IiB0aGVuCiAgICAgICAgICAgICAgICBjYWNoZSA9IGdsb2JhbHMudGlja2NvdW50KCkgJSAzID09IDAgYW5kIHVpLmdldChidWlsZGVyLnlhd19sZWZ0KSBvciB1aS5nZXQoYnVpbGRlci55YXdfcmlnaHQpCgogICAgICAgICAgICAgICAgY3VzdG9tX2Rlc3luYyhjbWQsIDAsIHRydWUsIGNhY2hlLCAwLCB1aS5nZXQoYnVpbGRlci5qaXR0ZXJfdmFsKSwgZ2V0X3ZlbG9jaXR5KGxwKSwgc3RhdGUpCiAgICAgICAgICAgIGVsc2VpZiB1aS5nZXQoYnVpbGRlci55YXdfbW9kZSkgPT0gImRlbGF5IiB0aGVuCiAgICAgICAgICAgICAgICBjYWNoZSA9IGRlbGF5X3N3aXRjaCBhbmQgdWkuZ2V0KGJ1aWxkZXIueWF3X2xlZnQpIG9yIHVpLmdldChidWlsZGVyLnlhd19yaWdodCkKICAgICAgICAgICAgICAgIGN1c3RvbV9kZXN5bmMoY21kLCAwLCB0cnVlLCBjYWNoZSwgMCwgdWkuZ2V0KGJ1aWxkZXIuaml0dGVyX3ZhbCksIGdldF92ZWxvY2l0eShscCksIHN0YXRlKQogICAgICAgICAgICBlbHNlaWYgdWkuZ2V0KGJ1aWxkZXIueWF3X21vZGUpID09ICJsIC8gciIgdGhlbgogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfYmFzZSwgeWF3X2Jhc2UpCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1sxXSwgeWF3KQogICAgICAgICAgICAgICAgaWYgc2lkZSA9PSAxIGFuZCBjbWQuY2hva2VkY29tbWFuZHMgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdbMl0sIHVpLmdldChidWlsZGVyLnlhd19sZWZ0KSkKICAgICAgICAgICAgICAgIGVsc2VpZiBzaWRlID09IC0xIGFuZCBjbWQuY2hva2VkY29tbWFuZHMgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdbMl0sIHVpLmdldChidWlsZGVyLnlhd19yaWdodCkpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2ppdHRlclsxXSwgIk9mZiIpCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19qaXR0ZXJbMl0sIDApCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzFdLCAiSml0dGVyIikKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMl0sIHVpLmdldChidWlsZGVyLmppdHRlcl92YWwpKQogICAgICAgICAgICBlbmQKICAgICAgICBlbHNlaWYgdGVhbV9udW0gPT0gMiBhbmQgdWkuZ2V0KGJ1aWxkZXIuZW5hYmxlX3N0YXRlX3QpIHRoZW4KICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5mcmVlc3RhbmRpbmdfYm9keV95YXcsIGZhbHNlKQogICAgICAgICAgICBpZiB1aS5nZXQoYnVpbGRlci55YXdfbW9kZV90KSA9PSAiYXN5bmMiIGFuZCBub3QgaXNfZmFrZV9kdWNraW5nIHRoZW4KICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2Jhc2UsIHlhd19iYXNlKQogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdbMV0sIHlhdykKICAgICAgICAgICAgICAgIGlmIGNtZC5jb21tYW5kX251bWJlciAlIHVpLmdldChidWlsZGVyLmRlbGF5X3QpIDwgKHVpLmdldChidWlsZGVyLmRlbGF5X3QpIC8gMikgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5ib2R5X3lhd1syXSwgLXVpLmdldChidWlsZGVyLmppdHRlcl92YWxfdCkpCiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzJdLCBtYXRoLnJhbmRvbSh1aS5nZXQoYnVpbGRlci55YXdfbGVmdF90KSwgdWkuZ2V0KGJ1aWxkZXIueWF3X2xlZnRfdCktMTEpKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGlmIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5ib2R5X3lhd1syXSwgdWkuZ2V0KGJ1aWxkZXIuaml0dGVyX3ZhbF90KSkKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdbMl0sIG1hdGgucmFuZG9tKHVpLmdldChidWlsZGVyLnlhd19yaWdodF90KSwgdWkuZ2V0KGJ1aWxkZXIueWF3X3JpZ2h0X3QpLTExKSkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfaml0dGVyWzFdLCAiQ2VudGVyIikKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2ppdHRlclsyXSwgMCkKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMV0sICJTdGF0aWMiKQogICAgICAgICAgICBlbHNlaWYgdWkuZ2V0KGJ1aWxkZXIueWF3X21vZGVfdCkgPT0gImFkdmFuY2VkIiB0aGVuCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19iYXNlLCB5YXdfYmFzZSkKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMV0sICJTdGF0aWMiKQogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdbMV0sIHlhdykKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2ppdHRlclsxXSwgIk9mZiIpCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19qaXR0ZXJbMl0sIDApCgogICAgICAgICAgICAgICAgaWYgY21kLmNvbW1hbmRfbnVtYmVyICUgbWF0aC5yYW5kb20oMyw2KSA9PSAxIHRoZW4KICAgICAgICAgICAgICAgICAgICByZWFkeSA9IHRydWUKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgIGlmIHJlYWR5IGFuZCBjbWQuY2hva2VkY29tbWFuZHMgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgcmVhZHkgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgIGppdHRlciA9IG5vdCBqaXR0ZXIKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzFdLCAiU3RhdGljIikKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzJdLCBqaXR0ZXIgYW5kIC0xODAgb3IgMTgwKQogICAgICAgICAgICAgICAgICAgIGlmIGppdHRlciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlID0gdWkuZ2V0KGJ1aWxkZXIueWF3X2xlZnRfdCkKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlID0gdWkuZ2V0KGJ1aWxkZXIueWF3X3JpZ2h0X3QpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzJdLCBjYWNoZSkKICAgICAgICAgICAgZWxzZWlmIHVpLmdldChidWlsZGVyLnlhd19tb2RlX3QpID09ICJhZHZhbmNlZCgrKSIgdGhlbgogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfYmFzZSwgeWF3X2Jhc2UpCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzFdLCAiU3RhdGljIikKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzFdLCB5YXcpCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19qaXR0ZXJbMV0sICJPZmYiKQogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfaml0dGVyWzJdLCAwKQoKICAgICAgICAgICAgICAgIGlmIGNtZC5jb21tYW5kX251bWJlciAlICg3KzEpID09IDEgdGhlbgogICAgICAgICAgICAgICAgICAgIHJlYWR5ID0gdHJ1ZQogICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgaWYgcmVhZHkgYW5kIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICByZWFkeSA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgaml0dGVyID0gbm90IGppdHRlcgogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMV0sICJTdGF0aWMiKQogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMl0sIGppdHRlciBhbmQgLTE4MCBvciAxODApCiAgICAgICAgICAgICAgICAgICAgaWYgaml0dGVyIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUgPSB1aS5nZXQoYnVpbGRlci55YXdfbGVmdF90KQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUgPSB1aS5nZXQoYnVpbGRlci55YXdfcmlnaHRfdCkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdbMl0sIGNhY2hlKQogICAgICAgICAgICBlbHNlaWYgdWkuZ2V0KGJ1aWxkZXIueWF3X21vZGVfdCkgPT0gImludGVydmFsIiB0aGVuCiAgICAgICAgICAgICAgICBpZiBob2xkX2NvdW50ZXIyID09IDAgYW5kIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAxIHRoZW4KICAgICAgICAgICAgICAgICAgICBjYWNoZSA9IHVpLmdldChidWlsZGVyLnlhd19yaWdodF90KQogICAgICAgICAgICAgICAgZWxzZWlmIGhvbGRfY291bnRlcjIgPT0gMSBhbmQgY21kLmNob2tlZGNvbW1hbmRzID09IDEgdGhlbgogICAgICAgICAgICAgICAgICAgIGNhY2hlID0gdWkuZ2V0KGJ1aWxkZXIueWF3X2xlZnRfdCkKICAgICAgICAgICAgICAgIGVsc2VpZiBob2xkX2NvdW50ZXIyID09IDIgYW5kIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAxIHRoZW4KICAgICAgICAgICAgICAgICAgICBjYWNoZSA9IHVpLmdldChidWlsZGVyLnlhd19sZWZ0X3QpCiAgICAgICAgICAgICAgICBlbHNlaWYgaG9sZF9jb3VudGVyMiA9PSAzIGFuZCBjbWQuY2hva2VkY29tbWFuZHMgPT0gMSB0aGVuCiAgICAgICAgICAgICAgICAgICAgY2FjaGUgPSB1aS5nZXQoYnVpbGRlci55YXdfbGVmdF90KQogICAgICAgICAgICAgICAgZWxzZWlmIGhvbGRfY291bnRlcjIgPT0gNCBhbmQgY21kLmNob2tlZGNvbW1hbmRzID09IDEgdGhlbgogICAgICAgICAgICAgICAgICAgIGNhY2hlID0gdWkuZ2V0KGJ1aWxkZXIueWF3X3JpZ2h0X3QpCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdbMl0sIHVpLmdldChidWlsZGVyLnlhd19yaWdodF90KSkKICAgICAgICAgICAgICAgIGVsc2VpZiBob2xkX2NvdW50ZXIyID09IDUgYW5kIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAxIHRoZW4KICAgICAgICAgICAgICAgICAgICBjYWNoZSA9IHVpLmdldChidWlsZGVyLnlhd19sZWZ0X3QpCiAgICAgICAgICAgICAgICBlbHNlaWYgaG9sZF9jb3VudGVyMiA9PSA2IGFuZCBjbWQuY2hva2VkY29tbWFuZHMgPT0gMSB0aGVuCiAgICAgICAgICAgICAgICAgICAgY2FjaGUgPSB1aS5nZXQoYnVpbGRlci55YXdfcmlnaHRfdCkKICAgICAgICAgICAgICAgIGVsc2VpZiBob2xkX2NvdW50ZXIyID09IDcgYW5kIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAxIHRoZW4KICAgICAgICAgICAgICAgICAgICBjYWNoZSA9IHVpLmdldChidWlsZGVyLnlhd19yaWdodF90KQogICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgY3VzdG9tX2Rlc3luYyhjbWQsIDIsIHRydWUsIGNhY2hlLCAwLCB1aS5nZXQoYnVpbGRlci5qaXR0ZXJfdmFsX3QpLCBnZXRfdmVsb2NpdHkobHApLCBzdGF0ZSkKICAgICAgICAgICAgZWxzZWlmIHVpLmdldChidWlsZGVyLnlhd19tb2RlX3QpID09ICJsaWdodCIgdGhlbgogICAgICAgICAgICAgICAgY2FjaGUgPSBnbG9iYWxzLnRpY2tjb3VudCgpICUgMyA9PSAwIGFuZCB1aS5nZXQoYnVpbGRlci55YXdfbGVmdF90KSBvciB1aS5nZXQoYnVpbGRlci55YXdfcmlnaHRfdCkKCiAgICAgICAgICAgICAgICBjdXN0b21fZGVzeW5jKGNtZCwgMCwgdHJ1ZSwgY2FjaGUsIDAsIHVpLmdldChidWlsZGVyLmppdHRlcl92YWxfdCksIGdldF92ZWxvY2l0eShscCksIHN0YXRlKQogICAgICAgICAgICBlbHNlaWYgdWkuZ2V0KGJ1aWxkZXIueWF3X21vZGVfdCkgPT0gImRlbGF5IiB0aGVuCiAgICAgICAgICAgICAgICBjYWNoZSA9IGRlbGF5X3N3aXRjaCBhbmQgdWkuZ2V0KGJ1aWxkZXIueWF3X2xlZnRfdCkgb3IgdWkuZ2V0KGJ1aWxkZXIueWF3X3JpZ2h0X3QpCiAgICAgICAgICAgICAgICBjdXN0b21fZGVzeW5jKGNtZCwgMCwgdHJ1ZSwgY2FjaGUsIDAsIHVpLmdldChidWlsZGVyLmppdHRlcl92YWxfdCksIGdldF92ZWxvY2l0eShscCksIHN0YXRlKQogICAgICAgICAgICBlbHNlaWYgdWkuZ2V0KGJ1aWxkZXIueWF3X21vZGVfdCkgPT0gImwgLyByIiB0aGVuCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19iYXNlLCB5YXdfYmFzZSkKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzFdLCB5YXcpCiAgICAgICAgICAgICAgICBpZiBzaWRlID09IDEgYW5kIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1syXSwgdWkuZ2V0KGJ1aWxkZXIueWF3X2xlZnRfdCkpCiAgICAgICAgICAgICAgICBlbHNlaWYgc2lkZSA9PSAtMSBhbmQgY21kLmNob2tlZGNvbW1hbmRzID09IDAgdGhlbgogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzJdLCB1aS5nZXQoYnVpbGRlci55YXdfcmlnaHRfdCkpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2ppdHRlclsxXSwgIk9mZiIpCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19qaXR0ZXJbMl0sIDApCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzFdLCAiSml0dGVyIikKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMl0sIHVpLmdldChidWlsZGVyLmppdHRlcl92YWxfdCkpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgbG9jYWwgZ2xvYmFsX2J1aWxkZXIgPSBtZW51LmJ1aWxkZXJfZWxlbWVudHNbImdsb2JhbCJdCiAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuZnJlZXN0YW5kaW5nX2JvZHlfeWF3LCBmYWxzZSkKICAgICAgICAgICAgaWYgdWkuZ2V0KGdsb2JhbF9idWlsZGVyLnlhd19tb2RlX3QpID09ICJhc3luYyIgYW5kIG5vdCBpc19mYWtlX2R1Y2tpbmcgdGhlbgogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfYmFzZSwgeWF3X2Jhc2UpCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1sxXSwgeWF3KQogICAgICAgICAgICAgICAgaWYgY21kLmNvbW1hbmRfbnVtYmVyICUgdWkuZ2V0KGdsb2JhbF9idWlsZGVyLmRlbGF5X3QpIDwgKHVpLmdldChnbG9iYWxfYnVpbGRlci5kZWxheV90KSAvIDIpIHRoZW4KICAgICAgICAgICAgICAgICAgICBpZiBjbWQuY2hva2VkY29tbWFuZHMgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMl0sIC11aS5nZXQoZ2xvYmFsX2J1aWxkZXIuaml0dGVyX3ZhbF90KSkKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdbMl0sIHVpLmdldChnbG9iYWxfYnVpbGRlci55YXdfbGVmdF90KSkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBpZiBjbWQuY2hva2VkY29tbWFuZHMgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMl0sIHVpLmdldChnbG9iYWxfYnVpbGRlci5qaXR0ZXJfdmFsX3QpKQogICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1syXSwgdWkuZ2V0KGdsb2JhbF9idWlsZGVyLnlhd19yaWdodF90KSkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfaml0dGVyWzFdLCAiQ2VudGVyIikKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2ppdHRlclsyXSwgMCkKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMV0sICJTdGF0aWMiKQogICAgICAgICAgICBlbHNlaWYgdWkuZ2V0KGdsb2JhbF9idWlsZGVyLnlhd19tb2RlX3QpID09ICJhZHZhbmNlZCIgdGhlbgogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfYmFzZSwgeWF3X2Jhc2UpCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzFdLCAiU3RhdGljIikKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzFdLCB5YXcpCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19qaXR0ZXJbMV0sICJPZmYiKQogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfaml0dGVyWzJdLCAwKQoKICAgICAgICAgICAgICAgIGlmIGNtZC5jb21tYW5kX251bWJlciAlIG1hdGgucmFuZG9tKDMsNikgPT0gMSB0aGVuCiAgICAgICAgICAgICAgICAgICAgcmVhZHkgPSB0cnVlCiAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICBpZiByZWFkeSBhbmQgY21kLmNob2tlZGNvbW1hbmRzID09IDAgdGhlbgogICAgICAgICAgICAgICAgICAgIHJlYWR5ID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICBqaXR0ZXIgPSBub3Qgaml0dGVyCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5ib2R5X3lhd1sxXSwgIlN0YXRpYyIpCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5ib2R5X3lhd1syXSwgaml0dGVyIGFuZCAtMTgwIG9yIDE4MCkKICAgICAgICAgICAgICAgICAgICBpZiBqaXR0ZXIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBjYWNoZSA9IHVpLmdldChnbG9iYWxfYnVpbGRlci55YXdfbGVmdF90KQogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGUgPSB1aS5nZXQoZ2xvYmFsX2J1aWxkZXIueWF3X3JpZ2h0X3QpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzJdLCBjYWNoZSkKICAgICAgICAgICAgZWxzZWlmIHVpLmdldChnbG9iYWxfYnVpbGRlci55YXdfbW9kZV90KSA9PSAiYWR2YW5jZWQoKykiIHRoZW4KICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2Jhc2UsIHlhd19iYXNlKQogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5ib2R5X3lhd1sxXSwgIlN0YXRpYyIpCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1sxXSwgeWF3KQogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfaml0dGVyWzFdLCAiT2ZmIikKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2ppdHRlclsyXSwgMCkKCiAgICAgICAgICAgICAgICBpZiBjbWQuY29tbWFuZF9udW1iZXIgJSAoNysxKSA9PSAxIHRoZW4KICAgICAgICAgICAgICAgICAgICByZWFkeSA9IHRydWUKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgIGlmIHJlYWR5IGFuZCBjbWQuY2hva2VkY29tbWFuZHMgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgcmVhZHkgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgIGppdHRlciA9IG5vdCBqaXR0ZXIKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzFdLCAiU3RhdGljIikKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzJdLCBqaXR0ZXIgYW5kIC0xODAgb3IgMTgwKQogICAgICAgICAgICAgICAgICAgIGlmIGppdHRlciB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlID0gdWkuZ2V0KGdsb2JhbF9idWlsZGVyLnlhd19sZWZ0X3QpCiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICBjYWNoZSA9IHVpLmdldChnbG9iYWxfYnVpbGRlci55YXdfcmlnaHRfdCkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdbMl0sIGNhY2hlKQogICAgICAgICAgICBlbHNlaWYgdWkuZ2V0KGdsb2JhbF9idWlsZGVyLnlhd19tb2RlX3QpID09ICJsaWdodCIgdGhlbgogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfYmFzZSwgeWF3X2Jhc2UpCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1sxXSwgeWF3KQogICAgICAgICAgICAgICAgaWYgZ2xvYmFscy50aWNrY291bnQoKSAlIDMgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdbMl0sIHVpLmdldChnbG9iYWxfYnVpbGRlci55YXdfbGVmdF90KSkKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1syXSwgdWkuZ2V0KGdsb2JhbF9idWlsZGVyLnlhd19yaWdodF90KSkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfaml0dGVyWzFdLCAiT2ZmIikKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3X2ppdHRlclsyXSwgMCkKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UuYm9keV95YXdbMV0sICJKaXR0ZXIiKQogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5ib2R5X3lhd1syXSwgdWkuZ2V0KGdsb2JhbF9idWlsZGVyLmppdHRlcl92YWxfdCkpCiAgICAgICAgICAgIGVsc2VpZiB1aS5nZXQoZ2xvYmFsX2J1aWxkZXIueWF3X21vZGVfdCkgPT0gImwgLyByIiB0aGVuCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19iYXNlLCB5YXdfYmFzZSkKICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzFdLCB5YXcpCiAgICAgICAgICAgICAgICBpZiBzd2FwIHRoZW4KICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd1syXSwgdWkuZ2V0KGdsb2JhbF9idWlsZGVyLnlhd19sZWZ0X3QpKQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZlcmVuY2UueWF3WzJdLCB1aS5nZXQoZ2xvYmFsX2J1aWxkZXIueWF3X3JpZ2h0X3QpKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLnlhd19qaXR0ZXJbMV0sICJPZmYiKQogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS55YXdfaml0dGVyWzJdLCAwKQogICAgICAgICAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5ib2R5X3lhd1sxXSwgIkppdHRlciIpCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmJvZHlfeWF3WzJdLCB1aS5nZXQoZ2xvYmFsX2J1aWxkZXIuaml0dGVyX3ZhbF90KSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpmdW5jdGlvbiBhYV9sb2w6b25fc2hvdCgpCiAgICBpZiB1aS5nZXQocmVmZXJlbmNlLm9uX3Nob3RfYWFbMV0pIGFuZCB1aS5nZXQocmVmZXJlbmNlLm9uX3Nob3RfYWFbMl0pIGFuZCBub3QgdWkuZ2V0KHJlZmVyZW5jZS5mYWtlX2R1Y2spIHRoZW4KICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmZsX2xpbWl0LCAxKQogICAgZWxzZWlmIHVpLmdldChyZWZlcmVuY2UuZmFrZV9kdWNrKSB0aGVuCiAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5mbF9saW1pdCwgMTMpCiAgICBlbHNlCiAgICAgICAgdWkuc2V0KHJlZmVyZW5jZS5mbF9saW1pdCwgdWkuZ2V0KG1lbnUuZmxfbGltaXQpKQogICAgZW5kCmVuZAoKcmVnaXN0ZXIocHJvdGVjdGVkWzRdLCBmdW5jdGlvbiAoKSBhYV9sb2w6b25fc2hvdCgpIGVuZCkKCmZ1bmN0aW9uIGFhX2xvbDpydW4oY21kKQogICAgbG9jYWwgbHAgPSBlbnRpdHlbcHJvdGVjdGVkWzddXSgpCgogICAgc2VsZi5kZWx0YSA9IG1hdGgubWF4KC02MCwgbWF0aC5taW4oNjAsIG1hdGguZmxvb3IoKGVudGl0eS5nZXRfcHJvcChlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpLCJtX2ZsUG9zZVBhcmFtZXRlciIsIDExKSBvciAwKSoxMjAtNjArMC41KSkpCiAgICBpZiBzZWxmLmRlbHRhID4gMCBhbmQgc2VsZi5kZWx0YSA+IDYwIHRoZW4gc2VsZi5kZWx0YSA9IDYwIGVuZAogICAgaWYgc2VsZi5kZWx0YSA8IDAgYW5kIHNlbGYuZGVsdGEgPCAtNjAgdGhlbiBzZWxmLmRlbHRhID0gLTYwIGVuZAoKICAgIHNlbGY6YWEobHAsIGNtZCkKICAgIC0tc2VsZjpicnV0ZWZvcmNlKGNtZCkKCiAgICBsb2NhbCBpc19kdCA9IHVpLmdldChyZWZlcmVuY2UuZHRbMV0pIGFuZCB1aS5nZXQocmVmZXJlbmNlLmR0WzJdKQoKICAgIGxvY2FsIGluX2FpciA9IHN0YXRlOmluX2FpcihscCkgCiAgICAKICAgIC0tZGVmZW5zaXZlX2luZGljYXRvcigpCmVuZAoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygnc2V0dXBfY29tbWFuZCcsIGZ1bmN0aW9uKGNtZCkKICAgIGFhX2xvbDpydW4oY21kKQplbmQpCgpsb2NhbCBob3RrZXlzID0gewoJbWFudWFsX2xhc3RfcHJlc3NlZCA9IGdsb2JhbHMucmVhbHRpbWUoKQp9CgpmdW5jdGlvbiBob3RrZXlzOnJ1bihjbWQpCgogICAgbG9jYWwgbHAgPSBlbnRpdHlbcHJvdGVjdGVkWzddXSgpCgogICAgbG9jYWwgZnJlZXN0YW5kaW5nID0gdWkuZ2V0KGFkZG9ucy5mcmVlc3RhbmRpbmdfa2V5KQoKICAgIGxvY2FsIGRpc2FibGVycyA9IHVpLmdldChhZGRvbnMuZnJlZXN0YW5kaW5nX2Rpc2FibGVycykKCiAgICBsb2NhbCBpbl9haXIgPSBzdGF0ZTppbl9haXIobHApCiAgICBsb2NhbCBpc19tb3ZpbmcgPSBzdGF0ZTppc19tb3ZpbmcobHApCiAgICBsb2NhbCBpc19jcm91Y2hpbmcgPSBzdGF0ZTppc19jcm91Y2hpbmcobHApCiAgICBsb2NhbCBpc19zbG93d2Fsa2luZyA9IHVpLmdldChyZWZlcmVuY2Uuc2xvd19tb3Rpb25bMV0pIGFuZCB1aS5nZXQocmVmZXJlbmNlLnNsb3dfbW90aW9uWzJdKQogICAgbG9jYWwgaXNfZmFrZV9kdWNraW5nID0gdWkuZ2V0KHJlZmVyZW5jZS5mYWtlX2R1Y2spCgogICAgaWYgaXNfbW92aW5nIGFuZCBub3QgaXNfY3JvdWNoaW5nIGFuZCBjb250YWlucyhkaXNhYmxlcnMsICJtb3ZpbmciKSBhbmQgbm90IGluX2FpciBhbmQgc2VsZi5tYW51YWxfc3RhdGUgPT0gMCB0aGVuCiAgICAgICAgZnJlZXN0YW5kaW5nID0gZmFsc2UKICAgIGVuZAoKICAgIGlmIG5vdCBpc19tb3ZpbmcgYW5kIG5vdCBpc19jcm91Y2hpbmcgYW5kIG5vdCBpbl9haXIgYW5kIGNvbnRhaW5zKGRpc2FibGVycywgInN0YW5kaW5nIikgYW5kIHNlbGYubWFudWFsX3N0YXRlID09IDAgdGhlbgogICAgICAgIGZyZWVzdGFuZGluZyA9IGZhbHNlCiAgICBlbmQKCiAgICBpZiBpbl9haXIgYW5kIGNvbnRhaW5zKGRpc2FibGVycywgImluIGFpciIpIHRoZW4KICAgICAgICBmcmVlc3RhbmRpbmcgPSBmYWxzZQogICAgZW5kCgogICAgaWYgaXNfY3JvdWNoaW5nIGFuZCBub3QgaW5fYWlyIGFuZCBjb250YWlucyhkaXNhYmxlcnMsICJjcm91Y2hpbmciKSBhbmQgbm90IGlzX2Zha2VfZHVja2luZyBhbmQgc2VsZi5tYW51YWxfc3RhdGUgPT0gMCB0aGVuCiAgICAgICAgZnJlZXN0YW5kaW5nID0gZmFsc2UKICAgIGVuZAoKICAgIGlmIGlzX2Zha2VfZHVja2luZyBhbmQgY29udGFpbnMoZGlzYWJsZXJzLCAiZmFrZSBkdWNrIikgYW5kIHNlbGYubWFudWFsX3N0YXRlID09IDAgdGhlbgogICAgICAgIGZyZWVzdGFuZGluZyA9IGZhbHNlCiAgICBlbmQKCiAgICBpZiBpc19zbG93d2Fsa2luZyBhbmQgY29udGFpbnMoZGlzYWJsZXJzLCAic2xvd3dhbGtpbmciKSBhbmQgc2VsZi5tYW51YWxfc3RhdGUgPT0gMCB0aGVuCiAgICAgICAgZnJlZXN0YW5kaW5nID0gZmFsc2UKICAgIGVuZAoKICAgIGlmIGFhX2xvbC5tYW51YWxfc3RhdGUgPT0gMSBvciBhYV9sb2wubWFudWFsX3N0YXRlID09IDIgb3IgYWFfbG9sLm1hbnVhbF9zdGF0ZSA9PSAzIHRoZW4KICAgICAgICBmcmVlc3RhbmRpbmcgPSBmYWxzZQogICAgICAgIHVpLnNldChyZWZlcmVuY2UuZnJlZXN0YW5kaW5nWzJdLCBmYWxzZSkKICAgIGVsc2UKICAgICAgICB1aS5zZXQocmVmZXJlbmNlLmZyZWVzdGFuZGluZ1syXSwgdHJ1ZSkKICAgIGVuZAoKICAgIHVpLnNldChyZWZlcmVuY2UuZnJlZXN0YW5kaW5nWzFdLCBmcmVlc3RhbmRpbmcgYW5kIHRydWUgb3IgZmFsc2UpCgoJbG9jYWwgZWRnZV95YXcgPSB1aS5nZXQoYWRkb25zLmVkZ2VfeWF3X2tleSkKCgl1aS5zZXQocmVmZXJlbmNlLmVkZ2VfeWF3LCBlZGdlX3lhdykKCgl1aS5zZXQoYWRkb25zLm1hbnVhbF9sZWZ0X2tleSwgIm9uIGhvdGtleSIpCgl1aS5zZXQoYWRkb25zLm1hbnVhbF9yaWdodF9rZXksICJvbiBob3RrZXkiKQoJdWkuc2V0KGFkZG9ucy5tYW51YWxfZm9yd2FyZF9rZXksICJvbiBob3RrZXkiKQoKCWxvY2FsIGN1cnRpbWUgPSBnbG9iYWxzLnJlYWx0aW1lKCkKCglpZiBzZWxmLm1hbnVhbF9sYXN0X3ByZXNzZWQgKyAwLjIgPiBjdXJ0aW1lIHRoZW4gcmV0dXJuIGVuZAoKCWlmIHVpLmdldChhZGRvbnMubWFudWFsX2xlZnRfa2V5KSBhbmQgYWFfbG9sLm1hbnVhbF9zdGF0ZSB+PSAxIHRoZW4KCQlhYV9sb2wubWFudWFsX3N0YXRlID0gMQoJCXNlbGYubWFudWFsX2xhc3RfcHJlc3NlZCA9IGN1cnRpbWUKCWVsc2VpZiB1aS5nZXQoYWRkb25zLm1hbnVhbF9yaWdodF9rZXkpIGFuZCBhYV9sb2wubWFudWFsX3N0YXRlIH49IDIgdGhlbgoJCWFhX2xvbC5tYW51YWxfc3RhdGUgPSAyCgkJc2VsZi5tYW51YWxfbGFzdF9wcmVzc2VkID0gY3VydGltZQoJZWxzZWlmIHVpLmdldChhZGRvbnMubWFudWFsX2ZvcndhcmRfa2V5KSBhbmQgYWFfbG9sLm1hbnVhbF9zdGF0ZSB+PSAzIHRoZW4KCQlhYV9sb2wubWFudWFsX3N0YXRlID0gMwoJCXNlbGYubWFudWFsX2xhc3RfcHJlc3NlZCA9IGN1cnRpbWUKCWVsc2VpZiB1aS5nZXQoYWRkb25zLm1hbnVhbF9sZWZ0X2tleSkgb3IgdWkuZ2V0KGFkZG9ucy5tYW51YWxfcmlnaHRfa2V5KSBvciB1aS5nZXQoYWRkb25zLm1hbnVhbF9mb3J3YXJkX2tleSkgdGhlbgoJCWFhX2xvbC5tYW51YWxfc3RhdGUgPSAwCgkJc2VsZi5tYW51YWxfbGFzdF9wcmVzc2VkID0gY3VydGltZQoJZW5kCmVuZAoKCnJlZ2lzdGVyKHByb3RlY3RlZFs0XSwgZnVuY3Rpb24gKGNtZCkgaG90a2V5czpydW4oY21kKSBlbmQpCgpsb2NhbCBhbmltYXRpb25zID0ge30KCmZ1bmN0aW9uIGFuaW1hdGlvbnM6c3RhdGljX2xlZ3MoZW50KQoJbG9jYWwgaW5fYWlyID0gc3RhdGU6aW5fYWlyKGVudCkKCWlmIG5vdCBpbl9haXIgdGhlbiByZXR1cm4gZW5kCgllbnRpdHkuc2V0X3Byb3AoZW50LCAibV9mbFBvc2VQYXJhbWV0ZXIiLCAxLCA2KQplbmQKCmZ1bmN0aW9uIGFuaW1hdGlvbnM6cnVuKCkKCWxvY2FsIHBsYXllciA9IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkKCiAgICAtLXNlbGY6bGVnX2Z1Y2tlcihwbGF5ZXIpCgoJLS1pZiB1aS5nZXQoZW5hYmxlX2xlZ3MpIHRoZW4KCQktLXNlbGY6c3RhdGljX2xlZ3MocGxheWVyKQoJLS1lbmQKZW5kCgpyZWdpc3RlcigicHJlX3JlbmRlciIsIGZ1bmN0aW9uICgpIGFuaW1hdGlvbnM6cnVuKCkgZW5kKQoKbG9jYWwgYW5pbWF0aW9uID0ge30KCmZ1bmN0aW9uIGFuaW1hdGlvbjpuZXcoeCwgdmFsdWUsIHRpbWUpCiAgICBpZiB0aW1lID09IG5pbCB0aGVuCiAgICAgICAgdGltZSA9IDAuMDk1OwogICAgZW5kCgogICAgdGltZSA9IHRpbWUgKiAoZ2xvYmFscy5mcmFtZXRpbWUoKSAqIDE3NSk7CgogICAgcmV0dXJuIGxlcnAoeCwgdmFsdWUsIHRpbWUpOwplbmQKCmxvY2FsIHd0MSA9IDAKbG9jYWwgd3QyID0gMgoKbG9jYWwgaGVscGVycyA9IHsKICAgIGNvbG9yZWRfc2luZ2xlX3RleHQgPSBmdW5jdGlvbihyMSwgZzEsIGIxLCBhMSwgdGV4dCwgcjIsIGcyLCBiMiwgYTIpCiAgICAgICAgbG9jYWwgb3V0cHV0ID0gJycKCiAgICAgICAgb3V0cHV0ID0gKCdcYSUwMnglMDJ4JTAyeCUwMnglc1xhJTAyeCUwMnglMDJ4JTAyeCcpOmZvcm1hdChyMSwgZzEsIGIxLCBhMSwgdGV4dCwgcjIsIGcyLCBiMiwgYTIpCgogICAgICAgIHJldHVybiBvdXRwdXQKICAgIGVuZAp9CgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCdwYWludCcsIGZ1bmN0aW9uKCkKCiAgICBsb2NhbCByLCBnLCBiLCBhID0gdWkuZ2V0KG1lbnUuY29sb3IzKQoKICAgIGxvY2FsIHgsIGhlaWdodCA9IGNsaWVudC5zY3JlZW5fc2l6ZSgpCgogICAgbG9jYWwgZHBpX3NjYWxlID0gbmlsCgogICAgbG9jYWwgZm9udCA9ICcnCgogICAgbG9jYWwgdGV4dCA9ICcnCgogICAgbG9jYWwgb2Zmc2V0LCBoID0gMTIsIG1hdGguZmxvb3IoMjEpCgogICAgbG9jYWwgaCA9IGggKyAzCgogICAgbG9jYWwgbHVhX25hbWUgPSAnYW1uZXNpYS5sb2wgWycuLmJ1aWxkLi4nXScKICAgIGxvY2FsIHVzZXJuYW1lID0gdXNlcm5hbWUKCiAgICB3dDIgPSBsZXJwKHd0MiwgMjU1LCBnbG9iYWxzLmZyYW1ldGltZSgpICogMikKCiAgICBsb2NhbCBuYW1lX3R4dCA9IGhlbHBlcnMuY29sb3JlZF9zaW5nbGVfdGV4dCggciwgZywgYiwgMjU1LCBsdWFfbmFtZSwgMjU1LCAyNTUsIDI1NSwgMjU1ICkKICAgIGxvY2FsIGxhdGVuY3kgPSBjbGllbnQubGF0ZW5jeSgpICogMTAwMAogICAgbG9jYWwgbGF0ZW5jeXRleHQgPSAoJyVkJyk6Zm9ybWF0KGxhdGVuY3kpCiAgICBsb2NhbCBsYXRlbmN5X3RleHQgPSBoZWxwZXJzLmNvbG9yZWRfc2luZ2xlX3RleHQoIHIsIGcsIGIsIDI1NSwgbGF0ZW5jeXRleHQsIDI1NSwgMjU1LCAyNTUsIDI1NSApCgogICAgbG9jYWwgc3lzX3RpbWUgPSB7IGNsaWVudC5zeXN0ZW1fdGltZSgpIH0KICAgIGxvY2FsIGFjdHVhbF90aW1lID0gKCclMDJkOiUwMmQnKTpmb3JtYXQoc3lzX3RpbWVbMV0gJSAxMiwgc3lzX3RpbWVbMl0pCiAgICBsb2NhbCBhY3R1YWxfdGltZV90ZXh0ID0gaGVscGVycy5jb2xvcmVkX3NpbmdsZV90ZXh0KCByLCBnLCBiLCAyNTUsIGFjdHVhbF90aW1lLCAyNTUsIDI1NSwgMjU1LCAyNTUgKQogICAgbG9jYWwgdGltZV9mb3JtYXQgPSBzeXNfdGltZVsxXSA+IDEyIGFuZCAncG0nIG9yICdhbScKCiAgICB0ZXh0ID0gKCclcyAgLyAlcyAgJXMgbXMgJXMgJXMnKTpmb3JtYXQobmFtZV90eHQsIHVzZXJuYW1lLCBsYXRlbmN5X3RleHQsIGFjdHVhbF90aW1lX3RleHQsIHRpbWVfZm9ybWF0KQoKICAgIGxvY2FsIHRleHRfc2l6ZSA9IHsgcmVuZGVyZXIubWVhc3VyZV90ZXh0KGZvbnQsIHRleHQpIH0KICAgIGxvY2FsIHcgPSB0ZXh0X3NpemVbMV0gKyA3ICsgNwoKICAgIGlmIHVpLmdldChhZGRvbnMuZW5hYmxlX3Zpc3VhbHMpIHRoZW4KCQl3dDEgPSBsZXJwKHd0MSwgMjU1LCBnbG9iYWxzLmZyYW1ldGltZSgpICogMSkKCiAgICAgICAgUmVuZGVyX2VuZ2luZS5wYW5kb3JhX3JlY3RhbmdsZSh4IC0gdyAtIG9mZnNldCwgb2Zmc2V0LCB3LCBoLCA0MCwgNDAsIDQwLCB3dDEsIDAsIDAsIDAsIHd0MSwgMTUsIDE1LCAxNSwgd3QxLCByLCBnLCBiLCAxMywgMywgdHJ1ZSkKCiAgICAgICAgcmVuZGVyZXIudGV4dCh4IC0gdyAvIDIgLSBvZmZzZXQsIG9mZnNldCArIGggLyAyLCAyNTUsIDI1NSwgMjU1LCB3dDEsICdjJyAuLiBmb250LCBuaWwsIHRleHQpCiAgICBlbHNlaWYgbm90IHVpLmdldChhZGRvbnMuZW5hYmxlX3Zpc3VhbHMpIHRoZW4KICAgICAgICB3dDIgPSBsZXJwKHd0MiwgMCwgZ2xvYmFscy5mcmFtZXRpbWUoKSAqIDIpCgkJd3QxID0gbGVycCh3dDEsIDAsIGdsb2JhbHMuZnJhbWV0aW1lKCkgKiAxKQoKICAgICAgICByZW5kZXJlcltwcm90ZWN0ZWRbMTBdXSh4IC8gMiAtIDcwLCBoZWlnaHQgLSAyMiwgMjU1LCAyNTUsIDI1NSwgMTU1LCAiIiwgbmlsLCAiZW5oYW5jZWQgYnkgYW1uZXNpYS5sb2wiLi5ncmFkaWVudF90ZXh0X2FuaW0oIlthYzEzMF0iLCAwLDAsMCwxNTUsIHIsZyxiLDE1NSwgMi4yLCAwICkpCiAgICBlbmQKZW5kKQoKbG9jYWwgeCx5ID0gY2xpZW50LnNjcmVlbl9zaXplKCkKbG9jYWwgd2lkdGgsIGhlaWdodCA9IGNsaWVudC5zY3JlZW5fc2l6ZSgpCmxvY2FsIGNlbnRlcl93aWR0aCA9IHdpZHRoLzIKbG9jYWwgY2VudGVyX2hlaWdodCA9IGhlaWdodC8yCgpsb2NhbCBmdW5jdGlvbiBsZXJwIChzdGFydCwgdmVuZCwgdGltZSkKICAgIHJldHVybiBzdGFydCArICh2ZW5kIC0gc3RhcnQpICogdGltZQplbmQKCmxvY2FsIGFtbmVzaWFfbGVycCA9IDAKbG9jYWwgc3BlZWRfbW9kID0gdHJ1ZQoKbG9jYWwgZnVuY3Rpb24gZmFkZV9jb2woY29sMSwgY29sMiwgc3BlZWQpCiAgICBsb2NhbCByID0gbWF0aC5mbG9vcihjb2wxLnIgKyAoY29sMi5yIC0gY29sMS5yKSAqIHNwZWVkKQogICAgbG9jYWwgZyA9IG1hdGguZmxvb3IoY29sMS5nICsgKGNvbDIuZyAtIGNvbDEuZykgKiBzcGVlZCkKICAgIGxvY2FsIGIgPSBtYXRoLmZsb29yKGNvbDEuYiArIChjb2wyLmIgLSBjb2wxLmIpICogc3BlZWQpCiAgICBsb2NhbCBhID0gbWF0aC5mbG9vcihjb2wxLmEgKyAoY29sMi5hIC0gY29sMS5hKSAqIHNwZWVkKQoKICAgIHJldHVybiB7IHIgPSByLCBnID0gZywgYiA9IGIsIGEgPSBhIH0KZW5kCgpsb2NhbCBmdW5jdGlvbiB0b19oZXgociwgZywgYiwgYSkKICAgIHJldHVybiBzdHJpbmcuZm9ybWF0KCIlMDJ4JTAyeCUwMnglMDJ4IiwgciwgZywgYiwgYSkKZW5kCgpsb2NhbCBlYXNlID0gcmVxdWlyZSAiZ2FtZXNlbnNlL2Vhc2luZyIKbG9jYWwgYWEgPSByZXF1aXJlICJnYW1lc2Vuc2UvYW50aWFpbV9mdW5jcyIKCmxvY2FsIHN0YXRlX3NpemVfdCA9IDAKbG9jYWwgYW1uZXNpYV9hID0gMAoKZnVuY3Rpb24gcHVsc2F0ZShzcGVlZCkKICAgIHJldHVybiBtYXRoLnNpbihtYXRoLmFicygtbWF0aC5waSArIChnbG9iYWxzLmN1cnRpbWUoKSAqIHNwZWVkKSAlIChtYXRoLnBpICogMikpKSAqIDI1NQplbmQKCmxvY2FsIGdyYW1fY3JlYXRlID0gZnVuY3Rpb24odmFsdWUsIGNvdW50KSBsb2NhbCBncmFtID0geyB9OyBmb3IgaT0xLCBjb3VudCBkbyBncmFtW2ldID0gdmFsdWU7IGVuZCByZXR1cm4gZ3JhbTsgZW5kCgpsb2NhbCB2YWx1ZSA9IGdyYW1fY3JlYXRlKDAsNykKCmxvY2FsIHRlc3RfcG9zX3kgPSAwCgpsb2NhbCB2aXN1YWxzID0gewogICAgaW5kaWNhdG9ycyA9IHsKICAgICAgICBjaGFyZ2UgPSAwLAogICAgICAgIGNoYXJnZV9jb2wgPSB7IHIgPSAyNTUsIGcgPSAyNTUsIGIgPSAyNTUsIGEgPSAyNTUgfSwKICAgIH0sCiAgICBzaXplID0gMCwKfQoKbG9jYWwgaW5kaWNhdG9yc190YiA9IHt9CgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCdpbmRpY2F0b3InLCBmdW5jdGlvbihpbmRpY2F0b3IpCiAgICBpZiBpbmRpY2F0b3IudGV4dCA9PSAiRFQiIHRoZW4KICAgICAgICBkYXRhLmR0X2NoYXJnZWQgPSAoaW5kaWNhdG9yLnIgPT0gMjU1IGFuZCBpbmRpY2F0b3IuZyA9PSAyNTUgYW5kIGluZGljYXRvci5iID09IDI1NSkKICAgIGVuZAogICAgaW5kaWNhdG9yc190YlsjaW5kaWNhdG9yc190YiArIDFdID0gaW5kaWNhdG9yCmVuZCkKCmxvY2FsIGR0X2VuYWJsZSwgZHRfaG90a2V5ID0gdWkucmVmZXJlbmNlKCJSQUdFIiwgImFpbWJvdCIsICJEb3VibGUgdGFwIikKCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soJ3BhaW50X3VpJywgZnVuY3Rpb24oKQogICAgbG9jYWwgaCA9IHNlbGVjdCgyLCBjbGllbnQuc2NyZWVuX3NpemUoKSkKICAgIAogICAgbG9jYWwgc3RhcnRpbmcgPSBoIC0gMzUwCgogICAgZm9yIGluZGV4LCBpbmRpY2F0b3IgaW4gcGFpcnMoaW5kaWNhdG9yc190YikgZG8gaW5kZXggPSBpbmRleCAtIDEgLS0gdGhpcyBpcyBob3cgeW91IGZpeCBsdWEgdGFibGVzIGxvbAogICAgICAgIGxvY2FsIHdpZHRoLCBoZWlnaHQgPSByZW5kZXJlci5tZWFzdXJlX3RleHQoJ2QrJywgaW5kaWNhdG9yLnRleHQpCiAgICAgICAgbG9jYWwgb2Zmc2V0ID0gaW5kZXggKiAoaGVpZ2h0ICsgOCkKCiAgICAgICAgbG9jYWwgZ3JhZGllbnRfd2lkdGggPSBtYXRoLmZsb29yKHdpZHRoIC8gMikKICAgICAgICAKICAgICAgICBsb2NhbCB5ID0gc3RhcnRpbmcgLSBvZmZzZXQKCiAgICAgICAgcmVuZGVyZXIuZ3JhZGllbnQoMTAgICAgICAgICAgICAgICAgICwgeSwgZ3JhZGllbnRfd2lkdGgsIGhlaWdodCArIDQsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDUwLCB0cnVlKQogICAgICAgIHJlbmRlcmVyLmdyYWRpZW50KDEwICsgZ3JhZGllbnRfd2lkdGgsIHksIGdyYWRpZW50X3dpZHRoLCBoZWlnaHQgKyA0LCAwLCAwLCAwLCA1MCwgMCwgMCwgMCwgMCwgdHJ1ZSkKICAgICAgICByZW5kZXJlci50ZXh0KDIwLCB5ICsgMiwgaW5kaWNhdG9yLnIsIGluZGljYXRvci5nLCBpbmRpY2F0b3IuYiwgaW5kaWNhdG9yLmEsICdkKycsIDAsIGluZGljYXRvci50ZXh0KQogICAgZW5kCgogICAgaW5kaWNhdG9yc190YiA9IHt9CmVuZCkKCmxvY2FsIGNoYXJnZSA9IGZhbHNlCmxvY2FsIGRhc2hfcG9zID0gMApsb2NhbCBkYXNoX3BvczIgPSAwCmxvY2FsIGR0X3NpemUgPSAwCgpmdW5jdGlvbiB2aXN1YWxzOmRyYXdfY2VudGVyMigpCiAgICBsb2NhbCBsb2NhbF9wbGF5ZXIgPSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpCiAgICBpZiBub3QgZW50aXR5LmlzX2FsaXZlKGxvY2FsX3BsYXllcikgdGhlbiByZXR1cm4gZW5kCgogICAgbG9jYWwgc2NyZWVuX3NpemUgPSB2ZWN0b3IoY2xpZW50LnNjcmVlbl9zaXplKCkpCgogICAgbG9jYWwgaW5kX2hlaWdodCA9IDIwCgogICAgbG9jYWwgcG9zID0geyB4ID0gc2NyZWVuX3NpemUueCAvIDIsIHkgPSBzY3JlZW5fc2l6ZS55IC8gMiArIGluZF9oZWlnaHQgfQoKICAgIGxvY2FsIGNvbG9yX3JlZiA9IHsgdWkuZ2V0KG1lbnUuY29sb3IzKSB9CgogICAgbG9jYWwgY29sb3IgPSB7IHIgPSBjb2xvcl9yZWZbMV0sIGcgPSBjb2xvcl9yZWZbMl0sIGIgPSBjb2xvcl9yZWZbM10sIGEgPSBjb2xvcl9yZWZbNF0gfQoKICAgIGxvY2FsIGZyYW1ldGltZSA9IGdsb2JhbHMuZnJhbWV0aW1lKCkKCiAgICBsb2NhbCByLCBnLCBiLCBhID0gdWkuZ2V0KG1lbnUuY29sb3IzKQoKICAgIGlmIGRhdGEuZHRfY2hhcmdlZCB0aGVuCiAgICAgICAgY2hhcmdlID0gdHJ1ZQogICAgZW5kCgogICAgbG9jYWwgZHRfdGV4dCA9ICIiCgogICAgbG9jYWwgZHRfY29sb3IgPSB7ciA9IDI1NSwgZyA9IDI1NSwgYiA9IDI1NSwgYT0gMjU1fQoKICAgIGxvY2FsIGZkX29uID0gdWkuZ2V0KHJlZmVyZW5jZS5mYWtlX2R1Y2spCgogICAgaWYgZGF0YS5kdF9jaGFyZ2VkIHRoZW4KICAgICAgICBkdF90ZXh0ID0gIlJFQURZIgogICAgICAgIGR0X2NvbG9yID0ge3IgPSAxNjAsIGcgPSAyMzUsIGIgPSAxMzYsIGE9IDI1NX0KICAgICAgICBkdF9zaXplID0gbGVycChkdF9zaXplLCA1MCwgZ2xvYmFscy5mcmFtZXRpbWUoKSAqIDUpCiAgICAtLWVsc2VpZiBnbG9iYWxzLnRpY2tjb3VudCgpIDw9IGRhdGEuZGVmZW5zaXZlX2FjdGl2ZV91bnRpbCB0aGVuCiAgICAtLSAgICBkdF90ZXh0ID0gIkFDVElWRSIKICAgICAtLSAgIGR0X2NvbG9yID0ge3IgPSAxMzUsIGcgPSAxODksIGIgPSAyNTUsIGE9IDI1NX0KICAgICAtLSAgIGR0X3NpemUgPSBsZXJwKGR0X3NpemUsIDYwLCBnbG9iYWxzLmZyYW1ldGltZSgpICogNSkKICAgIGVsc2VpZiBmZF9vbiB0aGVuCiAgICAgICAgZHRfdGV4dCA9ICJCTE9DS0VEIgogICAgICAgIGR0X2NvbG9yID0ge3IgPSAyNTUsIGcgPSAwLCBiID0gMCwgYT0gMjU1fQogICAgICAgIGR0X3NpemUgPSBsZXJwKGR0X3NpemUsIDkwLCBnbG9iYWxzLmZyYW1ldGltZSgpICogNSkKICAgIGVsc2UKICAgICAgICBkdF90ZXh0ID0gIkNIQVJHSU5HIgogICAgICAgIGR0X2NvbG9yID0ge3IgPSAyNTUsIGcgPSAwLCBiID0gMCwgYT0gMjU1fQogICAgICAgIGR0X3NpemUgPSBsZXJwKGR0X3NpemUsIDkwLCBnbG9iYWxzLmZyYW1ldGltZSgpICogNSkKICAgIGVuZAoKICAgIC0tbG9jYWwgY2hhcmdlID0gZGF0YS50aWNrYmFzZS5zaGlmdGluZyB+PSAwCgogICAgbG9jYWwgZXhwbG9pdGluZyA9ICh1aS5nZXQocmVmZXJlbmNlLmR0WzFdKSBhbmQgdWkuZ2V0KHJlZmVyZW5jZS5kdFsyXSkpIG9yICh1aS5nZXQocmVmZXJlbmNlLm9uX3Nob3RfYWFbMV0pIGFuZCB1aS5nZXQocmVmZXJlbmNlLm9uX3Nob3RfYWFbMl0pKQogICAgbG9jYWwgaW52ZXJ0ZWQgPSAobWF0aC5mbG9vcihtYXRoLm1pbig2MCwgKGVudGl0eS5nZXRfcHJvcChsb2NhbF9wbGF5ZXIsICJtX2ZsUG9zZVBhcmFtZXRlciIsIDExKSAqIDEyMCAtIDYwKSkpKSA+IDAKICAgIGxvY2FsIGRlbHRhID0gbWF0aC5mbG9vcihhYS5nZXRfZGVzeW5jKDEpKQoKICAgIHNlbGYuYWRkb25zLmluZGljYXRvcnMuY2hhcmdlX2NvbCA9IGZhZGVfY29sKHNlbGYuYWRkb25zLmluZGljYXRvcnMuY2hhcmdlX2NvbCwgZHRfY29sb3IsIGdsb2JhbHMuZnJhbWV0aW1lKCkgKiA5KQoKICAgIGxvY2FsIGNvbCA9IHsKICAgICAgICBvbiA9IHsgciA9IHIsIGcgPSBnLCBiID0gYiwgYSA9IDI1NSB9LAogICAgICAgIG9mZiA9IHsgciA9IDI1NSwgZyA9IDI1NSwgYiA9IDI1NSwgYSA9IDEwMCB9LAogICAgICAgIG1haW4gPSB7IHIgPSByLCBnID0gZywgYiA9IGIsIGEgPSAyNTUgfSwKICAgIH0KCiAgICBsb2NhbCBoZXggPSB7CiAgICAgICAgb24gPSAiXGEiIC4uIHRvX2hleChjb2wub24uciwgY29sLm9uLmcsIGNvbC5vbi5iLCBjb2wub24uYSksCiAgICAgICAgb2ZmID0gIlxhIiAuLiB0b19oZXgoY29sLm9mZi5yLCBjb2wub2ZmLmcsIGNvbC5vZmYuYiwgY29sLm9mZi5hKSwKICAgICAgICBjaGFyZ2UgPSAiXGEiIC4uIHRvX2hleChzZWxmLmFkZG9ucy5pbmRpY2F0b3JzLmNoYXJnZV9jb2wuciwgc2VsZi5hZGRvbnMuaW5kaWNhdG9ycy5jaGFyZ2VfY29sLmcsIHNlbGYuYWRkb25zLmluZGljYXRvcnMuY2hhcmdlX2NvbC5iLCBzZWxmLmFkZG9ucy5pbmRpY2F0b3JzLmNoYXJnZV9jb2wuYSksCiAgICB9CgogICAgbG9jYWwgb2Zmc2V0ID0geyB4ID0gMCwgeSA9IDAgfQoKICAgIGxvY2FsIHNjb3BlZCA9IGVudGl0eS5nZXRfcHJvcChsb2NhbF9wbGF5ZXIsICdtX2JJc1Njb3BlZCcpID09IDEKCiAgICBsb2NhbCBkb3VibGV0YXAgPSB1aS5nZXQocmVmZXJlbmNlLmR0WzFdKSBhbmQgdWkuZ2V0KHJlZmVyZW5jZS5kdFsyXSkKCiAgICBsb2NhbCBoaWRlc2hvdHMgPSB1aS5nZXQocmVmZXJlbmNlLm9uX3Nob3RfYWFbMV0pIGFuZCB1aS5nZXQocmVmZXJlbmNlLm9uX3Nob3RfYWFbMl0pCgogICAgbG9jYWwgc2NvcGVfZnJhY3Rpb24gPSBlYXNlLnF1YWRfaW5fb3V0KGFtbmVzaWFfbGVycCwgMCwgMSwgMSkKICAgIGFtbmVzaWFfbGVycCA9IGNsYW1wKGFtbmVzaWFfbGVycCArIChzY29wZWQgYW5kIGZyYW1ldGltZSAqIDIuNSBvciAtZnJhbWV0aW1lICogMi41KSwgMCwgMSkKCiAgICBsb2NhbCB0ZXh0ID0gIkFNTkVTSUEgICIgLi4gZ3JhZGllbnRfdGV4dF9hbmltKCJZQVciLCByLGcsYiwyNTUsIHIsZyxiLDI1NSwgMCwgMCApCgogICAgbG9jYWwgaW5kX29mZnNldCA9IDAKCiAgICBsb2NhbCB0ZXh0X3NpemUgPSB2ZWN0b3IocmVuZGVyZXIubWVhc3VyZV90ZXh0KCctJywgdGV4dCkpCgogICAgbG9jYWwgc3RhdGVfc2l6ZSA9IHZlY3RvcihyZW5kZXJlci5tZWFzdXJlX3RleHQoIi0iLCBhYV9sb2wuc3RhdGU6dXBwZXIoKTpnc3ViKCJSVU4iLCAiUlVOTklORyIpKSkKCiAgICBsb2NhbCBzY29wZV90ZXh0ID0gbWF0aC5mbG9vcigtKHRleHRfc2l6ZS54IC8gMikgKiAoMSAtIHNjb3BlX2ZyYWN0aW9uKSArIDIgKiBzY29wZV9mcmFjdGlvbikKICAgIGxvY2FsIHNjb3BlX3RleHQyID0gbWF0aC5mbG9vcigtKHN0YXRlX3NpemUueCAvIDIgLSAyKSAqICgxIC0gc2NvcGVfZnJhY3Rpb24pICsgOCAqIHNjb3BlX2ZyYWN0aW9uKQoKICAgIHZpc3VhbHMuc2l6ZSA9IGVhc2UucXVhZF9vdXQoZ2xvYmFscy5mcmFtZXRpbWUoKSwgdmlzdWFscy5zaXplLCAoc3RhdGVfc2l6ZS54ICsgMTApIC0gdmlzdWFscy5zaXplLCAwLjQpCiAgICAKICAgIGRhc2hfcG9zID0gZWFzZS5xdWFkX291dChnbG9iYWxzLmZyYW1ldGltZSgpLCBkYXNoX3BvcywgKHNjb3BlX3RleHQyIC0gNS45KSAtIGRhc2hfcG9zLCAwLjE1KQogICAgZGFzaF9wb3MyID0gZWFzZS5xdWFkX291dChnbG9iYWxzLmZyYW1ldGltZSgpLCBkYXNoX3BvczIsIChzY29wZV90ZXh0MiArIHN0YXRlX3NpemUueCAtIDAuOSkgLSBkYXNoX3BvczIsIDAuMTUpCgogICAgcmVuZGVyZXIudGV4dChwb3MueCArIHNjb3BlX3RleHQsIHBvcy55LCAyNTUsIDI1NSwgMjU1LCAyNTUsICctJywgbmlsLCB0ZXh0KQoKICAgIHJlbmRlcmVyLnRleHQocG9zLnggKyBkYXNoX3BvcywgcG9zLnkgKyAxMCwgMjU1LCAyNTUsIDI1NSwgMjU1LCAnLScsIG5pbCwgIi0iKQoKICAgIHJlbmRlcmVyLnRleHQocG9zLnggKyBkYXNoX3BvczIsIHBvcy55ICsgMTAsIDI1NSwgMjU1LCAyNTUsIDI1NSwgJy0nLCBuaWwsICItIikKCiAgICByZW5kZXJlci50ZXh0KHBvcy54ICsgc2NvcGVfdGV4dDIsIHBvcy55ICsgMTAsIDI1NSwgMjU1LCAyNTUsIDI1NSwgJy0nLCB2aXN1YWxzLnNpemUsICgiJXMiKTpmb3JtYXQoKGFhX2xvbC5zdGF0ZTp1cHBlcigpKTpnc3ViKCJSVU4iLCAiUlVOTklORyIpKSkKCiAgICBsb2NhbCBtb2RpZmllciA9IGVudGl0eS5nZXRfcHJvcChsb2NhbF9wbGF5ZXIsICJtX2ZsVmVsb2NpdHlNb2RpZmllciIpCglpZiBtb2RpZmllciA9PSAxIHRoZW4KICAgICAgICBzcGVlZF9tb2QgPSBmYWxzZQogICAgZWxzZQogICAgICAgIHNwZWVkX21vZCA9IHRydWUKICAgIGVuZAoKICAgIGxvY2FsIGl0ZW1zID0gewogICAgICAgIFsxXSA9IHsgYWN0aXZlID0gdWkuZ2V0KHJlZmVyZW5jZS5kdFsxXSkgYW5kIHVpLmdldChyZWZlcmVuY2UuZHRbMl0pLCB0ZXh0ID0gJ0RUICcuLmhleC5jaGFyZ2UuLiIiLi5kdF90ZXh0LCBjb2xvciA9IHsgciA9IDI1NSwgZyA9IDI1NSwgYiA9IDI1NSwgYSA9IDI1NSB9IH0sCiAgICAgICAgWzJdID0geyBhY3RpdmUgPSB1aS5nZXQocmVmZXJlbmNlLm9uX3Nob3RfYWFbMV0pIGFuZCB1aS5nZXQocmVmZXJlbmNlLm9uX3Nob3RfYWFbMl0pLCB0ZXh0ID0gJ0hJREVTSE9UJywgY29sb3IgPSB7IHIgPSAyNTUsIGcgPSAyNTUsIGIgPSAyNTUsIGEgPSAyNTUgfSB9LAogICAgICAgIFszXSA9IHsgYWN0aXZlID0gdWkuZ2V0KGFkZG9ucy5mcmVlc3RhbmRpbmdfa2V5KSwgdGV4dCA9ICdGUkVFU1RBTkQnLCBjb2xvciA9IHsgciA9IDI1NSwgZyA9IDI1NSwgYiA9IDI1NSwgYSA9IDI1NSB9IH0sCiAgICAgICAgWzRdID0geyBhY3RpdmUgPSB1aS5nZXQocmVmZXJlbmNlLmZvcmNlc3ApLCB0ZXh0ID0gJ1NBRkUnLCBjb2xvciA9IHsgciA9IDI1NSwgZyA9IDI1NSwgYiA9IDI1NSwgYSA9IDI1NSB9IH0sCiAgICAgICAgWzVdID0geyBhY3RpdmUgPSBzcGVlZF9tb2QsIHRleHQgPSAnU0xPVzogJy4ubWF0aC5mbG9vcihtb2RpZmllcioxMDApLi4iJSIsIGNvbG9yID0geyByID0gMjU1LCBnID0gMjU1LCBiID0gMjU1LCBhID0gMjU1IH0gfSwKICAgICAgICBbNl0gPSB7IGFjdGl2ZSA9IHVpLmdldChyZWZlcmVuY2UuZmFrZV9kdWNrKSwgdGV4dCA9ICdEVUNLJywgY29sb3IgPSB7IHIgPSAyNTUsIGcgPSAyNTUsIGIgPSAyNTUsIGEgPSAyNTUgfSB9CiAgICB9CgogICAgZm9yIGksIGJpbmQgaW4gaXBhaXJzKGl0ZW1zKSBkbwogICAgICAgIGxvY2FsIHRleHRfc2l6ZSA9IHsgcmVuZGVyZXIubWVhc3VyZV90ZXh0KCdjLScsIGJpbmQudGV4dCkgfQoKICAgICAgICBsb2NhbCBzcGVlZCA9IGdsb2JhbHMuZnJhbWV0aW1lKCkgKiA1CiAgICAgICAgbG9jYWwgYWxwaGEgPSBlYXNlLnF1YWRfaW5fb3V0KHZhbHVlW2ldLCAwLCAxLCAxKQogICAgICAgIHZhbHVlW2ldID0gY2xhbXAodmFsdWVbaV0gKyAoYmluZC5hY3RpdmUgYW5kIHNwZWVkIG9yIC1zcGVlZCksIDAsIDEpCgogICAgICAgIGxvY2FsIGFkYXB0aXZlX3BvcyA9IChtYXRoLmZsb29yKHRleHRfc2l6ZVsxXSAvIDIpICogc2NvcGVfZnJhY3Rpb24pICsgMyAqIHNjb3BlX2ZyYWN0aW9uCgogICAgICAgIGlmIGFscGhhIDw9IDAgdGhlbgogICAgICAgICAgICBnb3RvIHNraXAKICAgICAgICBlbmQKCiAgICAgICAgc2VsZi5hZGRvbnMuaW5kaWNhdG9ycy5jaGFyZ2VfY29sLmEgPSBiaW5kLmNvbG9yLmEgKiBhbHBoYQoKICAgICAgICByZW5kZXJlci50ZXh0KHBvcy54ICsgYWRhcHRpdmVfcG9zLCBwb3MueSArIGluZF9vZmZzZXQgKyAyNSwgYmluZC5jb2xvci5yLCBiaW5kLmNvbG9yLmcsIGJpbmQuY29sb3IuYiwgYmluZC5jb2xvci5hICogYWxwaGEsICdjLScsIGR0X3NpemUsIGJpbmQudGV4dCkKCiAgICAgICAgaW5kX29mZnNldCA9IGluZF9vZmZzZXQgKyAxMCAqIGFscGhhCiAgICAgICAgdGVzdF9wb3NfeSA9IGluZF9vZmZzZXQKICAgICAgICA6OnNraXA6OgogICAgZW5kCmVuZAoKbG9jYWwgdmVsX3kgPSA2MDAKbG9jYWwgdmVsX3lfdCA9IDYwMApsb2NhbCB2ZWxfeV90MiA9IDYwMApsb2NhbCB2ZWxfYSA9IDAKbG9jYWwgdmVsX2EyID0gMAoKbG9jYWwgaW1hZ2VzID0gcmVxdWlyZSAiZ2FtZXNlbnNlL2ltYWdlcyIKbG9jYWwgd2FybmluZyA9IGltYWdlcy5nZXRfcGFub3JhbWFfaW1hZ2UoImljb25zL3VpL3dhcm5pbmcuc3ZnIikKCmZ1bmN0aW9uIHZpc3VhbHM6cnVuX2luZGljYXRvcnMoKQogICAgbG9jYWwgc2NyZWVuX3NpemUgPSB2ZWN0b3IoY2xpZW50LnNjcmVlbl9zaXplKCkpCgogICAgbG9jYWwgaW5kX2hlaWdodCA9IDIwCgogICAgbG9jYWwgcG9zID0geyB4ID0gc2NyZWVuX3NpemUueCAvIDIsIHkgPSBzY3JlZW5fc2l6ZS55IC8gMiArIGluZF9oZWlnaHQgfQoKCXNlbGYuc2NyZWVuX3dpZHRoLCBzZWxmLnNjcmVlbl9oZWlnaHQgPSBjbGllbnQuc2NyZWVuX3NpemUoKQoKICAgIHNlbGYuciwgc2VsZi5nLCBzZWxmLmIgPSB1aS5nZXQobWVudS5jb2xvcjMpCgogICAgLS1pZiBub3QgdWkuZ2V0KG1lbnUuYWRkb25zLmVuYWJsZV92aXN1YWxzKSB0aGVuIHJldHVybiBlbmQKCiAgICBsb2NhbCBscCA9IGVudGl0eVtwcm90ZWN0ZWRbN11dKCkKCiAgICBpZiBub3QgbHAgb3Igbm90IGVudGl0eS5pc19hbGl2ZShscCkgdGhlbiByZXR1cm4gZW5kCgogICAgaWYgdWkuZ2V0KGFkZG9ucy5pbmRpY2F0b3JzKSA9PSAiYW1uZXNpYSIgYW5kIHVpLmdldChhZGRvbnMuZW5hYmxlX2luZGljYXRvcnMpIHRoZW4KICAgICAgICAtLXZpc3VhbHM6ZHJhd19jZW50ZXIyKCkKICAgICAgICBjdHguaW5kaWNhdG9yczpyZW5kZXIoKQogICAgZW5kCgogICAgbG9jYWwgbW9kaWZpZXIgPSBlbnRpdHkuZ2V0X3Byb3AobHAsICJtX2ZsVmVsb2NpdHlNb2RpZmllciIpCgoJaWYgbW9kaWZpZXIgPT0gMSB0aGVuCiAgICAgICAgc3BlZWRfbW9kID0gZmFsc2UKICAgIGVsc2UKICAgICAgICBzcGVlZF9tb2QgPSB0cnVlCiAgICBlbmQKCiAgICBpZiBzcGVlZF9tb2QgdGhlbgoKICAgICAgICB2ZWxfeSA9IGxlcnAodmVsX3ksIDY0OS45LCBnbG9iYWxzLmZyYW1ldGltZSgpICogMTEpCiAgICAgICAgdmVsX3lfdCA9IGxlcnAodmVsX3lfdCwgNDAwLjksIGdsb2JhbHMuZnJhbWV0aW1lKCkgKiAxMSkKICAgICAgICB2ZWxfeV90MiA9IGxlcnAodmVsX3lfdDIsIDQxMS45LCBnbG9iYWxzLmZyYW1ldGltZSgpICogMTEpCiAgICAgICAgdmVsX2EgPSBsZXJwKHZlbF9hLCAyNTUsIGdsb2JhbHMuZnJhbWV0aW1lKCkgKiAxMSkKCiAgICAgICAgdmVsX2ljb246ZHJhdyhzY3JlZW5fc2l6ZS54LzIgLSBzY3JlZW5fc2l6ZS54LzMuOCwgc2NyZWVuX3NpemUueSAtIHNjcmVlbl9zaXplLnkvMi43NCAtIHZlbF95LCBuaWwsIDU0MCwgMjU1LCAyNTUsIDI1NSwgdmVsX2EsIHRydWUpCiAgICAgICAgcmVuZGVyZXIudGV4dChwb3MueCAtIDMsIHBvcy55IC0gdmVsX3lfdDIsIDI1NSwgMjU1LCAyNTUsIHZlbF9hLCAnYycsIG5pbCwgInNsb3dlZCBkb3duIikKICAgICAgICByZW5kZXJlci50ZXh0KHBvcy54LCBwb3MueSAtIHZlbF95X3QsIDI1NSwgMjU1LCAyNTUsIDI1NSwgJ2MnLCBuaWwsIGdyYWRpZW50X3RleHRfYW5pbShtYXRoLmZsb29yKG1vZGlmaWVyKjEwMCkuLiIiLCAyNTUsMjU1LDI1NSx2ZWxfYSwgcixnLGIsdmVsX2EsIDIuMiwgMCApLi4iJSIpCiAgICBlbHNlaWYgc3BlZWRfbW9kID09IGZhbHNlIGFuZCB2ZWxfaWNvbiB0aGVuIAogICAgICAgIHZlbF9hID0gbGVycCh2ZWxfYSwgMCwgZ2xvYmFscy5mcmFtZXRpbWUoKSAqIDExKQogICAgICAgIHZlbF95ID0gbGVycCh2ZWxfeSwgNzAwLCBnbG9iYWxzLmZyYW1ldGltZSgpICogMTEpCiAgICAgICAgdmVsX3lfdCA9IGxlcnAodmVsX3lfdCwgNTAwLCBnbG9iYWxzLmZyYW1ldGltZSgpICogMTEpCiAgICAgICAgdmVsX3lfdDIgPSBsZXJwKHZlbF95X3QyLCA1MDAsIGdsb2JhbHMuZnJhbWV0aW1lKCkgKiAxMSkKICAgICAgICB2ZWxfaWNvbjpkcmF3KHNjcmVlbl9zaXplLngvMiAtIHNjcmVlbl9zaXplLngvMy44LCBzY3JlZW5fc2l6ZS55IC0gc2NyZWVuX3NpemUueS8yLjc0IC0gdmVsX3ksIG5pbCwgNTQwLCAyNTUsIDI1NSwgMjU1LCB2ZWxfYSwgdHJ1ZSkKICAgICAgICByZW5kZXJlci50ZXh0KHBvcy54IC0gMywgcG9zLnkgLSB2ZWxfeSwgMjU1LCAyNTUsIDI1NSwgdmVsX2EsICdjJywgbmlsLCAic2xvd2VkIGRvd24iKQogICAgICAgIC0tcmVuZGVyZXIudGV4dChwb3MueCwgcG9zLnkgLSB2ZWxfeV90LCAyNTUsIDI1NSwgMjU1LCAyNTUsICdjYicsIG5pbCwgZ3JhZGllbnRfdGV4dF9hbmltKG1hdGguZmxvb3IobW9kaWZpZXIqMTAwKS4uIiIsIDI1NSwyNTUsMjU1LHZlbF9hLCByLGcsYix2ZWxfYSwgMi4yLCAwICkuLiIlIikKICAgIGVuZAoKICAgIC0tZGVmZW5zaXZlX2luZGljYXRvcl9wYWludCgpCmVuZAoKcmVnaXN0ZXIoInBhaW50IiwgZnVuY3Rpb24gKCkgdmlzdWFsczpydW5faW5kaWNhdG9ycygpIGVuZCkKCmZmaS5jZGVmW1sKCXN0cnVjdCBjdXNlcmNtZAoJewoJCXN0cnVjdCBjdXNlcmNtZCAoKmN1c2VyY21kKSgpOwoJCWludCAgICAgY29tbWFuZF9udW1iZXI7CgkJaW50ICAgICB0aWNrX2NvdW50OwoJfTsKCXR5cGVkZWYgc3RydWN0IGN1c2VyY21kKihfX3RoaXNjYWxsKiBnZXRfdXNlcl9jbWRfdCkodm9pZCosIGludCwgaW50KTsKXV0KYmFzZTY0PXJlcXVpcmUoImdhbWVzZW5zZS9iYXNlNjQiKXNpZ25hdHVyZV9naW5wdXQ9YmFzZTY0LmRlY29kZSgidWN6TXpNeUxRRGovMElUQUQ0VT0iKW1hdGNoPWNsaWVudC5maW5kX3NpZ25hdHVyZSgiY2xpZW50LmRsbCIsc2lnbmF0dXJlX2dpbnB1dClvciBlcnJvcigic2lnMSBub3QgZm91bmQiKWdfaW5wdXQ9ZmZpLmNhc3QoInZvaWQqKiIsZmZpLmNhc3QoImNoYXIqIixtYXRjaCkrMSlbMF1vciBlcnJvcigibWF0Y2ggaXMgbmlsIilnX2lucHV0Y2xhc3M9ZmZpLmNhc3QoInZvaWQqKioiLGdfaW5wdXQpZ19pbnB1dHZ0Ymw9Z19pbnB1dGNsYXNzWzBdcmF3Z2V0dXNlcmNtZD1nX2lucHV0dnRibFs4XWdldF91c2VyX2NtZD1mZmkuY2FzdCgiZ2V0X3VzZXJfY21kX3QiLHJhd2dldHVzZXJjbWQpbGFzdGxvY2FsPTA7bG9jYWwgZnVuY3Rpb24gYShiKWxvY2FsIGM9Z2V0X3VzZXJfY21kKGdfaW5wdXRjbGFzcywwLGIuY29tbWFuZF9udW1iZXIpaWYgdWkuZ2V0KGFkZG9ucy5yZWR1Y2VfdGlja3MpdGhlbiBpZiBsYXN0bG9jYWwrMC45Pmdsb2JhbHMuY3VydGltZSgpdGhlbiBjLnRpY2tfY291bnQ9Yy50aWNrX2NvdW50KzggZWxzZSBjLnRpY2tfY291bnQ9Yy50aWNrX2NvdW50KzEgZW5kIGVuZCBlbmQ7Y2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygic2V0dXBfY29tbWFuZCIsYSkKCnNwbGl0ID0gZnVuY3Rpb24oaixrKQogICAgaWYgaz09bmlsIHRoZW4gCiAgICAgICAgaz0iJXMiCiAgICBlbmQKICAgIGxvY2FsIGc9e30KICAgIGZvciBsIGluIHN0cmluZy5nbWF0Y2goaiwiKFteIi4uay4uIl0rKSIpIGRvIAogICAgICAgIHRhYmxlLmluc2VydChnLGwpCiAgICBlbmQKICAgIHJldHVybiBnIAplbmQKCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInBsYXllcl9kZWF0aCIsIGZ1bmN0aW9uKGUpCiAgICBsb2NhbCByLGcsYiA9IHVpLmdldChtZW51LmNvbG9yMykKICAgIGxvY2FsIGNvbG9yX291dCA9IHJnYmFfdG9faGV4MihyLGcsYiwwKQogICAgaWYgY2xpZW50LnVzZXJpZF90b19lbnRpbmRleChlLnVzZXJpZCkgPT0gZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSBhbmQgdWkuZ2V0KG1lbnUuYW50aWFpbV9tb2RlKSA9PSAiZHluYW1pYyIgdGhlbgogICAgICAgIGN0eC5ub3RpZmljYXRpb25zOm5ldygicmVzZXQgWyckZHluYW1pYyQnXSBkdWUgdG8gJGRlYXRoJCAhIiwgcixnLGIpCiAgICAgICAgY3R4Lm5vdGlmaWNhdGlvbnM6Y2xlYXIoKQogICAgZW5kCmVuZCkKCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInJvdW5kX3N0YXJ0IiwgZnVuY3Rpb24oKQogICAgbGFzdGxvY2FsID0gMAogICAgbG9jYWwgcixnLGIsYSA9IHVpLmdldChtZW51LmNvbG9yMykKICAgIGxvY2FsIGNvbCA9IHJnYmFfdG9faGV4MihyLGcsYiwwKQogICAgbG9jYWwgbWUgPSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpCiAgICBpZiBub3QgZW50aXR5LmlzX2FsaXZlKG1lKSB0aGVuIHJldHVybiBlbmQKICAgIGlmIG5vdCB1aS5nZXQobWVudS5hbnRpYWltX21vZGUpID09ICJkeW5hbWljIiB0aGVuIHJldHVybiBlbmQKICAgIGN0eC5ub3RpZmljYXRpb25zOm5ldygicmVzZXQgWyckZHluYW1pYyQnXSBkdWUgdG8gJG5ldyByb3VuZCQgISIsIHIsZyxiKQogICAgY3R4Lm5vdGlmaWNhdGlvbnM6Y2xlYXIoKQplbmQpCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJyb3VuZF9lbmQiLCBmdW5jdGlvbigpCiAgICBjdHgubm90aWZpY2F0aW9uczpjbGVhcigpCiAgICAtLXByaW50KCJoZWxvb29vbyIpCmVuZCkKCmZ1bmN0aW9uIHNldHVwKCkKICAgIGZvciBrLCB2IGluIHBhaXJzKGNhbGxiYWNrLmNhbGxiYWNrcykgZG8KICAgICAgICBsb2NhbCBmdW5jcyA9IHt9CgogICAgICAgIGZvciBrZXksIHZhbCBpbiBwYWlycyh2KSBkbwogICAgICAgICAgICB0YWJsZS5pbnNlcnQoZnVuY3MsIHZhbCkKICAgICAgICBlbmQKCiAgICAgICAgbG9jYWwgZnVuYyA9IGZ1bmN0aW9uICguLi4pCiAgICAgICAgICAgIGZvciBfLCB2IGluIHBhaXJzKGZ1bmNzKSBkbwogICAgICAgICAgICAgICAgdiguLi4pCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAoKICAgICAgICBjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKGssIGZ1bmMpCiAgICBlbmQKZW5kCgpzZXR1cCgpCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJwYWludCIsIGZ1bmN0aW9uKCkKICAgIC0tbm90aWZ5OmhhbmRsZXIoKQogICAgY3R4Lm5vdGlmaWNhdGlvbnM6cmVuZGVyKCkKZW5kKQ=="}