{"status":200,"content":"bG9jYWwgZmZpID0gcmVxdWlyZSAnZmZpJwoKbG9jYWwgZGVmZXIsIGVycm9yLCBnZXRmZW52LCBzZXRmZW52LCBnZXRtZXRhdGFibGUsIHNldG1ldGF0YWJsZSwKaXBhaXJzLCBwYWlycywgbmV4dCwgcHJpbnRmLCByYXdlcXVhbCwgcmF3c2V0LCByYXdsZW4sIHJlYWRmaWxlLCB3cml0ZWZpbGUsIHJlcXVpcmUsIHNlbGVjdCwKdG9udW1iZXIsIHRvc3RyaW5nLCB0b3RpY2tzLCB0b3RpbWUsIHR5cGUsIHVucGFjaywgcGNhbGwsIHhwY2FsbCA9CmRlZmVyLCBlcnJvciwgZ2V0ZmVudiwgc2V0ZmVudiwgZ2V0bWV0YXRhYmxlLCBzZXRtZXRhdGFibGUsCmlwYWlycywgcGFpcnMsIG5leHQsIHByaW50ZiwgcmF3ZXF1YWwsIHJhd3NldCwgcmF3bGVuLCByZWFkZmlsZSwgd3JpdGVmaWxlLCByZXF1aXJlLCBzZWxlY3QsCnRvbnVtYmVyLCB0b3N0cmluZywgdG90aWNrcywgdG90aW1lLCB0eXBlLCB1bnBhY2ssIHBjYWxsLCB4cGNhbGwKCmxvY2FsIFZUYWJsZSA9IHsKICAgIEVudHJ5ID0gZnVuY3Rpb24oaW5zdGFuY2UsIGluZGV4LCB0eXBlKSByZXR1cm4gZmZpLmNhc3QodHlwZSwgKGZmaS5jYXN0KCJ2b2lkKioqIiwgaW5zdGFuY2UpWzBdKVtpbmRleF0pIGVuZCwKICAgIEJpbmQgPSBmdW5jdGlvbihzZWxmLCBtb2R1bGUsIGludGVyZmFjZSwgaW5kZXgsIHR5cGVzdHJpbmcpCiAgICAgICAgbG9jYWwgaW5zdGFuY2UgPSBjbGllbnQuY3JlYXRlX2ludGVyZmFjZShtb2R1bGUsIGludGVyZmFjZSkKICAgICAgICBsb2NhbCBmbnB0ciA9IHNlbGYuRW50cnkoaW5zdGFuY2UsIGluZGV4LCBmZmkudHlwZW9mKHR5cGVzdHJpbmcpKQogICAgICAgIHJldHVybiBmdW5jdGlvbiguLi4pIHJldHVybiBmbnB0cihpbnN0YW5jZSwgLi4uKSBlbmQKICAgIGVuZAp9Cgpsb2NhbCBuYXRpdmVfZ2V0X2NsaWVudF9lbnRpdHkgPSBWVGFibGU6QmluZCgiY2xpZW50LmRsbCIsICJWQ2xpZW50RW50aXR5TGlzdDAwMyIsIDMsICJ2b2lkKihfX3RoaXNjYWxsKikodm9pZCosIGludCkiKQpsb2NhbCBhbmltc3RhdGVfdCA9IGZmaS50eXBlb2YgJ3N0cnVjdCB7IGNoYXIgcGFkMFsweDE4XTsgZmxvYXQgYW5pbV91cGRhdGVfdGltZXI7IGNoYXIgcGFkMVsweENdOyBmbG9hdCBzdGFydGVkX21vdmluZ190aW1lOyBmbG9hdCBsYXN0X21vdmVfdGltZTsgY2hhciBwYWQyWzB4MTBdOyBmbG9hdCBsYXN0X2xieV90aW1lOyBjaGFyIHBhZDNbMHg4XTsgZmxvYXQgcnVuX2Ftb3VudDsgY2hhciBwYWQ0WzB4MTBdOyB2b2lkKiBlbnRpdHk7IHZvaWQqIGFjdGl2ZV93ZWFwb247IHZvaWQqIGxhc3RfYWN0aXZlX3dlYXBvbjsgZmxvYXQgbGFzdF9jbGllbnRfc2lkZV9hbmltYXRpb25fdXBkYXRlX3RpbWU7IGludAkgbGFzdF9jbGllbnRfc2lkZV9hbmltYXRpb25fdXBkYXRlX2ZyYW1lY291bnQ7IGZsb2F0IGV5ZV90aW1lcjsgZmxvYXQgZXllX2FuZ2xlc195OyBmbG9hdCBleWVfYW5nbGVzX3g7IGZsb2F0IGdvYWxfZmVldF95YXc7IGZsb2F0IGN1cnJlbnRfZmVldF95YXc7IGZsb2F0IHRvcnNvX3lhdzsgZmxvYXQgbGFzdF9tb3ZlX3lhdzsgZmxvYXQgbGVhbl9hbW91bnQ7IGNoYXIgcGFkNVsweDRdOyBmbG9hdCBmZWV0X2N5Y2xlOyBmbG9hdCBmZWV0X3lhd19yYXRlOyBjaGFyIHBhZDZbMHg0XTsgZmxvYXQgZHVja19hbW91bnQ7IGZsb2F0IGxhbmRpbmdfZHVja19hbW91bnQ7IGNoYXIgcGFkN1sweDRdOyBmbG9hdCBjdXJyZW50X29yaWdpblszXTsgZmxvYXQgbGFzdF9vcmlnaW5bM107IGZsb2F0IHZlbG9jaXR5X3g7IGZsb2F0IHZlbG9jaXR5X3k7IGNoYXIgcGFkOFsweDRdOyBmbG9hdCB1bmtub3duX2Zsb2F0MTsgY2hhciBwYWQ5WzB4OF07IGZsb2F0IHVua25vd25fZmxvYXQyOyBmbG9hdCB1bmtub3duX2Zsb2F0MzsgZmxvYXQgdW5rbm93bjsgZmxvYXQgbV92ZWxvY2l0eTsgZmxvYXQganVtcF9mYWxsX3ZlbG9jaXR5OyBmbG9hdCBjbGFtcGVkX3ZlbG9jaXR5OyBmbG9hdCBmZWV0X3NwZWVkX2ZvcndhcmRzX29yX3NpZGV3YXlzOyBmbG9hdCBmZWV0X3NwZWVkX3Vua25vd25fZm9yd2FyZHNfb3Jfc2lkZXdheXM7IGZsb2F0IGxhc3RfdGltZV9zdGFydGVkX21vdmluZzsgZmxvYXQgbGFzdF90aW1lX3N0b3BwZWRfbW92aW5nOyBib29sIG9uX2dyb3VuZDsgYm9vbCBoaXRfaW5fZ3JvdW5kX2FuaW1hdGlvbjsgY2hhciBwYWQxMFsweDRdOyBmbG9hdCB0aW1lX3NpbmNlX2luX2FpcjsgZmxvYXQgbGFzdF9vcmlnaW5fejsgZmxvYXQgaGVhZF9mcm9tX2dyb3VuZF9kaXN0YW5jZV9zdGFuZGluZzsgZmxvYXQgc3RvcF90b19mdWxsX3J1bm5pbmdfZnJhY3Rpb247IGNoYXIgcGFkMTFbMHg0XTsgZmxvYXQgbWFnaWNfZnJhY3Rpb247IGNoYXIgcGFkMTJbMHgzQ107IGZsb2F0IHdvcmxkX2ZvcmNlOyBjaGFyIHBhZDEzWzB4MUNBXTsgZmxvYXQgbWluX3lhdzsgZmxvYXQgbWF4X3lhdzsgfSAqKicKCmVudGl0eS5nZXRfYW5pbXN0YXRlID0gZnVuY3Rpb24oZW50KQogICAgbG9jYWwgcG9pbnRlciA9IG5hdGl2ZV9nZXRfY2xpZW50X2VudGl0eShlbnQpCiAgICBpZiBwb2ludGVyIHRoZW4gcmV0dXJuIGZmaS5jYXN0KGFuaW1zdGF0ZV90LCBmZmkuY2FzdCgiY2hhcioiLCBmZmkuY2FzdCgidm9pZCoqKiIsIHBvaW50ZXIpKSArIDB4OTk2MClbMF0gZW5kCmVuZAoKZW50aXR5LmdldF9zaW10aW1lID0gZnVuY3Rpb24oZW50KQogICAgbG9jYWwgcG9pbnRlciA9IG5hdGl2ZV9nZXRfY2xpZW50X2VudGl0eShlbnQpCiAgICBpZiBwb2ludGVyIHRoZW4gcmV0dXJuIGVudGl0eS5nZXRfcHJvcChlbnQsICJtX2ZsU2ltdWxhdGlvblRpbWUiKSwgZmZpLmNhc3QoImZsb2F0KiIsIGZmaS5jYXN0KCJ1aW50cHRyX3QiLCBwb2ludGVyKSArIDB4MjZDKVswXSBlbHNlIHJldHVybiAwIGVuZAplbmQKCmxvY2FsIENsYW1wID0gZnVuY3Rpb24odmFsdWUsIG1pbiwgbWF4KSByZXR1cm4gbWF0aC5taW4obWF0aC5tYXgodmFsdWUsIG1pbiksIG1heCkgZW5kCgpsb2NhbCBmdW5jdGlvbiBOb3JtYWxpemVBbmdsZShhbmdsZSkKICAgIGlmIGFuZ2xlID09IG5pbCB0aGVuIHJldHVybiAwIGVuZAoJd2hpbGUgYW5nbGUgPiAxODAgZG8gYW5nbGUgPSBhbmdsZSAtIDM2MCBlbmQKCXdoaWxlIGFuZ2xlIDwgLTE4MCBkbyBhbmdsZSA9IGFuZ2xlICsgMzYwIGVuZAoJcmV0dXJuIGFuZ2xlCmVuZAoKZW50aXR5LmdldF9tYXhfZGVzeW5jID0gZnVuY3Rpb24oYW5pbXN0YXRlKQogICAgbG9jYWwgc3BlZWRmYWN0b3IgPSBDbGFtcChhbmltc3RhdGUuZmVldF9zcGVlZF9mb3J3YXJkc19vcl9zaWRld2F5cywgMC4wLCAxLjApCiAgICBsb2NhbCBhdmdfc3BlZWRmYWN0b3IgPSAoYW5pbXN0YXRlLnN0b3BfdG9fZnVsbF9ydW5uaW5nX2ZyYWN0aW9uICogLTAuMyAtIDAuMikgKiBzcGVlZGZhY3RvciArIDEKCiAgICBsb2NhbCBkdWNrX2Ftb3VudCA9IGFuaW1zdGF0ZS5kdWNrX2Ftb3VudAogICAgaWYgZHVja19hbW91bnQgPiAwIHRoZW4KICAgICAgICBsb2NhbCBkdWNrX3NwZWVkID0gZHVja19hbW91bnQgKiBzcGVlZGZhY3RvcgoKICAgICAgICBhdmdfc3BlZWRmYWN0b3IgPSBhdmdfc3BlZWRmYWN0b3IgKyAoZHVja19zcGVlZCAqICgwLjUgLSBhdmdfc3BlZWRmYWN0b3IpKQogICAgZW5kCgogICAgcmV0dXJuIENsYW1wKGF2Z19zcGVlZGZhY3RvciwgLjUsIDEpCmVuZAoKbG9jYWwgSml0dGVyUmVzb2x2ZXIgPSB1aS5uZXdfY2hlY2tib3goIlJBR0UiLCAiT3RoZXIiLCAiTU9OU1RSWVJFU09MVkVSIikKbG9jYWwgUmVjb3JkcyA9IHt9CmxvY2FsIENSZXNvbHZlck1haW4gPSBmdW5jdGlvbigpCiAgICBjbGllbnQudXBkYXRlX3BsYXllcl9saXN0KCkKICAgIGxvY2FsIFBsYXllcnMgPSBlbnRpdHkuZ2V0X3BsYXllcnMoKQogICAgZm9yIGkgPSAxLCAjUGxheWVycyBkbwogICAgICAgIGxvY2FsIHYgPSBQbGF5ZXJzW2ldCiAgICAgICAgaWYgZW50aXR5LmlzX2VuZW15KHYpIHRoZW4KICAgICAgICAgICAgbG9jYWwgc3RfY3VyLCBzdF9wcmUgPSBlbnRpdHkuZ2V0X3NpbXRpbWUodikKICAgICAgICAgICAgc3RfY3VyLCBzdF9wcmUgPSB0b3RpY2tzKHN0X2N1ciksIHRvdGlja3Moc3RfcHJlKQoKICAgICAgICAgICAgaWYgbm90IFJlY29yZHNbdl0gdGhlbiBSZWNvcmRzW3ZdID0gc2V0bWV0YXRhYmxlKHt9LCB7X19tb2RlID0gImt2In0pIGVuZAogICAgICAgICAgICBsb2NhbCBzbG90ID0gUmVjb3Jkc1t2XQoKICAgICAgICAgICAgc2xvdFtzdF9jdXJdID0gewogICAgICAgICAgICAgICAgcG9zZSA9IGVudGl0eS5nZXRfcHJvcCh2LCAibV9mbFBvc2VQYXJhbWV0ZXIiLCAxMSkgKiAxMjAgLSA2MCwKICAgICAgICAgICAgICAgIGV5ZSA9IHNlbGVjdCgyLCBlbnRpdHkuZ2V0X3Byb3AodiwgIm1fYW5nRXllQW5nbGVzIikpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC0tCiAgICAgICAgICAgIGxvY2FsIHZhbHVlCiAgICAgICAgICAgIGxvY2FsIGFsbG93ID0gKHNsb3Rbc3RfcHJlXSBhbmQgc2xvdFtzdF9jdXJdKSB+PSBuaWwKCiAgICAgICAgICAgIGlmIGFsbG93IHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsIGFuaW1zdGF0ZSA9IGVudGl0eS5nZXRfYW5pbXN0YXRlKHYpCiAgICAgICAgICAgICAgICBsb2NhbCBtYXhfZGVzeW5jID0gZW50aXR5LmdldF9tYXhfZGVzeW5jKGFuaW1zdGF0ZSkKCiAgICAgICAgICAgICAgICBpZiAoc2xvdFtzdF9wcmVdIGFuZCBzbG90W3N0X2N1cl0pIGFuZCBtYXhfZGVzeW5jIDwgLjg1IGFuZCAoc3RfY3VyIC0gc3RfcHJlIDwgMikgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIHNpZGUgPSBDbGFtcChOb3JtYWxpemVBbmdsZShhbmltc3RhdGUuZ29hbF9mZWV0X3lhdyAtIHNsb3Rbc3RfY3VyXS5leWUpLCAtMSwgMSkKICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHNsb3Rbc3RfcHJlXSBhbmQgKHNsb3Rbc3RfcHJlXS5wb3NlICogc2lkZSAqIG1heF9kZXN5bmMpIG9yIG5pbAogICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgaWYgdmFsdWUgdGhlbiBwbGlzdC5zZXQodiwgIkZvcmNlIGJvZHkgeWF3IHZhbHVlIiwgdmFsdWUpIGVuZAogICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIHBsaXN0LnNldCh2LCAiRm9yY2UgYm9keSB5YXciLCB2YWx1ZSB+PSBuaWwpCiAgICAgICAgICAgIHBsaXN0LnNldCh2LCAiQ29ycmVjdGlvbiBhY3RpdmUiLCB0cnVlKQogICAgICAgIGVuZAogICAgZW5kCmVuZAoKbG9jYWwgQ1Jlc29sdmVyUmVzdG9yZSA9IGZ1bmN0aW9uKCkKICAgIGZvciBpID0gMSwgNjQgZG8gcGxpc3Quc2V0KGksICJGb3JjZSBib2R5IHlhdyIsIGZhbHNlKSBlbmQKICAgIFJlY29yZHMgPSB7fQplbmQKCmxvY2FsIENSZXNvbHZlclJ1biA9IGZ1bmN0aW9uKCkKICAgIGlmIHVpLmdldChKaXR0ZXJSZXNvbHZlcikgdGhlbiBDUmVzb2x2ZXJNYWluKCkgZWxzZSBDUmVzb2x2ZXJSZXN0b3JlKCkgZW5kCmVuZAoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygibmV0X3VwZGF0ZV9lbmQiLCBmdW5jdGlvbigpCiAgICBsb2NhbCBMb2NhbFBsYXllciA9IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkKICAgIGlmIG5vdCBMb2NhbFBsYXllciB0aGVuIHJldHVybiBlbmQKICAgIENSZXNvbHZlclJ1bigpCmVuZCk="}