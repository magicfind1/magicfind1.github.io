{"status":200,"content":"LS0gQHJlZ2lvbiBMVUFTRVRUSU5HUyBzdGFydApsb2NhbCBsdWFfbmFtZSA9ICJleHRlcm5hbC5jb2RlcyIKbG9jYWwgbHVhX2NvbG9yID0ge3IgPSAyNTUsIGcgPSAyNTUsIGIgPSAyNTV9CmxvY2FsIHNjcmlwdF9idWlsZCA9ICJSZW5ld2VkIgoKCi0tIEByZWdpb24gREVQRU5ERU5DSUVTIHN0YXJ0CmxvY2FsIGZ1bmN0aW9uIHRyeV9yZXF1aXJlKG1vZHVsZSwgbXNnKQogICAgbG9jYWwgc3VjY2VzcywgcmVzdWx0ID0gcGNhbGwocmVxdWlyZSwgbW9kdWxlKQogICAgaWYgc3VjY2VzcyB0aGVuIHJldHVybiByZXN1bHQgZWxzZSByZXR1cm4gZXJyb3IobXNnKSBlbmQKZW5kCgpsb2NhbCBncmFtX2NyZWF0ZSA9IGZ1bmN0aW9uKHZhbHVlLCBjb3VudCkgbG9jYWwgZ3JhbSA9IHsgfTsgZm9yIGk9MSwgY291bnQgZG8gZ3JhbVtpXSA9IHZhbHVlOyBlbmQgcmV0dXJuIGdyYW07IGVuZApsb2NhbCBncmFtX3VwZGF0ZSA9IGZ1bmN0aW9uKHRhYiwgdmFsdWUsIGZvcmNlZCkgbG9jYWwgbmV3X3RhYiA9IHRhYjsgaWYgZm9yY2VkIG9yIG5ld190YWJbI25ld190YWJdIH49IHZhbHVlIHRoZW4gdGFibGUuaW5zZXJ0KG5ld190YWIsIHZhbHVlKTsgdGFibGUucmVtb3ZlKG5ld190YWIsIDEpOyBlbmQ7IHRhYiA9IG5ld190YWI7IGVuZApsb2NhbCBnZXRfYXZlcmFnZSA9IGZ1bmN0aW9uKHRhYikgbG9jYWwgZWxlbWVudHMsIHN1bSA9IDAsIDA7IGZvciBrLCB2IGluIHBhaXJzKHRhYikgZG8gc3VtID0gc3VtICsgdjsgZWxlbWVudHMgPSBlbGVtZW50cyArIDE7IGVuZCByZXR1cm4gc3VtIC8gZWxlbWVudHM7IGVuZApsb2NhbCBpbWFnZXMgPSB0cnlfcmVxdWlyZSgiZ2FtZXNlbnNlL2ltYWdlcyIsICJEb3dubG9hZCBpbWFnZXMgbGlicmFyeTogaHR0cHM6Ly9nYW1lc2Vuc2UucHViL2ZvcnVtcy92aWV3dG9waWMucGhwP2lkPTIyOTE3IikKbG9jYWwgYml0ID0gdHJ5X3JlcXVpcmUoImJpdCIpCmxvY2FsIGJhc2U2NCA9IHRyeV9yZXF1aXJlKCJnYW1lc2Vuc2UvYmFzZTY0IiwgIkRvd25sb2FkIGJhc2U2NCBlbmNvZGUvZGVjb2RlIGxpYnJhcnk6IGh0dHBzOi8vZ2FtZXNlbnNlLnB1Yi9mb3J1bXMvdmlld3RvcGljLnBocD9pZD0yMTYxOSIpCmxvY2FsIGFudGlhaW1fZnVuY3MgPSB0cnlfcmVxdWlyZSgiZ2FtZXNlbnNlL2FudGlhaW1fZnVuY3MiLCAiRG93bmxvYWQgYW50aS1haW0gZnVuY3Rpb25zIGxpYnJhcnk6IGh0dHBzOi8vZ2FtZXNlbnNlLnB1Yi9mb3J1bXMvdmlld3RvcGljLnBocD9pZD0yOTY2NSIpCmxvY2FsIGZmaSA9IHRyeV9yZXF1aXJlKCJmZmkiLCAiRmFpbGVkIHRvIHJlcXVpcmUgRkZJLCBwbGVhc2UgbWFrZSBzdXJlIEFsbG93IHVuc2FmZSBzY3JpcHRzIGlzIGVuYWJsZWQhIikKbG9jYWwgdmVjdG9yID0gdHJ5X3JlcXVpcmUoInZlY3RvciIsICJNaXNzaW5nIHZlY3RvciIpCmxvY2FsIGh0dHAgPSB0cnlfcmVxdWlyZSgiZ2FtZXNlbnNlL2h0dHAiLCAiRG93bmxvYWQgSFRUUCBsaWJyYXJ5OiBodHRwczovL2dhbWVzZW5zZS5wdWIvZm9ydW1zL3ZpZXd0b3BpYy5waHA/aWQ9MjE2MTkiKQpsb2NhbCBjbGlwYm9hcmQgPSB0cnlfcmVxdWlyZSgiZ2FtZXNlbnNlL2NsaXBib2FyZCIsICJEb3dubG9hZCBDbGlwYm9hcmQgbGlicmFyeTogaHR0cHM6Ly9nYW1lc2Vuc2UucHViL2ZvcnVtcy92aWV3dG9waWMucGhwP2lkPTI4Njc4IikKbG9jYWwgZW50ID0gdHJ5X3JlcXVpcmUoImdhbWVzZW5zZS9lbnRpdHkiLCAiRG93bmxvYWQgRW50aXR5IE9iamVjdCBsaWJyYXJ5OiBodHRwczovL2dhbWVzZW5zZS5wdWIvZm9ydW1zL3ZpZXd0b3BpYy5waHA/aWQ9Mjc1MjkiKQpsb2NhbCBjc2dvX3dlYXBvbnMgPSB0cnlfcmVxdWlyZSgiZ2FtZXNlbnNlL2NzZ29fd2VhcG9ucyIsICJEb3dubG9hZCBDUzpHTyB3ZWFwb24gZGF0YSBsaWJyYXJ5OiBodHRwczovL2dhbWVzZW5zZS5wdWIvZm9ydW1zL3ZpZXd0b3BpYy5waHA/aWQ9MTg4MDciKQpsb2NhbCBzdGVhbXdvcmtzID0gdHJ5X3JlcXVpcmUoImdhbWVzZW5zZS9zdGVhbXdvcmtzIikgb3IgZXJyb3IoJ01pc3NpbmcgaHR0cHM6Ly9nYW1lc2Vuc2UucHViL2ZvcnVtcy92aWV3dG9waWMucGhwP2lkPTI2NTI2JykKZnVuY3Rpb24gdWkubXVsdGlSZWZlcmVuY2UodGFiLCBncm91cGJveCwgbmFtZSkKICAgIGxvY2FsIHJlZjEsIHJlZjIsIHJlZjMgPSB1aS5yZWZlcmVuY2UodGFiLCBncm91cGJveCwgbmFtZSkKICAgIHJldHVybiB7IHJlZjEsIHJlZjIsIHJlZjMgfQplbmQKLS0gQHJlZ2lvbiBERVBFTkRFTkNJRVMgZW5kCgotLSBAcmVnaW9uIFVTRVJEQVRBIHN0YXJ0CmNsaWVudC5leGVjKCJjbGVhciIpCmNsaWVudC5jb2xvcl9sb2coMjU1LCAyNTUsIDI1NSwgIldlbGNvbWUgdG9cMCIpCmNsaWVudC5jb2xvcl9sb2cobHVhX2NvbG9yLnIsIGx1YV9jb2xvci5nLCBsdWFfY29sb3IuYiwgIiBleHRlcm5hbC5jb2RlcyIpCgpsb2NhbCBsdWEgPSB7fQpsdWEuZGF0YWJhc2UgPSB7CiAgICBjb25maWdzID0gIjoiIC4uIGx1YV9uYW1lIC4uICI6OmNvbmZpZ3M6Igp9CmxvY2FsIHByZXNldHMgPSB7fQotLSBAcmVnaW9uIFVTRVJEQVRBIGVuZAoKLS0gQHJlZ2lvbiBSRUZFUkVOQ0VTIHN0YXJ0CmxvY2FsIHJlZnMgPSB7CiAgICBzbG93bW90aW9uID0gdWkucmVmZXJlbmNlKCJBQSIsICJPdGhlciIsICJTbG93IG1vdGlvbiIpLAogICAgT1NBQUEgPSB1aS5yZWZlcmVuY2UoIkFBIiwgIk90aGVyIiwgIk9uIHNob3QgYW50aS1haW0iKSwKICAgIExlZ21vdmVzID0gdWkucmVmZXJlbmNlKCJBQSIsICJPdGhlciIsICJMZWcgbW92ZW1lbnQiKSwKICAgIGxlZ2l0ID0gdWkucmVmZXJlbmNlKCJMRUdJVCIsICJBaW1ib3QiLCAiRW5hYmxlZCIpLAogICAgbWluaW11bV9kYW1hZ2Vfb3ZlcnJpZGUgPSB7IHVpLnJlZmVyZW5jZSgiUmFnZSIsICJBaW1ib3QiLCAiTWluaW11bSBkYW1hZ2Ugb3ZlcnJpZGUiKSB9LAogICAgZmFrZUR1Y2sgPSB1aS5yZWZlcmVuY2UoIlJBR0UiLCAiT3RoZXIiLCAiRHVjayBwZWVrIGFzc2lzdCIpLAogICAgbWluaW11bV9kYW1hZ2UgPSB1aS5yZWZlcmVuY2UoIlJhZ2UiLCAiQWltYm90IiwgIk1pbmltdW0gZGFtYWdlIiksCiAgICBoaXRDaGFuY2UgPSB1aS5yZWZlcmVuY2UoIlJBR0UiLCAiQWltYm90IiwgIk1pbmltdW0gaGl0IGNoYW5jZSIpLAogICAgc2FmZVBvaW50ID0gdWkucmVmZXJlbmNlKCJSQUdFIiwgIkFpbWJvdCIsICJGb3JjZSBzYWZlIHBvaW50IiksCiAgICBmb3JjZUJhaW0gPSB1aS5yZWZlcmVuY2UoIlJBR0UiLCAiQWltYm90IiwgIkZvcmNlIGJvZHkgYWltIiksCiAgICBkdExpbWl0ID0gdWkucmVmZXJlbmNlKCJSQUdFIiwgIkFpbWJvdCIsICJEb3VibGUgdGFwIGZha2UgbGFnIGxpbWl0IiksCiAgICBxdWlja1BlZWsgPSB7dWkucmVmZXJlbmNlKCJSQUdFIiwgIk90aGVyIiwgIlF1aWNrIHBlZWsgYXNzaXN0Iil9LAogICAgZHQgPSB7dWkucmVmZXJlbmNlKCJSQUdFIiwgIkFpbWJvdCIsICJEb3VibGUgdGFwIil9LAogICAgZW5hYmxlZCA9IHVpLnJlZmVyZW5jZSgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIkVuYWJsZWQiKSwKICAgIHBpdGNoID0ge3VpLnJlZmVyZW5jZSgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgInBpdGNoIil9LAogICAgcm9sbCA9IHVpLnJlZmVyZW5jZSgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgInJvbGwiKSwKICAgIHlhd0Jhc2UgPSB1aS5yZWZlcmVuY2UoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICJZYXcgYmFzZSIpLAogICAgeWF3ID0ge3VpLnJlZmVyZW5jZSgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIllhdyIpfSwKICAgIGZsTGltaXQgPSB1aS5yZWZlcmVuY2UoIkFBIiwgIkZha2UgbGFnIiwgIkxpbWl0IiksCiAgICBmbGFtb3VudCA9IHVpLnJlZmVyZW5jZSgiQUEiLCAiRmFrZSBsYWciLCAiQW1vdW50IiksCiAgICBmbGVuYWJsZWQgPSB1aS5yZWZlcmVuY2UoIkFBIiwgIkZha2UgbGFnIiwgIkVuYWJsZWQiKSwKICAgIGZsVmFyaWFuY2UgPSB1aS5yZWZlcmVuY2UoIkFBIiwgIkZha2UgbGFnIiwgIlZhcmlhbmNlIiksCiAgICBBQWZha2UgPSB1aS5yZWZlcmVuY2UoIkFBIiwgIk90aGVyIiwgIkZha2UgcGVlayIpLAogICAgZnNCb2R5WWF3ID0gdWkucmVmZXJlbmNlKCJBQSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCAiRnJlZXN0YW5kaW5nIGJvZHkgeWF3IiksCiAgICBlZGdlWWF3ID0gdWkucmVmZXJlbmNlKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAiRWRnZSB5YXciKSwKICAgIHlhd0ppdHRlciA9IHt1aS5yZWZlcmVuY2UoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICJZYXcgaml0dGVyIil9LAogICAgYm9keVlhdyA9IHt1aS5yZWZlcmVuY2UoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICJCb2R5IHlhdyIpfSwKICAgIGZyZWVTdGFuZCA9IHt1aS5yZWZlcmVuY2UoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICJGcmVlc3RhbmRpbmciKX0sCiAgICBvcyA9IHt1aS5yZWZlcmVuY2UoIkFBIiwgIk90aGVyIiwgIk9uIHNob3QgYW50aS1haW0iKX0sCiAgICBzbG93ID0ge3VpLnJlZmVyZW5jZSgiQUEiLCAiT3RoZXIiLCAiU2xvdyBtb3Rpb24iKX0sCiAgICBmYWtlTGFnID0ge3VpLnJlZmVyZW5jZSgiQUEiLCAiRmFrZSBsYWciLCAiTGltaXQiKX0sCiAgICBsZWdNb3ZlbWVudCA9IHVpLnJlZmVyZW5jZSgiQUEiLCAiT3RoZXIiLCAiTGVnIG1vdmVtZW50IiksCiAgICBpbmRpY2F0b3JzID0ge3VpLnJlZmVyZW5jZSgiVklTVUFMUyIsICJPdGhlciBFU1AiLCAiRmVhdHVyZSBpbmRpY2F0b3JzIil9LAogICAgcGluZyA9IHt1aS5yZWZlcmVuY2UoIk1JU0MiLCAiTWlzY2VsbGFuZW91cyIsICJQaW5nIHNwaWtlIil9LAp9Cgpsb2NhbCByZWYgPSB7CiAgICBhaW1ib3QgPSB1aS5yZWZlcmVuY2UoJ1JBR0UnLCAnQWltYm90JywgJ0VuYWJsZWQnKSwKICAgIGRvdWJsZXRhcCA9IHsKICAgICAgICBtYWluID0geyB1aS5yZWZlcmVuY2UoJ1JBR0UnLCAnQWltYm90JywgJ0RvdWJsZSB0YXAnKSB9LAogICAgICAgIGZha2VsYWdfbGltaXQgPSB1aS5yZWZlcmVuY2UoJ1JBR0UnLCAnQWltYm90JywgJ0RvdWJsZSB0YXAgZmFrZSBsYWcgbGltaXQnKQogICAgfQp9Cgpsb2NhbCBiaW5kcyA9IHsKICAgIGxlZ01vdmVtZW50ID0gdWkubXVsdGlSZWZlcmVuY2UoIkFBIiwgIk90aGVyIiwgIkxlZyBtb3ZlbWVudCIpLAogICAgZmxlbmFibGVkID0gdWkubXVsdGlSZWZlcmVuY2UoIkFBIiwgIkZha2UgbGFnIiwgIkVuYWJsZWQiKSwKICAgIHNsb3dtb3Rpb24gPSB1aS5tdWx0aVJlZmVyZW5jZSgiQUEiLCAiT3RoZXIiLCAiU2xvdyBtb3Rpb24iKSwKICAgIE9TQUFBID0gdWkubXVsdGlSZWZlcmVuY2UoIkFBIiwgIk90aGVyIiwgIk9uIHNob3QgYW50aS1haW0iKSwKICAgIEFBZmFrZSA9IHVpLm11bHRpUmVmZXJlbmNlKCJBQSIsICJPdGhlciIsICJGYWtlIHBlZWsiKSwKfQoKbG9jYWwgZnVuY3Rpb24gdHJhdmVyc2VfdGFibGVfb24odGJsLCBwcmVmaXgpCiAgICBwcmVmaXggPSBwcmVmaXggb3IgIiIKICAgIGxvY2FsIHN0YWNrID0ge3t0YmwsIHByZWZpeH19CgogICAgd2hpbGUgI3N0YWNrID4gMCBkbwogICAgICAgIGxvY2FsIGN1cnJlbnQgPSB0YWJsZS5yZW1vdmUoc3RhY2spCiAgICAgICAgbG9jYWwgY3VycmVudF90YmwgPSBjdXJyZW50WzFdCiAgICAgICAgbG9jYWwgY3VycmVudF9wcmVmaXggPSBjdXJyZW50WzJdCgogICAgICAgIGZvciBrZXksIHZhbHVlIGluIHBhaXJzKGN1cnJlbnRfdGJsKSBkbwogICAgICAgICAgICBsb2NhbCBmdWxsX2tleSA9IGN1cnJlbnRfcHJlZml4IC4uIGtleQogICAgICAgICAgICBpZiB0eXBlKHZhbHVlKSA9PSAidGFibGUiIHRoZW4KICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydChzdGFjaywge3ZhbHVlLCBmdWxsX2tleSAuLiAiLiJ9KQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAtLSDQn9GA0LjQvNC10L3Rj9C10LwgdWkuc2V0X3Zpc2libGUg0Log0LrQsNC20LTQvtC80YMg0Y3Qu9C10LzQtdC90YLRgwogICAgICAgICAgICAgICAgdWkuc2V0X3Zpc2libGUodmFsdWUsIHRydWUpIC0tINCX0LTQtdGB0Ywg0LzQvtC20L3QviDQuNC30LzQtdC90LjRgtGMINC/0LDRgNCw0LzQtdGC0YAg0LLQuNC00LjQvNC+0YHRgtC4INC90LAg0L3Rg9C20L3QvtC1INC30L3QsNGH0LXQvdC40LUKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiB0cmF2ZXJzZV90YWJsZSh0YmwsIHByZWZpeCkKICAgIHByZWZpeCA9IHByZWZpeCBvciAiIgogICAgbG9jYWwgc3RhY2sgPSB7e3RibCwgcHJlZml4fX0KCiAgICB3aGlsZSAjc3RhY2sgPiAwIGRvCiAgICAgICAgbG9jYWwgY3VycmVudCA9IHRhYmxlLnJlbW92ZShzdGFjaykKICAgICAgICBsb2NhbCBjdXJyZW50X3RibCA9IGN1cnJlbnRbMV0KICAgICAgICBsb2NhbCBjdXJyZW50X3ByZWZpeCA9IGN1cnJlbnRbMl0KCiAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gcGFpcnMoY3VycmVudF90YmwpIGRvCiAgICAgICAgICAgIGxvY2FsIGZ1bGxfa2V5ID0gY3VycmVudF9wcmVmaXggLi4ga2V5CiAgICAgICAgICAgIGlmIHR5cGUodmFsdWUpID09ICJ0YWJsZSIgdGhlbgogICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KHN0YWNrLCB7dmFsdWUsIGZ1bGxfa2V5IC4uICIuIn0pCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIC0tINCf0YDQuNC80LXQvdGP0LXQvCB1aS5zZXRfdmlzaWJsZSDQuiDQutCw0LbQtNC+0LzRgyDRjdC70LXQvNC10L3RgtGDCiAgICAgICAgICAgICAgICB1aS5zZXRfdmlzaWJsZSh2YWx1ZSwgZmFsc2UpIC0tINCX0LTQtdGB0Ywg0LzQvtC20L3QviDQuNC30LzQtdC90LjRgtGMINC/0LDRgNCw0LzQtdGC0YAg0LLQuNC00LjQvNC+0YHRgtC4INC90LAg0L3Rg9C20L3QvtC1INC30L3QsNGH0LXQvdC40LUKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCi0tIEByZWdpb24gUkVGRVJFTkNFUyBlbmQKCi0tIEByZWdpb24gVkFSSUFCTEVTIHN0YXJ0CmxvY2FsIHZhcnMgPSB7CiAgICBsb2NhbFBsYXllciA9IDAsCiAgICBoaXRncm91cF9uYW1lcyA9IHsgJ0dlbmVyaWMnLCAnSGVhZCcsICdDaGVzdCcsICdTdG9tYWNoJywgJ0xlZnQgYXJtJywgJ1JpZ2h0IGFybScsICdMZWZ0IGxlZycsICdSaWdodCBsZWcnLCAnTmVjaycsICc/JywgJ0dlYXInIH0sCiAgICBhYVN0YXRlcyA9IHsiR2xvYmFsIiwgIlN0YW5kaW5nIiwgIk1vdmluZyIsICJTbG93d2Fsa2luZyIsICJDcm91Y2hpbmciLCAiQWlyIiwgIkFpci1Dcm91Y2hpbmciLCAiQ3JvdWNoLU1vdmluZyIsICJGYWtlbGFnIn0sCiAgICBwU3RhdGVzID0geyJHIiwgIlMiLCAiTSIsICJTVyIsICJDIiwgIkEiLCAiQUMiLCAiQ00iLCAiRkwifSwKCXNUb0ludCA9IHtbIkdsb2JhbCJdID0gMSwgWyJTdGFuZGluZyJdID0gMiwgWyJNb3ZpbmciXSA9IDMsIFsiU2xvd3dhbGtpbmciXSA9IDQsIFsiQ3JvdWNoaW5nIl0gPSA1LCBbIkFpciJdID0gNiwgWyJBaXItQ3JvdWNoaW5nIl0gPSA3LCBbIkNyb3VjaC1Nb3ZpbmciXSA9IDggLCBbIkZha2VsYWciXSA9IDl9LAogICAgaW50VG9TID0ge1sxXSA9ICJHbG9iYWwiLCBbMl0gPSAiU3RhbmRpbmciLCBbM10gPSAiTW92aW5nIiwgWzRdID0gIlNsb3d3YWxraW5nIiwgWzVdID0gIkNyb3VjaGluZyIsIFs2XSA9ICJBaXIiLCBbN10gPSAiQWlyLUNyb3VjaGluZyIsIFs4XSA9ICJDcm91Y2gtTW92aW5nIiwgWzldID0gIkZha2VsYWcifSwKICAgIGN1cnJlbnRUYWIgPSAxLAogICAgYWN0aXZlU3RhdGUgPSAxLAogICAgcFN0YXRlID0gMSwKICAgIHlhdyA9IDAsCiAgICBzaWRlbW92ZSA9IDAsCiAgICBtMV90aW1lID0gMCwKICAgIGNob2tlZCA9IDAsCiAgICBkdF9zdGF0ZSA9IDAsCiAgICBkb3VibGV0YXBfdGltZSA9IDAsCiAgICBicmVha2VyID0gewogICAgICAgIGRlZmVuc2l2ZSA9IDAsCiAgICAgICAgZGVmZW5zaXZlX2NoZWNrID0gMCwKICAgICAgICBjbWQgPSAwLAogICAgICAgIGxhc3Rfb3JpZ2luID0gbmlsLAogICAgICAgIG9yaWdpbiA9IG5pbCwKICAgICAgICB0cF9kaXN0ID0gMCwKICAgICAgICB0cF9kYXRhID0gZ3JhbV9jcmVhdGUoMCwzKQogICAgfSwKICAgIG1hcG5hbWUgPSBnbG9iYWxzLm1hcG5hbWUoKQp9Cgpsb2NhbCBqcyA9IHBhbm9yYW1hLm9wZW4oKQpsb2NhbCBNeVBlcnNvbmFBUEksIExvYmJ5QVBJLCBQYXJ0eUxpc3RBUEksIFN0ZWFtT3ZlcmxheUFQSSA9IGpzLk15UGVyc29uYUFQSSwganMuTG9iYnlBUEksIGpzLlBhcnR5TGlzdEFQSSwganMuU3RlYW1PdmVybGF5QVBJCi0tIEByZWdpb24gVkFSSUFCTEVTIGVuZAoKLS0gQHJlZ2lvbiBGRkkgc3RhcnQKbG9jYWwgYW5nbGUzZF9zdHJ1Y3QgPSBmZmkudHlwZW9mKCJzdHJ1Y3QgeyBmbG9hdCBwaXRjaDsgZmxvYXQgeWF3OyBmbG9hdCByb2xsOyB9IikKbG9jYWwgdmVjX3N0cnVjdCA9IGZmaS50eXBlb2YoInN0cnVjdCB7IGZsb2F0IHg7IGZsb2F0IHk7IGZsb2F0IHo7IH0iKQoKbG9jYWwgY1VzZXJDbWQgPQogICAgZmZpLnR5cGVvZigKICAgIFtbCiAgICBzdHJ1Y3QKICAgIHsKICAgICAgICB1aW50cHRyX3QgdmZwdHI7CiAgICAgICAgaW50IGNvbW1hbmRfbnVtYmVyOwogICAgICAgIGludCB0aWNrX2NvdW50OwogICAgICAgICQgdmlld2FuZ2xlczsKICAgICAgICAkIGFpbWRpcmVjdGlvbjsKICAgICAgICBmbG9hdCBmb3J3YXJkbW92ZTsKICAgICAgICBmbG9hdCBzaWRlbW92ZTsKICAgICAgICBmbG9hdCB1cG1vdmU7CiAgICAgICAgaW50IGJ1dHRvbnM7CiAgICAgICAgdWludDhfdCBpbXB1bHNlOwogICAgICAgIGludCB3ZWFwb25zZWxlY3Q7CiAgICAgICAgaW50IHdlYXBvbnN1YnR5cGU7CiAgICAgICAgaW50IHJhbmRvbV9zZWVkOwogICAgICAgIHNob3J0IG1vdXNlZHg7CiAgICAgICAgc2hvcnQgbW91c2VkeTsKICAgICAgICBib29sIGhhc2JlZW5wcmVkaWN0ZWQ7CiAgICAgICAgJCBoZWFkYW5nbGVzOwogICAgICAgICQgaGVhZG9mZnNldDsKICAgICAgICBib29sIHNlbmRfcGFja2V0OyAKICAgIH0KICAgIF1dLAogICAgYW5nbGUzZF9zdHJ1Y3QsCiAgICB2ZWNfc3RydWN0LAogICAgYW5nbGUzZF9zdHJ1Y3QsCiAgICB2ZWNfc3RydWN0CikKCmxvY2FsIGNsaWVudF9zaWcgPSBjbGllbnQuZmluZF9zaWduYXR1cmUoImNsaWVudC5kbGwiLCAiXHhCOVx4Q0NceENDXHhDQ1x4Q0NceDhCXHg0MFx4MzhceEZGXHhEMFx4ODRceEMwXHgwRlx4ODUiKSBvciBlcnJvcigiY2xpZW50LmRsbCE6aW5wdXQgbm90IGZvdW5kLiIpCmxvY2FsIGdldF9jVXNlckNtZCA9IGZmaS50eXBlb2YoIiQqIChfX3RoaXNjYWxsKikodWludHB0cl90IGVjeCwgaW50IG5TbG90LCBpbnQgc2VxdWVuY2VfbnVtYmVyKSIsIGNVc2VyQ21kKQpsb2NhbCBpbnB1dF92dGJsID0gZmZpLnR5cGVvZihbW3N0cnVjdHt1aW50cHRyX3QgcGFkZGluZ1s4XTskIEdldFVzZXJDbWQ7fV1dLGdldF9jVXNlckNtZCkKbG9jYWwgaW5wdXQgPSBmZmkudHlwZW9mKFtbc3RydWN0eyQqIHZmcHRyO30qXV0sIGlucHV0X3Z0YmwpCmxvY2FsIGdldF9pbnB1dCA9IGZmaS5jYXN0KGlucHV0LGZmaS5jYXN0KCJ1aW50cHRyX3QqKiIsdG9udW1iZXIoZmZpLmNhc3QoInVpbnRwdHJfdCIsIGNsaWVudF9zaWcpKSArIDEpWzBdKQotLSBAcmVnaW9uIEZGSSBlbmQKCi0tIEByZWdpb24gRlVOQ1Mgc3RhcnQKbG9jYWwgZnVuYyA9IHsKICAgIHJlbmRlcl90ZXh0ID0gZnVuY3Rpb24oeCwgeSwgLi4uKQogICAgICAgIGxvY2FsIHhfT2Zmc2V0ID0gMAogICAgICAgIAogICAgICAgIGxvY2FsIGFyZ3MgPSB7Li4ufQogICAgCiAgICAgICAgZm9yIGksIGxpbmUgaW4gcGFpcnMoYXJncykgZG8KICAgICAgICAgICAgbG9jYWwgciwgZywgYiwgYSwgdGV4dCA9IHVucGFjayhsaW5lKQogICAgICAgICAgICBsb2NhbCBzaXplID0gdmVjdG9yKHJlbmRlcmVyLm1lYXN1cmVfdGV4dCgiLWQiLCB0ZXh0KSkKICAgICAgICAgICAgcmVuZGVyZXIudGV4dCh4ICsgeF9PZmZzZXQsIHksIHIsIGcsIGIsIGEsICItZCIsIDAsIHRleHQpCiAgICAgICAgICAgIHhfT2Zmc2V0ID0geF9PZmZzZXQgKyBzaXplLngKICAgICAgICBlbmQKICAgIGVuZCwKICAgIGVhc2VJbk91dCA9IGZ1bmN0aW9uKHQpCiAgICAgICAgcmV0dXJuICh0ID4gMC41KSBhbmQgNCooKHQtMSleMykrMSBvciA0KnReMzsKICAgIGVuZCwKICAgIHJlYyA9IGZ1bmN0aW9uKHgsIHksIHcsIGgsIHJhZGl1cywgY29sb3IpCiAgICAgICAgcmFkaXVzID0gbWF0aC5taW4oeC8yLCB5LzIsIHJhZGl1cykKICAgICAgICBsb2NhbCByLCBnLCBiLCBhID0gdW5wYWNrKGNvbG9yKQogICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4LCB5ICsgcmFkaXVzLCB3LCBoIC0gcmFkaXVzKjIsIHIsIGcsIGIsIGEpCiAgICAgICAgcmVuZGVyZXIucmVjdGFuZ2xlKHggKyByYWRpdXMsIHksIHcgLSByYWRpdXMqMiwgcmFkaXVzLCByLCBnLCBiLCBhKQogICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4ICsgcmFkaXVzLCB5ICsgaCAtIHJhZGl1cywgdyAtIHJhZGl1cyoyLCByYWRpdXMsIHIsIGcsIGIsIGEpCiAgICAgICAgcmVuZGVyZXIuY2lyY2xlKHggKyByYWRpdXMsIHkgKyByYWRpdXMsIHIsIGcsIGIsIGEsIHJhZGl1cywgMTgwLCAwLjI1KQogICAgICAgIHJlbmRlcmVyLmNpcmNsZSh4IC0gcmFkaXVzICsgdywgeSArIHJhZGl1cywgciwgZywgYiwgYSwgcmFkaXVzLCA5MCwgMC4yNSkKICAgICAgICByZW5kZXJlci5jaXJjbGUoeCAtIHJhZGl1cyArIHcsIHkgLSByYWRpdXMgKyBoLCByLCBnLCBiLCBhLCByYWRpdXMsIDAsIDAuMjUpCiAgICAgICAgcmVuZGVyZXIuY2lyY2xlKHggKyByYWRpdXMsIHkgLSByYWRpdXMgKyBoLCByLCBnLCBiLCBhLCByYWRpdXMsIC05MCwgMC4yNSkKICAgIGVuZCwKICAgIHJlY19vdXRsaW5lID0gZnVuY3Rpb24oeCwgeSwgdywgaCwgcmFkaXVzLCB0aGlja25lc3MsIGNvbG9yKQogICAgICAgIHJhZGl1cyA9IG1hdGgubWluKHcvMiwgaC8yLCByYWRpdXMpCiAgICAgICAgbG9jYWwgciwgZywgYiwgYSA9IHVucGFjayhjb2xvcikKICAgICAgICBpZiByYWRpdXMgPT0gMSB0aGVuCiAgICAgICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4LCB5LCB3LCB0aGlja25lc3MsIHIsIGcsIGIsIGEpCiAgICAgICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4LCB5ICsgaCAtIHRoaWNrbmVzcywgdyAsIHRoaWNrbmVzcywgciwgZywgYiwgYSkKICAgICAgICBlbHNlCiAgICAgICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4ICsgcmFkaXVzLCB5LCB3IC0gcmFkaXVzKjIsIHRoaWNrbmVzcywgciwgZywgYiwgYSkKICAgICAgICAgICAgcmVuZGVyZXIucmVjdGFuZ2xlKHggKyByYWRpdXMsIHkgKyBoIC0gdGhpY2tuZXNzLCB3IC0gcmFkaXVzKjIsIHRoaWNrbmVzcywgciwgZywgYiwgYSkKICAgICAgICAgICAgcmVuZGVyZXIucmVjdGFuZ2xlKHgsIHkgKyByYWRpdXMsIHRoaWNrbmVzcywgaCAtIHJhZGl1cyoyLCByLCBnLCBiLCBhKQogICAgICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoeCArIHcgLSB0aGlja25lc3MsIHkgKyByYWRpdXMsIHRoaWNrbmVzcywgaCAtIHJhZGl1cyoyLCByLCBnLCBiLCBhKQogICAgICAgICAgICByZW5kZXJlci5jaXJjbGVfb3V0bGluZSh4ICsgcmFkaXVzLCB5ICsgcmFkaXVzLCByLCBnLCBiLCBhLCByYWRpdXMsIDE4MCwgMC4yNSwgdGhpY2tuZXNzKQogICAgICAgICAgICByZW5kZXJlci5jaXJjbGVfb3V0bGluZSh4ICsgcmFkaXVzLCB5ICsgaCAtIHJhZGl1cywgciwgZywgYiwgYSwgcmFkaXVzLCA5MCwgMC4yNSwgdGhpY2tuZXNzKQogICAgICAgICAgICByZW5kZXJlci5jaXJjbGVfb3V0bGluZSh4ICsgdyAtIHJhZGl1cywgeSArIHJhZGl1cywgciwgZywgYiwgYSwgcmFkaXVzLCAtOTAsIDAuMjUsIHRoaWNrbmVzcykKICAgICAgICAgICAgcmVuZGVyZXIuY2lyY2xlX291dGxpbmUoeCArIHcgLSByYWRpdXMsIHkgKyBoIC0gcmFkaXVzLCByLCBnLCBiLCBhLCByYWRpdXMsIDAsIDAuMjUsIHRoaWNrbmVzcykKICAgICAgICBlbmQKICAgIGVuZCwKICAgIGNsYW1wID0gZnVuY3Rpb24oeCwgbWluLCBtYXgpCiAgICAgICAgcmV0dXJuIHggPCBtaW4gYW5kIG1pbiBvciB4ID4gbWF4IGFuZCBtYXggb3IgeAogICAgZW5kLAogICAgdGFibGVfY29udGFpbnMgPSBmdW5jdGlvbih0YmwsIHZhbHVlKQogICAgICAgIGZvciBpID0gMSwgI3RibCBkbwogICAgICAgICAgICBpZiB0YmxbaV0gPT0gdmFsdWUgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICBlbmQsCiAgICBzZXRBQVRhYiA9IGZ1bmN0aW9uKHJlZikKICAgICAgICB1aS5zZXRfdmlzaWJsZShyZWZzLmVuYWJsZWQsIHJlZikKICAgICAgICB1aS5zZXRfdmlzaWJsZShyZWZzLnBpdGNoWzFdLCByZWYpCiAgICAgICAgdWkuc2V0X3Zpc2libGUocmVmcy5waXRjaFsyXSwgcmVmKQogICAgICAgIHVpLnNldF92aXNpYmxlKHJlZnMucm9sbCwgcmVmKQogICAgICAgIHVpLnNldF92aXNpYmxlKHJlZnMuc2xvd21vdGlvbiwgcmVmKQogICAgICAgIHVpLnNldF92aXNpYmxlKHJlZnMuTGVnbW92ZXMsIHJlZikKICAgICAgICB1aS5zZXRfdmlzaWJsZShyZWZzLnlhd0Jhc2UsIHJlZikKICAgICAgICB1aS5zZXRfdmlzaWJsZShyZWZzLnlhd1sxXSwgcmVmKQogICAgICAgIHVpLnNldF92aXNpYmxlKHJlZnMueWF3WzJdLCByZWYpCiAgICAgICAgdWkuc2V0X3Zpc2libGUocmVmcy55YXdKaXR0ZXJbMV0sIHJlZikKICAgICAgICB1aS5zZXRfdmlzaWJsZShyZWZzLnlhd0ppdHRlclsyXSwgcmVmKQogICAgICAgIHVpLnNldF92aXNpYmxlKHJlZnMuYm9keVlhd1sxXSwgcmVmKQogICAgICAgIHVpLnNldF92aXNpYmxlKHJlZnMuYm9keVlhd1syXSwgcmVmKQogICAgICAgIHVpLnNldF92aXNpYmxlKHJlZnMuZnJlZVN0YW5kWzFdLCByZWYpCiAgICAgICAgdWkuc2V0X3Zpc2libGUocmVmcy5mcmVlU3RhbmRbMl0sIHJlZikKICAgICAgICB1aS5zZXRfdmlzaWJsZShyZWZzLmZzQm9keVlhdywgcmVmKQogICAgICAgIHVpLnNldF92aXNpYmxlKHJlZnMuZWRnZVlhdywgcmVmKQogICAgICAgIHVpLnNldF92aXNpYmxlKHJlZnMuZmxMaW1pdCwgcmVmKQogICAgICAgIHVpLnNldF92aXNpYmxlKHJlZnMuZmxhbW91bnQsIHJlZikKICAgICAgICB1aS5zZXRfdmlzaWJsZShyZWZzLmZsVmFyaWFuY2UsIHJlZikKICAgICAgICB1aS5zZXRfdmlzaWJsZShyZWZzLmZsZW5hYmxlZCwgcmVmKQogICAgICAgIHVpLnNldF92aXNpYmxlKHJlZnMuQUFmYWtlLCByZWYpCiAgICAgICAgdWkuc2V0X3Zpc2libGUocmVmcy5PU0FBQSwgcmVmKQogICAgZW5kLAogICAgZmluZERpc3QgPSBmdW5jdGlvbiAoeDEsIHkxLCB6MSwgeDIsIHkyLCB6MikKICAgICAgICByZXR1cm4gbWF0aC5zcXJ0KCh4MiAtIHgxKV4yICsgKHkyIC0geTEpXjIgKyAoejIgLSB6MSleMikKICAgIGVuZCwKICAgIHJlc2V0QUFUYWIgPSBmdW5jdGlvbigpCiAgICAgICAgdWkuc2V0KHJlZnMuT1NBQWEsIGZhbHNlKQogICAgICAgIHVpLnNldChyZWZzLmVuYWJsZWQsIGZhbHNlKQogICAgICAgIHVpLnNldChyZWZzLnBpdGNoWzFdLCAiT2ZmIikKICAgICAgICB1aS5zZXQocmVmcy5waXRjaFsyXSwgMCkKICAgICAgICB1aS5zZXQocmVmcy5yb2xsLCAwKQogICAgICAgIHVpLnNldChyZWZzLnNsb3dtb3Rpb24sIGZhbHNlKQogICAgICAgIHVpLnNldChyZWZzLnlhd0Jhc2UsICJsb2NhbCB2aWV3IikKICAgICAgICB1aS5zZXQocmVmcy55YXdbMV0sICJPZmYiKQogICAgICAgIHVpLnNldChyZWZzLnlhd1syXSwgMCkKICAgICAgICB1aS5zZXQocmVmcy55YXdKaXR0ZXJbMV0sICJPZmYiKQogICAgICAgIHVpLnNldChyZWZzLnlhd0ppdHRlclsyXSwgMCkKICAgICAgICB1aS5zZXQocmVmcy5ib2R5WWF3WzFdLCAiT2ZmIikKICAgICAgICB1aS5zZXQocmVmcy5ib2R5WWF3WzJdLCAwKQogICAgICAgIHVpLnNldChyZWZzLmZyZWVTdGFuZFsxXSwgZmFsc2UpCiAgICAgICAgdWkuc2V0KHJlZnMuZnJlZVN0YW5kWzJdLCAiT24gaG90a2V5IikKICAgICAgICB1aS5zZXQocmVmcy5mc0JvZHlZYXcsIGZhbHNlKQogICAgICAgIHVpLnNldChyZWZzLmVkZ2VZYXcsIGZhbHNlKQogICAgICAgIHVpLnNldChyZWZzLmZsTGltaXQsIGZhbHNlKQogICAgICAgIHVpLnNldChyZWZzLmZsYW1vdW50LCBmYWxzZSkKICAgICAgICB1aS5zZXQocmVmcy5mbGVuYWJsZWQsIGZhbHNlKQogICAgICAgIHVpLnNldChyZWZzLmZsVmFyaWFuY2UsIGZhbHNlKQogICAgICAgIHVpLnNldChyZWZzLkFBZmFrZSwgZmFsc2UpCiAgICBlbmQsCiAgICB0eXBlX2Zyb21fc3RyaW5nID0gZnVuY3Rpb24oaW5wdXQpCiAgICAgICAgaWYgdHlwZShpbnB1dCkgfj0gInN0cmluZyIgdGhlbiByZXR1cm4gaW5wdXQgZW5kCgogICAgICAgIGxvY2FsIHZhbHVlID0gaW5wdXQ6bG93ZXIoKQoKICAgICAgICBpZiB2YWx1ZSA9PSAidHJ1ZSIgdGhlbgogICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgIGVsc2VpZiB2YWx1ZSA9PSAiZmFsc2UiIHRoZW4KICAgICAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgICAgZWxzZWlmIHRvbnVtYmVyKHZhbHVlKSB+PSBuaWwgdGhlbgogICAgICAgICAgICByZXR1cm4gdG9udW1iZXIodmFsdWUpCiAgICAgICAgZWxzZQogICAgICAgICAgICByZXR1cm4gdG9zdHJpbmcoaW5wdXQpCiAgICAgICAgZW5kCiAgICBlbmQsCiAgICBsZXJwID0gZnVuY3Rpb24oc3RhcnQsIHZlbmQsIHRpbWUpCiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgKHZlbmQgLSBzdGFydCkgKiB0aW1lCiAgICBlbmQsCiAgICB2ZWNfYW5nbGVzID0gZnVuY3Rpb24oYW5nbGVfeCwgYW5nbGVfeSkKICAgICAgICBsb2NhbCBzeSA9IG1hdGguc2luKG1hdGgucmFkKGFuZ2xlX3kpKQogICAgICAgIGxvY2FsIGN5ID0gbWF0aC5jb3MobWF0aC5yYWQoYW5nbGVfeSkpCiAgICAgICAgbG9jYWwgc3AgPSBtYXRoLnNpbihtYXRoLnJhZChhbmdsZV94KSkKICAgICAgICBsb2NhbCBjcCA9IG1hdGguY29zKG1hdGgucmFkKGFuZ2xlX3gpKQogICAgICAgIHJldHVybiBjcCAqIGN5LCBjcCAqIHN5LCAtc3AKICAgIGVuZCwKICAgIGhleCA9IGZ1bmN0aW9uKGFyZykKICAgICAgICBsb2NhbCByZXN1bHQgPSAiXGEiCiAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gbmV4dCwgYXJnIGRvCiAgICAgICAgICAgIGxvY2FsIG91dHB1dCA9ICIiCiAgICAgICAgICAgIHdoaWxlIHZhbHVlID4gMCBkbwogICAgICAgICAgICAgICAgbG9jYWwgaW5kZXggPSBtYXRoLmZtb2QodmFsdWUsIDE2KSArIDEKICAgICAgICAgICAgICAgIHZhbHVlID0gbWF0aC5mbG9vcih2YWx1ZSAvIDE2KQogICAgICAgICAgICAgICAgb3V0cHV0ID0gc3RyaW5nLnN1YigiMDEyMzQ1Njc4OUFCQ0RFRiIsIGluZGV4LCBpbmRleCkgLi4gb3V0cHV0IAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgI291dHB1dCA9PSAwIHRoZW4gCiAgICAgICAgICAgICAgICBvdXRwdXQgPSAiMDAiIAogICAgICAgICAgICBlbHNlaWYgI291dHB1dCA9PSAxIHRoZW4gCiAgICAgICAgICAgICAgICBvdXRwdXQgPSAiMCIgLi4gb3V0cHV0IAogICAgICAgICAgICBlbmQgCiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAuLiBvdXRwdXQKICAgICAgICBlbmQgCiAgICAgICAgcmV0dXJuIHJlc3VsdCAuLiAiRkYiCiAgICBlbmQsCiAgICBzcGxpdCA9IGZ1bmN0aW9uKCBpbnB1dHN0ciwgc2VwKQogICAgICAgIGlmIHNlcCA9PSBuaWwgdGhlbgogICAgICAgICAgICAgICAgc2VwID0gIiVzIgogICAgICAgIGVuZAogICAgICAgIGxvY2FsIHQ9e30KICAgICAgICBmb3Igc3RyIGluIHN0cmluZy5nbWF0Y2goaW5wdXRzdHIsICIoW14iLi5zZXAuLiJdKykiKSBkbwogICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KHQsIHN0cikKICAgICAgICBlbmQKICAgICAgICByZXR1cm4gdAogICAgZW5kLAogICAgUkdCQXRvSEVYID0gZnVuY3Rpb24ocmVkQXJnLCBncmVlbkFyZywgYmx1ZUFyZywgYWxwaGFBcmcpCiAgICAgICAgcmV0dXJuIHN0cmluZy5mb3JtYXQoJyUuMnglLjJ4JS4yeCUuMngnLCByZWRBcmcsIGdyZWVuQXJnLCBibHVlQXJnLCBhbHBoYUFyZykKICAgIGVuZCwKICAgIGNyZWF0ZV9jb2xvcl9hcnJheSA9IGZ1bmN0aW9uKHIsIGcsIGIsIHN0cmluZykKICAgICAgICBsb2NhbCBjb2xvcnMgPSB7fQogICAgICAgIGZvciBpID0gMCwgI3N0cmluZyBkbwogICAgICAgICAgICBsb2NhbCBjb2xvciA9IHtyLCBnLCBiLCAyNTUgKiBtYXRoLmFicygxICogbWF0aC5jb3MoMiAqIG1hdGgucGkgKiBnbG9iYWxzLmN1cnRpbWUoKSAvIDQgKyBpICogNSAvIDMwKSl9CiAgICAgICAgICAgIHRhYmxlLmluc2VydChjb2xvcnMsIGNvbG9yKQogICAgICAgIGVuZAogICAgICAgIHJldHVybiBjb2xvcnMKICAgIGVuZCwKICAgIHRleHRBcnJheSA9IGZ1bmN0aW9uKHN0cmluZykKICAgICAgICBsb2NhbCByZXN1bHQgPSB7fQogICAgICAgIGZvciBpPTEsICNzdHJpbmcgZG8KICAgICAgICAgICAgcmVzdWx0W2ldID0gc3RyaW5nLnN1YihzdHJpbmcsIGksIGkpCiAgICAgICAgZW5kCiAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgZW5kLAogICAgaW5jbHVkZXMgPSBmdW5jdGlvbih0YmwsIHZhbHVlKQogICAgICAgIGZvciBpID0gMSwgI3RibCBkbwogICAgICAgICAgICBpZiB0YmxbaV0gPT0gdmFsdWUgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICBlbmQsCiAgICBncmFkaWVudF90ZXh0ID0gZnVuY3Rpb24ocjEsIGcxLCBiMSwgYTEsIHIyLCBnMiwgYjIsIGEyLCB0ZXh0KQogICAgICAgIGxvY2FsIG91dHB1dCA9ICcnCiAgICAKICAgICAgICBsb2NhbCBsZW4gPSAjdGV4dC0xCiAgICAKICAgICAgICBsb2NhbCByaW5jID0gKHIyIC0gcjEpIC8gbGVuCiAgICAgICAgbG9jYWwgZ2luYyA9IChnMiAtIGcxKSAvIGxlbgogICAgICAgIGxvY2FsIGJpbmMgPSAoYjIgLSBiMSkgLyBsZW4KICAgICAgICBsb2NhbCBhaW5jID0gKGEyIC0gYTEpIC8gbGVuCiAgICAKICAgICAgICBmb3IgaT0xLCBsZW4rMSBkbwogICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQgLi4gKCdcYSUwMnglMDJ4JTAyeCUwMnglcycpOmZvcm1hdChyMSwgZzEsIGIxLCBhMSwgdGV4dDpzdWIoaSwgaSkpCiAgICAKICAgICAgICAgICAgcjEgPSByMSArIHJpbmMKICAgICAgICAgICAgZzEgPSBnMSArIGdpbmMKICAgICAgICAgICAgYjEgPSBiMSArIGJpbmMKICAgICAgICAgICAgYTEgPSBhMSArIGFpbmMKICAgICAgICBlbmQKICAgIAogICAgICAgIHJldHVybiBvdXRwdXQKICAgIGVuZAosICAgIAogICAgdGltZV90b190aWNrcyA9IGZ1bmN0aW9uKHQpCiAgICAgICAgcmV0dXJuIG1hdGguZmxvb3IoMC41ICsgKHQgLyBnbG9iYWxzLnRpY2tpbnRlcnZhbCgpKSkKICAgIGVuZCwKICAgIGhlYWRWaXNpYmxlID0gZnVuY3Rpb24oZW5lbXkpCiAgICAgICAgbG9jYWxfcGxheWVyID0gZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKQogICAgICAgIGlmIGxvY2FsX3BsYXllciA9PSBuaWwgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgbG9jYWwgZXgsIGV5LCBleiA9IGVudGl0eS5oaXRib3hfcG9zaXRpb24oZW5lbXksIDEpCiAgICAKICAgICAgICBsb2NhbCBoeCwgaHksIGh6ID0gZW50aXR5LmhpdGJveF9wb3NpdGlvbihsb2NhbF9wbGF5ZXIsIDEpCiAgICAgICAgbG9jYWwgaGVhZF9mcmFjdGlvbiwgaGVhZF9lbnRpbmRleF9oaXQgPSBjbGllbnQudHJhY2VfbGluZShlbmVteSwgZXgsIGV5LCBleiwgaHgsIGh5LCBoeikKICAgICAgICBpZiBoZWFkX2VudGluZGV4X2hpdCA9PSBsb2NhbF9wbGF5ZXIgb3IgaGVhZF9mcmFjdGlvbiA9PSAxIHRoZW4gcmV0dXJuIHRydWUgZWxzZSByZXR1cm4gZmFsc2UgZW5kCiAgICBlbmQKfQoKZnVuYy5pbl9haXIgPSAoZnVuY3Rpb24ocGxheWVyKQogICAgaWYgcGxheWVyID09IG5pbCB0aGVuIHJldHVybiBlbmQKICAgIGxvY2FsIGZsYWdzID0gZW50aXR5LmdldF9wcm9wKHBsYXllciwgIm1fZkZsYWdzIikKICAgIGlmIGZsYWdzID09IG5pbCB0aGVuIHJldHVybiBlbmQKICAgIGlmIGJpdC5iYW5kKGZsYWdzLCAxKSA9PSAwIHRoZW4KICAgICAgICByZXR1cm4gdHJ1ZQogICAgZW5kCiAgICByZXR1cm4gZmFsc2UKZW5kKQoKbG9jYWwgZnVuY3Rpb24gZ2V0X3ZlbG9jaXR5KHBsYXllcikKICAgIGxvY2FsIHgseSx6ID0gZW50aXR5LmdldF9wcm9wKHBsYXllciwgIm1fdmVjVmVsb2NpdHkiKQogICAgaWYgeCA9PSBuaWwgdGhlbiByZXR1cm4gZW5kCiAgICByZXR1cm4gbWF0aC5zcXJ0KHgqeCArIHkqeSArIHoqeikKZW5kCgpsb2NhbCBmdW5jdGlvbiBjYW5fZGVzeW5jKGNtZCkKICAgIGlmIGVudGl0eS5nZXRfcHJvcChlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpLCAibV9Nb3ZlVHlwZSIpID09IDkgdGhlbgogICAgICAgIHJldHVybiBmYWxzZQogICAgZW5kCiAgICBsb2NhbCBjbGllbnRfd2VhcG9uID0gZW50aXR5LmdldF9wbGF5ZXJfd2VhcG9uKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkpCiAgICBpZiBjbGllbnRfd2VhcG9uID09IG5pbCB0aGVuCiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICBlbmQKICAgIGxvY2FsIHdlYXBvbl9jbGFzc25hbWUgPSBlbnRpdHkuZ2V0X2NsYXNzbmFtZShjbGllbnRfd2VhcG9uKQogICAgbG9jYWwgaW5fdXNlID0gY21kLmluX3VzZSA9PSAxCiAgICBsb2NhbCBpbl9hdHRhY2sgPSBjbWQuaW5fYXR0YWNrID09IDEKICAgIGxvY2FsIGluX2F0dGFjazIgPSBjbWQuaW5fYXR0YWNrMiA9PSAxCiAgICBpZiBpbl91c2UgdGhlbgogICAgICAgIHJldHVybiBmYWxzZQogICAgZW5kCiAgICBpZiBpbl9hdHRhY2sgb3IgaW5fYXR0YWNrMiB0aGVuCiAgICAgICAgaWYgd2VhcG9uX2NsYXNzbmFtZTpmaW5kKCJHcmVuYWRlIikgdGhlbgogICAgICAgICAgICB2YXJzLm0xX3RpbWUgPSBnbG9iYWxzLmN1cnRpbWUoKSArIDAuMTUKICAgICAgICBlbmQKICAgIGVuZAogICAgaWYgdmFycy5tMV90aW1lID4gZ2xvYmFscy5jdXJ0aW1lKCkgdGhlbgogICAgICAgIHJldHVybiBmYWxzZQogICAgZW5kCiAgICBpZiBpbl9hdHRhY2sgdGhlbgogICAgICAgIGlmIGNsaWVudF93ZWFwb24gPT0gbmlsIHRoZW4KICAgICAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgICAgZW5kCiAgICAgICAgaWYgd2VhcG9uX2NsYXNzbmFtZSB0aGVuCiAgICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgIGVuZAogICAgICAgIHJldHVybiBmYWxzZQogICAgZW5kCiAgICByZXR1cm4gdHJ1ZQplbmQKCmxvY2FsIGZ1bmN0aW9uIGdldF9jaG9rZShjbWQpCiAgICBsb2NhbCBmbF9saW1pdCA9IHVpLmdldChyZWZzLmZsTGltaXQpCiAgICBsb2NhbCBmbF9wID0gZmxfbGltaXQgJSAyID09IDEKICAgIGxvY2FsIGNob2tlZGNvbW1hbmRzID0gY21kLmNob2tlZGNvbW1hbmRzCiAgICBsb2NhbCBjbWRfcCA9IGNob2tlZGNvbW1hbmRzICUgMiA9PSAwCiAgICBsb2NhbCBkb3VibGV0YXBfcmVmID0gdWkuZ2V0KHJlZnMuZHRbMV0pIGFuZCB1aS5nZXQocmVmcy5kdFsyXSkKICAgIGxvY2FsIG9zYWFfcmVmID0gdWkuZ2V0KHJlZnMub3NbMV0pIGFuZCB1aS5nZXQocmVmcy5vc1syXSkKICAgIGxvY2FsIGZkX3JlZiA9IHVpLmdldChyZWZzLmZha2VEdWNrKQogICAgbG9jYWwgdmVsb2NpdHkgPSBnZXRfdmVsb2NpdHkoZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSkKICAgIGlmIGRvdWJsZXRhcF9yZWYgdGhlbgogICAgICAgIGlmIHZhcnMuY2hva2VkID4gMiB0aGVuCiAgICAgICAgICAgIGlmIGNtZC5jaG9rZWRjb21tYW5kcyA+PSAwIHRoZW4KICAgICAgICAgICAgICAgIGNtZF9wID0gZmFsc2UKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKICAgIHZhcnMuY2hva2VkID0gY21kLmNob2tlZGNvbW1hbmRzCiAgICBpZiB2YXJzLmR0X3N0YXRlIH49IGRvdWJsZXRhcF9yZWYgdGhlbgogICAgICAgIHZhcnMuZG91YmxldGFwX3RpbWUgPSBnbG9iYWxzLmN1cnRpbWUoKSArIDAuMjUKICAgIGVuZAogICAgaWYgbm90IGRvdWJsZXRhcF9yZWYgYW5kIG5vdCBvc2FhX3JlZiBhbmQgbm90IGNtZC5ub19jaG9rZSBvciBmZF9yZWYgdGhlbgogICAgICAgIGlmIG5vdCBmbF9wIHRoZW4KICAgICAgICAgICAgaWYgdmFycy5kb3VibGV0YXBfdGltZSA+IGdsb2JhbHMuY3VydGltZSgpIHRoZW4KICAgICAgICAgICAgICAgIGlmIGNtZC5jaG9rZWRjb21tYW5kcyA+PSAwIGFuZCBjbWQuY2hva2VkY29tbWFuZHMgPCBmbF9saW1pdCB0aGVuCiAgICAgICAgICAgICAgICAgICAgY21kX3AgPSBjaG9rZWRjb21tYW5kcyAlIDIgPT0gMAogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGNtZF9wID0gY2hva2VkY29tbWFuZHMgJSAyID09IDEKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBjbWRfcCA9IGNob2tlZGNvbW1hbmRzICUgMiA9PSAxCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCiAgICB2YXJzLmR0X3N0YXRlID0gZG91YmxldGFwX3JlZgogICAgcmV0dXJuIGNtZF9wCmVuZAoKbG9jYWwgZnVuY3Rpb24gYXBwbHlfZGVzeW5jKGNtZCwgZmFrZSkKICAgIGxvY2FsIHVzcmNtZCA9IGdldF9pbnB1dC52ZnB0ci5HZXRVc2VyQ21kKGZmaS5jYXN0KCJ1aW50cHRyX3QiLCBnZXRfaW5wdXQpLCAwLCBjbWQuY29tbWFuZF9udW1iZXIpCiAgICBjbWQuYWxsb3dfc2VuZF9wYWNrZXQgPSBmYWxzZQoKICAgIGxvY2FsIHBpdGNoLCB5YXcgPSBjbGllbnQuY2FtZXJhX2FuZ2xlcygpCgogICAgbG9jYWwgY2FuX2Rlc3luYyA9IGNhbl9kZXN5bmMoY21kKQogICAgbG9jYWwgaXNfY2hva2UgPSBnZXRfY2hva2UoY21kKQoKICAgIHVpLnNldChyZWZzLmJvZHlZYXdbMV0sIGlzX2Nob2tlIGFuZCAiU3RhdGljIiBvciAiT2ZmIikKICAgIGlmIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAwIHRoZW4KICAgICAgICB2YXJzLnlhdyA9ICh5YXcgKyAxODApIC0gZmFrZSoyOwogICAgZW5kCgogICAgaWYgY2FuX2Rlc3luYyB0aGVuCiAgICAgICAgaWYgbm90IHVzcmNtZC5oYXNiZWVucHJlZGljdGVkIHRoZW4KICAgICAgICAgICAgaWYgaXNfY2hva2UgdGhlbgogICAgICAgICAgICAgICAgY21kLnlhdyA9IHZhcnMueWF3OwogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmxvY2FsIGNvbG9yX3RleHQgPSBmdW5jdGlvbiggc3RyaW5nLCByLCBnLCBiLCBhKQogICAgbG9jYWwgd2hpdGUgPSAiXGEiIC4uIGZ1bmMuUkdCQXRvSEVYKDI1NSwgMjU1LCAyNTUsIGEpCgogICAgbG9jYWwgc3RyID0gIiIKICAgIGZvciBpLCBzIGluIGlwYWlycyhmdW5jLnNwbGl0KHN0cmluZywgIiQiKSkgZG8KICAgIGVuZAoKICAgIHJldHVybiBzdHIKZW5kCgpsb2NhbCBhbmltYXRlX3RleHQgPSBmdW5jdGlvbih0aW1lLCBzdHJpbmcsIHIsIGcsIGIsIGEpCiAgICBsb2NhbCB0X291dCwgdF9vdXRfaXRlciA9IHsgfSwgMQoKICAgIGxvY2FsIGwgPSBzdHJpbmc6bGVuKCApIC0gMQoKICAgIGxvY2FsIHJfYWRkID0gKDAgLSByKQogICAgbG9jYWwgZ19hZGQgPSAoMCAtIGcpCiAgICBsb2NhbCBiX2FkZCA9ICgwIC0gYikKICAgIGxvY2FsIGFfYWRkID0gKDI1NSAtIGEpCgogICAgZm9yIGkgPSAxLCAjc3RyaW5nIGRvCiAgICAgICAgbG9jYWwgaXRlciA9IChpIC0gMSkvKCNzdHJpbmcgLSAxKSArIHRpbWUKICAgICAgICB0X291dFt0X291dF9pdGVyXSA9ICJcYSIgLi4gZnVuYy5SR0JBdG9IRVgoIHIgKyByX2FkZCAqIG1hdGguYWJzKG1hdGguY29zKCBpdGVyICkpLCBnICsgZ19hZGQgKiBtYXRoLmFicyhtYXRoLmNvcyggaXRlciApKSwgYiArIGJfYWRkICogbWF0aC5hYnMobWF0aC5jb3MoIGl0ZXIgKSksIGEgKyBhX2FkZCAqIG1hdGguYWJzKG1hdGguY29zKCBpdGVyICkpICkKCiAgICAgICAgdF9vdXRbdF9vdXRfaXRlciArIDFdID0gc3RyaW5nOnN1YiggaSwgaSApCgogICAgICAgIHRfb3V0X2l0ZXIgPSB0X291dF9pdGVyICsgMgogICAgZW5kCgogICAgcmV0dXJuIHRfb3V0CmVuZAoKbG9jYWwgZ2xvd19tb2R1bGUgPSBmdW5jdGlvbih4LCB5LCB3LCBoLCB3aWR0aCwgcm91bmRpbmcsIGFjY2VudCwgYWNjZW50X2lubmVyKQogICAgbG9jYWwgdGhpY2tuZXNzID0gMQogICAgbG9jYWwgT2Zmc2V0ID0gMQogICAgbG9jYWwgciwgZywgYiwgYSA9IHVucGFjayhhY2NlbnQpCiAgICBpZiBhY2NlbnRfaW5uZXIgdGhlbgogICAgICAgIGZ1bmMucmVjKHgsIHksIHcsIGggKyAxLCByb3VuZGluZywgYWNjZW50X2lubmVyKQogICAgZW5kCiAgICBmb3IgayA9IDAsIHdpZHRoIGRvCiAgICAgICAgaWYgYSAqIChrL3dpZHRoKV4oMSkgPiA1IHRoZW4KICAgICAgICAgICAgbG9jYWwgYWNjZW50ID0ge3IsIGcsIGIsIGEgKiAoay93aWR0aCleKDIpfQogICAgICAgICAgICBmdW5jLnJlY19vdXRsaW5lKHggKyAoayAtIHdpZHRoIC0gT2Zmc2V0KSp0aGlja25lc3MsIHkgKyAoayAtIHdpZHRoIC0gT2Zmc2V0KSAqIHRoaWNrbmVzcywgdyAtIChrIC0gd2lkdGggLSBPZmZzZXQpKnRoaWNrbmVzcyoyLCBoICsgMSAtIChrIC0gd2lkdGggLSBPZmZzZXQpKnRoaWNrbmVzcyoyLCByb3VuZGluZyArIHRoaWNrbmVzcyAqICh3aWR0aCAtIGsgKyBPZmZzZXQpLCB0aGlja25lc3MsIGFjY2VudCkKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmxvY2FsIGZ1bmN0aW9uIHJlbWFwKHZhbCwgbmV3bWluLCBuZXdtYXgsIG1pbiwgbWF4LCBjbGFtcCkKCW1pbiA9IG1pbiBvciAwCgltYXggPSBtYXggb3IgMQoKCWxvY2FsIHBjdCA9ICh2YWwtbWluKS8obWF4LW1pbikKCglpZiBjbGFtcCB+PSBmYWxzZSB0aGVuCgkJcGN0ID0gbWF0aC5taW4oMSwgbWF0aC5tYXgoMCwgcGN0KSkKCWVuZAoKCXJldHVybiBuZXdtaW4rKG5ld21heC1uZXdtaW4pKnBjdAplbmQKCgoKCi0tIEByZWdpb24gRlVOQ1MgZW5kCgotLSBAcmVnaW9uIFVJX0xBWU9VVCBzdGFydApsb2NhbCB0YWIsIGNvbnRhaW5lciA9ICJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiCmxvY2FsIGxhYmVsID0gdWkubmV3X2xhYmVsKCJBQSIsICJGYWtlIGxhZyIsICJcYTY1OUY4NkZGZXh0ZXJuYWwuY29kZXMiKQpsb2NhbCB0YWJQaWNrZXIgPSB1aS5uZXdfY29tYm9ib3goIkFBIiwgIkZha2UgbGFnIiwgIlxuVGFiIiwgIk1haW4iLCAiU2V0dGluZ3MiLCAiQW50aS1haW0iKQpsb2NhbCBhYVRhYnMgPSB1aS5uZXdfY29tYm9ib3goIkFBIiwgIkZha2UgbGFnIiwgIlxuQUEgVGFicyIsICJCdWlsZGVyIiwgIk90aGVyIikKCgpsb2NhbCBtZW51ID0gewogICAgYWFUYWIgPSB7CiAgICAgICAgbGFibGVvdGggPSB1aS5uZXdfbGFiZWwodGFiLCBjb250YWluZXIsICJcYThBRUNGMUZG4oCiICBcYUZGRkZGRkZGQmluZHMiKSwKICAgICAgICBsYWJlbDM0NSA9IHVpLm5ld19sYWJlbCh0YWIsIGNvbnRhaW5lciwgIlxhRkZGRkZGNkbilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEiKSwKICAgICAgICBtYW51YWxzT3ZlckZzID0gdWkubmV3X2NoZWNrYm94KHRhYiwgY29udGFpbmVyLCAiTWFudWFscyBvdmVyIGZyZWVzdGFuZGluZyIpLAogICAgICAgIGxlZ2l0QUFIb3RrZXkgPSB1aS5uZXdfaG90a2V5KHRhYiwgY29udGFpbmVyLCAiTGVnaXQgQUEiKSwKICAgICAgICBmcmVlc3RhbmQgPSB1aS5uZXdfY29tYm9ib3godGFiLCBjb250YWluZXIsICJGcmVlc3RhbmRpbmciLCAiRGVmYXVsdCIsICJTdGF0aWMiKSwKICAgICAgICBmcmVlc3RhbmRIb3RrZXkgPSB1aS5uZXdfaG90a2V5KHRhYiwgY29udGFpbmVyLCAiRnJlZXN0YW5kIiwgdHJ1ZSksCiAgICAgICAgbWFudWFsc2VuYiA9IHVpLm5ld19jaGVja2JveCh0YWIsIGNvbnRhaW5lciwgIkVuYWJsZSBNYW51YWxzIiksCiAgICAgICAgbWFudWFscyA9IHVpLm5ld19jb21ib2JveCh0YWIsIGNvbnRhaW5lciwgIk1hbnVhbHMiLCAiT2ZmIiwgIkRlZmF1bHQiLCAiU3RhdGljIiksCiAgICAgICAgbWFudWFsVGFiID0gewogICAgICAgICAgICBtYW51YWxMZWZ0ID0gdWkubmV3X2hvdGtleSh0YWIsIGNvbnRhaW5lciwgIuKAoiBNYW51YWwgIiAuLiBmdW5jLmhleCh7MjAwLDIwMCwyMDB9KSAuLiAibGVmdCIpLAogICAgICAgICAgICBtYW51YWxSaWdodCA9IHVpLm5ld19ob3RrZXkodGFiLCBjb250YWluZXIsICLigKIgTWFudWFsICIgLi4gZnVuYy5oZXgoezIwMCwyMDAsMjAwfSkgLi4gInJpZ2h0IiksCiAgICAgICAgICAgIG1hbnVhbEZvcndhcmQgPSB1aS5uZXdfaG90a2V5KHRhYiwgY29udGFpbmVyLCAi4oCiIE1hbnVhbCAiIC4uIGZ1bmMuaGV4KHsyMDAsMjAwLDIwMH0pIC4uICJmb3J3YXJkIiksCiAgICAgICAgfSwKICAgIH0sCiAgICBidWlsZGVyVGFiID0gewogICAgICAgIGxhYmxlc2FmID0gdWkubmV3X2xhYmVsKCJBQSIsICJPdGhlciIsICJcYTY1OUY4NkZG4oCiICBcYUZGRkZGRkZGU2FmZSBGdW5jdGlvbnMiKSwKICAgICAgICBsYWJlbHNhZmEgPSB1aS5uZXdfbGFiZWwoIkFBIiwgIk90aGVyIiwgIlxhRkZGRkZGNkbilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEiKSwKICAgICAgICBzYWZlS25pZmUgPSB1aS5uZXdfY2hlY2tib3goIkFBIiwgIk90aGVyIiwgIlNhZmUgS25pZmUiKSwKICAgICAgICBzYWZlWmV1cyA9IHVpLm5ld19jaGVja2JveCgiQUEiLCAiT3RoZXIiLCAiU2FmZSBaZXVzIiksCiAgICAgICAgbGFibGViID0gdWkubmV3X2xhYmVsKHRhYiwgY29udGFpbmVyLCAiXGE2NTlGODZGRuKAoiAgXGFGRkZGRkZGRkJ1aWxkZXIiKSwKICAgICAgICBsYWJlbHNhZmFhID0gdWkubmV3X2xhYmVsKHRhYiwgY29udGFpbmVyLCAiXGFGRkZGRkY2RuKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgSIpLAogICAgICAgIHN0YXRlID0gdWkubmV3X2NvbWJvYm94KHRhYiwgY29udGFpbmVyLCAiQW50aS1haW0gc3RhdGUiLCB2YXJzLmFhU3RhdGVzKQogICAgfSwKICAgIHZpc3VhbHNUYWIgPSB7CiAgICAgICAgbGFibGV2ID0gdWkubmV3X2xhYmVsKHRhYiwgY29udGFpbmVyLCAiXGE2NTlGODZGRuKAoiAgXGFGRkZGRkZGRlZpc3VhbHMiKSwKICAgICAgICB2b3ZhcHV0aW4gPSB1aS5uZXdfbGFiZWwodGFiLCBjb250YWluZXIsICJcYUZGRkZGRjZG4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBIiksCiAgICAgICAgaW5kaWNhdG9yc1R5cGUgPSB1aS5uZXdfY2hlY2tib3godGFiLCBjb250YWluZXIsICJFbmFibGUgSW5kaWNhdG9ycyIpLAogICAgICAgIGluZGljYXRvcnNDbHIgPSB1aS5uZXdfY29sb3JfcGlja2VyKHRhYiwgY29udGFpbmVyLCAiTWFpbiBDb2xvciIsIGx1YV9jb2xvci5yLCBsdWFfY29sb3IuZywgbHVhX2NvbG9yLmIsIDI1NSksCiAgICAgICAgYXJyb3dzaW5kZW5iID0gdWkubmV3X2NoZWNrYm94KHRhYiwgY29udGFpbmVyLCAiRW5hYmxlIEFycm93cyBJbmRpY2F0b3IiKSwKICAgICAgICBhcnJvd0luZGljYXRvclN0eWxlID0gdWkubmV3X2NvbWJvYm94KHRhYiwgY29udGFpbmVyLCAiQXJyb3dzIiwgIlN0YW5kYXJ0IiwgIlRyaWFuZ2xlIiksCiAgICAgICAgYXJyb3dDbHIgPSB1aS5uZXdfY29sb3JfcGlja2VyKHRhYiwgY29udGFpbmVyLCAiQXJyb3cgQ29sb3IiLCBsdWFfY29sb3IuciwgbHVhX2NvbG9yLmcsIGx1YV9jb2xvci5iLCAyNTUpLAogICAgICAgIGhpdGxvZ3NlbmIgPSB1aS5uZXdfY2hlY2tib3godGFiLCBjb250YWluZXIsICJFbmFibGUgSGl0bG9nIiksCiAgICAgICAgaGl0bG9nc19rcnV0aWUgPSB1aS5uZXdfbXVsdGlzZWxlY3QodGFiLCBjb250YWluZXIsICJIaXRsb2dzIiwgIkhpdCIsICJNaXNzIiksCiAgICAgICAgaGl0bG9nc19rcnV0aWVDbHIgPSB1aS5uZXdfY29sb3JfcGlja2VyKHRhYiwgY29udGFpbmVyLCAiSGl0bG9ncyBDb2xvciIsIGx1YV9jb2xvci5yLCBsdWFfY29sb3IuZywgbHVhX2NvbG9yLmIsIDI1NSksCiAgICAgICAgbWluaW11bV9kYW1hZ2VlbmIgPSB1aS5uZXdfY2hlY2tib3godGFiLCBjb250YWluZXIsICJFbmFibGUgTWluIERhbWFnZSBJbmRpY2F0b3IiKSwKICAgICAgICBtaW5pbXVtX2RhbWFnZUluZGljYXRvciA9IHVpLm5ld19jb21ib2JveCh0YWIsIGNvbnRhaW5lciwgIk1pbmltdW0gRGFtYWdlIEluZGljYXRvciIsICJCaW5kIiwgIkNvbnN0YW50IiksCiAgICAgICAgc2lkZUluZGljYXRvcnNlbmIgPSB1aS5uZXdfY2hlY2tib3godGFiLCBjb250YWluZXIsICJFbmFibGUgU2lkZSBpbmRpY2F0b3JzIiksCiAgICAgICAgc2lkZUluZGljYXRvcnMgPSB1aS5uZXdfY29tYm9ib3godGFiLCBjb250YWluZXIsICAiXG4gU2lkZSBJbmRpY2F0b3JzIiwgIlNrZWV0IiwgIlNrZWV0IG9sZCIpLAogICAgfSwKICAgIG1pc2NUYWIgPSB7CiAgICAgICAgbGFibGVkZ2RmZ3MgPSB1aS5uZXdfbGFiZWwodGFiLCBjb250YWluZXIsICIgIiksCiAgICAgICAgbGFibGV2ciA9IHVpLm5ld19sYWJlbCh0YWIsIGNvbnRhaW5lciwgIlxhNjU5Rjg2RkbigKIgIFxhRkZGRkZGRkZNaXNjIiksCiAgICAgICAgdm92YXB1dGluMiA9IHVpLm5ld19sYWJlbCh0YWIsIGNvbnRhaW5lciwgIlxhRkZGRkZGNkbilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEiKSwKICAgICAgICB3YXRlcm1hcmsgPSB1aS5uZXdfY2hlY2tib3godGFiLCBjb250YWluZXIsICJXYXRlcm1hcmsiKSwKICAgICAgICB3YXRlcm1hcmtDbHIgPSB1aS5uZXdfY29sb3JfcGlja2VyKHRhYiwgY29udGFpbmVyLCAiV2F0ZXJtYXJrIENvbG9yIiwgbHVhX2NvbG9yLnIsIGx1YV9jb2xvci5nLCBsdWFfY29sb3IuYiwgMjU1KSwKICAgICAgICBBdm9pZEJhY2sgPSB1aS5uZXdfY2hlY2tib3godGFiLCBjb250YWluZXIsICJBdm9pZCBCYWNrc3RhYiIpLAogICAgICAgIG90aGZ1bmMgPSB1aS5uZXdfbGFiZWwoIkFBIiwgIk90aGVyIiwgIlxhNjU5Rjg2RkbigKIgXGFGRkZGRkZGRk90aGVyIGZ1bmN0aW9ucyIpLAogICAgICAgIHZvdmFwdXRpbjMgPSB1aS5uZXdfbGFiZWwoIkFBIiwgIk90aGVyIiwgIiBcYUZGRkZGRjZG4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBIiksCiAgICAgICAgZmlsdGVyY29ucyA9IHVpLm5ld19jaGVja2JveCgiQUEiLCAiT3RoZXIiLCAiQ29uc29sZSBGaWx0ZXIiKSwKICAgICAgICB1bnNhZmVjaGFyaGdlID0gdWkubmV3X2NoZWNrYm94KCJBQSIsICJPdGhlciIsICJBdXRvIGRpc2NoYXJnZSBleHBsb2l0IFxhNGY0ZjRmZmZbb25seSBzY291dCAmIGF3cF0iKSwKICAgICAgICBjbGFuVGFnID0gdWkubmV3X2NoZWNrYm94KHRhYiwgY29udGFpbmVyLCAiQ2xhbnRhZyIpLAogICAgICAgIGR0dW5zYWZlY2hhcmdlID0gdWkubmV3X2NoZWNrYm94KCJBQSIsICJPdGhlciIsICJVbnNhZmUgY2hhcmdlIG9uIGVuZW15IFxhNGY0ZjRmZmZjaGFyZyBpbiB2aXNpYmVsIiksCiAgICAgICAgdHJhc2hUYWxrID0gdWkubmV3X2NoZWNrYm94KHRhYiwgY29udGFpbmVyLCAiVHJhc2h0YWxrIiksCiAgICAgICAgdHJhc2hUYWxrX3ZpYm9yID0gdWkubmV3X211bHRpc2VsZWN0KHRhYiwgY29udGFpbmVyLCAiXG4gdHJhc2h0YWxrIHZpYm9yIiwgIktpbGwiLCAiRGVhdGgiKSwKICAgICAgICBmYXN0TGFkZGVyID0gdWkubmV3X2NoZWNrYm94KHRhYiwgY29udGFpbmVyLCAiRmFzdCBsYWRkZXIiKSwKICAgICAgICBhbmltYXRpb25zRW5hYmxlZCA9IHVpLm5ld19jaGVja2JveCh0YWIsIGNvbnRhaW5lciwgIlxhYWZhZjYyZmZBbmltIGJyZWFrZXJzIiksCiAgICAgICAgYW5pbWF0aW9ucyA9IHVpLm5ld19tdWx0aXNlbGVjdCh0YWIsIGNvbnRhaW5lciwgIlxuIEFuaW0gYnJlYWtlcnMiLCAiQnJva2VuIiwgIlN0YXRpYyBsZWdzIiwgIkxlZyBmdWNrZXIiLCAiMCBwaXRjaCBvbiBsYW5kaW5nIiwgIk1vb253YWxrIiksCiAgICB9LAogICAgY29uZmlnVGFiID0gewogICAgICAgIGxhYmVsMzQ1ID0gdWkubmV3X2xhYmVsKCJBQSIsICJGYWtlIGxhZyIsICJcYUZGRkZGRjZG4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSB4pSBIiksCiAgICAgICAgbGFiZWwxID0gdWkubmV3X2xhYmVsKCJBQSIsICJGYWtlIGxhZyIsICJXZWxjb21lIGJhY2sgXGE2NTlGODZGRiB1c2VyIiksCiAgICAgICAgbGFiZWwyID0gdWkubmV3X2xhYmVsKCJBQSIsICJGYWtlIGxhZyIsICJMYXN0IHVwZGF0ZSB3YXMgXGE2NTlGODZGRiA2IGp1bHkuIiksCiAgICAgICAgbGFiZWwzID0gdWkubmV3X2xhYmVsKCJBQSIsICJGYWtlIGxhZyIsICJZb3VyIGJ1aWxkIGlzIFxhNjU5Rjg2RkZCZXRhLiIpLAogICAgICAgIGxhYmxlMTIzNCA9IHVpLm5ld19sYWJlbCgiQUEiLCAiRmFrZSBsYWciLCAiXGFGRkZGRkY2RuKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgSIpLAogICAgICAgIGxhYmVsMTQ4OCA9IHVpLm5ld19sYWJlbCgiQUEiLCAiRmFrZSBsYWciLCAiU2Vzc2lvbiB0aW1lOiB6b3YiKSwKICAgICAgICBsYWJlbDQgPSB1aS5uZXdfbGFiZWwgKCJBQSIsICJPdGhlciIsICJcYTY1OUY4NkZG4oCiIFxhRkZGRkZGRkZEaXNjb3JkIiksCiAgICAgICAgbGFibGUxMjMgPSB1aS5uZXdfbGFiZWwoIkFBIiwgIk90aGVyIiwgIlxhRkZGRkZGNkbilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIHilIEiKSwKICAgICAgICBidXR0b25zZCA9IHVpLm5ld19idXR0b24oIkFBIiwgIk90aGVyIiwgIkpvaW4gdXMiLCBmdW5jdGlvbigpIFN0ZWFtT3ZlcmxheUFQSS5PcGVuRXh0ZXJuYWxCcm93c2VyVVJMKCJodHRwczovL2Rpc2NvcmQuZ2cvd1JHWkd3WWVWYyIpIGVuZCksCiAgICAgICAgbGFiZWxzID0gdWkubmV3X2xhYmVsKHRhYiwgY29udGFpbmVyLCAiXGE2NTlGODZGRuKAoiAgXGFGRkZGRkZGRlByZXNldCBcYTY1OUY4NkZGbGlzdCIpLAogICAgICAgIGxpc3QgPSB1aS5uZXdfbGlzdGJveCh0YWIsIGNvbnRhaW5lciwgIkNvbmZpZ3MiLCAiIiksCiAgICAgICAgbmFtZSA9IHVpLm5ld190ZXh0Ym94KHRhYiwgY29udGFpbmVyLCAiQ29uZmlnIG5hbWUiLCAiIiksCiAgICAgICAgbG9hZCA9IHVpLm5ld19idXR0b24odGFiLCBjb250YWluZXIsICJcYTY1OUY4NkZGTG9hZCIsIGZ1bmN0aW9uKCkgZW5kKSwKICAgICAgICBzYXZlID0gdWkubmV3X2J1dHRvbih0YWIsIGNvbnRhaW5lciwgIlxhMDBGRjBBRkZTYXZlIiwgZnVuY3Rpb24oKSBlbmQpLAogICAgICAgIGRlbGV0ZSA9IHVpLm5ld19idXR0b24odGFiLCBjb250YWluZXIsICJcYUZGMDAwMEZGRGVsZXRlIiwgZnVuY3Rpb24oKSBlbmQpLAogICAgICAgIGltcG9ydCA9IHVpLm5ld19idXR0b24odGFiLCBjb250YWluZXIsICJJbXBvcnQiLCBmdW5jdGlvbigpIGVuZCksCiAgICAgICAgZXhwb3J0ID0gdWkubmV3X2J1dHRvbih0YWIsIGNvbnRhaW5lciwgIkV4cG9ydCIsIGZ1bmN0aW9uKCkgZW5kKQogICAgfQp9Cgpsb2NhbCBzdGFydF90aW1lID0gY2xpZW50LnVuaXhfdGltZSgpCmxvY2FsIGZ1bmN0aW9uIGdldF9lbGFwc2VkX3RpbWUoKQogICAgbG9jYWwgZWxhcHNlZF9zZWNvbmRzID0gY2xpZW50LnVuaXhfdGltZSgpIC0gc3RhcnRfdGltZQogICAgbG9jYWwgaG91cnMgPSBtYXRoLmZsb29yKGVsYXBzZWRfc2Vjb25kcyAvIDM2MDApCiAgICBsb2NhbCBtaW51dGVzID0gbWF0aC5mbG9vcigoZWxhcHNlZF9zZWNvbmRzIC0gaG91cnMgKiAzNjAwKSAvIDYwKQogICAgbG9jYWwgc2Vjb25kcyA9IG1hdGguZmxvb3IoZWxhcHNlZF9zZWNvbmRzIC0gaG91cnMgKiAzNjAwIC0gbWludXRlcyAqIDYwKQogICAgcmV0dXJuIHN0cmluZy5mb3JtYXQoIiUwMmQ6JTAyZDolMDJkIiwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpCmVuZAoKbG9jYWwgYWFCdWlsZGVyID0ge30KbG9jYWwgYWFDb250YWluZXIgPSB7fQpmb3IgaT0xLCAjdmFycy5hYVN0YXRlcyBkbwogICAgYWFDb250YWluZXJbaV0gPSBmdW5jLmhleCh7MjAwLDIwMCwyMDB9KSAuLiAiKCIgLi4gZnVuYy5oZXgoezIyMiw1NSw1NX0pIC4uICIiIC4uIHZhcnMucFN0YXRlc1tpXSAuLiAiIiAuLiBmdW5jLmhleCh7MjAwLDIwMCwyMDB9KSAuLiAiKSIgLi4gZnVuYy5oZXgoezE1NSwxNTUsMTU1fSkgLi4gIiAiCiAgICBhYUJ1aWxkZXJbaV0gPSB7CiAgICAgICAgZW5hYmxlU3RhdGUgPSB1aS5uZXdfY2hlY2tib3godGFiLCBjb250YWluZXIsICJFbmFibGUgIiAuLiBmdW5jLmhleCh7bHVhX2NvbG9yLnIsIGx1YV9jb2xvci5nLCBsdWFfY29sb3IuYn0pIC4uIHZhcnMuYWFTdGF0ZXNbaV0gLi4gZnVuYy5oZXgoezIwMCwyMDAsMjAwfSkgLi4gIiBzdGF0ZSIpLAogICAgICAgIGZvcmNlRGVmZW5zaXZlID0gdWkubmV3X2NoZWNrYm94KHRhYiwgY29udGFpbmVyLCAiRm9yY2UgRGVmZW5zaXZlXG4iIC4uIGFhQ29udGFpbmVyW2ldKSwKICAgICAgICBzdGF0ZURpc2FibGVycyA9IHVpLm5ld19tdWx0aXNlbGVjdCh0YWIsIGNvbnRhaW5lciwgIkRpc2FibGVyc1xuIiAuLiBhYUNvbnRhaW5lcltpXSwgIlN0YW5kaW5nIiwgIk1vdmluZyIsICJTbG93d2Fsa2luZyIsICJDcm91Y2hpbmciLCAiQWlyIiwgIkFpci1Dcm91Y2hpbmciLCAiQ3JvdWNoLU1vdmluZyIpLAogICAgICAgIHBpdGNoID0gdWkubmV3X2NvbWJvYm94KHRhYiwgY29udGFpbmVyLCAiUGl0Y2hcbiIgLi4gYWFDb250YWluZXJbaV0sICJPZmYiLCAiRGVmYXVsdCIsICJVcCIsICJEb3duIiwgIk1pbmltYWwiLCAiUmFuZG9tIiwgIkN1c3RvbSIpLAogICAgICAgIHBpdGNoU2xpZGVyID0gdWkubmV3X3NsaWRlcih0YWIsIGNvbnRhaW5lciwgIlxuUGl0Y2ggYWRkIiAuLiBhYUNvbnRhaW5lcltpXSwgLTg5LCA4OSwgMCwgdHJ1ZSwgIsKwIiwgMSksCiAgICAgICAgeWF3QmFzZSA9IHVpLm5ld19jb21ib2JveCh0YWIsIGNvbnRhaW5lciwgIllhdyBiYXNlXG4iIC4uIGFhQ29udGFpbmVyW2ldLCAiTG9jYWwgdmlldyIsICJBdCB0YXJnZXRzIiksCiAgICAgICAgeWF3ID0gdWkubmV3X2NvbWJvYm94KHRhYiwgY29udGFpbmVyLCAiWWF3XG4iIC4uIGFhQ29udGFpbmVyW2ldLCAiT2ZmIiwgIjE4MCIsICIxODAgWiIsICJTcGluIiwgIlNsb3cgSml0dGVyIiwgIkRlbGF5IEppdHRlciIsICJMJlIiKSwKICAgICAgICBzd2l0Y2hUaWNrcyA9IHVpLm5ld19zbGlkZXIodGFiLCBjb250YWluZXIsICJcbnRpY2tzIiAuLiBhYUNvbnRhaW5lcltpXSwgMSwgMTQsIDYsIDApLAogICAgICAgIHlhd1N0YXRpYyA9IHVpLm5ld19zbGlkZXIodGFiLCBjb250YWluZXIsICJcbnlhdyIgLi4gYWFDb250YWluZXJbaV0sIC0xODAsIDE4MCwgMCwgdHJ1ZSwgIsKwIiwgMSksCiAgICAgICAgeWF3TGVmdCA9IHVpLm5ld19zbGlkZXIodGFiLCBjb250YWluZXIsICJMZWZ0XG55YXciIC4uIGFhQ29udGFpbmVyW2ldLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIsIDEpLAogICAgICAgIHlhd1JpZ2h0ID0gdWkubmV3X3NsaWRlcih0YWIsIGNvbnRhaW5lciwgIlJpZ2h0XG55YXciIC4uIGFhQ29udGFpbmVyW2ldLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIsIDEpLAogICAgICAgIHlhd0ppdHRlciA9IHVpLm5ld19jb21ib2JveCh0YWIsIGNvbnRhaW5lciwgIllhdyBqaXR0ZXJcbiIgLi4gYWFDb250YWluZXJbaV0sICJPZmYiLCAiT2Zmc2V0IiwgIkNlbnRlciIsICJTa2l0dGVyIiwgIlJhbmRvbSIsICIzLVdheSIsICJMJlIiKSwKICAgICAgICB3YXlGaXJzdCA9IHVpLm5ld19zbGlkZXIodGFiLCBjb250YWluZXIsICJGaXJzdFxueWF3IGppdHRlciIgLi4gYWFDb250YWluZXJbaV0sIC0xODAsIDE4MCwgMCwgdHJ1ZSwgIsKwIiwgMSksCiAgICAgICAgd2F5U2Vjb25kID0gdWkubmV3X3NsaWRlcih0YWIsIGNvbnRhaW5lciwgIlNlY29uZFxueWF3IGppdHRlciIgLi4gYWFDb250YWluZXJbaV0sIC0xODAsIDE4MCwgMCwgdHJ1ZSwgIsKwIiwgMSksCiAgICAgICAgd2F5VGhpcmQgPSB1aS5uZXdfc2xpZGVyKHRhYiwgY29udGFpbmVyLCAiVGhpcmRcbnlhdyBqaXR0ZXIiIC4uIGFhQ29udGFpbmVyW2ldLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIsIDEpLAogICAgICAgIHlhd0ppdHRlclN0YXRpYyA9IHVpLm5ld19zbGlkZXIodGFiLCBjb250YWluZXIsICJcbnlhdyBqaXR0ZXIiIC4uIGFhQ29udGFpbmVyW2ldLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIsIDEpLAogICAgICAgIHlhd0ppdHRlckxlZnQgPSB1aS5uZXdfc2xpZGVyKHRhYiwgY29udGFpbmVyLCAiTGVmdFxueWF3IGppdHRlciIgLi4gYWFDb250YWluZXJbaV0sIC0xODAsIDE4MCwgMCwgdHJ1ZSwgIsKwIiwgMSksCiAgICAgICAgeWF3Sml0dGVyUmlnaHQgPSB1aS5uZXdfc2xpZGVyKHRhYiwgY29udGFpbmVyLCAiUmlnaHRcbnlhdyBqaXR0ZXIiIC4uIGFhQ29udGFpbmVyW2ldLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIsIDEpLAogICAgICAgIGJvZHlZYXcgPSB1aS5uZXdfY29tYm9ib3godGFiLCBjb250YWluZXIsICJCb2R5IHlhd1xuIiAuLiBhYUNvbnRhaW5lcltpXSwgIk9mZiIsICJDdXN0b20gRGVzeW5jIiwgIk9wcG9zaXRlIiwgIkppdHRlciIsICJTdGF0aWMiKSwKICAgICAgICBib2R5WWF3U3RhdGljID0gdWkubmV3X3NsaWRlcih0YWIsIGNvbnRhaW5lciwgIlxuYm9keSB5YXciIC4uIGFhQ29udGFpbmVyW2ldLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIsIDEpLAogICAgICAgIGZha2VZYXdMaW1pdCA9IHVpLm5ld19zbGlkZXIodGFiLCBjb250YWluZXIsICJGYWtlIHlhdyBsaW1pdFxuIiAuLiBhYUNvbnRhaW5lcltpXSwgLTU5LCA1OSwgMCwgdHJ1ZSwgIsKwIiwgMSksCiAgICAgICAgZGVmZW5zaXZlQW50aUFpbSA9IHVpLm5ld19jaGVja2JveCh0YWIsIGNvbnRhaW5lciwgIkRlZmVuc2l2ZSBBbnRpLUFpbVxuIiAuLiBhYUNvbnRhaW5lcltpXSksCiAgICAgICAgZGVmX3BpdGNoID0gdWkubmV3X2NvbWJvYm94KHRhYiwgY29udGFpbmVyLCAiW0RlZmVuc2l2ZV0gUGl0Y2hcbiIgLi4gYWFDb250YWluZXJbaV0sICJPZmYiLCAiRGVmYXVsdCIsICJVcCIsICJEb3duIiwgIk1pbmltYWwiLCAiUmFuZG9tIiwgIkN1c3RvbSIpLAogICAgICAgIGRlZl9waXRjaFNsaWRlciA9IHVpLm5ld19zbGlkZXIodGFiLCBjb250YWluZXIsICJbRGVmZW5zaXZlXSBcblBpdGNoIGFkZCIgLi4gYWFDb250YWluZXJbaV0sIC04OSwgODksIDAsIHRydWUsICLCsCIsIDEpLAogICAgICAgIGRlZl95YXdCYXNlID0gdWkubmV3X2NvbWJvYm94KHRhYiwgY29udGFpbmVyLCAiW0RlZmVuc2l2ZV0gWWF3IGJhc2VcbiIgLi4gYWFDb250YWluZXJbaV0sICJMb2NhbCB2aWV3IiwgIkF0IHRhcmdldHMiKSwKICAgICAgICBkZWZfeWF3ID0gdWkubmV3X2NvbWJvYm94KHRhYiwgY29udGFpbmVyLCAiW0RlZmVuc2l2ZV0gWWF3XG4iIC4uIGFhQ29udGFpbmVyW2ldLCAiT2ZmIiwgIjE4MCIsICIxODAgWiIsICJTcGluIiwgIlNsb3cgSml0dGVyIiwgIkRlbGF5IEppdHRlciIsICJMJlIiKSwKICAgICAgICBkZWZfc3dpdGNoVGlja3MgPSB1aS5uZXdfc2xpZGVyKHRhYiwgY29udGFpbmVyLCAiW0RlZmVuc2l2ZV0gXG50aWNrcyIgLi4gYWFDb250YWluZXJbaV0sIDEsIDE0LCA2LCAwKSwKICAgICAgICBkZWZfeWF3U3RhdGljID0gdWkubmV3X3NsaWRlcih0YWIsIGNvbnRhaW5lciwgIltEZWZlbnNpdmVdIFxueWF3IiAuLiBhYUNvbnRhaW5lcltpXSwgLTE4MCwgMTgwLCAwLCB0cnVlLCAiwrAiLCAxKSwKICAgICAgICBkZWZfeWF3TGVmdCA9IHVpLm5ld19zbGlkZXIodGFiLCBjb250YWluZXIsICJbRGVmZW5zaXZlXSBMZWZ0XG55YXciIC4uIGFhQ29udGFpbmVyW2ldLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIsIDEpLAogICAgICAgIGRlZl95YXdSaWdodCA9IHVpLm5ld19zbGlkZXIodGFiLCBjb250YWluZXIsICJbRGVmZW5zaXZlXSBSaWdodFxueWF3IiAuLiBhYUNvbnRhaW5lcltpXSwgLTE4MCwgMTgwLCAwLCB0cnVlLCAiwrAiLCAxKSwKICAgICAgICBkZWZfeWF3Sml0dGVyID0gdWkubmV3X2NvbWJvYm94KHRhYiwgY29udGFpbmVyLCAiW0RlZmVuc2l2ZV0gWWF3IGppdHRlclxuIiAuLiBhYUNvbnRhaW5lcltpXSwgIk9mZiIsICJPZmZzZXQiLCAiQ2VudGVyIiwgIlNraXR0ZXIiLCAiUmFuZG9tIiwgIjMtV2F5IiwgIkwmUiIpLAogICAgICAgIGRlZl93YXlGaXJzdCA9IHVpLm5ld19zbGlkZXIodGFiLCBjb250YWluZXIsICJbRGVmZW5zaXZlXSBGaXJzdFxueWF3IGppdHRlciIgLi4gYWFDb250YWluZXJbaV0sIC0xODAsIDE4MCwgMCwgdHJ1ZSwgIsKwIiwgMSksCiAgICAgICAgZGVmX3dheVNlY29uZCA9IHVpLm5ld19zbGlkZXIodGFiLCBjb250YWluZXIsICJbRGVmZW5zaXZlXSBTZWNvbmRcbnlhdyBqaXR0ZXIiIC4uIGFhQ29udGFpbmVyW2ldLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIsIDEpLAogICAgICAgIGRlZl93YXlUaGlyZCA9IHVpLm5ld19zbGlkZXIodGFiLCBjb250YWluZXIsICJbRGVmZW5zaXZlXSBUaGlyZFxueWF3IGppdHRlciIgLi4gYWFDb250YWluZXJbaV0sIC0xODAsIDE4MCwgMCwgdHJ1ZSwgIsKwIiwgMSksCiAgICAgICAgZGVmX3lhd0ppdHRlclN0YXRpYyA9IHVpLm5ld19zbGlkZXIodGFiLCBjb250YWluZXIsICJbRGVmZW5zaXZlXSBcbnlhdyBqaXR0ZXIiIC4uIGFhQ29udGFpbmVyW2ldLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIsIDEpLAogICAgICAgIGRlZl95YXdKaXR0ZXJMZWZ0ID0gdWkubmV3X3NsaWRlcih0YWIsIGNvbnRhaW5lciwgIltEZWZlbnNpdmVdIExlZnRcbnlhdyBqaXR0ZXIiIC4uIGFhQ29udGFpbmVyW2ldLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIsIDEpLAogICAgICAgIGRlZl95YXdKaXR0ZXJSaWdodCA9IHVpLm5ld19zbGlkZXIodGFiLCBjb250YWluZXIsICJbRGVmZW5zaXZlXSBSaWdodFxueWF3IGppdHRlciIgLi4gYWFDb250YWluZXJbaV0sIC0xODAsIDE4MCwgMCwgdHJ1ZSwgIsKwIiwgMSksCiAgICAgICAgZGVmX2JvZHlZYXcgPSB1aS5uZXdfY29tYm9ib3godGFiLCBjb250YWluZXIsICJbRGVmZW5zaXZlXSBCb2R5IHlhd1xuIiAuLiBhYUNvbnRhaW5lcltpXSwgIk9mZiIsICJDdXN0b20gRGVzeW5jIiwgIk9wcG9zaXRlIiwgIkppdHRlciIsICJTdGF0aWMiKSwKICAgICAgICBkZWZfYm9keVlhd1N0YXRpYyA9IHVpLm5ld19zbGlkZXIodGFiLCBjb250YWluZXIsICJbRGVmZW5zaXZlXSBcbmJvZHkgeWF3IiAuLiBhYUNvbnRhaW5lcltpXSwgLTE4MCwgMTgwLCAwLCB0cnVlLCAiwrAiLCAxKSwKICAgICAgICBkZWZfZmFrZVlhd0xpbWl0ID0gdWkubmV3X3NsaWRlcih0YWIsIGNvbnRhaW5lciwgIltEZWZlbnNpdmVdIEZha2UgeWF3IGxpbWl0XG4iIC4uIGFhQ29udGFpbmVyW2ldLCAtNTksIDU5LCAwLCB0cnVlLCAiwrAiLCAxKSwKICAgIH0KZW5kCgpsb2NhbCBmdW5jdGlvbiBnZXRDb25maWcobmFtZSkKICAgIGxvY2FsIGRhdGFiYXNlID0gZGF0YWJhc2UucmVhZChsdWEuZGF0YWJhc2UuY29uZmlncykgb3Ige30KCiAgICBmb3IgaSwgdiBpbiBwYWlycyhkYXRhYmFzZSkgZG8KICAgICAgICBpZiB2Lm5hbWUgPT0gbmFtZSB0aGVuCiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBjb25maWcgPSB2LmNvbmZpZywKICAgICAgICAgICAgICAgIGluZGV4ID0gaQogICAgICAgICAgICB9CiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBmb3IgaSwgdiBpbiBwYWlycyhwcmVzZXRzKSBkbwogICAgICAgIGlmIHYubmFtZSA9PSBuYW1lIHRoZW4KICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIGNvbmZpZyA9IHYuY29uZmlnLAogICAgICAgICAgICAgICAgaW5kZXggPSBpCiAgICAgICAgICAgIH0KICAgICAgICBlbmQKICAgIGVuZAoKICAgIHJldHVybiBmYWxzZQplbmQKbG9jYWwgZnVuY3Rpb24gc2F2ZUNvbmZpZyhuYW1lKQogICAgbG9jYWwgZGIgPSBkYXRhYmFzZS5yZWFkKGx1YS5kYXRhYmFzZS5jb25maWdzKSBvciB7fQogICAgbG9jYWwgY29uZmlnID0ge30KCiAgICBpZiBuYW1lOm1hdGNoKCJbXiV3XSIpIH49IG5pbCB0aGVuCiAgICAgICAgcmV0dXJuCiAgICBlbmQKCiAgICBmb3Iga2V5LCB2YWx1ZSBpbiBwYWlycyh2YXJzLnBTdGF0ZXMpIGRvCiAgICAgICAgY29uZmlnW3ZhbHVlXSA9IHt9CiAgICAgICAgZm9yIGssIHYgaW4gcGFpcnMoYWFCdWlsZGVyW2tleV0pIGRvCiAgICAgICAgICAgIGNvbmZpZ1t2YWx1ZV1ba10gPSB1aS5nZXQodikKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGxvY2FsIGNmZyA9IGdldENvbmZpZyhuYW1lKQoKICAgIGlmIG5vdCBjZmcgdGhlbgogICAgICAgIHRhYmxlLmluc2VydChkYiwgeyBuYW1lID0gbmFtZSwgY29uZmlnID0gY29uZmlnIH0pCiAgICBlbHNlCiAgICAgICAgZGJbY2ZnLmluZGV4XS5jb25maWcgPSBjb25maWcKICAgIGVuZAoKICAgIGRhdGFiYXNlLndyaXRlKGx1YS5kYXRhYmFzZS5jb25maWdzLCBkYikKZW5kCmxvY2FsIGZ1bmN0aW9uIGRlbGV0ZUNvbmZpZyhuYW1lKQogICAgbG9jYWwgZGIgPSBkYXRhYmFzZS5yZWFkKGx1YS5kYXRhYmFzZS5jb25maWdzKSBvciB7fQoKICAgIGZvciBpLCB2IGluIHBhaXJzKGRiKSBkbwogICAgICAgIGlmIHYubmFtZSA9PSBuYW1lIHRoZW4KICAgICAgICAgICAgdGFibGUucmVtb3ZlKGRiLCBpKQogICAgICAgICAgICBicmVhawogICAgICAgIGVuZAogICAgZW5kCgogICAgZm9yIGksIHYgaW4gcGFpcnMocHJlc2V0cykgZG8KICAgICAgICBpZiB2Lm5hbWUgPT0gbmFtZSB0aGVuCiAgICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgIGVuZAogICAgZW5kCgogICAgZGF0YWJhc2Uud3JpdGUobHVhLmRhdGFiYXNlLmNvbmZpZ3MsIGRiKQplbmQKbG9jYWwgZnVuY3Rpb24gZ2V0Q29uZmlnTGlzdCgpCiAgICBsb2NhbCBkYXRhYmFzZSA9IGRhdGFiYXNlLnJlYWQobHVhLmRhdGFiYXNlLmNvbmZpZ3MpIG9yIHt9CiAgICBsb2NhbCBjb25maWcgPSB7fQoKICAgIGZvciBpLCB2IGluIHBhaXJzKHByZXNldHMpIGRvCiAgICAgICAgdGFibGUuaW5zZXJ0KGNvbmZpZywgdi5uYW1lKQogICAgZW5kCgogICAgZm9yIGksIHYgaW4gcGFpcnMoZGF0YWJhc2UpIGRvCiAgICAgICAgdGFibGUuaW5zZXJ0KGNvbmZpZywgdi5uYW1lKQogICAgZW5kCgogICAgcmV0dXJuIGNvbmZpZwplbmQKbG9jYWwgZnVuY3Rpb24gdHlwZUZyb21TdHJpbmcoaW5wdXQpCiAgICBpZiB0eXBlKGlucHV0KSB+PSAic3RyaW5nIiB0aGVuIHJldHVybiBpbnB1dCBlbmQKCiAgICBsb2NhbCB2YWx1ZSA9IGlucHV0Omxvd2VyKCkKCiAgICBpZiB2YWx1ZSA9PSAidHJ1ZSIgdGhlbgogICAgICAgIHJldHVybiB0cnVlCiAgICBlbHNlaWYgdmFsdWUgPT0gImZhbHNlIiB0aGVuCiAgICAgICAgcmV0dXJuIGZhbHNlCiAgICBlbHNlaWYgdG9udW1iZXIodmFsdWUpIH49IG5pbCB0aGVuCiAgICAgICAgcmV0dXJuIHRvbnVtYmVyKHZhbHVlKQogICAgZWxzZQogICAgICAgIHJldHVybiB0b3N0cmluZyhpbnB1dCkKICAgIGVuZAplbmQKbG9jYWwgZnVuY3Rpb24gbG9hZFNldHRpbmdzKGNvbmZpZykKICAgIGZvciBrZXksIHZhbHVlIGluIHBhaXJzKHZhcnMucFN0YXRlcykgZG8KICAgICAgICBmb3IgaywgdiBpbiBwYWlycyhhYUJ1aWxkZXJba2V5XSkgZG8KICAgICAgICAgICAgaWYgKGNvbmZpZ1t2YWx1ZV1ba10gfj0gbmlsKSB0aGVuCiAgICAgICAgICAgICAgICB1aS5zZXQodiwgY29uZmlnW3ZhbHVlXVtrXSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kIAogICAgZW5kCmVuZApsb2NhbCBmdW5jdGlvbiBpbXBvcnRTZXR0aW5ncygpCiAgICBsb2FkU2V0dGluZ3MoanNvbi5wYXJzZShjbGlwYm9hcmQuZ2V0KCkpKQplbmQKbG9jYWwgZnVuY3Rpb24gZXhwb3J0U2V0dGluZ3MobmFtZSkKICAgIGxvY2FsIGNvbmZpZyA9IHt9CiAgICBmb3Iga2V5LCB2YWx1ZSBpbiBwYWlycyh2YXJzLnBTdGF0ZXMpIGRvCiAgICAgICAgY29uZmlnW3ZhbHVlXSA9IHt9CiAgICAgICAgZm9yIGssIHYgaW4gcGFpcnMoYWFCdWlsZGVyW2tleV0pIGRvCiAgICAgICAgICAgIGNvbmZpZ1t2YWx1ZV1ba10gPSB1aS5nZXQodikKICAgICAgICBlbmQKICAgIGVuZAogICAgCiAgICBjbGlwYm9hcmQuc2V0KGpzb24uc3RyaW5naWZ5KGNvbmZpZykpCmVuZApsb2NhbCBmdW5jdGlvbiBsb2FkQ29uZmlnKG5hbWUpCiAgICBsb2NhbCBjb25maWcgPSBnZXRDb25maWcobmFtZSkKICAgIGxvYWRTZXR0aW5ncyhjb25maWcuY29uZmlnKQplbmQKCmxvY2FsIGZ1bmN0aW9uIGluaXREYXRhYmFzZSgpCiAgICBpZiBkYXRhYmFzZS5yZWFkKGx1YS5kYXRhYmFzZS5jb25maWdzKSA9PSBuaWwgdGhlbgogICAgICAgIGRhdGFiYXNlLndyaXRlKGx1YS5kYXRhYmFzZS5jb25maWdzLCB7fSkKICAgIGVuZAoKICAgIGxvY2FsIGxpbmsgPSAiaHR0cHM6Ly9wYXN0ZWJpbi5jb20vcmF3L20wY2t6YlViIgoKICAgIGh0dHAuZ2V0KGxpbmssIGZ1bmN0aW9uKHN1Y2Nlc3MsIHJlc3BvbnNlKQogICAgICAgIGlmIG5vdCBzdWNjZXNzIHRoZW4KICAgICAgICAgICAgcHJpbnQoIkZhaWxlZCB0byBnZXQgcHJlc2V0cyIpCiAgICAgICAgICAgIHJldHVybgogICAgICAgIGVuZAogICAgCiAgICAgICAgZGF0YSA9IGpzb24ucGFyc2UocmVzcG9uc2UuYm9keSkKICAgIAogICAgICAgIGZvciBpLCBwcmVzZXQgaW4gcGFpcnMoZGF0YS5wcmVzZXRzKSBkbwogICAgICAgICAgICB0YWJsZS5pbnNlcnQocHJlc2V0cywgeyBuYW1lID0gIioiLi5wcmVzZXQubmFtZSwgY29uZmlnID0gcHJlc2V0LmNvbmZpZ30pCiAgICAgICAgICAgIHVpLnNldChtZW51LmNvbmZpZ1RhYi5uYW1lLCAiKiIuLnByZXNldC5uYW1lKQogICAgICAgIGVuZAogICAgICAgIHVpLnVwZGF0ZShtZW51LmNvbmZpZ1RhYi5saXN0LCBnZXRDb25maWdMaXN0KCkpCiAgICBlbmQpCmVuZAppbml0RGF0YWJhc2UoKQotLSBAcmVnaW9uIFVJX0xBWU9VVCBlbmQKCi0tIEByZWdpb24gTk9USUZJQ0FUSU9OX0FOSU0gc3RhcnQKbG9jYWwgYW5pbV90aW1lID0gMC43NQpsb2NhbCBtYXhfbm90aWZzID0gNgpsb2NhbCBkYXRhID0ge30KbG9jYWwgbm90aWZpY2F0aW9ucyA9IHsKCiAgICBuZXcgPSBmdW5jdGlvbiggc3RyaW5nLCByLCBnLCBiKQogICAgICAgIHRhYmxlLmluc2VydChkYXRhLCB7CiAgICAgICAgICAgIHRpbWUgPSBnbG9iYWxzLmN1cnRpbWUoKSwKICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nLAogICAgICAgICAgICBjb2xvciA9IHtyLCBnLCBiLCAyNTV9LAogICAgICAgICAgICBmcmFjdGlvbiA9IDAKICAgICAgICB9KQogICAgICAgIGxvY2FsIHRpbWUgPSA1CiAgICAgICAgZm9yIGkgPSAjZGF0YSwgMSwgLTEgZG8KICAgICAgICAgICAgbG9jYWwgbm90aWYgPSBkYXRhW2ldCiAgICAgICAgICAgIGlmICNkYXRhIC0gaSArIDEgPiBtYXhfbm90aWZzIGFuZCBub3RpZi50aW1lICsgdGltZSAtIGdsb2JhbHMuY3VydGltZSgpID4gMCB0aGVuCiAgICAgICAgICAgICAgICBub3RpZi50aW1lID0gZ2xvYmFscy5jdXJ0aW1lKCkgLSB0aW1lCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kLAoKICAgIHJlbmRlciA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2NhbCB4LCB5ID0gY2xpZW50LnNjcmVlbl9zaXplKCkKICAgICAgICBsb2NhbCB0b19yZW1vdmUgPSB7fQogICAgICAgIGxvY2FsIE9mZnNldCA9IDAKICAgICAgICBmb3IgaSA9IDEsICNkYXRhIGRvCiAgICAgICAgICAgIGxvY2FsIG5vdGlmID0gZGF0YVtpXQoKICAgICAgICAgICAgbG9jYWwgZGF0YSA9IHtyb3VuZGluZyA9IDAsIHNpemUgPSAwLCBnbG93ID0gMCwgdGltZSA9IDB9CgogICAgICAgICAgICBpZiBub3RpZi50aW1lICsgZGF0YS50aW1lIC0gZ2xvYmFscy5jdXJ0aW1lKCkgPiAwIHRoZW4KICAgICAgICAgICAgICAgIG5vdGlmLmZyYWN0aW9uID0gZnVuYy5jbGFtcChub3RpZi5mcmFjdGlvbiArIGdsb2JhbHMuZnJhbWV0aW1lKCkgLyBhbmltX3RpbWUsIDAsIDEpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIG5vdGlmLmZyYWN0aW9uID0gZnVuYy5jbGFtcChub3RpZi5mcmFjdGlvbiAtIGdsb2JhbHMuZnJhbWV0aW1lKCkgLyBhbmltX3RpbWUsIDAsIDEpCiAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgaWYgbm90aWYuZnJhY3Rpb24gPD0gMCBhbmQgbm90aWYudGltZSArIGRhdGEudGltZSAtIGdsb2JhbHMuY3VydGltZSgpIDw9IDAgdGhlbgogICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KHRvX3JlbW92ZSwgaSkKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGxvY2FsIGZyYWN0aW9uID0gZnVuYy5lYXNlSW5PdXQobm90aWYuZnJhY3Rpb24pCgogICAgICAgICAgICBsb2NhbCByLCBnLCBiLCBhID0gdW5wYWNrKG5vdGlmLmNvbG9yKQogICAgICAgICAgICBsb2NhbCBzdHJpbmcgPSBjb2xvcl90ZXh0KG5vdGlmLnN0cmluZywgciwgZywgYiwgYSAqIGZyYWN0aW9uKQoKICAgICAgICAgICAgbG9jYWwgc3Rydywgc3RyaCA9IHJlbmRlcmVyLm1lYXN1cmVfdGV4dCgiIiwgc3RyaW5nKQogICAgICAgICAgICBsb2NhbCBzdHJ3MiA9IHJlbmRlcmVyLm1lYXN1cmVfdGV4dCgiYiIsICIiKQoKICAgICAgICAgICAgbG9jYWwgcGFkZGluZ3gsIHBhZGRpbmd5ID0gNywgZGF0YS5zaXplCiAgICAgICAgICAgIGRhdGEucm91bmRpbmcgPSAwCgogICAgICAgICAgICBPZmZzZXQgPSBPZmZzZXQgKyAoc3RyaCArIHBhZGRpbmd5KjIgKyAJbWF0aC5zcXJ0KGRhdGEuZ2xvdy8xMCkqMTAgKyA1KSAqIGZyYWN0aW9uCiAgICAgICAgICAgIGdsb3dfbW9kdWxlKHgvMiAtIChzdHJ3ICsgc3RydzIpLzIgLSBwYWRkaW5neCwgeSAtIDEwMCAtIHN0cmgvMiAtIHBhZGRpbmd5IC0gT2Zmc2V0LCBzdHJ3ICsgc3RydzIgKyBwYWRkaW5neCoyLCBzdHJoICsgcGFkZGluZ3kqMiwgZGF0YS5nbG93LCBkYXRhLnJvdW5kaW5nLCB7ciwgZywgYiwgNDUgKiBmcmFjdGlvbn0sIHsyNSwyNSwyNSwxNDAgKiBmcmFjdGlvbn0pCiAgICAgICAgICAgIHJlbmRlcmVyLnRleHQoeC8yICsgc3RydzIvMiwgeSAtIDEwMCAtIE9mZnNldCwgMjU1LCAyNTUsIDI1NSwgMjU1ICogZnJhY3Rpb24sICJjIiwgMCwgc3RyaW5nKQogICAgICAgICAgICByZW5kZXJlci5saW5lKHgvMiAtIChzdHJ3ICsgc3RydzIpLzIgLSBwYWRkaW5neCAtIDEsIHkgLSAxMDAgKyBzdHJoLzIgKyBwYWRkaW5neSAtIE9mZnNldCwgeC8yICsgKHN0cncgKyBzdHJ3MikvMiArIHBhZGRpbmd4ICsgMSwgeSAtIDEwMCArIHN0cmgvMiArIHBhZGRpbmd5IC0gT2Zmc2V0LCByLCBnLCBiLCAyNTUgICogZnJhY3Rpb24pCiAgICAgICAgICAgIC0tcmVuZGVyZXIudGV4dCh4LzIgKyBzdHJ3Mi8yLCB5IC0gMTAwIC0gT2Zmc2V0LCAyNTUsIDI1NSwgMjU1LCAyNTUgKiBmcmFjdGlvbiwgImMiLCAwLCBzdHJpbmcgIiRleHRlcm5hbC5jb2RlcyIsIHIsIGcsIGIsIGEpICogZnJhY3Rpb24gIAogICAgICAgIGVuZAoKICAgICAgICBmb3IgaSA9ICN0b19yZW1vdmUsIDEsIC0xIGRvCiAgICAgICAgICAgIHRhYmxlLnJlbW92ZShkYXRhLCB0b19yZW1vdmVbaV0pCiAgICAgICAgZW5kCiAgICBlbmQsCgogICAgY2xlYXIgPSBmdW5jdGlvbigpCiAgICAgICAgZGF0YSA9IHt9CiAgICBlbmQKfQoKCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soImNsaWVudF9kaXNjb25uZWN0IiwgZnVuY3Rpb24oKSBub3RpZmljYXRpb25zLmNsZWFyKCkgZW5kKQpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJsZXZlbF9pbml0IiwgZnVuY3Rpb24oKSAgbm90aWZpY2F0aW9ucy5jbGVhcigpIGVuZCkKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygncGxheWVyX2Nvbm5lY3RfZnVsbCcsIGZ1bmN0aW9uKGUpIGlmIGNsaWVudC51c2VyaWRfdG9fZW50aW5kZXgoZS51c2VyaWQpID09IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkgdGhlbiBub3RpZmljYXRpb25zLmNsZWFyKCkgZW5kIGVuZCkKCgotLSBAcmVnaW9uIE5PVElGSUNBVElPTl9BTklNIGVuZAoKLS0gQHJlZ2lvbiBBQV9DQUxMQkFDS1Mgc3RhcnQKbG9jYWwgYWEgPSB7CglpZ25vcmUgPSBmYWxzZSwKCW1hbnVhbEFBPSAwLAoJaW5wdXQgPSAwLAp9CmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInBsYXllcl9jb25uZWN0X2Z1bGwiLCBmdW5jdGlvbigpIAoJYWEuaWdub3JlID0gZmFsc2UKCWFhLm1hbnVhbEFBPSAwCglhYS5pbnB1dCA9IDAKZW5kKSAKCmxvY2FsIGNvdW50ZXIgPSAwCmxvY2FsIHN3aXRjaCA9IGZhbHNlCgpkaXN0YW5jZV9rbmlmZSA9IHt9CmRpc3RhbmNlX2tuaWZlLmFudGlfa25pZmVfZGlzdCA9IGZ1bmN0aW9uICh4MSwgeTEsIHoxLCB4MiwgeTIsIHoyKQogICAgcmV0dXJuIG1hdGguc3FydCgoeDIgLSB4MSleMiArICh5MiAtIHkxKV4yICsgKHoyIC0gejEpXjIpCmVuZAogICAgCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJydW5fY29tbWFuZCIsIGZ1bmN0aW9uKGNtZCkKICAgIHZhcnMuYnJlYWtlci5jbWQgPSBjbWQuY29tbWFuZF9udW1iZXIKICAgIGlmIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAwIHRoZW4KICAgICAgICB2YXJzLmJyZWFrZXIub3JpZ2luID0gdmVjdG9yKGVudGl0eS5nZXRfb3JpZ2luKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkpKQogICAgICAgIGlmIHZhcnMuYnJlYWtlci5sYXN0X29yaWdpbiB+PSBuaWwgdGhlbgogICAgICAgICAgICB2YXJzLmJyZWFrZXIudHBfZGlzdCA9ICh2YXJzLmJyZWFrZXIub3JpZ2luIC0gdmFycy5icmVha2VyLmxhc3Rfb3JpZ2luKTpsZW5ndGgyZHNxcigpCiAgICAgICAgICAgIGdyYW1fdXBkYXRlKHZhcnMuYnJlYWtlci50cF9kYXRhLCB2YXJzLmJyZWFrZXIudHBfZGlzdCwgdHJ1ZSkKICAgICAgICBlbmQKICAgICAgICB2YXJzLmJyZWFrZXIubGFzdF9vcmlnaW4gPSB2YXJzLmJyZWFrZXIub3JpZ2luCiAgICBlbmQKZW5kKQoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygicHJlZGljdF9jb21tYW5kIiwgZnVuY3Rpb24oY21kKQogICAgaWYgY21kLmNvbW1hbmRfbnVtYmVyID09IHZhcnMuYnJlYWtlci5jbWQgdGhlbgogICAgICAgIGxvY2FsIHRpY2tiYXNlID0gZW50aXR5LmdldF9wcm9wKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCksICJtX25UaWNrQmFzZSIpCiAgICAgICAgdmFycy5icmVha2VyLmRlZmVuc2l2ZSA9IG1hdGguYWJzKHRpY2tiYXNlIC0gdmFycy5icmVha2VyLmRlZmVuc2l2ZV9jaGVjaykKICAgICAgICB2YXJzLmJyZWFrZXIuZGVmZW5zaXZlX2NoZWNrID0gbWF0aC5tYXgodGlja2Jhc2UsIHZhcnMuYnJlYWtlci5kZWZlbnNpdmVfY2hlY2spCiAgICAgICAgdmFycy5icmVha2VyLmNtZCA9IDAKICAgIGVuZAplbmQpCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJzZXR1cF9jb21tYW5kIiwgZnVuY3Rpb24oY21kKQogICAgdmFycy5sb2NhbFBsYXllciA9IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkKCiAgICBpZiBub3QgdmFycy5sb2NhbFBsYXllciAgb3Igbm90IGVudGl0eS5pc19hbGl2ZSh2YXJzLmxvY2FsUGxheWVyKSB0aGVuIHJldHVybiBlbmQKCWxvY2FsIGZsYWdzID0gZW50aXR5LmdldF9wcm9wKHZhcnMubG9jYWxQbGF5ZXIsICJtX2ZGbGFncyIpCiAgICBsb2NhbCBvbmdyb3VuZCA9IGJpdC5iYW5kKGZsYWdzLCAxKSB+PSAwIGFuZCBjbWQuaW5fanVtcCA9PSAwCglsb2NhbCB2YWx2ZSA9IGVudGl0eS5nZXRfcHJvcChlbnRpdHkuZ2V0X2dhbWVfcnVsZXMoKSwgIm1fYklzVmFsdmVEUyIpCglsb2NhbCBvcmlnaW4gPSB2ZWN0b3IoZW50aXR5LmdldF9wcm9wKHZhcnMubG9jYWxQbGF5ZXIsICJtX3ZlY09yaWdpbiIpKQoJbG9jYWwgY2FtZXJhID0gdmVjdG9yKGNsaWVudC5jYW1lcmFfYW5nbGVzKCkpCglsb2NhbCBleWUgPSB2ZWN0b3IoY2xpZW50LmV5ZV9wb3NpdGlvbigpKQogICAgbG9jYWwgdmVsb2NpdHkgPSB2ZWN0b3IoZW50aXR5LmdldF9wcm9wKHZhcnMubG9jYWxQbGF5ZXIsICJtX3ZlY1ZlbG9jaXR5IikpCiAgICBsb2NhbCB3ZWFwb24gPSBlbnRpdHkuZ2V0X3BsYXllcl93ZWFwb24oKQoJbG9jYWwgcFN0aWxsID0gbWF0aC5zcXJ0KHZlbG9jaXR5LnggXiAyICsgdmVsb2NpdHkueSBeIDIpIDwgNQogICAgbG9jYWwgYm9keVlhdyA9IGVudGl0eS5nZXRfcHJvcCh2YXJzLmxvY2FsUGxheWVyLCAibV9mbFBvc2VQYXJhbWV0ZXIiLCAxMSkgKiAxMjAgLSA2MAogICAgbG9jYWwgdHBfYW1vdW50ID0gZ2V0X2F2ZXJhZ2UodmFycy5icmVha2VyLnRwX2RhdGEpL2dldF92ZWxvY2l0eShlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpKSoxMDAgCiAgICBsb2NhbCBpc19kZWZlbnNpdmUgPSAodmFycy5icmVha2VyLmRlZmVuc2l2ZSA+IDEpIGFuZCBub3QgKHRwX2Ftb3VudCA+PSAyNSBhbmQgdmFycy5icmVha2VyLmRlZmVuc2l2ZSA+PSAxMykKCiAgICBsb2NhbCBpc1Nsb3cgPSB1aS5nZXQocmVmcy5zbG93WzFdKSBhbmQgdWkuZ2V0KHJlZnMuc2xvd1syXSkKCWxvY2FsIGlzT3MgPSB1aS5nZXQocmVmcy5vc1sxXSkgYW5kIHVpLmdldChyZWZzLm9zWzJdKQoJbG9jYWwgaXNGZCA9IHVpLmdldChyZWZzLmZha2VEdWNrKQoJbG9jYWwgaXNEdCA9IHVpLmdldChyZWZzLmR0WzFdKSBhbmQgdWkuZ2V0KHJlZnMuZHRbMl0pCiAgICBsb2NhbCBpc0ZsID0gdWkuZ2V0KHVpLnJlZmVyZW5jZSgiQUEiLCAiRmFrZSBsYWciLCAiRW5hYmxlZCIpKQogICAgbG9jYWwgbGVnaXRBQSA9IGZhbHNlCgogICAgbG9jYWwgbWFudWFsc092ZXJGcyA9IHVpLmdldChtZW51LmFhVGFiLm1hbnVhbHNPdmVyRnMpID09IHRydWUgYW5kIHRydWUgb3IgZmFsc2UKCiAgICAtLSBzZWFyY2ggZm9yIHN0YXRlcwogICAgdmFycy5wU3RhdGUgPSAxCiAgICBpZiBwU3RpbGwgdGhlbiB2YXJzLnBTdGF0ZSA9IDIgZW5kCiAgICBpZiBub3QgcFN0aWxsIHRoZW4gdmFycy5wU3RhdGUgPSAzIGVuZAogICAgaWYgaXNTbG93IHRoZW4gdmFycy5wU3RhdGUgPSA0IGVuZAogICAgaWYgZW50aXR5LmdldF9wcm9wKHZhcnMubG9jYWxQbGF5ZXIsICJtX2ZsRHVja0Ftb3VudCIpID4gMC4xIHRoZW4gdmFycy5wU3RhdGUgPSA1IGVuZAogICAgaWYgbm90IHBTdGlsbCBhbmQgZW50aXR5LmdldF9wcm9wKHZhcnMubG9jYWxQbGF5ZXIsICJtX2ZsRHVja0Ftb3VudCIpID4gMC4xIHRoZW4gdmFycy5wU3RhdGUgPSA4IGVuZAogICAgaWYgbm90IG9uZ3JvdW5kIHRoZW4gdmFycy5wU3RhdGUgPSA2IGVuZAogICAgaWYgbm90IG9uZ3JvdW5kIGFuZCBlbnRpdHkuZ2V0X3Byb3AodmFycy5sb2NhbFBsYXllciwgIm1fZmxEdWNrQW1vdW50IikgPiAwLjEgdGhlbiB2YXJzLnBTdGF0ZSA9IDcgZW5kCgogICAgaWYgdWkuZ2V0KGFhQnVpbGRlcls5XS5lbmFibGVTdGF0ZSkgYW5kIG5vdCBmdW5jLnRhYmxlX2NvbnRhaW5zKHVpLmdldChhYUJ1aWxkZXJbOV0uc3RhdGVEaXNhYmxlcnMpLCB2YXJzLmludFRvU1t2YXJzLnBTdGF0ZV0pIGFuZCBpc0R0ID09IGZhbHNlIGFuZCBpc09zID09IGZhbHNlIGFuZCBpc0ZsID09IHRydWUgdGhlbgoJCXZhcnMucFN0YXRlID0gOQogICAgZW5kCgogICAgaWYgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0uZW5hYmxlU3RhdGUpID09IGZhbHNlIGFuZCB2YXJzLnBTdGF0ZSB+PSAxIHRoZW4KICAgICAgICB2YXJzLnBTdGF0ZSA9IDEKICAgIGVuZAoKICAgIGlmIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAwIHRoZW4KICAgICAgICBjb3VudGVyID0gY291bnRlciArIDEKICAgIGVuZAoKICAgIGlmIGNvdW50ZXIgPj0gOCB0aGVuCiAgICAgICAgY291bnRlciA9IDAKICAgIGVuZAoKICAgIGlmIGdsb2JhbHMudGlja2NvdW50KCkgJSB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5zd2l0Y2hUaWNrcykgPT0gMSB0aGVuCiAgICAgICAgc3dpdGNoID0gbm90IHN3aXRjaAogICAgZW5kCgogICAgbG9jYWwgbmV4dEF0dGFjayA9IGVudGl0eS5nZXRfcHJvcCh2YXJzLmxvY2FsUGxheWVyLCAibV9mbE5leHRBdHRhY2siKQogICAgbG9jYWwgbmV4dFByaW1hcnlBdHRhY2sgPSBlbnRpdHkuZ2V0X3Byb3AoZW50aXR5LmdldF9wbGF5ZXJfd2VhcG9uKHZhcnMubG9jYWxQbGF5ZXIpLCAibV9mbE5leHRQcmltYXJ5QXR0YWNrIikKICAgIGxvY2FsIGR0QWN0aXZlID0gZmFsc2UKICAgIGlmIG5leHRQcmltYXJ5QXR0YWNrIH49IG5pbCB0aGVuCiAgICAgICAgZHRBY3RpdmUgPSBub3QgKG1hdGgubWF4KG5leHRQcmltYXJ5QXR0YWNrLCBuZXh0QXR0YWNrKSA+IGdsb2JhbHMuY3VydGltZSgpKQogICAgZW5kCiAgICAtLSBhcHBseSBhbnRpYWltIHNldAogICAgbG9jYWwgc2lkZSA9IGJvZHlZYXcgPiAwIGFuZCAxIG9yIC0xCgogICAgICAgIC0tIG1hbnVhbCBhYQogICAgICAgIGlmIHVpLmdldChtZW51LmFhVGFiLm1hbnVhbHMpIH49ICJPZmYiIHRoZW4KICAgICAgICAgICAgdWkuc2V0KG1lbnUuYWFUYWIubWFudWFsVGFiLm1hbnVhbExlZnQsICJPbiBob3RrZXkiKQogICAgICAgICAgICB1aS5zZXQobWVudS5hYVRhYi5tYW51YWxUYWIubWFudWFsUmlnaHQsICJPbiBob3RrZXkiKQogICAgICAgICAgICB1aS5zZXQobWVudS5hYVRhYi5tYW51YWxUYWIubWFudWFsRm9yd2FyZCwgIk9uIGhvdGtleSIpCiAgICAgICAgICAgIGlmIGFhLmlucHV0ICsgMC4yMiA8IGdsb2JhbHMuY3VydGltZSgpIHRoZW4KICAgICAgICAgICAgICAgIGlmIGFhLm1hbnVhbEFBID09IDAgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIHVpLmdldChtZW51LmFhVGFiLm1hbnVhbFRhYi5tYW51YWxMZWZ0KSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGFhLm1hbnVhbEFBID0gMQogICAgICAgICAgICAgICAgICAgICAgICBhYS5pbnB1dCA9IGdsb2JhbHMuY3VydGltZSgpCiAgICAgICAgICAgICAgICAgICAgZWxzZWlmIHVpLmdldChtZW51LmFhVGFiLm1hbnVhbFRhYi5tYW51YWxSaWdodCkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBhYS5tYW51YWxBQSA9IDIKICAgICAgICAgICAgICAgICAgICAgICAgYWEuaW5wdXQgPSBnbG9iYWxzLmN1cnRpbWUoKQogICAgICAgICAgICAgICAgICAgIGVsc2VpZiB1aS5nZXQobWVudS5hYVRhYi5tYW51YWxUYWIubWFudWFsRm9yd2FyZCkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBhYS5tYW51YWxBQSA9IDMKICAgICAgICAgICAgICAgICAgICAgICAgYWEuaW5wdXQgPSBnbG9iYWxzLmN1cnRpbWUoKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZWxzZWlmIGFhLm1hbnVhbEFBID09IDEgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIHVpLmdldChtZW51LmFhVGFiLm1hbnVhbFRhYi5tYW51YWxSaWdodCkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBhYS5tYW51YWxBQSA9IDIKICAgICAgICAgICAgICAgICAgICAgICAgYWEuaW5wdXQgPSBnbG9iYWxzLmN1cnRpbWUoKQogICAgICAgICAgICAgICAgICAgIGVsc2VpZiB1aS5nZXQobWVudS5hYVRhYi5tYW51YWxUYWIubWFudWFsRm9yd2FyZCkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBhYS5tYW51YWxBQSA9IDMKICAgICAgICAgICAgICAgICAgICAgICAgYWEuaW5wdXQgPSBnbG9iYWxzLmN1cnRpbWUoKQogICAgICAgICAgICAgICAgICAgIGVsc2VpZiB1aS5nZXQobWVudS5hYVRhYi5tYW51YWxUYWIubWFudWFsTGVmdCkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBhYS5tYW51YWxBQSA9IDAKICAgICAgICAgICAgICAgICAgICAgICAgYWEuaW5wdXQgPSBnbG9iYWxzLmN1cnRpbWUoKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZWxzZWlmIGFhLm1hbnVhbEFBID09IDIgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIHVpLmdldChtZW51LmFhVGFiLm1hbnVhbFRhYi5tYW51YWxMZWZ0KSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGFhLm1hbnVhbEFBID0gMQogICAgICAgICAgICAgICAgICAgICAgICBhYS5pbnB1dCA9IGdsb2JhbHMuY3VydGltZSgpCiAgICAgICAgICAgICAgICAgICAgZWxzZWlmIHVpLmdldChtZW51LmFhVGFiLm1hbnVhbFRhYi5tYW51YWxGb3J3YXJkKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGFhLm1hbnVhbEFBID0gMwogICAgICAgICAgICAgICAgICAgICAgICBhYS5pbnB1dCA9IGdsb2JhbHMuY3VydGltZSgpCiAgICAgICAgICAgICAgICAgICAgZWxzZWlmIHVpLmdldChtZW51LmFhVGFiLm1hbnVhbFRhYi5tYW51YWxSaWdodCkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBhYS5tYW51YWxBQSA9IDAKICAgICAgICAgICAgICAgICAgICAgICAgYWEuaW5wdXQgPSBnbG9iYWxzLmN1cnRpbWUoKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZWxzZWlmIGFhLm1hbnVhbEFBID09IDMgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIHVpLmdldChtZW51LmFhVGFiLm1hbnVhbFRhYi5tYW51YWxGb3J3YXJkKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGFhLm1hbnVhbEFBID0gMAogICAgICAgICAgICAgICAgICAgICAgICBhYS5pbnB1dCA9IGdsb2JhbHMuY3VydGltZSgpCiAgICAgICAgICAgICAgICAgICAgZWxzZWlmIHVpLmdldChtZW51LmFhVGFiLm1hbnVhbFRhYi5tYW51YWxMZWZ0KSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGFhLm1hbnVhbEFBID0gMQogICAgICAgICAgICAgICAgICAgICAgICBhYS5pbnB1dCA9IGdsb2JhbHMuY3VydGltZSgpCiAgICAgICAgICAgICAgICAgICAgZWxzZWlmIHVpLmdldChtZW51LmFhVGFiLm1hbnVhbFRhYi5tYW51YWxSaWdodCkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBhYS5tYW51YWxBQSA9IDIKICAgICAgICAgICAgICAgICAgICAgICAgYWEuaW5wdXQgPSBnbG9iYWxzLmN1cnRpbWUoKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBpZiBhYS5tYW51YWxBQSA9PSAxIG9yIGFhLm1hbnVhbEFBID09IDIgb3IgYWEubWFudWFsQUEgPT0gMyB0aGVuCiAgICAgICAgICAgICAgICBhYS5pZ25vcmUgPSB0cnVlCgogICAgICAgICAgICAgICAgaWYgdWkuZ2V0KG1lbnUuYWFUYWIubWFudWFscykgPT0gIlN0YXRpYyIgdGhlbgogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd0ppdHRlclsxXSwgIk9mZiIpCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3Sml0dGVyWzJdLCAwKQogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLmJvZHlZYXdbMV0sICJTdGF0aWMiKQogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLmJvZHlZYXdbMl0sIDE4MCkKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy5waXRjaFsxXSwgIkRvd24iKQoKICAgICAgICAgICAgICAgICAgICBpZiBhYS5tYW51YWxBQSA9PSAxIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3QmFzZSwgImxvY2FsIHZpZXciKQogICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdbMV0sICIxODAiKQogICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdbMl0sIC05MCkKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMucGl0Y2hbMV0sICJEb3duIikKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgYWEubWFudWFsQUEgPT0gMiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd0Jhc2UsICJsb2NhbCB2aWV3IikKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzFdLCAiMTgwIikKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLCA5MCkKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMucGl0Y2hbMV0sICJEb3duIikKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgYWEubWFudWFsQUEgPT0gMyB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd0Jhc2UsICJsb2NhbCB2aWV3IikKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzFdLCAiMTgwIikKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLCAxODApCiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnBpdGNoWzFdLCAiRG93biIpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbHNlaWYgdWkuZ2V0KG1lbnUuYWFUYWIubWFudWFscykgPT0gIkRlZmF1bHQiIGFuZCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5lbmFibGVTdGF0ZSkgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhd0ppdHRlcikgPT0gIjMtV2F5IiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd0ppdHRlclsxXSwgIkNlbnRlciIpCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIHdheXMgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS53YXlGaXJzdCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS53YXlTZWNvbmQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0ud2F5VGhpcmQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3Sml0dGVyWzJdLCB3YXlzWyhnbG9iYWxzLnRpY2tjb3VudCgpICUgMykgKyAxXSApCiAgICAgICAgICAgICAgICAgICAgZWxzZWlmIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhd0ppdHRlcikgPT0gIkwmUiIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdKaXR0ZXJbMV0sICJDZW50ZXIiKQogICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdKaXR0ZXJbMl0sIChzaWRlID09IDEgYW5kIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhd0ppdHRlckxlZnQpIG9yIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhd0ppdHRlclJpZ2h0KSkpCiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdKaXR0ZXJbMV0sIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhd0ppdHRlcikpCiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd0ppdHRlclsyXSwgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0ueWF3Sml0dGVyU3RhdGljKSkKICAgICAgICAgICAgICAgICAgICBlbmQKCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMuYm9keVlhd1sxXSwgIk9wcG9zaXRlIikKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy5ib2R5WWF3WzJdLCAtMTgwKQoKICAgICAgICAgICAgICAgICAgICBpZiBhYS5tYW51YWxBQSA9PSAxIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3QmFzZSwgImxvY2FsIHZpZXciKQogICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdbMV0sICIxODAiKQogICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdbMl0sIC05MCkKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMucGl0Y2hbMV0sICJEb3duIikKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgYWEubWFudWFsQUEgPT0gMiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd0Jhc2UsICJsb2NhbCB2aWV3IikKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzFdLCAiMTgwIikKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLCA5MCkKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMucGl0Y2hbMV0sICJEb3duIikKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgYWEubWFudWFsQUEgPT0gMyB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd0Jhc2UsICJsb2NhbCB2aWV3IikKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzFdLCAiMTgwIikKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLCAxODApCiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnBpdGNoWzFdLCAiRG93biIpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQgICAgICAgICAgICAgICAgICAgCgogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBhYS5pZ25vcmUgPSBmYWxzZQogICAgICAgICAgICBlbmQKICAgICAgICBlbHNlCiAgICAgICAgICAgIGFhLmlnbm9yZSA9IGZhbHNlCiAgICAgICAgICAgIGFhLm1hbnVhbEFBPSAwCiAgICAgICAgICAgIGFhLmlucHV0ID0gMAogICAgICAgIGVuZAoKICAgIGlmIG5vdCB1aS5nZXQobWVudS5hYVRhYi5sZWdpdEFBSG90a2V5KSBhbmQgYWEuaWdub3JlID09IGZhbHNlIHRoZW4KICAgICAgICBpZiB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5lbmFibGVTdGF0ZSkgdGhlbgoKICAgICAgICAgICAgY21kLmZvcmNlX2RlZmVuc2l2ZSA9IHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLmZvcmNlRGVmZW5zaXZlKSAKICAgICAgICAgICAgaWYgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0uZGVmZW5zaXZlQW50aUFpbSkgYW5kIGlzX2RlZmVuc2l2ZSB0aGVuCiAgICAgICAgICAgICAgICBpZiB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5kZWZfcGl0Y2gpIH49ICJDdXN0b20iIHRoZW4KICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy5waXRjaFsxXSwgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0uZGVmX3BpdGNoKSkKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy5waXRjaFsxXSwgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0uZGVmX3BpdGNoKSkKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy5waXRjaFsyXSwgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0uZGVmX3BpdGNoU2xpZGVyKSkKICAgICAgICAgICAgICAgIGVuZAogICAgCiAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdCYXNlLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5kZWZfeWF3QmFzZSkpCiAgICAKICAgICAgICAgICAgICAgIGlmIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLmRlZl95YXcpID09ICJTbG93IEppdHRlciIgdGhlbgogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd1sxXSwgIjE4MCIpCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLCBzd2l0Y2ggYW5kIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLmRlZl95YXdSaWdodCkgb3IgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0uZGVmX3lhd0xlZnQpKQogICAgICAgICAgICAgICAgZWxzZWlmIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLmRlZl95YXcpID09ICJEZWxheSBKaXR0ZXIiIHRoZW4KICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdbMV0sICIxODAiKQogICAgICAgICAgICAgICAgICAgIGlmIGNvdW50ZXIgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIC0tcmlnaHQKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5kZWZfeWF3UmlnaHQpKQogICAgICAgICAgICAgICAgICAgIGVsc2VpZiBjb3VudGVyID09IDEgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAtLWxlZnQKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5kZWZfeWF3TGVmdCkpCiAgICAgICAgICAgICAgICAgICAgZWxzZWlmIGNvdW50ZXIgPT0gMiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIC0tbGVmdAogICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdbMl0sIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLmRlZl95YXdMZWZ0KSkKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgY291bnRlciA9PSAzIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgLS1sZWZ0CiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd1syXSwgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0uZGVmX3lhd0xlZnQpKQogICAgICAgICAgICAgICAgICAgIGVsc2VpZiBjb3VudGVyID09IDQgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAtLXJpZ2h0CiAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5kZWZfeWF3UmlnaHQpKQogICAgICAgICAgICAgICAgICAgIGVsc2VpZiBjb3VudGVyID09IDUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAtLWxlZnQKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5kZWZfeWF3TGVmdCkpCiAgICAgICAgICAgICAgICAgICAgZWxzZWlmIGNvdW50ZXIgPT0gNiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIC0tcmlnaHQKICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdbMl0sIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLmRlZl95YXdSaWdodCkpCiAgICAgICAgICAgICAgICAgICAgZWxzZWlmIGNvdW50ZXIgPT0gNyB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIC0tcmlnaHQKICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdbMl0sIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLmRlZl95YXdSaWdodCkpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAKICAgICAgICAgICAgICAgIGVsc2VpZiB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5kZWZfeWF3KSA9PSAiTCZSIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzFdLCAiMTgwIikKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdbMl0sKHNpZGUgPT0gMSBhbmQgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0uZGVmX3lhd0xlZnQpIG9yIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLmRlZl95YXdSaWdodCkpKQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd1sxXSwgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0uZGVmX3lhdykpCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5kZWZfeWF3U3RhdGljKSkKICAgICAgICAgICAgICAgIGVuZAogICAgCiAgICAKICAgICAgICAgICAgICAgIGlmIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLmRlZl95YXdKaXR0ZXIpID09ICIzLVdheSIgdGhlbgogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd0ppdHRlclsxXSwgIkNlbnRlciIpCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgd2F5cyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0uZGVmX3dheUZpcnN0KSwKICAgICAgICAgICAgICAgICAgICAgICAgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0uZGVmX3dheVNlY29uZCksCiAgICAgICAgICAgICAgICAgICAgICAgIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLmRlZl93YXlUaGlyZCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdKaXR0ZXJbMl0sIHdheXNbKGdsb2JhbHMudGlja2NvdW50KCkgJSAzKSArIDFdICkKICAgICAgICAgICAgICAgIGVsc2VpZiB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5kZWZfeWF3Sml0dGVyKSA9PSAiTCZSIiB0aGVuIAogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd0ppdHRlclsxXSwgIkNlbnRlciIpCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3Sml0dGVyWzJdLCAoc2lkZSA9PSAxIGFuZCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5kZWZfeWF3Sml0dGVyTGVmdCkgb3IgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0uZGVmX3lhd0ppdHRlclJpZ2h0KSkpCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3Sml0dGVyWzFdLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5kZWZfeWF3Sml0dGVyKSkKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdKaXR0ZXJbMl0sIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLmRlZl95YXdKaXR0ZXJTdGF0aWMpKQogICAgICAgICAgICAgICAgZW5kCiAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0uZGVmX2JvZHlZYXcpID09ICJDdXN0b20gRGVzeW5jIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMuYm9keVlhd1sxXSwgIk9wcG9zaXRlIikKICAgICAgICAgICAgICAgICAgICBhcHBseV9kZXN5bmMoY21kLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5kZWZfZmFrZVlhd0xpbWl0KSkKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy5ib2R5WWF3WzFdLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5kZWZfYm9keVlhdykpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAKICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLmJvZHlZYXdbMl0sICh1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5kZWZfYm9keVlhd1N0YXRpYykpKQogICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMuZnNCb2R5WWF3LCBmYWxzZSkKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgaWYgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0ucGl0Y2gpIH49ICJDdXN0b20iIHRoZW4KICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy5waXRjaFsxXSwgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0ucGl0Y2gpKQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnBpdGNoWzFdLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5waXRjaCkpCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMucGl0Y2hbMl0sIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnBpdGNoU2xpZGVyKSkKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd0Jhc2UsIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhd0Jhc2UpKQoKICAgICAgICAgICAgICAgIGlmIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhdykgPT0gIlNsb3cgSml0dGVyIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzFdLCAiMTgwIikKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdbMl0sIHN3aXRjaCBhbmQgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0ueWF3UmlnaHQpIG9yIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhd0xlZnQpKQogICAgICAgICAgICAgICAgZWxzZWlmIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhdykgPT0gIkRlbGF5IEppdHRlciIgdGhlbgogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd1sxXSwgIjE4MCIpCiAgICAgICAgICAgICAgICAgICAgaWYgY291bnRlciA9PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgLS1yaWdodAogICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdbMl0sIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhd1JpZ2h0KSkKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgY291bnRlciA9PSAxIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgLS1sZWZ0CiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd1syXSwgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0ueWF3TGVmdCkpCiAgICAgICAgICAgICAgICAgICAgZWxzZWlmIGNvdW50ZXIgPT0gMiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIC0tbGVmdAogICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdbMl0sIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhd0xlZnQpKQogICAgICAgICAgICAgICAgICAgIGVsc2VpZiBjb3VudGVyID09IDMgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAtLWxlZnQKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS55YXdMZWZ0KSkKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgY291bnRlciA9PSA0IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgLS1yaWdodAogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd1syXSwgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0ueWF3UmlnaHQpKQogICAgICAgICAgICAgICAgICAgIGVsc2VpZiBjb3VudGVyID09IDUgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAtLWxlZnQKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS55YXdMZWZ0KSkKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgY291bnRlciA9PSA2IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgLS1yaWdodAogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd1syXSwgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0ueWF3UmlnaHQpKQogICAgICAgICAgICAgICAgICAgIGVsc2VpZiBjb3VudGVyID09IDcgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAtLXJpZ2h0CiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS55YXdSaWdodCkpCiAgICAgICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgZWxzZWlmIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhdykgPT0gIkwmUiIgdGhlbgogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd1sxXSwgIjE4MCIpCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLChzaWRlID09IDEgYW5kIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhd0xlZnQpIG9yIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhd1JpZ2h0KSkpCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzFdLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS55YXcpKQogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd1syXSwgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0ueWF3U3RhdGljKSkKICAgICAgICAgICAgICAgIGVuZAoKCiAgICAgICAgICAgICAgICBpZiB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS55YXdKaXR0ZXIpID09ICIzLVdheSIgdGhlbgogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd0ppdHRlclsxXSwgIkNlbnRlciIpCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgd2F5cyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0ud2F5Rmlyc3QpLAogICAgICAgICAgICAgICAgICAgICAgICB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS53YXlTZWNvbmQpLAogICAgICAgICAgICAgICAgICAgICAgICB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS53YXlUaGlyZCkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd0ppdHRlclsyXSwgd2F5c1soZ2xvYmFscy50aWNrY291bnQoKSAlIDMpICsgMV0gKQogICAgICAgICAgICAgICAgZWxzZWlmIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhd0ppdHRlcikgPT0gIkwmUiIgdGhlbiAKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdKaXR0ZXJbMV0sICJDZW50ZXIiKQogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd0ppdHRlclsyXSwgKHNpZGUgPT0gMSBhbmQgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0ueWF3Sml0dGVyTGVmdCkgb3IgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0ueWF3Sml0dGVyUmlnaHQpKSkKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy55YXdKaXR0ZXJbMV0sIHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLnlhd0ppdHRlcikpCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3Sml0dGVyWzJdLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS55YXdKaXR0ZXJTdGF0aWMpKQogICAgICAgICAgICAgICAgZW5kCgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5ib2R5WWF3KSA9PSAiQ3VzdG9tIERlc3luYyIgdGhlbgogICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLmJvZHlZYXdbMV0sICJPcHBvc2l0ZSIpCiAgICAgICAgICAgICAgICAgICAgYXBwbHlfZGVzeW5jKGNtZCwgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0uZmFrZVlhd0xpbWl0KSkKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB1aS5zZXQocmVmcy5ib2R5WWF3WzFdLCB1aS5nZXQoYWFCdWlsZGVyW3ZhcnMucFN0YXRlXS5ib2R5WWF3KSkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgIAogICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMuYm9keVlhd1syXSwgKHVpLmdldChhYUJ1aWxkZXJbdmFycy5wU3RhdGVdLmJvZHlZYXdTdGF0aWMpKSkKICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLmZzQm9keVlhdywgZmFsc2UpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2VpZiBub3QgdWkuZ2V0KGFhQnVpbGRlclt2YXJzLnBTdGF0ZV0uZW5hYmxlU3RhdGUpIHRoZW4KICAgICAgICAgICAgdWkuc2V0KHJlZnMucGl0Y2hbMV0sICJPZmYiKQogICAgICAgICAgICB1aS5zZXQocmVmcy55YXdCYXNlLCAiTG9jYWwgdmlldyIpCiAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd1sxXSwgIk9mZiIpCiAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd1syXSwgMCkKICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3Sml0dGVyWzFdLCAiT2ZmIikKICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3Sml0dGVyWzJdLCAwKQogICAgICAgICAgICB1aS5zZXQocmVmcy5ib2R5WWF3WzFdLCAiT2ZmIikKICAgICAgICAgICAgdWkuc2V0KHJlZnMuYm9keVlhd1syXSwgMCkKICAgICAgICAgICAgdWkuc2V0KHJlZnMuZnNCb2R5WWF3LCBmYWxzZSkKICAgICAgICAgICAgdWkuc2V0KHJlZnMuZWRnZVlhdywgZmFsc2UpCiAgICAgICAgICAgIHVpLnNldChyZWZzLnJvbGwsIDApCiAgICAgICAgZW5kCiAgICBlbHNlaWYgdWkuZ2V0KG1lbnUuYWFUYWIubGVnaXRBQUhvdGtleSkgYW5kIGFhLmlnbm9yZSA9PSBmYWxzZSB0aGVuCiAgICAgICAgaWYgZW50aXR5LmdldF9jbGFzc25hbWUoZW50aXR5LmdldF9wbGF5ZXJfd2VhcG9uKHZhcnMubG9jYWxQbGF5ZXIpKSA9PSAiQ0M0IiB0aGVuIAogICAgICAgICAgICByZXR1cm4gCiAgICAgICAgZW5kCiAgICAKICAgICAgICBsb2NhbCBzaG91bGRfZGlzYWJsZSA9IGZhbHNlCiAgICAgICAgbG9jYWwgcGxhbnRlZF9ib21iID0gZW50aXR5LmdldF9hbGwoIkNQbGFudGVkQzQiKVsxXQogICAgCiAgICAgICAgaWYgcGxhbnRlZF9ib21iIH49IG5pbCB0aGVuCiAgICAgICAgICAgIGJvbWJfZGlzdGFuY2UgPSB2ZWN0b3IoZW50aXR5LmdldF9vcmlnaW4odmFycy5sb2NhbFBsYXllcikpOmRpc3QodmVjdG9yKGVudGl0eS5nZXRfb3JpZ2luKHBsYW50ZWRfYm9tYikpKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgYm9tYl9kaXN0YW5jZSA8PSA2NCBhbmQgZW50aXR5LmdldF9wcm9wKHZhcnMubG9jYWxQbGF5ZXIsICJtX2lUZWFtTnVtIikgPT0gMyB0aGVuCiAgICAgICAgICAgICAgICBzaG91bGRfZGlzYWJsZSA9IHRydWUKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAKICAgICAgICBsb2NhbCBwaXRjaCwgeWF3ID0gY2xpZW50LmNhbWVyYV9hbmdsZXMoKQogICAgICAgIGxvY2FsIGRpcmVjdF92ZWMgPSB2ZWN0b3IoZnVuYy52ZWNfYW5nbGVzKHBpdGNoLCB5YXcpKQogICAgCiAgICAgICAgbG9jYWwgZXllX3BvcyA9IHZlY3RvcihjbGllbnQuZXllX3Bvc2l0aW9uKCkpCiAgICAgICAgbG9jYWwgZnJhY3Rpb24sIGVudCA9IGNsaWVudC50cmFjZV9saW5lKHZhcnMubG9jYWxQbGF5ZXIsIGV5ZV9wb3MueCwgZXllX3Bvcy55LCBleWVfcG9zLnosIGV5ZV9wb3MueCArIChkaXJlY3RfdmVjLnggKiA4MTkyKSwgZXllX3Bvcy55ICsgKGRpcmVjdF92ZWMueSAqIDgxOTIpLCBleWVfcG9zLnogKyAoZGlyZWN0X3ZlYy56ICogODE5MikpCiAgICAKICAgICAgICBpZiBlbnQgfj0gbmlsIGFuZCBlbnQgfj0gLTEgdGhlbgogICAgICAgICAgICBpZiBlbnRpdHkuZ2V0X2NsYXNzbmFtZShlbnQpID09ICJDUHJvcERvb3JSb3RhdGluZyIgdGhlbgogICAgICAgICAgICAgICAgc2hvdWxkX2Rpc2FibGUgPSB0cnVlCiAgICAgICAgICAgIGVsc2VpZiBlbnRpdHkuZ2V0X2NsYXNzbmFtZShlbnQpID09ICJDSG9zdGFnZSIgdGhlbgogICAgICAgICAgICAgICAgc2hvdWxkX2Rpc2FibGUgPSB0cnVlCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIGlmIHNob3VsZF9kaXNhYmxlIH49IHRydWUgdGhlbgogICAgICAgICAgICB1aS5zZXQocmVmcy5waXRjaFsxXSwgIk9mZiIpCiAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd0Jhc2UsICJMb2NhbCB2aWV3IikKICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzFdLCAiT2ZmIikKICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLCAwKQogICAgICAgICAgICB1aS5zZXQocmVmcy55YXdKaXR0ZXJbMV0sICJPZmYiKQogICAgICAgICAgICB1aS5zZXQocmVmcy55YXdKaXR0ZXJbMl0sIDApCiAgICAgICAgICAgIHVpLnNldChyZWZzLmJvZHlZYXdbMV0sICJPcHBvc2l0ZSIpCiAgICAgICAgICAgIHVpLnNldChyZWZzLmZzQm9keVlhdywgdHJ1ZSkKICAgICAgICAgICAgdWkuc2V0KHJlZnMuZWRnZVlhdywgZmFsc2UpCiAgICAgICAgICAgIHVpLnNldChyZWZzLnJvbGwsIDApCiAgICAKICAgICAgICAgICAgY21kLmluX3VzZSA9IDAKICAgICAgICAgICAgY21kLnJvbGwgPSAwCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICAKICAgLS0gQXZvaWQgYmFja3N0YWIKICAgbG9jYWwgc2VsZiA9IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkKCiAgIGxvY2FsIHBsYXllcnMgPSBlbnRpdHkuZ2V0X3BsYXllcnModHJ1ZSkKICAgbG9jYWwgZXllX3gsIGV5ZV95LCBleWVfeiA9IGNsaWVudC5leWVfcG9zaXRpb24oKQogICByZXR1cm50aGF0ID0gZmFsc2UgCiAgIGlmIHVpLmdldChtZW51Lm1pc2NUYWIuQXZvaWRCYWNrKSB+PSAwIHRoZW4KICAgICAgIGlmIHBsYXllcnMgfj0gbmlsIHRoZW4KICAgICAgICAgICBmb3IgaSwgZW5lbXkgaW4gcGFpcnMocGxheWVycykgZG8KICAgICAgICAgICAgICAgbG9jYWwgaGVhZF94LCBoZWFkX3ksIGhlYWRfeiA9IGVudGl0eS5oaXRib3hfcG9zaXRpb24ocGxheWVyc1tpXSwgNSkKICAgICAgICAgICAgICAgbG9jYWwgd3gsIHd5ID0gcmVuZGVyZXIud29ybGRfdG9fc2NyZWVuKGhlYWRfeCwgaGVhZF95LCBoZWFkX3opCiAgICAgICAgICAgICAgIGxvY2FsIGZyYWN0aW9ucywgZW50aW5kZXhfaGl0ID0gY2xpZW50LnRyYWNlX2xpbmUoc2VsZiwgZXllX3gsIGV5ZV95LCBleWVfeiwgaGVhZF94LCBoZWFkX3ksIGhlYWRfeikKICAgCiAgICAgICAgICAgICAgIGlmIDI1MCA+PSB2ZWN0b3IoZW50aXR5LmdldF9wcm9wKGVuZW15LCAnbV92ZWNPcmlnaW4nKSk6ZGlzdCh2ZWN0b3IoZW50aXR5LmdldF9wcm9wKHNlbGYsICdtX3ZlY09yaWdpbicpKSkgYW5kIGVudGl0eS5pc19hbGl2ZShlbmVteSkgYW5kIGVudGl0eS5nZXRfcGxheWVyX3dlYXBvbihlbmVteSkgfj0gbmlsIGFuZCBlbnRpdHkuZ2V0X2NsYXNzbmFtZShlbnRpdHkuZ2V0X3BsYXllcl93ZWFwb24oZW5lbXkpKSA9PSAnQ0tuaWZlJyBhbmQgKGVudGluZGV4X2hpdCA9PSBwbGF5ZXJzW2ldIG9yIGZyYWN0aW9ucyA9PSAxKSBhbmQgbm90IGVudGl0eS5pc19kb3JtYW50KHBsYXllcnNbaV0pIHRoZW4KICAgICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLnlhd1syXSwgMTgwKQogICAgICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMueWF3QmFzZSwgIkF0IHRhcmdldHMiKQogICAgICAgICAgICAgICAgICAgcmV0dXJudGhhdCA9IHRydWUKICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgZW5kCiAgICAgICBlbmQKICAgZW5kCgogICAgLS0gZnJlZXN0YW5kCiAgICBpZiAoIHVpLmdldChtZW51LmFhVGFiLmZyZWVzdGFuZEhvdGtleSkgYW5kIHVpLmdldChtZW51LmFhVGFiLmZyZWVzdGFuZCkpIHRoZW4KICAgICAgICBpZiBtYW51YWxzT3ZlckZzID09IHRydWUgYW5kIGFhLmlnbm9yZSA9PSB0cnVlIHRoZW4KICAgICAgICAgICAgdWkuc2V0KHJlZnMuZnJlZVN0YW5kWzJdLCAiT24gaG90a2V5IikKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZWxzZQogICAgICAgICAgICBpZiB1aS5nZXQobWVudS5hYVRhYi5mcmVlc3RhbmQpID09ICJTdGF0aWMiIHRoZW4KICAgICAgICAgICAgICAgIHVpLnNldChyZWZzLmJvZHlZYXdbMV0sICJPZmYiKQogICAgICAgICAgICAgICAgdWkuc2V0KHJlZnMucGl0Y2hbMV0sICJEb3duIikKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIHVpLnNldChyZWZzLmZyZWVTdGFuZFsyXSwgIkFsd2F5cyBvbiIpCiAgICAgICAgICAgIHVpLnNldChyZWZzLmZyZWVTdGFuZFsxXSwgdHJ1ZSkKICAgICAgICBlbmQKICAgIGVsc2UKICAgICAgICB1aS5zZXQocmVmcy5mcmVlU3RhbmRbMV0sIGZhbHNlKQogICAgICAgIHVpLnNldChyZWZzLmZyZWVTdGFuZFsyXSwgIk9uIGhvdGtleSIpCiAgICBlbmQKICAgIAogICAgLS0gZmFzdCBsYWRkZXIKICAgIGxvY2FsIHBpdGNoLCB5YXcgPSBjbGllbnQuY2FtZXJhX2FuZ2xlcygpCiAgICBpZiBlbnRpdHkuZ2V0X3Byb3AodmFycy5sb2NhbFBsYXllciwgIm1fTW92ZVR5cGUiKSA9PSA5IHRoZW4KICAgICAgICBjbWQueWF3ID0gbWF0aC5mbG9vcihjbWQueWF3KzAuNSkKICAgICAgICBjbWQucm9sbCA9IDAKCiAgICAgICAgaWYgdWkuZ2V0KG1lbnUubWlzY1RhYi5mYXN0TGFkZGVyKSB0aGVuCiAgICAgICAgICAgIGlmIGNtZC5mb3J3YXJkbW92ZSA+IDAgdGhlbgogICAgICAgICAgICAgICAgaWYgcGl0Y2ggPCA0NSB0aGVuCiAgICAgICAgICAgICAgICAgICAgY21kLnBpdGNoID0gODkKICAgICAgICAgICAgICAgICAgICBjbWQuaW5fbW92ZXJpZ2h0ID0gMQogICAgICAgICAgICAgICAgICAgIGNtZC5pbl9tb3ZlbGVmdCA9IDAKICAgICAgICAgICAgICAgICAgICBjbWQuaW5fZm9yd2FyZCA9IDAKICAgICAgICAgICAgICAgICAgICBjbWQuaW5fYmFjayA9IDEKICAgICAgICAgICAgICAgICAgICBpZiBjbWQuc2lkZW1vdmUgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGNtZC55YXcgPSBjbWQueWF3ICsgOTAKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBpZiBjbWQuc2lkZW1vdmUgPCAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgY21kLnlhdyA9IGNtZC55YXcgKyAxNTAKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBpZiBjbWQuc2lkZW1vdmUgPiAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgY21kLnlhdyA9IGNtZC55YXcgKyAzMAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kIAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAoKCiAgICBpZiB1aS5nZXQobWVudS5idWlsZGVyVGFiLnNhZmVLbmlmZSkgYW5kIHZhcnMucFN0YXRlID09IDcgYW5kIGVudGl0eS5nZXRfY2xhc3NuYW1lKGVudGl0eS5nZXRfcGxheWVyX3dlYXBvbih2YXJzLmxvY2FsUGxheWVyKSkgPT0gIkNLbmlmZSIgdGhlbgogICAgICAgIHVpLnNldChyZWZzLnBpdGNoWzFdLCAiTWluaW1hbCIpCiAgICAgICAgdWkuc2V0KHJlZnMueWF3QmFzZSwgIkF0IHRhcmdldHMiKQogICAgICAgIHVpLnNldChyZWZzLnlhd1sxXSwgIjE4MCIpCiAgICAgICAgdWkuc2V0KHJlZnMueWF3WzJdLCAwKQogICAgICAgIHVpLnNldChyZWZzLnlhd0ppdHRlclsxXSwgIk9mZnNldCIpCiAgICAgICAgdWkuc2V0KHJlZnMueWF3Sml0dGVyWzJdLCAwKQogICAgICAgIHVpLnNldChyZWZzLmJvZHlZYXdbMV0sICJTdGF0aWMiKQogICAgICAgIHVpLnNldChyZWZzLmJvZHlZYXdbMl0sIDApCiAgICAgICAgdWkuc2V0KHJlZnMuZnNCb2R5WWF3LCBmYWxzZSkKICAgICAgICB1aS5zZXQocmVmcy5lZGdlWWF3LCBmYWxzZSkKICAgICAgICB1aS5zZXQocmVmcy5yb2xsLCAwKQogICAgZW5kCiAgICAKICAgIGlmIHVpLmdldChtZW51LmJ1aWxkZXJUYWIuc2FmZVpldXMpIGFuZCB2YXJzLnBTdGF0ZSA9PSA3IGFuZCBlbnRpdHkuZ2V0X2NsYXNzbmFtZShlbnRpdHkuZ2V0X3BsYXllcl93ZWFwb24odmFycy5sb2NhbFBsYXllcikpID09ICJDV2VhcG9uVGFzZXIiIHRoZW4KICAgICAgICB1aS5zZXQocmVmcy5waXRjaFsxXSwgIkRvd24iKQogICAgICAgIHVpLnNldChyZWZzLnlhd0Jhc2UsICJBdCB0YXJnZXRzIikKICAgICAgICB1aS5zZXQocmVmcy55YXdbMV0sICIxODAiKQogICAgICAgIHVpLnNldChyZWZzLnlhd1syXSwgMCkKICAgICAgICB1aS5zZXQocmVmcy55YXdKaXR0ZXJbMV0sICJPZmYiKQogICAgICAgIHVpLnNldChyZWZzLnlhd0ppdHRlclsyXSwgMCkKICAgICAgICB1aS5zZXQocmVmcy5ib2R5WWF3WzFdLCAiU3RhdGljIikKICAgICAgICB1aS5zZXQocmVmcy5ib2R5WWF3WzJdLCAwKQogICAgICAgIHVpLnNldChyZWZzLmZzQm9keVlhdywgZmFsc2UpCiAgICAgICAgdWkuc2V0KHJlZnMuZWRnZVlhdywgZmFsc2UpCiAgICAgICAgdWkuc2V0KHJlZnMucm9sbCwgMCkKZW5kCgplbmQpCgpsb2NhbCBsZWdzU2F2ZWQgPSBmYWxzZQpsb2NhbCBsZWdzVHlwZXMgPSB7WzFdID0gIk9mZiIsIFsyXSA9ICJBbHdheXMgc2xpZGUiLCBbM10gPSAiTmV2ZXIgc2xpZGUifQpsb2NhbCBncm91bmRfdGlja3MgPSAwCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInByZV9yZW5kZXIiLCBmdW5jdGlvbigpCiAgICBpZiBub3QgZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSB0aGVuIHJldHVybiBlbmQKICAgIGxvY2FsIGZsYWdzID0gZW50aXR5LmdldF9wcm9wKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCksICJtX2ZGbGFncyIpCiAgICBncm91bmRfdGlja3MgPSBiaXQuYmFuZChmbGFncywgMSkgPT0gMCBhbmQgMCBvciAoZ3JvdW5kX3RpY2tzIDwgNSBhbmQgZ3JvdW5kX3RpY2tzICsgMSBvciBncm91bmRfdGlja3MpCiAgICAKCiAgICBpZiBmdW5jLnRhYmxlX2NvbnRhaW5zKHVpLmdldChtZW51Lm1pc2NUYWIuYW5pbWF0aW9ucyksICJTdGF0aWMgbGVncyIpIHRoZW4KICAgICAgICBlbnRpdHkuc2V0X3Byb3AoZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSwgIm1fZmxQb3NlUGFyYW1ldGVyIiwgMSwgNikgCiAgICBlbmQKCiAgICBpZiBmdW5jLnRhYmxlX2NvbnRhaW5zKHVpLmdldChtZW51Lm1pc2NUYWIuYW5pbWF0aW9ucyksICJCcm9rZW4iKSB0aGVuCiAgICAgICAgZW50aXR5LnNldF9wcm9wKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCksICJtX2ZsUG9zZVBhcmFtZXRlciIsIG1hdGgucmFuZG9tKDAsIDEwKS8xMCwgMykKICAgICAgICBlbnRpdHkuc2V0X3Byb3AoZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSwgIm1fZmxQb3NlUGFyYW1ldGVyIiwgbWF0aC5yYW5kb20oMCwgMTApLzEwLCA3KQogICAgICAgIGVudGl0eS5zZXRfcHJvcChlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpLCAibV9mbFBvc2VQYXJhbWV0ZXIiLCBtYXRoLnJhbmRvbSgwLCAxMCkvMTAsIDYpCiAgICBlbmQKCiAgICBpZiBmdW5jLnRhYmxlX2NvbnRhaW5zKHVpLmdldChtZW51Lm1pc2NUYWIuYW5pbWF0aW9ucyksICJMZWcgZnVja2VyIikgdGhlbgogICAgICAgIGlmIG5vdCBsZWdzU2F2ZWQgdGhlbgogICAgICAgICAgICBsZWdzU2F2ZWQgPSB1aS5nZXQocmVmcy5sZWdNb3ZlbWVudCkKICAgICAgICBlbmQKICAgICAgICB1aS5zZXRfdmlzaWJsZShyZWZzLmxlZ01vdmVtZW50LCBmYWxzZSkKICAgICAgICBpZiBmdW5jLnRhYmxlX2NvbnRhaW5zKHVpLmdldChtZW51Lm1pc2NUYWIuYW5pbWF0aW9ucyksICJMZWcgZnVja2VyIikgdGhlbgogICAgICAgICAgICB1aS5zZXQocmVmcy5sZWdNb3ZlbWVudCwgbGVnc1R5cGVzW21hdGgucmFuZG9tKDEsIDMpXSkKICAgICAgICAgICAgZW50aXR5LnNldF9wcm9wKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCksICJtX2ZsUG9zZVBhcmFtZXRlciIsIDksICAwKQogICAgICAgIGVuZAoKICAgIGVsc2VpZiAobGVnc1NhdmVkID09ICJPZmYiIG9yIGxlZ3NTYXZlZCA9PSAiQWx3YXlzIHNsaWRlIiBvciBsZWdzU2F2ZWQgPT0gIk5ldmVyIHNsaWRlIikgdGhlbgogICAgICAgIHVpLnNldF92aXNpYmxlKHJlZnMubGVnTW92ZW1lbnQsIHRydWUpCiAgICAgICAgdWkuc2V0KHJlZnMubGVnTW92ZW1lbnQsIGxlZ3NTYXZlZCkKICAgICAgICBsZWdzU2F2ZWQgPSBmYWxzZQogICAgZW5kCgogICAgaWYgZnVuYy50YWJsZV9jb250YWlucyh1aS5nZXQobWVudS5taXNjVGFiLmFuaW1hdGlvbnMpLCAiMCBwaXRjaCBvbiBsYW5kaW5nIikgdGhlbgogICAgICAgIGdyb3VuZF90aWNrcyA9IGJpdC5iYW5kKGZsYWdzLCAxKSA9PSAxIGFuZCBncm91bmRfdGlja3MgKyAxIG9yIDAKCiAgICAgICAgaWYgZ3JvdW5kX3RpY2tzID4gMjAgYW5kIGdyb3VuZF90aWNrcyA8IDE1MCB0aGVuCiAgICAgICAgICAgIGVudGl0eS5zZXRfcHJvcChlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpLCAibV9mbFBvc2VQYXJhbWV0ZXIiLCAwLjUsIDEyKQogICAgICAgIGVuZAogICAgZW5kCgogICAgaWYgZnVuYy50YWJsZV9jb250YWlucyh1aS5nZXQobWVudS5taXNjVGFiLmFuaW1hdGlvbnMpLCAiTW9vbndhbGsiKSB0aGVuCiAgICAgICAgaWYgbm90IGxlZ3NTYXZlZCB0aGVuCiAgICAgICAgICAgIGxlZ3NTYXZlZCA9IHVpLmdldChyZWZzLmxlZ01vdmVtZW50KQogICAgICAgIGVuZAogICAgICAgIHVpLnNldF92aXNpYmxlKHJlZnMubGVnTW92ZW1lbnQsIGZhbHNlKQogICAgICAgIGVudGl0eS5zZXRfcHJvcChlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpLCAibV9mbFBvc2VQYXJhbWV0ZXIiLCAwLCA3KQogICAgICAgIGxvY2FsIG1lID0gZW50LmdldF9sb2NhbF9wbGF5ZXIoKQogICAgICAgIGxvY2FsIGZsYWdzID0gbWU6Z2V0X3Byb3AoIm1fZkZsYWdzIikKICAgICAgICBsb2NhbCBvbmdyb3VuZCA9IGJpdC5iYW5kKGZsYWdzLCAxKSB+PSAwCiAgICAgICAgaWYgbm90IG9uZ3JvdW5kIHRoZW4KICAgICAgICAgICAgbG9jYWwgbXlfYW5pbWxheWVyID0gbWU6Z2V0X2FuaW1fb3ZlcmxheSg2KSAtLSBNT1ZFTUVOVF9NT1ZFCiAgICAgICAgICAgIG15X2FuaW1sYXllci53ZWlnaHQgPSAxCiAgICAgICAgZW5kCiAgICAgICAgdWkuc2V0KHJlZnMubGVnTW92ZW1lbnQsICJPZmYiKQogICAgZWxzZWlmIChsZWdzU2F2ZWQgPT0gIk9mZiIgb3IgbGVnc1NhdmVkID09ICJBbHdheXMgc2xpZGUiIG9yIGxlZ3NTYXZlZCA9PSAiTmV2ZXIgc2xpZGUiKSB0aGVuCiAgICAgICAgdWkuc2V0X3Zpc2libGUocmVmcy5sZWdNb3ZlbWVudCwgdHJ1ZSkKICAgICAgICB1aS5zZXQocmVmcy5sZWdNb3ZlbWVudCwgbGVnc1NhdmVkKQogICAgICAgIGxlZ3NTYXZlZCA9IGZhbHNlCiAgICBlbmQKCiAgICBpZiBub3QgdWkuZ2V0KG1lbnUubWlzY1RhYi5hbmltYXRpb25zRW5hYmxlZCkgdGhlbgogICAgICAgIHJldHVybgogICAgZW5kCiAgICAKZW5kKQotLSBAcmVnaW9uIEFBX0NBTExCQUNLUyBlbmQKCi0tIEByZWdpb24gSU5ESUNBVE9SUyBzdGFydApsb2NhbCBhbHBoYSA9IDAKbG9jYWwgc2NvcGVkRnJhY3Rpb24gPSAwCmxvY2FsIGFjYXRlbFNjb3BlZCA9IDEKbG9jYWwgZHRNb2RpZmllciA9IDAKbG9jYWwgYmFyTW92ZVkgPSAwCgpsb2NhbCBhY3RpdmVGcmFjdGlvbiA9IDAKbG9jYWwgaW5hY3RpdmVGcmFjdGlvbiA9IDAKbG9jYWwgZGVmZW5zaXZlRnJhY3Rpb24gPSAwCmxvY2FsIGhpZGVGcmFjdGlvbiA9IDAKbG9jYWwgaGlkZUluYWN0aXZlRnJhY3Rpb24gPSAwCmxvY2FsIGR0UG9zID0ge3kgPSAwfQpsb2NhbCBvc1BvcyA9IHt5ID0gMH0KCmxvY2FsIG1haW5JbmRDbHIgPSB7ciA9IDAsIGcgPSAwLCBiID0gMCwgYSA9IDB9CmxvY2FsIGR0Q2xyID0ge3IgPSAwLCBnID0gMCwgYiA9IDAsIGEgPSAwfQpsb2NhbCBjaGFyZ2VDbHIgPSB7ciA9IDAsIGcgPSAwLCBiID0gMCwgYSA9IDB9CmxvY2FsIGNoYXJnZUluZCA9IHt3ID0gMCwgeCA9IDAsIHkgPSAyNX0KbG9jYWwgcHNDbHIgPSB7ciA9IDAsIGcgPSAwLCBiID0gMCwgYSA9IDB9CmxvY2FsIGR0SW5kID0ge3cgPSAwLCB4ID0gMCwgeSA9IDI1fQpsb2NhbCBxcEluZCA9IHt3ID0gMCwgeCA9IDAsIHkgPSAyNSwgYSA9IDB9CmxvY2FsIGZkSW5kID0ge3cgPSAwLCB4ID0gMCwgeSA9IDI1LCBhID0gMH0KbG9jYWwgc3BJbmQgPSB7dyA9IDAsIHggPSAwLCB5ID0gMjUsIGEgPSAwfQpsb2NhbCBiYUluZCA9IHt3ID0gMCwgeCA9IDAsIHkgPSAyNSwgYSA9IDB9CmxvY2FsIGZzSW5kID0ge3cgPSAwLCB4ID0gMCwgeSA9IDI1LCBhID0gMH0KbG9jYWwgb3NJbmQgPSB7dyA9IDAsIHggPSAwLCB5ID0gMjUsIGEgPSAwfQpsb2NhbCBwc0luZCA9IHt3ID0gMCwgeCA9IDAsIHkgPSAyNX0KbG9jYWwgd0FscGhhID0gMApsb2NhbCBpbnRlcnZhbCA9IDAKCmxvY2FsIGluZGljYXRvcnNfdGFibGUgPSB7fQoKbG9jYWwgemFsdXBhID0gZnVuY3Rpb24oaW5kaWNhdG9yKQogICAgbG9jYWwgaXNfZGVmZW5zaXZlID0gKHZhcnMuYnJlYWtlci5kZWZlbnNpdmUgPiAxKQogICAgaWYgaW5kaWNhdG9yLnRleHQgPT0gJ0RUJyB0aGVuCiAgICAgICAgaWYgaXNfZGVmZW5zaXZlIHRoZW4KICAgICAgICAgICAgaW5kaWNhdG9yLnIgPSAxMzAKICAgICAgICAgICAgaW5kaWNhdG9yLmcgPSAxOTUKICAgICAgICAgICAgaW5kaWNhdG9yLmIgPSAyMAogICAgICAgIGVuZAogICAgZW5kCgogICAgaW5kaWNhdG9yc190YWJsZVsjaW5kaWNhdG9yc190YWJsZSArIDFdID0gaW5kaWNhdG9yCmVuZAoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygicGFpbnQiLCBmdW5jdGlvbigpCiAgICBsb2NhbCBsb2NhbF9wbGF5ZXIgPSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpCiAgICAgICAgdmFycy5sb2NhbFBsYXllciA9IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkKICAgIGlmIGxvY2FsX3BsYXllciA9PSBuaWwgb3IgZW50aXR5LmlzX2FsaXZlKGxvY2FsX3BsYXllcikgPT0gZmFsc2UgdGhlbiByZXR1cm4gZW5kCiAgICBsb2NhbCBzaXplWCwgc2l6ZVkgPSBjbGllbnQuc2NyZWVuX3NpemUoKQogICAgbG9jYWwgd2VhcG9uID0gZW50aXR5LmdldF9wbGF5ZXJfd2VhcG9uKGxvY2FsX3BsYXllcikKICAgIGxvY2FsIGJvZHlZYXcgPSBlbnRpdHkuZ2V0X3Byb3AobG9jYWxfcGxheWVyLCAibV9mbFBvc2VQYXJhbWV0ZXIiLCAxMSkgKiAxMjAgLSA2MAogICAgbG9jYWwgc2lkZSA9IGJvZHlZYXcgPiAwIGFuZCAxIG9yIC0xCiAgICBsb2NhbCBzdGF0ZSA9ICJNT1ZJTkciCiAgICBsb2NhbCBtYWluQ2xyID0ge30KICAgIG1haW5DbHIuciwgbWFpbkNsci5nLCBtYWluQ2xyLmIsIG1haW5DbHIuYSA9IHVpLmdldChtZW51LnZpc3VhbHNUYWIuaW5kaWNhdG9yc0NscikKICAgIGxvY2FsIGFycm93Q2xyID0ge30KICAgIGFycm93Q2xyLnIsIGFycm93Q2xyLmcsIGFycm93Q2xyLmIsIGFycm93Q2xyLmEgPSB1aS5nZXQobWVudS52aXN1YWxzVGFiLmFycm93Q2xyKQogICAgbG9jYWwgZmFrZSA9IG1hdGguZmxvb3IoYW50aWFpbV9mdW5jcy5nZXRfZGVzeW5jKDEpKQogICAgCiAgICAtLSBkcmF3IGFycm93cwoKICAgIGlmIHVpLmdldChtZW51LnZpc3VhbHNUYWIuYXJyb3dzaW5kZW5iKSBhbmQgdWkuZ2V0KG1lbnUudmlzdWFsc1RhYi5hcnJvd0luZGljYXRvclN0eWxlKSA9PSAiVHJpYW5nbGUiIHRoZW4KICAgICAgICByZW5kZXJlci50cmlhbmdsZShzaXplWCAvIDIgKyA0MCwgc2l6ZVkgLyAyICsgMSwgc2l6ZVggLyAyICsgMzAsIHNpemVZIC8gMiAtIDYsIHNpemVYIC8gMiArIDMwLCBzaXplWSAvIDIgKyA3LCAKICAgICAgICBhYS5tYW51YWxBQSA9PSAyIGFuZCBhcnJvd0Nsci5yIG9yIDAsIAogICAgICAgIGFhLm1hbnVhbEFBID09IDIgYW5kIGFycm93Q2xyLmcgb3IgMCwgCiAgICAgICAgYWEubWFudWFsQUEgPT0gMiBhbmQgYXJyb3dDbHIuYiBvciAwLCAKICAgICAgICBhYS5tYW51YWxBQSA9PSAyIGFuZCBhcnJvd0Nsci5hIG9yIDE2MCkKCiAgICAgICAgcmVuZGVyZXIudHJpYW5nbGUoc2l6ZVggLyAyIC0gNDAsIHNpemVZIC8gMiArIDEsIHNpemVYIC8gMiAtIDMwLCBzaXplWSAvIDIgLSA2LCBzaXplWCAvIDIgLSAzMCwgc2l6ZVkgLyAyICsgNywgCiAgICAgICAgYWEubWFudWFsQUEgPT0gMSBhbmQgYXJyb3dDbHIuciBvciAwLCAKICAgICAgICBhYS5tYW51YWxBQSA9PSAxIGFuZCBhcnJvd0Nsci5nIG9yIDAsIAogICAgICAgIGFhLm1hbnVhbEFBID09IDEgYW5kIGFycm93Q2xyLmIgb3IgMCwgCiAgICAgICAgYWEubWFudWFsQUEgPT0gMSBhbmQgYXJyb3dDbHIuYSBvciAxNjApCiAgICBlbmQKCiAgICBpZiB1aS5nZXQobWVudS52aXN1YWxzVGFiLmFycm93c2luZGVuYikgYW5kIHVpLmdldChtZW51LnZpc3VhbHNUYWIuYXJyb3dJbmRpY2F0b3JTdHlsZSkgID09ICJTdGFuZGFydCIgdGhlbgogICAgICAgIGFscGhhID0gKGFhLm1hbnVhbEFBID09IDIgb3IgYWEubWFudWFsQUEgPT0gMSkgYW5kIGZ1bmMubGVycChhbHBoYSwgMjU1LCBnbG9iYWxzLmZyYW1ldGltZSgpICogMjApIG9yIGZ1bmMubGVycChhbHBoYSwgMCwgZ2xvYmFscy5mcmFtZXRpbWUoKSAqIDIwKQogICAgICAgIHJlbmRlcmVyLnRleHQoc2l6ZVggLyAyICsgNjAsIHNpemVZIC8gMiAtIDIuNSwgYWEubWFudWFsQUEgPT0gMiBhbmQgYXJyb3dDbHIuciBvciAwLCBhYS5tYW51YWxBQSA9PSAyIGFuZCBhcnJvd0Nsci5nIG9yIDAsIGFhLm1hbnVhbEFBID09IDIgYW5kIGFycm93Q2xyLmIgb3IgMCwgYWEubWFudWFsQUEgPT0gMiBhbmQgYXJyb3dDbHIuYSBvciAxNjAsICJjKyIsIDAsICfirp4nKQogICAgICAgIHJlbmRlcmVyLnRleHQoc2l6ZVggLyAyIC0gNjAsIHNpemVZIC8gMiAtIDIuNSwgYWEubWFudWFsQUEgPT0gMSBhbmQgYXJyb3dDbHIuciBvciAwLCBhYS5tYW51YWxBQSA9PSAxIGFuZCBhcnJvd0Nsci5nIG9yIDAsIGFhLm1hbnVhbEFBID09IDEgYW5kIGFycm93Q2xyLmIgb3IgMCwgYWEubWFudWFsQUEgPT0gMSBhbmQgYXJyb3dDbHIuYSBvciAxNjAsICJjKyIsIDAsICfirpwnKQogICAgZW5kCiAgICAKICAgIAogICAgLS0gbW92ZSBvbiBzY29wZQogICAgbG9jYWwgc2NvcGVMZXZlbCA9IGVudGl0eS5nZXRfcHJvcCh3ZWFwb24sICdtX3pvb21MZXZlbCcpCiAgICBsb2NhbCBzY29wZWQgPSBlbnRpdHkuZ2V0X3Byb3AobG9jYWxfcGxheWVyLCAnbV9iSXNTY29wZWQnKSA9PSAxCiAgICBsb2NhbCByZXN1bWVab29tID0gZW50aXR5LmdldF9wcm9wKGxvY2FsX3BsYXllciwgJ21fYlJlc3VtZVpvb20nKSA9PSAxCiAgICBsb2NhbCBpc1ZhbGlkID0gd2VhcG9uIH49IG5pbCBhbmQgc2NvcGVMZXZlbCB+PSBuaWwKICAgIGxvY2FsIGFjdCA9IGlzVmFsaWQgYW5kIHNjb3BlTGV2ZWwgPiAwIGFuZCBzY29wZWQgYW5kIG5vdCByZXN1bWVab29tCiAgICBsb2NhbCB0aW1lID0gZ2xvYmFscy5mcmFtZXRpbWUoKSAqIDMwCgogICAgaWYgYWN0IHRoZW4KICAgICAgICBpZiBzY29wZWRGcmFjdGlvbiA8IDEgdGhlbgogICAgICAgICAgICBzY29wZWRGcmFjdGlvbiA9IGZ1bmMubGVycChzY29wZWRGcmFjdGlvbiwgMSArIDAuMSwgdGltZSkKICAgICAgICBlbHNlCiAgICAgICAgICAgIHNjb3BlZEZyYWN0aW9uID0gMQogICAgICAgIGVuZAogICAgZWxzZQogICAgICAgIHNjb3BlZEZyYWN0aW9uID0gZnVuYy5sZXJwKHNjb3BlZEZyYWN0aW9uLCAwLCB0aW1lKQogICAgZW5kCgogICAgLS0gZHJhdyBpbmRpY2F0b3JzCiAgICBsb2NhbCBkcGkgPSB1aS5nZXQodWkucmVmZXJlbmNlKCJNSVNDIiwgIlNldHRpbmdzIiwgIkRQSSBzY2FsZSIpKTpnc3ViKCclJScsICcnKSAtIDEwMAogICAgbG9jYWwgZ2xvYmFsRmxhZyA9ICJjZC0iCiAgICBsb2NhbCBnbG9iYWxNb3ZlWSA9IDAKICAgIGxvY2FsIGluZFgsIGluZFkgPSByZW5kZXJlci5tZWFzdXJlX3RleHQoZ2xvYmFsRmxhZywgIkRUIikKICAgIGxvY2FsIHlEZWZhdWx0ID0gMTYKICAgIGxvY2FsIGluZENvdW50ID0gMAogICAgaW5kWSA9IGdsb2JhbEZsYWcgPT0gImNkLSIgYW5kIGluZFkgLSAzIG9yIGluZFkgLSAyCgogICAgbG9jYWwgbmV4dEF0dGFjayA9IGVudGl0eS5nZXRfcHJvcCh2YXJzLmxvY2FsUGxheWVyLCAibV9mbE5leHRBdHRhY2siKQogICAgbG9jYWwgbmV4dFByaW1hcnlBdHRhY2sgPSBlbnRpdHkuZ2V0X3Byb3AoZW50aXR5LmdldF9wbGF5ZXJfd2VhcG9uKHZhcnMubG9jYWxQbGF5ZXIpLCAibV9mbE5leHRQcmltYXJ5QXR0YWNrIikKICAgIGxvY2FsIGR0QWN0aXZlID0gZmFsc2UKICAgIGlmIG5leHRQcmltYXJ5QXR0YWNrIH49IG5pbCB0aGVuCiAgICAgICAgZHRBY3RpdmUgPSBub3QgKG1hdGgubWF4KG5leHRQcmltYXJ5QXR0YWNrLCBuZXh0QXR0YWNrKSA+IGdsb2JhbHMuY3VydGltZSgpKQogICAgZW5kCiAgICBsb2NhbCBpc0NoYXJnZWQgPSBkdEFjdGl2ZQogICAgbG9jYWwgaXNGcyA9IHVpLmdldChtZW51LmFhVGFiLmZyZWVzdGFuZEhvdGtleSkKICAgIGxvY2FsIGlzQmEgPSB1aS5nZXQocmVmcy5mb3JjZUJhaW0pCiAgICBsb2NhbCBpc1NwID0gdWkuZ2V0KHJlZnMuc2FmZVBvaW50KQogICAgbG9jYWwgaXNRcCA9IHVpLmdldChyZWZzLnF1aWNrUGVla1syXSkKICAgIGxvY2FsIGlzU2xvdyA9IHVpLmdldChyZWZzLnNsb3dbMV0pIGFuZCB1aS5nZXQocmVmcy5zbG93WzJdKQogICAgbG9jYWwgaXNPcyA9IHVpLmdldChyZWZzLm9zWzFdKSBhbmQgdWkuZ2V0KHJlZnMub3NbMl0pCiAgICBsb2NhbCBpc0ZkID0gdWkuZ2V0KHJlZnMuZmFrZUR1Y2spCiAgICBsb2NhbCBpc0R0ID0gdWkuZ2V0KHJlZnMuZHRbMV0pIGFuZCB1aS5nZXQocmVmcy5kdFsyXSkKCiAgICBsb2NhbCBzdGF0ZSA9IHZhcnMuaW50VG9TW3ZhcnMucFN0YXRlXTp1cHBlcigpCgogICAgCgogICAgaWYgdWkuZ2V0KG1lbnUudmlzdWFsc1RhYi5pbmRpY2F0b3JzVHlwZSkgdGhlbgogICAgICAgIGxvY2FsIHN0cmlrZV93LCBzdHJpa2VfaCA9IHJlbmRlcmVyLm1lYXN1cmVfdGV4dCgiY2RiIiwgbHVhX25hbWUgKQogICAgICAgIGxvY2FsIGxvZ28gPSBhbmltYXRlX3RleHQoZ2xvYmFscy5jdXJ0aW1lKCksIGx1YV9uYW1lLCBtYWluQ2xyLnIsIG1haW5DbHIuZywgbWFpbkNsci5iLCAyNTUpCgogICAgICAgIGdsb3dfbW9kdWxlKHNpemVYLzIgKyAoKHN0cmlrZV93KS8yKSAqIHNjb3BlZEZyYWN0aW9uIC0gc3RyaWtlX3cvMiArIDIsIHNpemVZLzIgKyAyMCAtIGRwaS8xMCwgc3RyaWtlX3cgLSAzLCAwLCAxMCwgMCwge21haW5DbHIuciwgbWFpbkNsci5nLCBtYWluQ2xyLmIsIDEwMCAqIG1hdGguYWJzKG1hdGguY29zKGdsb2JhbHMuY3VydGltZSgpKjIpKX0sIHttYWluQ2xyLnIsIG1haW5DbHIuZywgbWFpbkNsci5iLCAxMDAgKiBtYXRoLmFicyhtYXRoLmNvcyhnbG9iYWxzLmN1cnRpbWUoKSoyKSl9KQogICAgICAgIHJlbmRlcmVyLnRleHQoc2l6ZVgvMiArICgoc3RyaWtlX3cgKyAyKS8yKSAqIHNjb3BlZEZyYWN0aW9uLCBzaXplWS8yICsgMjAgLSBkcGkvMTAsIDE1NSwgMCwgMCwgMCwgImNkYiIsIG5pbCwgdW5wYWNrKGxvZ28pKQoKICAgICAgICBsb2NhbCBjb3VudCA9IDAKCiAgICAgICAgaWYgaXNEdCBhbmQgZHRBY3RpdmUgYW5kIGlzRGVmZW5zaXZlID09IGZhbHNlIHRoZW4KICAgICAgICAgICAgYWN0aXZlRnJhY3Rpb24gPSBmdW5jLmNsYW1wKGFjdGl2ZUZyYWN0aW9uICsgZ2xvYmFscy5mcmFtZXRpbWUoKS8wLjE1LCAwLCAxKQogICAgICAgICAgICBpZiBkdFBvcy55IDwgaW5kWSAqIGNvdW50IHRoZW4KICAgICAgICAgICAgICAgIGR0UG9zLnkgPSBmdW5jLmxlcnAoZHRQb3MueSwgaW5kWSAqIGNvdW50ICsgMC4xLCB0aW1lKQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBkdFBvcy55ID0gaW5kWSAqIGNvdW50CiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBjb3VudCA9IGNvdW50ICsgMQogICAgICAgIGVsc2UKICAgICAgICAgICAgYWN0aXZlRnJhY3Rpb24gPSBmdW5jLmNsYW1wKGFjdGl2ZUZyYWN0aW9uIC0gZ2xvYmFscy5mcmFtZXRpbWUoKS8wLjE1LCAwLCAxKQogICAgICAgIGVuZAoKICAgICAgICBpZiBpc0R0IGFuZCBkdEFjdGl2ZSBhbmQgaXNEZWZlbnNpdmUgdGhlbgogICAgICAgICAgICBkZWZlbnNpdmVGcmFjdGlvbiA9IGZ1bmMuY2xhbXAoZGVmZW5zaXZlRnJhY3Rpb24gKyBnbG9iYWxzLmZyYW1ldGltZSgpLzAuMTUsIDAsIDEpCiAgICAgICAgICAgIGlmIGR0UG9zLnkgPCBpbmRZICogY291bnQgdGhlbgogICAgICAgICAgICAgICAgZHRQb3MueSA9IGZ1bmMubGVycChkdFBvcy55LCBpbmRZICogY291bnQgKyAwLjEsIHRpbWUpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGR0UG9zLnkgPSBpbmRZICogY291bnQKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGNvdW50ID0gY291bnQgKyAxCiAgICAgICAgZWxzZQogICAgICAgICAgICBkZWZlbnNpdmVGcmFjdGlvbiA9IGZ1bmMuY2xhbXAoZGVmZW5zaXZlRnJhY3Rpb24gLSBnbG9iYWxzLmZyYW1ldGltZSgpLzAuMTUsIDAsIDEpCiAgICAgICAgICAgIGlzRGVmZW5zaXZlID0gZmFsc2UKICAgICAgICBlbmQKCiAgICAgICAgaWYgaXNEdCBhbmQgbm90IGR0QWN0aXZlIHRoZW4KICAgICAgICAgICAgaW5hY3RpdmVGcmFjdGlvbiA9IGZ1bmMuY2xhbXAoaW5hY3RpdmVGcmFjdGlvbiArIGdsb2JhbHMuZnJhbWV0aW1lKCkvMC4xNSwgMCwgMSkKICAgICAgICAgICAgaWYgZHRQb3MueSA8IGluZFkgKiBjb3VudCB0aGVuCiAgICAgICAgICAgICAgICBkdFBvcy55ID0gZnVuYy5sZXJwKGR0UG9zLnksIGluZFkgKiBjb3VudCArIDAuMSwgdGltZSkKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgZHRQb3MueSA9IGluZFkgKiBjb3VudAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgY291bnQgPSBjb3VudCArIDEKICAgICAgICBlbHNlCiAgICAgICAgICAgIGluYWN0aXZlRnJhY3Rpb24gPSBmdW5jLmNsYW1wKGluYWN0aXZlRnJhY3Rpb24gLSBnbG9iYWxzLmZyYW1ldGltZSgpLzAuMTUsIDAsIDEpCiAgICAgICAgZW5kCgogICAgICAgIGlmIGlzT3MgYW5kIHVpLmdldCh1aS5yZWZlcmVuY2UoIlJhZ2UiLCAiT3RoZXIiLCAiU2lsZW50IGFpbSIpKSBhbmQgaXNEdCB0aGVuCiAgICAgICAgICAgIGhpZGVJbmFjdGl2ZUZyYWN0aW9uID0gZnVuYy5jbGFtcChoaWRlSW5hY3RpdmVGcmFjdGlvbiArIGdsb2JhbHMuZnJhbWV0aW1lKCkvMC4xNSwgMCwgMSkKICAgICAgICAgICAgaWYgb3NQb3MueSA8IGluZFkgKiBjb3VudCB0aGVuCiAgICAgICAgICAgICAgICBvc1Bvcy55ID0gZnVuYy5sZXJwKG9zUG9zLnksIGluZFkgKiBjb3VudCArIDAuMSwgdGltZSkKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgb3NQb3MueSA9IGluZFkgKiBjb3VudAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgY291bnQgPSBjb3VudCArIDEKICAgICAgICBlbHNlCiAgICAgICAgICAgIGhpZGVJbmFjdGl2ZUZyYWN0aW9uID0gZnVuYy5jbGFtcChoaWRlSW5hY3RpdmVGcmFjdGlvbiAtIGdsb2JhbHMuZnJhbWV0aW1lKCkvMC4xNSwgMCwgMSkKICAgICAgICBlbmQKCiAgICAgICAgaWYgaXNPcyBhbmQgdWkuZ2V0KHVpLnJlZmVyZW5jZSgiUmFnZSIsICJPdGhlciIsICJTaWxlbnQgYWltIikpIGFuZCBub3QgaXNEdCB0aGVuCiAgICAgICAgICAgIGhpZGVGcmFjdGlvbiA9IGZ1bmMuY2xhbXAoaGlkZUZyYWN0aW9uICsgZ2xvYmFscy5mcmFtZXRpbWUoKS8wLjE1LCAwLCAxKQogICAgICAgICAgICBpZiBvc1Bvcy55IDwgaW5kWSAqIGNvdW50IHRoZW4KICAgICAgICAgICAgICAgIG9zUG9zLnkgPSBmdW5jLmxlcnAob3NQb3MueSwgaW5kWSAqIGNvdW50ICsgMC4xLCB0aW1lKQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBvc1Bvcy55ID0gaW5kWSAqIGNvdW50CiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBjb3VudCA9IGNvdW50ICsgMQogICAgICAgIGVsc2UKICAgICAgICAgICAgaGlkZUZyYWN0aW9uID0gZnVuYy5jbGFtcChoaWRlRnJhY3Rpb24gLSBnbG9iYWxzLmZyYW1ldGltZSgpLzAuMTUsIDAsIDEpCiAgICAgICAgZW5kCgogICAgICAgIGxvY2FsIGdsb2JhbE1hcmdpblgsIGdsb2JhbE1hcmdpblkgPSByZW5kZXJlci5tZWFzdXJlX3RleHQoIi1jZCIsICJEU0FEIikKICAgICAgICBnbG9iYWxNYXJnaW5ZID0gZ2xvYmFsTWFyZ2luWSAtIDIKICAgICAgICBsb2NhbCBkdF9zaXplID0gcmVuZGVyZXIubWVhc3VyZV90ZXh0KCItY2QiLCAiRFQgIikKICAgICAgICBsb2NhbCByZWFkeV9zaXplID0gcmVuZGVyZXIubWVhc3VyZV90ZXh0KCItY2QiLCAiUkVBRFkiKQogICAgICAgIHJlbmRlcmVyLnRleHQoc2l6ZVgvMiArICgoZHRfc2l6ZSArIHJlYWR5X3NpemUgKyAyKS8yKSAqIHNjb3BlZEZyYWN0aW9uLCBzaXplWS8yICsgMzAgKyBnbG9iYWxNYXJnaW5ZICsgZHRQb3MueSwgMjU1LCAyNTUsIDI1NSwgYWN0aXZlRnJhY3Rpb24gKiAyNTUsICItY2QiLCBkdF9zaXplICsgYWN0aXZlRnJhY3Rpb24gKiByZWFkeV9zaXplICsgMSwgIkRUICIsICJcYSIgLi4gZnVuYy5SR0JBdG9IRVgoNSwgMjU1LCA1LCAyNTUgKiBhY3RpdmVGcmFjdGlvbikgLi4gIlJFQURZIikKCiAgICAgICAgbG9jYWwgY2hhcmdpbmdfc2l6ZSA9IHJlbmRlcmVyLm1lYXN1cmVfdGV4dCgiLWNkIiwgIldBSVRJTkciKQogICAgICAgIGxvY2FsIHJldCA9IGFuaW1hdGVfdGV4dChnbG9iYWxzLmN1cnRpbWUoKSwgIldBSVRJTkciLCAyNTUsIDAsIDAsIDI1NSkKICAgICAgICByZW5kZXJlci50ZXh0KHNpemVYLzIgKyAoKGR0X3NpemUgKyBjaGFyZ2luZ19zaXplICsgMikvMikgKiBzY29wZWRGcmFjdGlvbiwgc2l6ZVkvMiArIDMwICsgZ2xvYmFsTWFyZ2luWSArIGR0UG9zLnksIDI1NSwgMjU1LCAyNTUsIGluYWN0aXZlRnJhY3Rpb24gKiAyNTUsICItY2QiLCBkdF9zaXplICsgaW5hY3RpdmVGcmFjdGlvbiAqIGNoYXJnaW5nX3NpemUgKyAxLCAiRFQgIiwgdW5wYWNrKHJldCkpCgogICAgICAgIGxvY2FsIGRlZmVuc2l2ZV9zaXplID0gcmVuZGVyZXIubWVhc3VyZV90ZXh0KCItY2QiLCAiREVGRU5TSVZFIikKICAgICAgICBsb2NhbCBkZWYgPSBhbmltYXRlX3RleHQoZ2xvYmFscy5jdXJ0aW1lKCksICJERUZFTlNJVkUiLCBtYWluQ2xyLnIsIG1haW5DbHIuZywgbWFpbkNsci5iLCAyNTUpCiAgICAgICAgcmVuZGVyZXIudGV4dChzaXplWC8yICsgKChkdF9zaXplICsgZGVmZW5zaXZlX3NpemUgKyAyKS8yKSAqIHNjb3BlZEZyYWN0aW9uLCBzaXplWS8yICsgMzAgKyBnbG9iYWxNYXJnaW5ZICsgZHRQb3MueSwgMjU1LCAyNTUsIDI1NSwgZGVmZW5zaXZlRnJhY3Rpb24gKiAyNTUsICItY2QiLCBkdF9zaXplICsgZGVmZW5zaXZlRnJhY3Rpb24gKiBkZWZlbnNpdmVfc2l6ZSArIDEsICJEVCAiLCB1bnBhY2soZGVmKSkKCiAgICAgICAgbG9jYWwgaGlkZV9zaXplID0gcmVuZGVyZXIubWVhc3VyZV90ZXh0KCItY2QiLCAiT1NBQSAiKQogICAgICAgIGxvY2FsIGFjdGl2ZV9zaXplID0gcmVuZGVyZXIubWVhc3VyZV90ZXh0KCItY2QiLCAiQUNUSVZFIikKICAgICAgICByZW5kZXJlci50ZXh0KHNpemVYLzIgKyAoKGhpZGVfc2l6ZSArIGFjdGl2ZV9zaXplICsgMikvMikgKiBzY29wZWRGcmFjdGlvbiwgc2l6ZVkvMiArIDMwICsgZ2xvYmFsTWFyZ2luWSArIG9zUG9zLnksIDI1NSwgMjU1LCAyNTUsIGhpZGVGcmFjdGlvbiAqIDI1NSwgIi1jZCIsIGhpZGVfc2l6ZSArIGhpZGVGcmFjdGlvbiAqIGFjdGl2ZV9zaXplICsgMSwgIk9TQUEgIiwgIlxhIiAuLiBmdW5jLlJHQkF0b0hFWCgyNTUsIDI1NSwgMCwgMjU1ICogaGlkZUZyYWN0aW9uKSAuLiAiQUNUSVZFIikKICAgICAgICAKICAgICAgICBsb2NhbCBpbmFjdGl2ZV9zaXplID0gcmVuZGVyZXIubWVhc3VyZV90ZXh0KCItY2QiLCAiSU5BQ1RJVkUiKQogICAgICAgIGxvY2FsIG9zaW4gPSBhbmltYXRlX3RleHQoZ2xvYmFscy5jdXJ0aW1lKCksICJJTkFDVElWRSIsIDI1NSwgMCwgMCwgMjU1KQogICAgICAgIHJlbmRlcmVyLnRleHQoc2l6ZVgvMiArICgoaGlkZV9zaXplICsgaW5hY3RpdmVfc2l6ZSArIDIpLzIpICogc2NvcGVkRnJhY3Rpb24sIHNpemVZLzIgKyAzMCArIGdsb2JhbE1hcmdpblkgKyBvc1Bvcy55LCAyNTUsIDI1NSwgMjU1LCBoaWRlSW5hY3RpdmVGcmFjdGlvbiAqIDI1NSwgIi1jZCIsIGhpZGVfc2l6ZSArIGhpZGVJbmFjdGl2ZUZyYWN0aW9uICogaW5hY3RpdmVfc2l6ZSArIDEsICJPU0FBICIsIHVucGFjayhvc2luKSkKICAgIAogICAgICAgIGxvY2FsIHN0YXRlX3NpemUgPSByZW5kZXJlci5tZWFzdXJlX3RleHQoIi1jZCIsICc+JyAuLiBzdHJpbmcudXBwZXIoc3RhdGUpIC4uICc8JykKICAgICAgICByZW5kZXJlci50ZXh0KHNpemVYLzIgKyAoKHN0YXRlX3NpemUgKyAyKS8yKSAqIHNjb3BlZEZyYWN0aW9uLCBzaXplWS8yICsgMzAgLCAyNTUsIDI1NSwgMjU1LCAyNTUsICItY2QiLCAwLCAnPicgLi4gc3RyaW5nLnVwcGVyKHN0YXRlKSAuLiAnPCcpCiAgICBlbmQKICAgIAogICAgLS0gZHJhdyBkbWcgaW5kaWNhdG9yCiAgICBpZiB1aS5nZXQobWVudS52aXN1YWxzVGFiLm1pbmltdW1fZGFtYWdlSW5kaWNhdG9yKSB+PSAiLSIgYW5kIGVudGl0eS5nZXRfY2xhc3NuYW1lKHdlYXBvbikgfj0gIkNLbmlmZSIgIHRoZW4KICAgICAgICBpZiB1aS5nZXQobWVudS52aXN1YWxzVGFiLm1pbmltdW1fZGFtYWdlZW5iKSBhbmQgdWkuZ2V0KG1lbnUudmlzdWFsc1RhYi5taW5pbXVtX2RhbWFnZUluZGljYXRvcikgPT0gIkNvbnN0YW50IiB0aGVuCiAgICAgICAgICAgIGlmICggdWkuZ2V0KHJlZnMubWluaW11bV9kYW1hZ2Vfb3ZlcnJpZGVbMV0pIGFuZCB1aS5nZXQocmVmcy5taW5pbXVtX2RhbWFnZV9vdmVycmlkZVsyXSkgKSA9PSBmYWxzZSB0aGVuCiAgICAgICAgICAgICAgICByZW5kZXJlci50ZXh0KHNpemVYIC8gMiArIDMsIHNpemVZIC8gMiAtIDE1LCAyNTUsIDI1NSwgMjU1LCAyNTUsICIiLCAwLCB1aS5nZXQocmVmcy5taW5pbXVtX2RhbWFnZSkpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHJlbmRlcmVyLnRleHQoc2l6ZVggLyAyICsgMywgc2l6ZVkgLyAyIC0gMTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgIiIsIDAsIHVpLmdldChyZWZzLm1pbmltdW1fZGFtYWdlX292ZXJyaWRlWzNdKSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZWxzZWlmIHVpLmdldChtZW51LnZpc3VhbHNUYWIubWluaW11bV9kYW1hZ2VlbmIpIGFuZCB1aS5nZXQocmVmcy5taW5pbXVtX2RhbWFnZV9vdmVycmlkZVsxXSkgYW5kIHVpLmdldChyZWZzLm1pbmltdW1fZGFtYWdlX292ZXJyaWRlWzJdKSBhbmQgdWkuZ2V0KG1lbnUudmlzdWFsc1RhYi5taW5pbXVtX2RhbWFnZUluZGljYXRvcikgPT0gIkJpbmQiIHRoZW4KICAgICAgICAgICAgZG1nID0gdWkuZ2V0KHJlZnMubWluaW11bV9kYW1hZ2Vfb3ZlcnJpZGVbM10pCiAgICAgICAgICAgIHJlbmRlcmVyLnRleHQoc2l6ZVggLyAyICsgMywgc2l6ZVkgLyAyIC0gMTUsIDI1NSwgMjU1LCAyNTUsIDI1NSwgIiIsIDAsIGRtZykKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGlmIHVpLmdldChtZW51Lm1pc2NUYWIud2F0ZXJtYXJrKSB0aGVuCiAgICAgICAgICAgIGxvY2FsIGNscl9yLCBjbHJfZywgY2xyX2IgPSB1aS5nZXQobWVudS5taXNjVGFiLndhdGVybWFya0NscikKICAgICAgICAKICAgICAgICAgICAgbG9jYWwgd2F0ZXJtYXJvNGthID0gYW5pbWF0ZV90ZXh0KGdsb2JhbHMuY3VydGltZSgpLCBsdWFfbmFtZSwgY2xyX3IsIGNscl9nLCBjbHJfYiwgMjU1KQogICAgICAgICAgICByZW5kZXJlci50ZXh0KHNpemVYLzIgLSByZW5kZXJlci5tZWFzdXJlX3RleHQoImRiIiwgbHVhX25hbWUpLzIsIHNpemVZIC0gMjAsIDE1NSwgMCwgMCwgMCwgImRiIiwgbmlsLCB1bnBhY2sod2F0ZXJtYXJvNGthKSkKICAgIGVuZAoKICAgIGlmIHVpLmdldChtZW51LnZpc3VhbHNUYWIuc2lkZUluZGljYXRvcnMpID09ICJTa2VldCBvbGQiIHRoZW4KICAgICAgICBsb2NhbCBoID0gc2VsZWN0KDIsIGNsaWVudC5zY3JlZW5fc2l6ZSgpKQogICAgICAgIGxvY2FsIHN0YXJ0aW5nID0gaCAtIDQyMgogICAgCiAgICAgICAgZm9yIGluZGV4LCBpbmRpY2F0b3IgaW4gcGFpcnMoaW5kaWNhdG9yc190YWJsZSkgZG8gaW5kZXggPSBpbmRleCAtIDEKICAgICAgICAgICAgbG9jYWwgd2lkdGgsIGhlaWdodCA9IHJlbmRlcmVyLm1lYXN1cmVfdGV4dCgnZCsnLCBpbmRpY2F0b3IudGV4dCkKICAgICAgICAgICAgbG9jYWwgb2Zmc2V0ID0gaW5kZXggKiAoaGVpZ2h0IC0gOCkKICAgIAogICAgICAgICAgICBsb2NhbCB5ID0gc3RhcnRpbmcgKyBvZmZzZXQKICAgIAogICAgICAgICAgICByZW5kZXJlci50ZXh0KDEwLCB5ICsgMiwgaW5kaWNhdG9yLnIsIGluZGljYXRvci5nLCBpbmRpY2F0b3IuYiwgaW5kaWNhdG9yLmEsICdkKycsIDAsIGluZGljYXRvci50ZXh0KQogICAgICAgIGVuZAogICAgCiAgICAgICAgaW5kaWNhdG9yc190YWJsZSA9IHt9CiAgICBlbmQKCiAgICBub3RpZmljYXRpb25zLnJlbmRlcigpCmVuZCkKLS0gQHJlZ2lvbiBJTkRJQ0FUT1JTIGVuZAoKLS0gQHJlZ2lvbiBVSV9DQUxMQkFDS1Mgc3RhcnQKdWkuc2V0X2NhbGxiYWNrKG1lbnUudmlzdWFsc1RhYi5zaWRlSW5kaWNhdG9ycywgZnVuY3Rpb24odmFsdWUpCiAgICBsb2NhbCBjYWxsYmFjayA9IHVpLmdldCh2YWx1ZSkgPT0gJ1NrZWV0IG9sZCcgYW5kIGNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2sgb3IgY2xpZW50LnVuc2V0X2V2ZW50X2NhbGxiYWNrCiAgICBjYWxsYmFjaygnaW5kaWNhdG9yJywgemFsdXBhKQplbmQpCnVpLnVwZGF0ZShtZW51LmNvbmZpZ1RhYi5saXN0LGdldENvbmZpZ0xpc3QoKSkKaWYgZGF0YWJhc2UucmVhZChsdWEuZGF0YWJhc2UuY29uZmlncykgPT0gbmlsIHRoZW4KICAgIGRhdGFiYXNlLndyaXRlKGx1YS5kYXRhYmFzZS5jb25maWdzLCB7fSkKZW5kCnVpLnNldChtZW51LmNvbmZpZ1RhYi5uYW1lLCAjZGF0YWJhc2UucmVhZChsdWEuZGF0YWJhc2UuY29uZmlncykgPT0gMCBhbmQgIiIgb3IgZGF0YWJhc2UucmVhZChsdWEuZGF0YWJhc2UuY29uZmlncylbdWkuZ2V0KG1lbnUuY29uZmlnVGFiLmxpc3QpKzFdLm5hbWUpCnVpLnNldF9jYWxsYmFjayhtZW51LmNvbmZpZ1RhYi5saXN0LCBmdW5jdGlvbih2YWx1ZSkKICAgIGxvY2FsIHByb3RlY3RlZCA9IGZ1bmN0aW9uKCkKICAgICAgICBpZiB2YWx1ZSA9PSBuaWwgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgbG9jYWwgbmFtZSA9ICIiCiAgICAKICAgICAgICBsb2NhbCBjb25maWdzID0gZ2V0Q29uZmlnTGlzdCgpCiAgICAgICAgaWYgY29uZmlncyA9PSBuaWwgdGhlbiByZXR1cm4gZW5kCiAgICAKICAgICAgICBuYW1lID0gY29uZmlnc1t1aS5nZXQodmFsdWUpKzFdIG9yICIiCiAgICAKICAgICAgICB1aS5zZXQobWVudS5jb25maWdUYWIubmFtZSwgbmFtZSkKICAgIGVuZAoKICAgIGlmIHBjYWxsKHByb3RlY3RlZCkgdGhlbgoKICAgIGVuZAplbmQpCgp1aS5zZXRfY2FsbGJhY2sobWVudS5jb25maWdUYWIubG9hZCwgZnVuY3Rpb24oKQogICAgbG9jYWwgbmFtZSA9IHVpLmdldChtZW51LmNvbmZpZ1RhYi5uYW1lKQogICAgaWYgbmFtZSA9PSAiIiB0aGVuIHJldHVybiBlbmQKICAgIGxvY2FsIHByb3RlY3RlZCA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2FkQ29uZmlnKG5hbWUpCiAgICBlbmQKCiAgICBpZiBwY2FsbChwcm90ZWN0ZWQpIHRoZW4KICAgICAgICBuYW1lID0gbmFtZTpnc3ViKCcqJywgJycpCiAgICAgICAgbm90aWZpY2F0aW9ucy5uZXcoc3RyaW5nLmZvcm1hdCgnU3VjY2Vzc2Z1bGx5IGxvYWRlZCAiJCVzJCInLCBuYW1lKSwgciwgZywgYikKICAgIGVsc2UKICAgICAgICBub3RpZmljYXRpb25zLm5ldyhzdHJpbmcuZm9ybWF0KCdGYWlsZWQgdG8gbG9hZCAiJCVzJCInLCBuYW1lKSwgMjU1LCAxMjAsIDEyMCkKICAgIGVuZAplbmQpCgp1aS5zZXRfY2FsbGJhY2sobWVudS5jb25maWdUYWIuc2F2ZSwgZnVuY3Rpb24oKQoKICAgICAgICBsb2NhbCBuYW1lID0gdWkuZ2V0KG1lbnUuY29uZmlnVGFiLm5hbWUpCiAgICAgICAgaWYgbmFtZSA9PSAiIiB0aGVuIHJldHVybiBlbmQKICAgIAogICAgICAgIGZvciBpLCB2IGluIHBhaXJzKHByZXNldHMpIGRvCiAgICAgICAgICAgIGlmIHYubmFtZSA9PSBuYW1lOmdzdWIoJyonLCAnJykgdGhlbgogICAgICAgICAgICAgICAgbm90aWZpY2F0aW9ucy5uZXcoc3RyaW5nLmZvcm1hdCgnWW91IGNhbmB0IHNhdmUgYnVpbHQtaW4gcHJlc2V0ICIkJXMkIicsIG5hbWU6Z3N1YignKicsICcnKSksIDI1NSwgMTIwLCAxMjApCiAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCgogICAgICAgIGlmIG5hbWU6bWF0Y2goIlteJXddIikgfj0gbmlsIHRoZW4KICAgICAgICAgICAgbm90aWZpY2F0aW9ucy5uZXcoc3RyaW5nLmZvcm1hdCgnRmFpbGVkIHRvIHNhdmUgIiQlcyQiIGR1ZSB0byBpbnZhbGlkIGNoYXJhY3RlcnMnLCBuYW1lKSwgMjU1LCAxMjAsIDEyMCkKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZW5kCiAgICBsb2NhbCBwcm90ZWN0ZWQgPSBmdW5jdGlvbigpCiAgICAgICAgc2F2ZUNvbmZpZyhuYW1lKQogICAgICAgIHVpLnVwZGF0ZShtZW51LmNvbmZpZ1RhYi5saXN0LCBnZXRDb25maWdMaXN0KCkpCiAgICBlbmQKICAgIGlmIHBjYWxsKHByb3RlY3RlZCkgdGhlbgogICAgICAgIG5vdGlmaWNhdGlvbnMubmV3KHN0cmluZy5mb3JtYXQoJ1N1Y2Nlc3NmdWxseSBzYXZlZCAiJCVzJCInLCBuYW1lKSwgciwgZywgYikKICAgIGVuZAplbmQpCgp1aS5zZXRfY2FsbGJhY2sobWVudS5jb25maWdUYWIuZGVsZXRlLCBmdW5jdGlvbigpCiAgICBsb2NhbCBuYW1lID0gdWkuZ2V0KG1lbnUuY29uZmlnVGFiLm5hbWUpCiAgICBpZiBuYW1lID09ICIiIHRoZW4gcmV0dXJuIGVuZAogICAgaWYgZGVsZXRlQ29uZmlnKG5hbWUpID09IGZhbHNlIHRoZW4KICAgICAgICBub3RpZmljYXRpb25zLm5ldyhzdHJpbmcuZm9ybWF0KCdGYWlsZWQgdG8gZGVsZXRlICIkJXMkIicsIG5hbWUpLCAyNTUsIDEyMCwgMTIwKQogICAgICAgIHVpLnVwZGF0ZShtZW51LmNvbmZpZ1RhYi5saXN0LCBnZXRDb25maWdMaXN0KCkpCiAgICAgICAgcmV0dXJuCiAgICBlbmQKCiAgICBmb3IgaSwgdiBpbiBwYWlycyhwcmVzZXRzKSBkbwogICAgICAgIGlmIHYubmFtZSA9PSBuYW1lOmdzdWIoJyonLCAnJykgdGhlbgogICAgICAgICAgICBub3RpZmljYXRpb25zLm5ldyhzdHJpbmcuZm9ybWF0KCdZb3UgY2FuYHQgZGVsZXRlIGJ1aWx0LWluIHByZXNldCAiJCVzJCInLCBuYW1lOmdzdWIoJyonLCAnJykpLCAyNTUsIDEyMCwgMTIwKQogICAgICAgICAgICByZXR1cm4KICAgICAgICBlbmQKICAgIGVuZAoKICAgIGxvY2FsIHByb3RlY3RlZCA9IGZ1bmN0aW9uKCkKICAgICAgICBkZWxldGVDb25maWcobmFtZSkKICAgIGVuZAoKICAgIGlmIHBjYWxsKHByb3RlY3RlZCkgdGhlbgogICAgICAgIHVpLnVwZGF0ZShtZW51LmNvbmZpZ1RhYi5saXN0LCBnZXRDb25maWdMaXN0KCkpCiAgICAgICAgdWkuc2V0KG1lbnUuY29uZmlnVGFiLmxpc3QsICNwcmVzZXRzICsgI2RhdGFiYXNlLnJlYWQobHVhLmRhdGFiYXNlLmNvbmZpZ3MpIC0gI2RhdGFiYXNlLnJlYWQobHVhLmRhdGFiYXNlLmNvbmZpZ3MpKQogICAgICAgIHVpLnNldChtZW51LmNvbmZpZ1RhYi5uYW1lLCAjZGF0YWJhc2UucmVhZChsdWEuZGF0YWJhc2UuY29uZmlncykgPT0gMCBhbmQgIiIgb3IgZ2V0Q29uZmlnTGlzdCgpWyNwcmVzZXRzICsgI2RhdGFiYXNlLnJlYWQobHVhLmRhdGFiYXNlLmNvbmZpZ3MpIC0gI2RhdGFiYXNlLnJlYWQobHVhLmRhdGFiYXNlLmNvbmZpZ3MpKzFdKQogICAgICAgIG5vdGlmaWNhdGlvbnMubmV3KHN0cmluZy5mb3JtYXQoJ1N1Y2Nlc3NmdWxseSBkZWxldGVkICIkJXMkIicsIG5hbWUpLCByLCBnLCBiKQogICAgZW5kCmVuZCkKCnVpLnNldF9jYWxsYmFjayhtZW51LmNvbmZpZ1RhYi5pbXBvcnQsIGZ1bmN0aW9uKCkKCiAgICBsb2NhbCBwcm90ZWN0ZWQgPSBmdW5jdGlvbigpCiAgICAgICAgaW1wb3J0U2V0dGluZ3MoKQogICAgZW5kCgogICAgaWYgcGNhbGwocHJvdGVjdGVkKSB0aGVuCiAgICAgICAgbm90aWZpY2F0aW9ucy5uZXcoc3RyaW5nLmZvcm1hdCgnU3VjY2Vzc2Z1bGx5IGltcG9ydGVkIHNldHRpbmdzJywgbmFtZSksIHIsIGcsIGIpCiAgICBlbHNlCiAgICAgICAgbm90aWZpY2F0aW9ucy5uZXcoc3RyaW5nLmZvcm1hdCgnRmFpbGVkIHRvIGltcG9ydCBzZXR0aW5ncycsIG5hbWUpLCAyNTUsIDEyMCwgMTIwKQogICAgZW5kCmVuZCkKCnVpLnNldF9jYWxsYmFjayhtZW51LmNvbmZpZ1RhYi5leHBvcnQsIGZ1bmN0aW9uKCkKICAgIGxvY2FsIG5hbWUgPSB1aS5nZXQobWVudS5jb25maWdUYWIubmFtZSkKICAgIGlmIG5hbWUgPT0gIiIgdGhlbiByZXR1cm4gZW5kCgogICAgbG9jYWwgcHJvdGVjdGVkID0gZnVuY3Rpb24oKQogICAgICAgIGV4cG9ydFNldHRpbmdzKG5hbWUpCiAgICBlbmQKICAgIGlmIHBjYWxsKHByb3RlY3RlZCkgdGhlbgogICAgICAgIG5vdGlmaWNhdGlvbnMubmV3KHN0cmluZy5mb3JtYXQoJ1N1Y2Nlc3NmdWxseSBleHBvcnRlZCBzZXR0aW5ncycsIG5hbWUpLCByLCBnLCBiKQogICAgZWxzZQogICAgICAgIG5vdGlmaWNhdGlvbnMubmV3KHN0cmluZy5mb3JtYXQoJ0ZhaWxlZCB0byBleHBvcnQgc2V0dGluZ3MnLCBuYW1lKSwgMjU1LCAxMjAsIDEyMCkKICAgIGVuZAplbmQpCi0tIEByZWdpb24gVUlfQ0FMTEJBQ0tTIGVuZAoKLS0gQHJlZ2lvbiBVSV9SRU5ERVIgc3RhcnQKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygicGFpbnRfdWkiLCBmdW5jdGlvbigpCiAgICB2YXJzLmFjdGl2ZVN0YXRlID0gdmFycy5zVG9JbnRbdWkuZ2V0KG1lbnUuYnVpbGRlclRhYi5zdGF0ZSldCiAgICBpZiB1aS5pc19tZW51X29wZW4oKSB0aGVuCiAgICAgICAgdWkuc2V0KG1lbnUuY29uZmlnVGFiLmxhYmVsMTQ4OCwgIlNlc3Npb24gdGltZTogXGE2NTlGODZGRiIuLmdldF9lbGFwc2VkX3RpbWUoKSkKICAgIGVuZAogICAgbG9jYWwgaXNFbmFibGVkID0gdHJ1ZQogICAgdWkuc2V0X3Zpc2libGUodGFiUGlja2VyLCBpc0VuYWJsZWQpCiAgICB1aS5zZXRfdmlzaWJsZShhYVRhYnMsIHVpLmdldCh0YWJQaWNrZXIpID09ICJBbnRpLWFpbSIgYW5kIGlzRW5hYmxlZCkKICAgIHRyYXZlcnNlX3RhYmxlKGJpbmRzKQogICAgbG9jYWwgaXNBQVRhYiA9IHVpLmdldCh0YWJQaWNrZXIpID09ICJBbnRpLWFpbSIgYW5kIHVpLmdldChhYVRhYnMpID09ICJPdGhlciIKICAgIGxvY2FsIGlzQnVpbGRlclRhYiA9IHVpLmdldCh0YWJQaWNrZXIpID09ICJBbnRpLWFpbSIgYW5kIHVpLmdldChhYVRhYnMpID09ICJCdWlsZGVyIgogICAgbG9jYWwgaXNWaXN1YWxzVGFiID0gdWkuZ2V0KHRhYlBpY2tlcikgPT0gIlNldHRpbmdzIiAKICAgIGxvY2FsIGlzTWlzY1RhYiA9IHVpLmdldCh0YWJQaWNrZXIpID09ICJTZXR0aW5ncyIgCiAgICBsb2NhbCBpc0NGR1RhYiA9IHVpLmdldCh0YWJQaWNrZXIpID09ICJNYWluIgoKICAgIHVpLnNldChhYUJ1aWxkZXJbMV0uZW5hYmxlU3RhdGUsIHRydWUpCiAgICBmb3IgaSA9IDEsICN2YXJzLmFhU3RhdGVzIGRvCiAgICAgICAgbG9jYWwgc3RhdGVFbmFibGVkID0gdWkuZ2V0KGFhQnVpbGRlcltpXS5lbmFibGVTdGF0ZSkKICAgICAgICB1aS5zZXRfdmlzaWJsZShhYUJ1aWxkZXJbaV0uZW5hYmxlU3RhdGUsIHZhcnMuYWN0aXZlU3RhdGUgPT0gaSBhbmQgaX49MSBhbmQgaXNCdWlsZGVyVGFiIGFuZCBpc0VuYWJsZWQpCiAgICAgICAgdWkuc2V0X3Zpc2libGUoYWFCdWlsZGVyW2ldLmZvcmNlRGVmZW5zaXZlLCB2YXJzLmFjdGl2ZVN0YXRlID09IGkgYW5kIGlzQnVpbGRlclRhYiBhbmQgc3RhdGVFbmFibGVkIGFuZCBpc0VuYWJsZWQpCiAgICAgICAgdWkuc2V0X3Zpc2libGUoYWFCdWlsZGVyW2ldLnN0YXRlRGlzYWJsZXJzLCB2YXJzLmFjdGl2ZVN0YXRlID09IDkgYW5kIGkgPT0gOSBhbmQgaXNCdWlsZGVyVGFiIGFuZCB1aS5nZXQoYWFCdWlsZGVyWzldLmVuYWJsZVN0YXRlKSBhbmQgaXNFbmFibGVkKQogICAgICAgIHVpLnNldF92aXNpYmxlKGFhQnVpbGRlcltpXS5waXRjaCwgdmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgaXNFbmFibGVkKQogICAgICAgIHVpLnNldF92aXNpYmxlKGFhQnVpbGRlcltpXS5waXRjaFNsaWRlciAsIHZhcnMuYWN0aXZlU3RhdGUgPT0gaSBhbmQgaXNCdWlsZGVyVGFiIGFuZCBzdGF0ZUVuYWJsZWQgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0ucGl0Y2gpID09ICJDdXN0b20iIGFuZCBpc0VuYWJsZWQpCiAgICAgICAgdWkuc2V0X3Zpc2libGUoYWFCdWlsZGVyW2ldLnlhd0Jhc2UsIHZhcnMuYWN0aXZlU3RhdGUgPT0gaSBhbmQgaXNCdWlsZGVyVGFiIGFuZCBzdGF0ZUVuYWJsZWQgYW5kIGlzRW5hYmxlZCkKICAgICAgICB1aS5zZXRfdmlzaWJsZShhYUJ1aWxkZXJbaV0ueWF3LCB2YXJzLmFjdGl2ZVN0YXRlID09IGkgYW5kIGlzQnVpbGRlclRhYiBhbmQgc3RhdGVFbmFibGVkIGFuZCBpc0VuYWJsZWQpCiAgICAgICAgdWkuc2V0X3Zpc2libGUoYWFCdWlsZGVyW2ldLnN3aXRjaFRpY2tzLCB2YXJzLmFjdGl2ZVN0YXRlID09IGkgYW5kIGlzQnVpbGRlclRhYiBhbmQgc3RhdGVFbmFibGVkIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLnlhdykgPT0gIlNsb3cgSml0dGVyIiBhbmQgaXNFbmFibGVkKQogICAgICAgIHVpLnNldF92aXNpYmxlKGFhQnVpbGRlcltpXS55YXdTdGF0aWMsIHZhcnMuYWN0aXZlU3RhdGUgPT0gaSBhbmQgdWkuZ2V0KGFhQnVpbGRlcltpXS55YXcpIH49ICJPZmYiIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLnlhdykgfj0gIlNsb3cgSml0dGVyIiBhbmQgdWkuZ2V0KGFhQnVpbGRlcltpXS55YXcpIH49ICJMJlIiIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLnlhdykgfj0gIkRlbGF5IEppdHRlciIgYW5kIGlzQnVpbGRlclRhYiBhbmQgc3RhdGVFbmFibGVkIGFuZCBpc0VuYWJsZWQpCiAgICAgICAgdWkuc2V0X3Zpc2libGUoYWFCdWlsZGVyW2ldLnlhd0xlZnQsIHZhcnMuYWN0aXZlU3RhdGUgPT0gaSBhbmQgdWkuZ2V0KGFhQnVpbGRlcltpXS55YXcpIH49ICJPZmYiIGFuZCAodWkuZ2V0KGFhQnVpbGRlcltpXS55YXcpID09ICJTbG93IEppdHRlciIgb3IgdWkuZ2V0KGFhQnVpbGRlcltpXS55YXcpID09ICJMJlIiIG9yIHVpLmdldChhYUJ1aWxkZXJbaV0ueWF3KSA9PSAiRGVsYXkgSml0dGVyIikgYW5kIGlzQnVpbGRlclRhYiBhbmQgc3RhdGVFbmFibGVkIGFuZCBpc0VuYWJsZWQpCiAgICAgICAgdWkuc2V0X3Zpc2libGUoYWFCdWlsZGVyW2ldLnlhd1JpZ2h0LCB2YXJzLmFjdGl2ZVN0YXRlID09IGkgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0ueWF3KSB+PSAiT2ZmIiBhbmQgKHVpLmdldChhYUJ1aWxkZXJbaV0ueWF3KSA9PSAiU2xvdyBKaXR0ZXIiIG9yIHVpLmdldChhYUJ1aWxkZXJbaV0ueWF3KSA9PSAiTCZSIiBvciB1aS5nZXQoYWFCdWlsZGVyW2ldLnlhdykgPT0gIkRlbGF5IEppdHRlciIpIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgaXNFbmFibGVkKQogICAgICAgIHVpLnNldF92aXNpYmxlKGFhQnVpbGRlcltpXS55YXdKaXR0ZXIsIHZhcnMuYWN0aXZlU3RhdGUgPT0gaSBhbmQgdWkuZ2V0KGFhQnVpbGRlcltpXS55YXcpIH49ICJPZmYiIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgaXNFbmFibGVkKQogICAgICAgIHVpLnNldF92aXNpYmxlKGFhQnVpbGRlcltpXS53YXlGaXJzdCwgdmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLnlhdykgfj0gIk9mZiIgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0ueWF3Sml0dGVyKSA9PSAiMy1XYXkiICBhbmQgaXNCdWlsZGVyVGFiIGFuZCBzdGF0ZUVuYWJsZWQgYW5kIGlzRW5hYmxlZCkKICAgICAgICB1aS5zZXRfdmlzaWJsZShhYUJ1aWxkZXJbaV0ud2F5U2Vjb25kLCB2YXJzLmFjdGl2ZVN0YXRlID09IGkgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0ueWF3KSB+PSAiT2ZmIiBhbmQgdWkuZ2V0KGFhQnVpbGRlcltpXS55YXdKaXR0ZXIpID09ICIzLVdheSIgIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgaXNFbmFibGVkKQogICAgICAgIHVpLnNldF92aXNpYmxlKGFhQnVpbGRlcltpXS53YXlUaGlyZCwgdmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLnlhdykgfj0gIk9mZiIgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0ueWF3Sml0dGVyKSA9PSAiMy1XYXkiICBhbmQgaXNCdWlsZGVyVGFiIGFuZCBzdGF0ZUVuYWJsZWQgYW5kIGlzRW5hYmxlZCkKICAgICAgICB1aS5zZXRfdmlzaWJsZShhYUJ1aWxkZXJbaV0ueWF3Sml0dGVyU3RhdGljLCB2YXJzLmFjdGl2ZVN0YXRlID09IGkgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0ueWF3KSB+PSAiT2ZmIiBhbmQgdWkuZ2V0KGFhQnVpbGRlcltpXS55YXdKaXR0ZXIpIH49ICJPZmYiIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLnlhd0ppdHRlcikgfj0gIkwmUiIgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0ueWF3Sml0dGVyKSB+PSAiMy1XYXkiIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgaXNFbmFibGVkKQogICAgICAgIHVpLnNldF92aXNpYmxlKGFhQnVpbGRlcltpXS55YXdKaXR0ZXJMZWZ0LCB2YXJzLmFjdGl2ZVN0YXRlID09IGkgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0ueWF3KSB+PSAiT2ZmIiBhbmQgdWkuZ2V0KGFhQnVpbGRlcltpXS55YXdKaXR0ZXIpID09ICJMJlIiIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgaXNFbmFibGVkKQogICAgICAgIHVpLnNldF92aXNpYmxlKGFhQnVpbGRlcltpXS55YXdKaXR0ZXJSaWdodCwgdmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLnlhdykgfj0gIk9mZiIgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0ueWF3Sml0dGVyKSA9PSAiTCZSIiBhbmQgaXNCdWlsZGVyVGFiIGFuZCBzdGF0ZUVuYWJsZWQgYW5kIGlzRW5hYmxlZCkKICAgICAgICB1aS5zZXRfdmlzaWJsZShhYUJ1aWxkZXJbaV0uYm9keVlhdywgdmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgaXNFbmFibGVkKQogICAgICAgIHVpLnNldF92aXNpYmxlKGFhQnVpbGRlcltpXS5ib2R5WWF3U3RhdGljLCB2YXJzLmFjdGl2ZVN0YXRlID09IGkgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0uYm9keVlhdykgfj0gIk9mZiIgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0uYm9keVlhdykgfj0gIk9wcG9zaXRlIiBhbmQgdWkuZ2V0KGFhQnVpbGRlcltpXS5ib2R5WWF3KSB+PSAiQ3VzdG9tIERlc3luYyIgYW5kIGlzQnVpbGRlclRhYiBhbmQgc3RhdGVFbmFibGVkIGFuZCBpc0VuYWJsZWQpCiAgICAgICAgdWkuc2V0X3Zpc2libGUoYWFCdWlsZGVyW2ldLmZha2VZYXdMaW1pdCwgdmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLmJvZHlZYXcpID09ICJDdXN0b20gRGVzeW5jIiBhbmQgaXNCdWlsZGVyVGFiIGFuZCBzdGF0ZUVuYWJsZWQgYW5kIGlzRW5hYmxlZCkKICAgICAgICB1aS5zZXRfdmlzaWJsZShhYUJ1aWxkZXJbaV0uZGVmZW5zaXZlQW50aUFpbSwgdmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgaXNFbmFibGVkKQoKICAgICAgICB1aS5zZXRfdmlzaWJsZShhYUJ1aWxkZXJbaV0uZGVmX3BpdGNoLCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZmVuc2l2ZUFudGlBaW0pIGFuZCAodmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgaXNFbmFibGVkKSkKICAgICAgICB1aS5zZXRfdmlzaWJsZShhYUJ1aWxkZXJbaV0uZGVmX3BpdGNoU2xpZGVyICwgdWkuZ2V0KGFhQnVpbGRlcltpXS5kZWZlbnNpdmVBbnRpQWltKSBhbmQgKHZhcnMuYWN0aXZlU3RhdGUgPT0gaSBhbmQgaXNCdWlsZGVyVGFiIGFuZCBzdGF0ZUVuYWJsZWQgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmX3BpdGNoKSA9PSAiQ3VzdG9tIiBhbmQgaXNFbmFibGVkKSkKICAgICAgICB1aS5zZXRfdmlzaWJsZShhYUJ1aWxkZXJbaV0uZGVmX3lhd0Jhc2UsIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmZW5zaXZlQW50aUFpbSkgYW5kICh2YXJzLmFjdGl2ZVN0YXRlID09IGkgYW5kIGlzQnVpbGRlclRhYiBhbmQgc3RhdGVFbmFibGVkIGFuZCBpc0VuYWJsZWQpKQogICAgICAgIHVpLnNldF92aXNpYmxlKGFhQnVpbGRlcltpXS5kZWZfeWF3LCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZmVuc2l2ZUFudGlBaW0pIGFuZCAodmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgaXNFbmFibGVkKSkKICAgICAgICB1aS5zZXRfdmlzaWJsZShhYUJ1aWxkZXJbaV0uZGVmX3N3aXRjaFRpY2tzLCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZmVuc2l2ZUFudGlBaW0pIGFuZCAodmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgdWkuZ2V0KGFhQnVpbGRlcltpXS5kZWZfeWF3KSA9PSAiU2xvdyBKaXR0ZXIiIGFuZCBpc0VuYWJsZWQpKQogICAgICAgIHVpLnNldF92aXNpYmxlKGFhQnVpbGRlcltpXS5kZWZfeWF3U3RhdGljLCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZmVuc2l2ZUFudGlBaW0pIGFuZCAodmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZl95YXcpIH49ICJPZmYiIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZl95YXcpIH49ICJTbG93IEppdHRlciIgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmX3lhdykgfj0gIkwmUiIgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmX3lhdykgfj0gIkRlbGF5IEppdHRlciIgYW5kIGlzQnVpbGRlclRhYiBhbmQgc3RhdGVFbmFibGVkIGFuZCBpc0VuYWJsZWQpKQogICAgICAgIHVpLnNldF92aXNpYmxlKGFhQnVpbGRlcltpXS5kZWZfeWF3TGVmdCwgdWkuZ2V0KGFhQnVpbGRlcltpXS5kZWZlbnNpdmVBbnRpQWltKSBhbmQgKHZhcnMuYWN0aXZlU3RhdGUgPT0gaSBhbmQgdWkuZ2V0KGFhQnVpbGRlcltpXS5kZWZfeWF3KSB+PSAiT2ZmIiBhbmQgKHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmX3lhdykgPT0gIlNsb3cgSml0dGVyIiBvciB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZl95YXcpID09ICJMJlIiIG9yIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmX3lhdykgPT0gIkRlbGF5IEppdHRlciIpIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgaXNFbmFibGVkKSkKICAgICAgICB1aS5zZXRfdmlzaWJsZShhYUJ1aWxkZXJbaV0uZGVmX3lhd1JpZ2h0LCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZmVuc2l2ZUFudGlBaW0pIGFuZCAodmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZl95YXcpIH49ICJPZmYiIGFuZCAodWkuZ2V0KGFhQnVpbGRlcltpXS5kZWZfeWF3KSA9PSAiU2xvdyBKaXR0ZXIiIG9yIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmX3lhdykgPT0gIkwmUiIgb3IgdWkuZ2V0KGFhQnVpbGRlcltpXS5kZWZfeWF3KSA9PSAiRGVsYXkgSml0dGVyIikgYW5kIGlzQnVpbGRlclRhYiBhbmQgc3RhdGVFbmFibGVkIGFuZCBpc0VuYWJsZWQpKQogICAgICAgIHVpLnNldF92aXNpYmxlKGFhQnVpbGRlcltpXS5kZWZfeWF3Sml0dGVyLCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZmVuc2l2ZUFudGlBaW0pIGFuZCAodmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZl95YXcpIH49ICJPZmYiIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgaXNFbmFibGVkKSkKICAgICAgICB1aS5zZXRfdmlzaWJsZShhYUJ1aWxkZXJbaV0uZGVmX3dheUZpcnN0LCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZmVuc2l2ZUFudGlBaW0pIGFuZCAodmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZl95YXcpIH49ICJPZmYiIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZl95YXdKaXR0ZXIpID09ICIzLVdheSIgIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgaXNFbmFibGVkKSkKICAgICAgICB1aS5zZXRfdmlzaWJsZShhYUJ1aWxkZXJbaV0uZGVmX3dheVNlY29uZCwgdWkuZ2V0KGFhQnVpbGRlcltpXS5kZWZlbnNpdmVBbnRpQWltKSBhbmQgKHZhcnMuYWN0aXZlU3RhdGUgPT0gaSBhbmQgdWkuZ2V0KGFhQnVpbGRlcltpXS5kZWZfeWF3KSB+PSAiT2ZmIiBhbmQgdWkuZ2V0KGFhQnVpbGRlcltpXS5kZWZfeWF3Sml0dGVyKSA9PSAiMy1XYXkiICBhbmQgaXNCdWlsZGVyVGFiIGFuZCBzdGF0ZUVuYWJsZWQgYW5kIGlzRW5hYmxlZCkpCiAgICAgICAgdWkuc2V0X3Zpc2libGUoYWFCdWlsZGVyW2ldLmRlZl93YXlUaGlyZCwgdWkuZ2V0KGFhQnVpbGRlcltpXS5kZWZlbnNpdmVBbnRpQWltKSBhbmQgKHZhcnMuYWN0aXZlU3RhdGUgPT0gaSBhbmQgdWkuZ2V0KGFhQnVpbGRlcltpXS5kZWZfeWF3KSB+PSAiT2ZmIiBhbmQgdWkuZ2V0KGFhQnVpbGRlcltpXS5kZWZfeWF3Sml0dGVyKSA9PSAiMy1XYXkiICBhbmQgaXNCdWlsZGVyVGFiIGFuZCBzdGF0ZUVuYWJsZWQgYW5kIGlzRW5hYmxlZCkpCiAgICAgICAgdWkuc2V0X3Zpc2libGUoYWFCdWlsZGVyW2ldLmRlZl95YXdKaXR0ZXJTdGF0aWMsIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmZW5zaXZlQW50aUFpbSkgYW5kICh2YXJzLmFjdGl2ZVN0YXRlID09IGkgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmX3lhdykgfj0gIk9mZiIgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmX3lhd0ppdHRlcikgfj0gIk9mZiIgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmX3lhd0ppdHRlcikgfj0gIkwmUiIgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmX3lhd0ppdHRlcikgfj0gIjMtV2F5IiBhbmQgaXNCdWlsZGVyVGFiIGFuZCBzdGF0ZUVuYWJsZWQgYW5kIGlzRW5hYmxlZCkpCiAgICAgICAgdWkuc2V0X3Zpc2libGUoYWFCdWlsZGVyW2ldLmRlZl95YXdKaXR0ZXJMZWZ0LCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZmVuc2l2ZUFudGlBaW0pIGFuZCAodmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZl95YXcpIH49ICJPZmYiIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZl95YXdKaXR0ZXIpID09ICJMJlIiIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgaXNFbmFibGVkKSkKICAgICAgICB1aS5zZXRfdmlzaWJsZShhYUJ1aWxkZXJbaV0uZGVmX3lhd0ppdHRlclJpZ2h0LCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZmVuc2l2ZUFudGlBaW0pIGFuZCAodmFycy5hY3RpdmVTdGF0ZSA9PSBpIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZl95YXcpIH49ICJPZmYiIGFuZCB1aS5nZXQoYWFCdWlsZGVyW2ldLmRlZl95YXdKaXR0ZXIpID09ICJMJlIiIGFuZCBpc0J1aWxkZXJUYWIgYW5kIHN0YXRlRW5hYmxlZCBhbmQgaXNFbmFibGVkKSkKICAgICAgICB1aS5zZXRfdmlzaWJsZShhYUJ1aWxkZXJbaV0uZGVmX2JvZHlZYXcsIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmZW5zaXZlQW50aUFpbSkgYW5kICh2YXJzLmFjdGl2ZVN0YXRlID09IGkgYW5kIGlzQnVpbGRlclRhYiBhbmQgc3RhdGVFbmFibGVkIGFuZCBpc0VuYWJsZWQpKQogICAgICAgIHVpLnNldF92aXNpYmxlKGFhQnVpbGRlcltpXS5kZWZfYm9keVlhd1N0YXRpYywgdWkuZ2V0KGFhQnVpbGRlcltpXS5kZWZlbnNpdmVBbnRpQWltKSBhbmQgKHZhcnMuYWN0aXZlU3RhdGUgPT0gaSBhbmQgdWkuZ2V0KGFhQnVpbGRlcltpXS5kZWZfYm9keVlhdykgfj0gIk9mZiIgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmX2JvZHlZYXcpIH49ICJPcHBvc2l0ZSIgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmX2JvZHlZYXcpIH49ICJDdXN0b20gRGVzeW5jIiBhbmQgaXNCdWlsZGVyVGFiIGFuZCBzdGF0ZUVuYWJsZWQgYW5kIGlzRW5hYmxlZCkpCiAgICAgICAgdWkuc2V0X3Zpc2libGUoYWFCdWlsZGVyW2ldLmRlZl9mYWtlWWF3TGltaXQsIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmZW5zaXZlQW50aUFpbSkgYW5kICh2YXJzLmFjdGl2ZVN0YXRlID09IGkgYW5kIHVpLmdldChhYUJ1aWxkZXJbaV0uZGVmX2JvZHlZYXcpID09ICJDdXN0b20gRGVzeW5jIiBhbmQgaXNCdWlsZGVyVGFiIGFuZCBzdGF0ZUVuYWJsZWQgYW5kIGlzRW5hYmxlZCkpCiAgICBlbmQKCiAgICBmb3IgaSwgZmVhdHVyZSBpbiBwYWlycyhtZW51LmFhVGFiKSBkbwogICAgICAgIGlmIHR5cGUoZmVhdHVyZSkgfj0gInRhYmxlIiB0aGVuCiAgICAgICAgICAgIHVpLnNldF92aXNpYmxlKGZlYXR1cmUsIGlzQUFUYWIgYW5kIGlzRW5hYmxlZCkKICAgICAgICBlbmQKCWVuZCAKCiAgICBmb3IgaSwgZmVhdHVyZSBpbiBwYWlycyhtZW51LmFhVGFiLm1hbnVhbFRhYikgZG8KICAgICAgICBpZiB0eXBlKGZlYXR1cmUpIH49ICJ0YWJsZSIgdGhlbgogICAgICAgICAgICB1aS5zZXRfdmlzaWJsZShmZWF0dXJlLCBpc0FBVGFiIGFuZCBpc0VuYWJsZWQgYW5kIHVpLmdldChtZW51LmFhVGFiLm1hbnVhbHMpIH49ICJPZmYiKQogICAgICAgIGVuZAoJZW5kIAoKICAgIGZvciBpLCBmZWF0dXJlIGluIHBhaXJzKG1lbnUuYnVpbGRlclRhYikgZG8KCQl1aS5zZXRfdmlzaWJsZShmZWF0dXJlLCBpc0J1aWxkZXJUYWIgYW5kIGlzRW5hYmxlZCkKCWVuZAoKICAgIGZvciBpLCBmZWF0dXJlIGluIHBhaXJzKG1lbnUudmlzdWFsc1RhYikgZG8KICAgICAgICBpZiB0eXBlKGZlYXR1cmUpIH49ICJ0YWJsZSIgdGhlbgogICAgICAgICAgICB1aS5zZXRfdmlzaWJsZShmZWF0dXJlLCBpc1Zpc3VhbHNUYWIgYW5kIGlzRW5hYmxlZCkKICAgICAgICBlbmQKCWVuZAogICAgCiAgICBmb3IgaSwgZmVhdHVyZSBpbiBwYWlycyhtZW51Lm1pc2NUYWIpIGRvCiAgICAgICAgaWYgdHlwZShmZWF0dXJlKSB+PSAidGFibGUiIHRoZW4KICAgICAgICAgICAgdWkuc2V0X3Zpc2libGUoZmVhdHVyZSwgaXNNaXNjVGFiIGFuZCBpc0VuYWJsZWQpCiAgICAgICAgZW5kCgllbmQKCiAgICB1aS5zZXRfdmlzaWJsZShtZW51Lm1pc2NUYWIuYW5pbWF0aW9ucywgdWkuZ2V0KG1lbnUubWlzY1RhYi5hbmltYXRpb25zRW5hYmxlZCkgYW5kIGlzTWlzY1RhYiBhbmQgaXNFbmFibGVkKQogICAgdWkuc2V0X3Zpc2libGUobWVudS5taXNjVGFiLnRyYXNoVGFsa192aWJvciwgdWkuZ2V0KG1lbnUubWlzY1RhYi50cmFzaFRhbGspIGFuZCAoaXNNaXNjVGFiIGFuZCBpc0VuYWJsZWQpKQogICAgdWkuc2V0X3Zpc2libGUobWVudS52aXN1YWxzVGFiLmluZGljYXRvcnNDbHIsIHVpLmdldChtZW51LnZpc3VhbHNUYWIuaW5kaWNhdG9yc1R5cGUpIGFuZCAoaXNWaXN1YWxzVGFiIGFuZCBpc0VuYWJsZWQpKQogICAgdWkuc2V0X3Zpc2libGUobWVudS52aXN1YWxzVGFiLmFycm93SW5kaWNhdG9yU3R5bGUsIHVpLmdldChtZW51LnZpc3VhbHNUYWIuYXJyb3dzaW5kZW5iKSBhbmQgKGlzVmlzdWFsc1RhYiBhbmQgaXNFbmFibGVkKSkKICAgIHVpLnNldF92aXNpYmxlKG1lbnUudmlzdWFsc1RhYi5hcnJvd0NsciwgdWkuZ2V0KG1lbnUudmlzdWFsc1RhYi5hcnJvd3NpbmRlbmIpIGFuZCB1aS5nZXQobWVudS52aXN1YWxzVGFiLmFycm93SW5kaWNhdG9yU3R5bGUpIGFuZCAoaXNWaXN1YWxzVGFiIGFuZCBpc0VuYWJsZWQpKQogICAgdWkuc2V0X3Zpc2libGUobWVudS52aXN1YWxzVGFiLmhpdGxvZ3Nfa3J1dGllLCB1aS5nZXQobWVudS52aXN1YWxzVGFiLmhpdGxvZ3NlbmIpIGFuZCAoaXNWaXN1YWxzVGFiIGFuZCBpc0VuYWJsZWQpKQogICAgdWkuc2V0X3Zpc2libGUobWVudS52aXN1YWxzVGFiLmhpdGxvZ3Nfa3J1dGllQ2xyLCB1aS5nZXQobWVudS52aXN1YWxzVGFiLmhpdGxvZ3NlbmIpIGFuZCAoaXNWaXN1YWxzVGFiIGFuZCBpc0VuYWJsZWQpKQogICAgdWkuc2V0X3Zpc2libGUobWVudS52aXN1YWxzVGFiLm1pbmltdW1fZGFtYWdlSW5kaWNhdG9yLCB1aS5nZXQobWVudS52aXN1YWxzVGFiLm1pbmltdW1fZGFtYWdlZW5iKSBhbmQgKGlzVmlzdWFsc1RhYiBhbmQgaXNFbmFibGVkKSkKICAgIHVpLnNldF92aXNpYmxlKG1lbnUudmlzdWFsc1RhYi5zaWRlSW5kaWNhdG9ycywgdWkuZ2V0KG1lbnUudmlzdWFsc1RhYi5zaWRlSW5kaWNhdG9yc2VuYikgYW5kIChpc1Zpc3VhbHNUYWIgYW5kIGlzRW5hYmxlZCkpCiAgICB1aS5zZXRfdmlzaWJsZShtZW51LmFhVGFiLm1hbnVhbHMsIHVpLmdldChtZW51LmFhVGFiLm1hbnVhbHNlbmIpIGFuZCAoaXNBQVRhYiBhbmQgaXNFbmFibGVkKSkgICAKCiAgICBmb3IgaSwgZmVhdHVyZSBpbiBwYWlycyhtZW51LmNvbmZpZ1RhYikgZG8KCQl1aS5zZXRfdmlzaWJsZShmZWF0dXJlLCBpc0NGR1RhYiBhbmQgaXNFbmFibGVkKQoJZW5kCgogICAgaWYgbm90IGlzRW5hYmxlZCBhbmQgbm90IHNhdmVkIHRoZW4KICAgICAgICBmdW5jLnJlc2V0QUFUYWIoKQogICAgICAgIHVpLnNldChyZWZzLmZzQm9keVlhdywgaXNFbmFibGVkKQogICAgICAgIHVpLnNldChyZWZzLmVuYWJsZWQsIGlzRW5hYmxlZCkKICAgICAgICBzYXZlZCA9IHRydWUKICAgIGVsc2VpZiBpc0VuYWJsZWQgYW5kIHNhdmVkIHRoZW4KICAgICAgICB1aS5zZXQocmVmcy5mc0JvZHlZYXcsIG5vdCBpc0VuYWJsZWQpCiAgICAgICAgdWkuc2V0KHJlZnMuZW5hYmxlZCwgaXNFbmFibGVkKQogICAgICAgIHNhdmVkID0gZmFsc2UKICAgIGVuZAogICAgZnVuYy5zZXRBQVRhYihub3QgaXNFbmFibGVkKQoKZW5kKQoKLS0gY2xhbnRhcmUKCmxvY2FsIGNsYW50YWdfYW5pbSA9IGZ1bmN0aW9uKHRleHQsIGluZGljZXMpCiAgICBsb2NhbCB0ZXh0X2FuaW0gPSAiICAgICAgICAgICAgICAgIiAuLiB0ZXh0IC4uICAgICAgICAgICAgICAgICAgICAgICAiIiAKICAgIGxvY2FsIHRpY2tpbnRlcnZhbCA9IGdsb2JhbHMudGlja2ludGVydmFsKCkKICAgIGxvY2FsIHRpY2tjb3VudCA9IGdsb2JhbHMudGlja2NvdW50KCkgKyBmdW5jLnRpbWVfdG9fdGlja3MoY2xpZW50LmxhdGVuY3koKSkKICAgIGxvY2FsIGkgPSB0aWNrY291bnQgLyBmdW5jLnRpbWVfdG9fdGlja3MoMC4yKQogICAgaSA9IG1hdGguZmxvb3IoaSAlICNpbmRpY2VzKQogICAgaSA9IGluZGljZXNbaSsxXSsxCiAgICByZXR1cm4gc3RyaW5nLnN1Yih0ZXh0X2FuaW0sIGksIGkrMTUpCmVuZAoKbG9jYWwgY2xhbnRhZyA9IHsKICAgIHN0ZWFtID0gc3RlYW13b3Jrcy5JU3RlYW1GcmllbmRzLAogICAgcHJldl9jdCA9ICIiLAogICAgb3JpZ19jdCA9ICIiLAogICAgZW5iID0gZmFsc2UsCn0KCmxvY2FsIGZ1bmN0aW9uIGdldF9vcmlnaW5hbF9jbGFudGFnKCkKICAgIGxvY2FsIGNsYW5faWQgPSBjdmFyLmNsX2NsYW5pZC5nZXRfaW50KCkKICAgIGlmIGNsYW5faWQgPT0gMCB0aGVuIHJldHVybiAiXDAiIGVuZAoKICAgIGxvY2FsIGNsYW5fY291bnQgPSBjbGFudGFnLnN0ZWFtLkdldENsYW5Db3VudCgpCiAgICBmb3IgaSA9IDAsIGNsYW5fY291bnQgZG8gCiAgICAgICAgbG9jYWwgZ3JvdXBfaWQgPSBjbGFudGFnLnN0ZWFtLkdldENsYW5CeUluZGV4KGkpCiAgICAgICAgaWYgZ3JvdXBfaWQgPT0gY2xhbl9pZCB0aGVuCiAgICAgICAgICAgIHJldHVybiBjbGFudGFnLnN0ZWFtLkdldENsYW5UYWcoZ3JvdXBfaWQpCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpsb2NhbCBmdW5jdGlvbiBjbGFudGFnX3NldCgpCiAgICBsb2NhbCBsdWFfbmFtZSA9ICJleHRlcm5hbC5jb2Rlcy5ncyIKICAgIGlmIHVpLmdldChtZW51Lm1pc2NUYWIuY2xhblRhZykgdGhlbgogICAgICAgIGlmIHVpLmdldCh1aS5yZWZlcmVuY2UoIk1pc2MiLCAiTWlzY2VsbGFuZW91cyIsICJDbGFuIHRhZyBzcGFtbWVyIikpIHRoZW4gcmV0dXJuIGVuZAoKCQlsb2NhbCBjbGFuX3RhZyA9IGNsYW50YWdfYW5pbShsdWFfbmFtZSwgezAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTEsIDExLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1fSkKCiAgICAgICAgaWYgZW50aXR5LmdldF9wcm9wKGVudGl0eS5nZXRfZ2FtZV9ydWxlcygpLCAibV9nYW1lUGhhc2UiKSA9PSA1IHRoZW4KICAgICAgICAgICAgY2xhbl90YWcgPSBjbGFudGFnX2FuaW0oJ2V4dGVybmFsLmNvZGVzLmdzJywgezEwfSkKICAgICAgICAgICAgY2xpZW50LnNldF9jbGFuX3RhZyhjbGFuX3RhZykKICAgICAgICBlbHNlaWYgZW50aXR5LmdldF9wcm9wKGVudGl0eS5nZXRfZ2FtZV9ydWxlcygpLCAibV90aW1lVW50aWxOZXh0UGhhc2VTdGFydHMiKSB+PSAwIHRoZW4KICAgICAgICAgICAgY2xhbl90YWcgPSBjbGFudGFnX2FuaW0oJ2V4dGVybmFsLmNvZGVzLmdzJywgezEwfSkKICAgICAgICAgICAgY2xpZW50LnNldF9jbGFuX3RhZyhjbGFuX3RhZykKICAgICAgICBlbHNlaWYgY2xhbl90YWcgfj0gY2xhbnRhZy5wcmV2X2N0ICB0aGVuCiAgICAgICAgICAgIGNsaWVudC5zZXRfY2xhbl90YWcoY2xhbl90YWcpCiAgICAgICAgZW5kCgogICAgICAgIGNsYW50YWcucHJldl9jdCA9IGNsYW5fdGFnCiAgICAgICAgY2xhbnRhZy5lbmIgPSB0cnVlCiAgICBlbHNlaWYgY2xhbnRhZy5lbmIgPT0gdHJ1ZSB0aGVuCiAgICAgICAgY2xpZW50LnNldF9jbGFuX3RhZyhnZXRfb3JpZ2luYWxfY2xhbnRhZygpKQogICAgICAgIGNsYW50YWcuZW5iID0gZmFsc2UKICAgIGVuZAplbmQKCmNsYW50YWcucGFpbnQgPSBmdW5jdGlvbigpCiAgICBpZiBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpIH49IG5pbCB0aGVuCiAgICAgICAgaWYgZ2xvYmFscy50aWNrY291bnQoKSAlIDIgPT0gMCB0aGVuCiAgICAgICAgICAgIGNsYW50YWdfc2V0KCkKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmNsYW50YWcucnVuX2NvbW1hbmQgPSBmdW5jdGlvbihlKQogICAgaWYgZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSB+PSBuaWwgdGhlbiAKICAgICAgICBpZiBlLmNob2tlZGNvbW1hbmRzID09IDAgdGhlbgogICAgICAgICAgICBjbGFudGFnX3NldCgpCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpjbGFudGFnLnBsYXllcl9jb25uZWN0X2Z1bGwgPSBmdW5jdGlvbihlKQogICAgaWYgY2xpZW50LnVzZXJpZF90b19lbnRpbmRleChlLnVzZXJpZCkgPT0gZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSB0aGVuIAogICAgICAgIGNsYW50YWcub3JpZ19jdCA9IGdldF9vcmlnaW5hbF9jbGFudGFnKCkKICAgIGVuZAplbmQKCmNsYW50YWcuc2h1dGRvd24gPSBmdW5jdGlvbigpCiAgICBjbGllbnQuc2V0X2NsYW5fdGFnKGdldF9vcmlnaW5hbF9jbGFudGFnKCkpCmVuZAoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygicGFpbnQiLCBjbGFudGFnLnBhaW50KQpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJydW5fY29tbWFuZCIsIGNsYW50YWcucnVuX2NvbW1hbmQpCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInBsYXllcl9jb25uZWN0X2Z1bGwiLCBjbGFudGFnLnBsYXllcl9jb25uZWN0X2Z1bGwpCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInNodXRkb3duIiwgY2xhbnRhZy5zaHV0ZG93bikKCi0tIGNsYW50YWcgY2xvc2UKCgotLSBVbnNhZmUgY2hhcmdlCmxvY2FsIGZ1bmN0aW9uIGlzX3Z1bG5lcmFibGUoKQogICAgZm9yIF8sIHYgaW4gaXBhaXJzKGVudGl0eS5nZXRfcGxheWVycyh0cnVlKSkgZG8KICAgICAgICBsb2NhbCBmbGFncyA9IChlbnRpdHkuZ2V0X2VzcF9kYXRhKHYpKS5mbGFncwoKICAgICAgICBpZiBiaXQuYmFuZChmbGFncywgYml0LmxzaGlmdCgxLCAxMSkpIH49IDAgdGhlbgogICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgIGVuZAogICAgZW5kCgogICAgcmV0dXJuIGZhbHNlCmVuZAoKbG9jYWwgYXV0b19kaXNjaGFyZ2UgPSBmdW5jdGlvbihjbWQpCiAgICBpZiBub3QgdWkuZ2V0KG1lbnUubWlzY1RhYi51bnNhZmVjaGFyaGdlKSBvciB1aS5nZXQocmVmcy5xdWlja1BlZWtbMl0pIG9yIG5vdCB1aS5nZXQocmVmcy5kdFsyXSkgb3IgCiAgICAoZW50aXR5LmdldF9jbGFzc25hbWUoZW50aXR5LmdldF9wbGF5ZXJfd2VhcG9uKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkpKSB+PSAiQ1dlYXBvblNTRzA4IiBhbmQgZW50aXR5LmdldF9jbGFzc25hbWUoZW50aXR5LmdldF9wbGF5ZXJfd2VhcG9uKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkpKSB+PSAiQ1dlYXBvbkFXUCIpIHRoZW4gcmV0dXJuIGVuZAoKICAgIGxvY2FsIHZlbF8yID0gbWF0aC5mbG9vcihlbnRpdHkuZ2V0X3Byb3AoZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSwgIm1fdmVjVmVsb2NpdHlbMl0iKSkKCiAgICBpZiBpc192dWxuZXJhYmxlKCkgYW5kIHZlbF8yID4gMjAgdGhlbgogICAgICAgIGNtZC5pbl9qdW1wID0gZmFsc2UKICAgICAgICBjbWQuZGlzY2hhcmdlX3BlbmRpbmcgPSB0cnVlCiAgICBlbmQKZW5kCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJzZXR1cF9jb21tYW5kIiwgZnVuY3Rpb24oY21kKQogICAgYXV0b19kaXNjaGFyZ2UoY21kKQplbmQpCgotLSBlbmQKbG9jYWwgY2hhdF9zcGFtbWVyID0ge30KCmNoYXRfc3BhbW1lci5waHJhc2VzID0gewogICAga2lsbCA9IHsKICAgICAgICB7ImNqY2IgW2VxIG5kZmhtIiwgItGB0L7RgdC4INGF0YPQuSDRgtCy0LDRgNGMIn0sCiAgICAgICAgeyLwnZWk8J2VpfCdlZrwnZWd8J2VnSDwnZWl8J2VmfCdlZYg8J2Vk/CdlZbwnZWk8J2VpSDwnZWo8J2VmvCdlaXwnZWZIEV4dGVybmFsLmNvZGVzIn0sCiAgICAgICAgeyLQutCw0Log0Y8g0YLQtdCx0Y8g0YLRgNCw0YXQvdGD0LsiLCAi0LrRgNGD0YLRi9GI0LrQsCIsICLQu9C40LLQsNC5INGBINC/0L7Qt9C+0YDQvtC8In0sCiAgICAgICAgeyLRjyDQvtC/0Y/RgtGMINGC0LXQsdGPINCy0YvQtdCx0LDQuyIsICLRgyDQvNC10L3RjyDQsNCwINCw0YXRg9C10L3QvdGL0LUiLCAi0YXRg9C5INC/0L7Qv9Cw0LTQtdGI0YwifSwKICAgICAgICB7ItC00L7Qu9Cx0L7QtdCxINC+0L/Rj9GC0Ywg0LzQuNGB0YHQvdGD0LsiLCAiZXh0ZXJuYWwuY29kZXMg0L/QvtC80L7Qs9C70LAiLCAi0YEg0LTQtdGE0L7Qu9GCINC/0YDQtdGB0LXRgtC+0Lwg0LHQtdCz0LDRjiDQuCDQtdCx0YMg0YXQsNGF0LDQsNGF0LDRhSJ9LAogICAgICAgIHsiIOOAguKcsDMwMu+8n2V4dGVybmFsLmNvZGVz4pyw44CCIn0sCiAgICAgICAgeyLRgdC+0YDRgNC4INC30LAg0LfRg9Cx0YsiLCAi0LjQtNC4INGB0L7QsdC40YDQsNC5In0sCiAgICAgICAgeyLRgdC90L7QstCwINGD0LHQuNC7INC90YPQsdCwIn0sCiAgICAgICAgeyLRgdGD0L3QtNGD0YfQtdC6INCyINGP0L3QtNC10LrRgSDQtdC00YMg0YHQvtCx0YDQsNC7INGD0LbQtT8iLCAi0LAg0YLQviDRjyDQttGA0LDRgtGMINGF0L7Rh9GDIn0sCiAgICAgICAgeyJmW2ZbZltmW1tmWyIsICLQsNGF0LDRhdCw0YXQsNGF0LDRhdGF0LAiLCAi0LTQvtC70LHQvtC10LEg0L3QsNC50YEg0LrRhNCzIn0sCiAgICAgICAgeyLQotCV0KHQoiDQoNCe0KHQn9Cg0KvQltCV0KfQmtCYIGV4dGVybmFsLmNvZGVzIEdBTUVTRU5TRSJ9LAogICAgICAgIHsi0YfQu9C10L3Rj9C60YMg0L/QvtGB0L7RgdCw0LsiLCAi0L7Qv9GP0YLRjCIsICLQtdCx0LDQvdCw0YIg0LrQvtCz0LTQsCDRg9C20LUg0LjQs9GA0LDRgtGMINC90LDRg9GH0LjRiNGM0YHRjyJ9LAogICAgICAgIHsi8J2VmPCdlZLwnZWe8J2VlvCdlaTwnZWW8J2Vn/CdlaTwnZWWIPCdlajwnZWa8J2VnfCdlZ0g8J2VkvCdlZ3wnZWo8J2VkvCdlarwnZWkIPCdlZPwnZWWIPCdlZLwnZWZ8J2VlvCdlZLwnZWVIiwgIkV4dGVybmFsLmNvZGVzIPCdlajwnZWa8J2VnfCdlZ0g8J2VkvCdlZ3wnZWo8J2VkvCdlarwnZWkIPCdlZPwnZWWIPCdlZLwnZWZ8J2VlvCdlZLwnZWVIn0sCiAgICAgICAgeyLwnZWk8J2VmfCdlZrwnZWlIPCdlZ3wnZWm8J2VkiDwnZWm8J2VpPCdlZbwnZWjIPCdlZfwnZWa8J2Vn/CdlZXwnZWW8J2VlSJ9LAogICAgICAgIHsi0JDQpdCl0JDQkNCl0JAiLCLQpdCQ0KXQkNCl0JDQpdCQIiwi0LXQsdCw0YLRjCDRgtGLINC90LjRidC40Lkg0YXRg9C10YHQvtGBIn0sCiAgICAgICAgeyJzdGF5IHdpdGggdXMgLSBleHRlcm5hbC5jb2RlcyJ9LAogICAgICAgIHsi0Jog0Jsg0J4g0J8g0J0g0JUg0J8g0Ksg0KIg0JAg0Jkg0KEg0K8g0J8g0J4g0JEg0JUg0JQg0Jgg0KIg0KwifSwKICAgICAgICB7IjEuIn0sCiAgICB9LAoKICAgIGRlYXRoID0gewogICAgICAgIHsidCxrZnkgcmp5eHR5c3EiLCAi0LXQsdC70LDQvSDQutC+0L3Rh9C10L3Ri9C5IiwgItGC0Ysg0LrQsNC6INGD0LHQuNC7IiwgItGPINC90LAg0LLQsNC90LLQtdC1INCx0YvQuyJ9LAogICAgICAgIHsi0LHQu9GP0YLRjCDQvtC/0Y/RgtGMINCw0L3RgNC10LMiLCAi0LXQsdGD0YfQuNC5INGB0LXRgNCy0LXRgCIsICLRjyDQt9Cw0LXQsdCw0LvRgdGPINGD0LbQtSJ9LAogICAgICAgIHsi0YfQuNGCINC80LjRgdC90YPQuyDRgdC90L7QstCwIn0sCiAgICAgICAgeyLRgtGLINC10LHQu9Cw0L0iLCAi0LrQsNC6INGC0LDQuiDQuNCz0YDQsNGC0Ywg0LzQvtC20L3QviIsICLQv9GA0L7RgdGC0L4g0L/QvtCx0LXQttCw0YLRjCJ9LAogICAgICAgIHsi0LjQtNC4INC60L7RgNC+0LLRgyDQtNC+0LgiLCAi0YLQstCw0YDRjCDRgdC10LvRjNGB0LrQsNGPIiwgItC30LDQtdCx0LDQu9CwINGD0LbQtSDQutC0INC/0L7RgNGC0LjRgtGMIn0sCiAgICAgICAgeyLQuCDRjdGC0L4g0LzQtdC90Y8g0YPQsdC40LvQviIsICLQv9C40LfQtNC10YYifSwKICAgICAgICB7ItCx0LvRj9GC0Ywg0L/QuNC30LTQtdGGIiwgItGB0L3QvtCy0LAg0LTQsNC70LHQsNGR0LEg0YPQsdC40LsifSwKICAgICAgICB7ItC+0L0g0LbQtSIsICLQvdC1INC/0L7QvdC40LzQsNC10YIiLCAi0YfRgtC+INC10LzRgyDQv9C+0LLQtdC30LvQviJ9LAogICAgICAgIHsi0L/QuNC30LTQtdGGIiwgItGH0LjRgtGD0LvRjyDQvtCx0L7RgdGA0LDQu9GB0Y8ifQogICAgfQp9CgpjaGF0X3NwYW1tZXIucGhyYXNlX2NvdW50ID0gewogICAgZGVhdGggPSAwLAogICAga2lsbCA9IDAsCn0KCmNoYXRfc3BhbW1lci5oYW5kbGUgPSBmdW5jdGlvbihlKQogICAgaWYgbm90IHVpLmdldChtZW51Lm1pc2NUYWIudHJhc2hUYWxrKSB0aGVuCiAgICAgICAgcmV0dXJuCiAgICBlbmQKCiAgICBsb2NhbCBwbGF5ZXIgPSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpCgogICAgaWYgcGxheWVyID09IG5pbCB0aGVuCiAgICAgICAgcmV0dXJuCiAgICBlbmQKCiAgICBsb2NhbCB2aWN0aW0gPSBjbGllbnQudXNlcmlkX3RvX2VudGluZGV4KGUudXNlcmlkKQoKICAgIGlmIHZpY3RpbSA9PSBuaWwgdGhlbgogICAgICAgIHJldHVybgogICAgZW5kCgogICAgbG9jYWwgYXR0YWNrZXIgPSBjbGllbnQudXNlcmlkX3RvX2VudGluZGV4KGUuYXR0YWNrZXIpCgogICAgaWYgYXR0YWNrZXIgPT0gbmlsIHRoZW4KICAgICAgICByZXR1cm4KICAgIGVuZAoKICAgIGNoYXRfc3BhbW1lci5waHJhc2VfY291bnQuZGVhdGggPSBjaGF0X3NwYW1tZXIucGhyYXNlX2NvdW50LmRlYXRoICsgMQogICAgaWYgY2hhdF9zcGFtbWVyLnBocmFzZV9jb3VudC5kZWF0aCA+ICNjaGF0X3NwYW1tZXIucGhyYXNlcy5kZWF0aCB0aGVuCiAgICAgICAgY2hhdF9zcGFtbWVyLnBocmFzZV9jb3VudC5kZWF0aCA9IDEKICAgIGVuZAoKICAgIGNoYXRfc3BhbW1lci5waHJhc2VfY291bnQua2lsbCA9IGNoYXRfc3BhbW1lci5waHJhc2VfY291bnQua2lsbCArIDEKICAgIGlmIGNoYXRfc3BhbW1lci5waHJhc2VfY291bnQua2lsbCA+ICNjaGF0X3NwYW1tZXIucGhyYXNlcy5raWxsIHRoZW4KICAgICAgICBjaGF0X3NwYW1tZXIucGhyYXNlX2NvdW50LmtpbGwgPSAxCiAgICBlbmQKCiAgICBsb2NhbCBwaHJhc2UgPSB7CiAgICAgICAgZGVhdGggPSBjaGF0X3NwYW1tZXIucGhyYXNlcy5kZWF0aFtjaGF0X3NwYW1tZXIucGhyYXNlX2NvdW50LmRlYXRoXSwKICAgICAgICBraWxsID0gY2hhdF9zcGFtbWVyLnBocmFzZXMua2lsbFtjaGF0X3NwYW1tZXIucGhyYXNlX2NvdW50LmtpbGxdLAogICAgfQoKICAgIGlmIGZ1bmMuaW5jbHVkZXModWkuZ2V0KG1lbnUubWlzY1RhYi50cmFzaFRhbGtfdmlib3IpLCAiS2lsbCIpIHRoZW4KICAgICAgICBpZiBhdHRhY2tlciA9PSBwbGF5ZXIgYW5kIHZpY3RpbSB+PSBwbGF5ZXIgdGhlbgogICAgICAgICAgICBmb3IgaSA9IDEsICNwaHJhc2Uua2lsbCBkbwogICAgICAgICAgICAgICAgY2xpZW50LmRlbGF5X2NhbGwoaSoyLCBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICAgICAgY2xpZW50LmV4ZWMoKCJzYXkgJXMiKTpmb3JtYXQocGhyYXNlLmtpbGxbaV0pKQogICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGlmIGZ1bmMuaW5jbHVkZXModWkuZ2V0KG1lbnUubWlzY1RhYi50cmFzaFRhbGtfdmlib3IpLCAiRGVhdGgiKSB0aGVuCiAgICAgICAgaWYgYXR0YWNrZXIgfj0gcGxheWVyIGFuZCB2aWN0aW0gPT0gcGxheWVyIHRoZW4KICAgICAgICAgICAgZm9yIGkgPSAxLCAjcGhyYXNlLmRlYXRoIGRvCiAgICAgICAgICAgICAgICBjbGllbnQuZGVsYXlfY2FsbChpKjIsIGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICBjbGllbnQuZXhlYygoInNheSAlcyIpOmZvcm1hdChwaHJhc2UuZGVhdGhbaV0pKQogICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmxvY2FsIG5vdGlmeV9sb2wgPSB7fQoKZnVuY3Rpb24gbm90aWZ5X3JlbmRlcigpIAogICAgbG9jYWwgWCwgWSA9IGNsaWVudC5zY3JlZW5fc2l6ZSgpCiAgICBmb3IgaSwgaW5mb19ub3RpIGluIGlwYWlycyhub3RpZnlfbG9sKSBkbwogICAgICAgIGlmIGkgPiA3IHRoZW4KICAgICAgICAgICAgdGFibGUucmVtb3ZlKG5vdGlmeV9sb2wsIGkpCiAgICAgICAgZW5kCiAgICAgICAgaWYgaW5mb19ub3RpLnRleHQgfj0gbmlsIGFuZCBpbmZvX25vdGkudGV4dCB+PSAiIiB0aGVuCiAgICAgICAgICAgIGxvY2FsIGNvbG9yID0gaW5mb19ub3RpLmNvbG9yCiAgICAgICAgICAgIGlmIGluZm9fbm90aS50aW1lciArIDMuNyA8IGdsb2JhbHMucmVhbHRpbWUoKSB0aGVuCiAgICAgICAgICAgICAgICBpbmZvX25vdGkueSA9IGZ1bmMubGVycChpbmZvX25vdGkueSwgWSArIDE1MCwgZ2xvYmFscy5mcmFtZXRpbWUoKSAqIDEuNSkKICAgICAgICAgICAgICAgIGluZm9fbm90aS5hbHBoYSA9IGZ1bmMubGVycChpbmZvX25vdGkuYWxwaGEsIDAsIGdsb2JhbHMuZnJhbWV0aW1lKCkgKiA0LjUpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGluZm9fbm90aS55ID0gZnVuYy5sZXJwKGluZm9fbm90aS55LCBZIC0gMTAwLCBnbG9iYWxzLmZyYW1ldGltZSgpICogMS41KQogICAgICAgICAgICAgICAgaW5mb19ub3RpLmFscGhhID0gZnVuYy5sZXJwKGluZm9fbm90aS5hbHBoYSwgMjU1LCBnbG9iYWxzLmZyYW1ldGltZSgpICogNC41KQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKCiAgICAgICAgbG9jYWwgd2lkdGggPSB2ZWN0b3IocmVuZGVyZXIubWVhc3VyZV90ZXh0KCJjIiwgaW5mb19ub3RpLnRleHQpKQogICAgICAgIGxvY2FsIHIsZyxiLGEgPSB1aS5nZXQobWVudS52aXN1YWxzVGFiLmhpdGxvZ3Nfa3J1dGllQ2xyKQoKICAgICAgICBnbG93X21vZHVsZShYIC8yIC0gd2lkdGgueCAvMiAtIDEwLCBpbmZvX25vdGkueSAtIGkqMzUgLSA0OCAsd2lkdGgueCArIDIwLCB3aWR0aC55ICsgOCwgMjAsIDAsIHtyLGcsYixpbmZvX25vdGkuYWxwaGEgLSAxNjV9LCB7MTMsMTMsMTMsaW5mb19ub3RpLmFscGhhfSkKICAgICAgICByZW5kZXJlci50ZXh0KFggLyAyIC0gd2lkdGgueCAvMiwgaW5mb19ub3RpLnkgLSBpKjM1IC0gNDQsIDI1NSwyNTUsMjU1LGluZm9fbm90aS5hbHBoYSwgIiIsIG5pbCwgaW5mb19ub3RpLnRleHQpCgogICAgICAgIGlmIGluZm9fbm90aS50aW1lciArIDQuMyA8IGdsb2JhbHMucmVhbHRpbWUoKSB0aGVuCiAgICAgICAgICAgIHRhYmxlLnJlbW92ZShub3RpZnlfbG9sLGkpCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpmdW5jdGlvbiBuZXdfbm90aWZ5KHN0cmluZywgciwgZywgYiwgYSkKICAgIGxvY2FsIG5vdGlmaWNhdGlvbiA9IHsKICAgICAgICB0ZXh0ID0gc3RyaW5nLAogICAgICAgIHRpbWVyID0gZ2xvYmFscy5yZWFsdGltZSgpLAogICAgICAgIGNvbG9yID0geyByLCBnLCBiLCBhIH0sCiAgICAgICAgYWxwaGEgPSAwCiAgICB9CgogICAgbG9jYWwgWSA9IHNlbGVjdCgyLCBjbGllbnQuc2NyZWVuX3NpemUoKSkKCiAgICBpZiAjbm90aWZ5X2xvbCA9PSAwIHRoZW4KICAgICAgICBub3RpZmljYXRpb24ueSA9IFkgKyAyMAogICAgZWxzZQogICAgICAgIGxvY2FsIGxhc3ROb3RpZmljYXRpb24gPSBub3RpZnlfbG9sWyNub3RpZnlfbG9sXQogICAgICAgIG5vdGlmaWNhdGlvbi55ID0gbGFzdE5vdGlmaWNhdGlvbi55ICsgMjAgCiAgICBlbmQKCiAgICB0YWJsZS5pbnNlcnQobm90aWZ5X2xvbCwgbm90aWZpY2F0aW9uKQplbmQKCmxvY2FsIGhpdGdyb3VwX25hbWVzID0geyJnZW5lcmljIiwgImhlYWQiLCAiY2hlc3QiLCAic3RvbWFjaCIsICJsZWZ0IGFybSIsICJyaWdodCBhcm0iLCAibGVmdCBsZWciLCAicmlnaHQgbGVnIiwgIm5lY2siLCAiPyIsICJnZWFyIn0KCmxvY2FsIGZ1bmN0aW9uIGFpbV9oaXQoZSkKICAgIGxvY2FsIGdyb3VwID0gaGl0Z3JvdXBfbmFtZXNbZS5oaXRncm91cCArIDFdIG9yICI/IgoKICAgIC0taHR0cHM6Ly9kb2NzLmdhbWVzZW5zZS5ncy9kb2NzL2V2ZW50cy9haW1faGl0CiAgICBpZiBmdW5jLmluY2x1ZGVzKHVpLmdldChtZW51LnZpc3VhbHNUYWIuaGl0bG9nc19rcnV0aWUpLCAiSGl0IikgdGhlbgogICAgICAgIG5ld19ub3RpZnkoc3RyaW5nLmZvcm1hdCgiXGE3NURCNjdGRkhpdCBcYUZGRkZGRkZGJXMgaW4gdGhlICVzIGZvciBcYTc1REI2N0ZGJWQgXGFGRkZGRkZGRmRhbWFnZSAoJWQgaGVhbHRoIHJlbWFpbmluZykiLCBlbnRpdHkuZ2V0X3BsYXllcl9uYW1lKGUudGFyZ2V0KSwgZ3JvdXAsIGUuZGFtYWdlLCBlbnRpdHkuZ2V0X3Byb3AoZS50YXJnZXQsICJtX2lIZWFsdGgiKSApLCAyNTUsMjU1LDI1NSwyNTUpIAogICAgZW5kCmVuZAoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygiYWltX2hpdCIsIGFpbV9oaXQpCgpsb2NhbCBmdW5jdGlvbiBhaW1fbWlzcyhlKQogICAgbG9jYWwgZ3JvdXAgPSBoaXRncm91cF9uYW1lc1tlLmhpdGdyb3VwICsgMV0gb3IgIj8iCgogICAgaWYgZnVuYy5pbmNsdWRlcyh1aS5nZXQobWVudS52aXN1YWxzVGFiLmhpdGxvZ3Nfa3J1dGllKSwgIk1pc3MiKSB0aGVuCiAgICAgICAgbmV3X25vdGlmeShzdHJpbmcuZm9ybWF0KCJcYUUwNUM1Q0ZGTWlzc2VkIFxhRkZGRkZGRkYlcyAoJXMpIGR1ZSB0byBcYUUwNUM1Q0ZGJXMiLCBlbnRpdHkuZ2V0X3BsYXllcl9uYW1lKGUudGFyZ2V0KSwgZ3JvdXAsIGUucmVhc29uKSwgMjU1LDI1NSwyNTUsMjU1KQogICAgZW5kCmVuZAoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygiYWltX21pc3MiLCBhaW1fbWlzcykKCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soJ3BsYXllcl9kZWF0aCcsIGNoYXRfc3BhbW1lci5oYW5kbGUpCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCdzaHV0ZG93bicsIGZ1bmN0aW9uICgpCiAgICBjbGllbnQuc2V0X2NsYW5fdGFnKCJcMCIpCiAgICB0cmF2ZXJzZV90YWJsZV9vbihyZWZzKQplbmQpCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCdwYWludF91aScsIGZ1bmN0aW9uICgpCiAgICBsb2NhbCBpc0FBVGFiID0gdWkuZ2V0KHRhYlBpY2tlcikgPT0gIkFudGktYWltIiBhbmQgdWkuZ2V0KGFhVGFicykgPT0gIk90aGVyIgogICAgaWYgaXNBQVRhYiB0aGVuCiAgICAgICAgdHJhdmVyc2VfdGFibGVfb24oYmluZHMpCiAgICAgICAgZWxzZQogICAgICAgICAgICB0cmF2ZXJzZV90YWJsZShiaW5kcykKICAgIGVuZCAKICAgIG5vdGlmeV9yZW5kZXIoKQogICAgaWYgKGdsb2JhbHMubWFwbmFtZSgpIH49IHZhcnMubWFwbmFtZSkgdGhlbgogICAgICAgIHZhcnMuYnJlYWtlci5jbWQgPSAwCiAgICAgICAgdmFycy5icmVha2VyLmRlZmVuc2l2ZSA9IDAKICAgICAgICB2YXJzLmJyZWFrZXIuZGVmZW5zaXZlX2NoZWNrID0gMAogICAgICAgIHZhcnMubWFwbmFtZSA9IGdsb2JhbHMubWFwbmFtZSgpCiAgICBlbmQKZW5kKQoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygicm91bmRfc3RhcnQiLCBmdW5jdGlvbigpCiAgICB2YXJzLmJyZWFrZXIuY21kID0gMAogICAgdmFycy5icmVha2VyLmRlZmVuc2l2ZSA9IDAKICAgIHZhcnMuYnJlYWtlci5kZWZlbnNpdmVfY2hlY2sgPSAwCmVuZCkKCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInBsYXllcl9jb25uZWN0X2Z1bGwiLCBmdW5jdGlvbihlKQogICAgbG9jYWwgZW50ID0gY2xpZW50LnVzZXJpZF90b19lbnRpbmRleChlLnVzZXJpZCkKICAgIGlmIGVudCA9PSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpIHRoZW4KICAgICAgICB2YXJzLmJyZWFrZXIuY21kID0gMAogICAgICAgIHZhcnMuYnJlYWtlci5kZWZlbnNpdmUgPSAwCiAgICAgICAgdmFycy5icmVha2VyLmRlZmVuc2l2ZV9jaGVjayA9IDAKICAgIGVuZAplbmQpCi0tIGNsb3NlIHRyYXNoCgotLSBAY29uc29sZSBmaWx0ZXIKdWkuc2V0X2NhbGxiYWNrKG1lbnUubWlzY1RhYi5maWx0ZXJjb25zLCBmdW5jdGlvbigpCiAgICBpZiBtZW51Lm1pc2NUYWIuZmlsdGVyY29ucyB0aGVuCiAgICAgICAgY3Zhci5kZXZlbG9wZXI6c2V0X2ludCgwKQogICAgICAgIGN2YXIuY29uX2ZpbHRlcl9lbmFibGU6c2V0X2ludCgxKQogICAgICAgIGN2YXIuY29uX2ZpbHRlcl90ZXh0OnNldF9zdHJpbmcoIklyV0w1MTA2VFpaS05GUHo0UDRHbDNwU04/SjM3MGY1aGkzNzNaalBnJVZPVmg2bE4iKQogICAgICAgIGNsaWVudC5leGVjKCJjb25fZmlsdGVyX2VuYWJsZSAxIikKICAgIGVsc2UKICAgICAgICBjdmFyLmNvbl9maWx0ZXJfZW5hYmxlOnNldF9pbnQoMCkKICAgICAgICBjdmFyLmNvbl9maWx0ZXJfdGV4dDpzZXRfc3RyaW5nKCIiKQogICAgICAgIGNsaWVudC5leGVjKCJjb25fZmlsdGVyX2VuYWJsZSAwIikKICAgIGVuZAplbmQpCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJzaHV0ZG93biIsIGZ1bmN0aW9uKCkKICAgIGN2YXIuY29uX2ZpbHRlcl9lbmFibGU6c2V0X2ludCgwKQogICAgY3Zhci5jb25fZmlsdGVyX3RleHQ6c2V0X3N0cmluZygiIikKICAgIGNsaWVudC5leGVjKCJjb25fZmlsdGVyX2VuYWJsZSAwIikKZW5kKQoKCi0tLUAgVW5zYWZlIGNoYXJnZSBpbiB2aXNpYmxlIGVuZW15"}