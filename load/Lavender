{"status":200,"content":"bGliX2Vycm9yID0gZnVuY3Rpb24obGlicmFyeSkKICAgIGVycm9yKHN0cmluZy5mb3JtYXQoIkxhdmVuZGVyIC0gZmFpbGVkIHRvIHJldHJpZXZlICclcycgbGlicmFyeS4gSGVhZCBvdmVyIHRvIG91ciBkaXNjb3JkIGFuZCBzdWJzY3JpYmUgdG8gYWxsIHRoZSBsaWJyYXJpZXMgYW5kIHJlbG9hZCB5b3VyIGNoZWF0IiwgbGlicmFyeSkpCmVuZAoKLS0gTGlicmFyaWVzCmxvY2FsIF9BLCBjc2dvX3dlYXBvbnMgPSBwY2FsbChyZXF1aXJlLCAiZ2FtZXNlbnNlL2NzZ29fd2VhcG9ucyIpOyBpZiBub3QgX0EgdGhlbiBsaWJfZXJyb3IoImNzZ29fd2VhcG9ucyIpIGVuZApsb2NhbCBfQiwgZWFzZSAgICAgICAgID0gcGNhbGwocmVxdWlyZSwgImdhbWVzZW5zZS9lYXNpbmciKTsgaWYgbm90IF9CIHRoZW4gbGliX2Vycm9yKCJlYXNpbmciKSBlbmQKbG9jYWwgX0MsIGFudGlfYWltICAgICA9IHBjYWxsKHJlcXVpcmUsICJnYW1lc2Vuc2UvYW50aWFpbV9mdW5jcyIpOyBpZiBub3QgX0MgdGhlbiBsaWJfZXJyb3IoImFudGlhaW1fZnVuY3MiKSBlbmQKbG9jYWwgX0QsIHRyYWNlICAgICAgICA9IHBjYWxsKHJlcXVpcmUsICJnYW1lc2Vuc2UvdHJhY2UiKTsgaWYgbm90IF9EIHRoZW4gbGliX2Vycm9yKCJ0cmFjZSIpIGVuZApsb2NhbCBfRSwgY2xpcGJvYXJkICAgID0gcGNhbGwocmVxdWlyZSwgImdhbWVzZW5zZS9jbGlwYm9hcmQiKTsgaWYgbm90IF9FIHRoZW4gbGliX2Vycm9yKCJjbGlwYm9hcmQiKSBlbmQKbG9jYWwgX0YsIGh0dHAgICAgICAgICA9IHBjYWxsKHJlcXVpcmUsICJnYW1lc2Vuc2UvaHR0cCIpOyBpZiBub3QgX0YgdGhlbiBsaWJfZXJyb3IoImh0dHAiKSBlbmQKbG9jYWwgX0gsIGltYWdlcyAgICAgICA9IHBjYWxsKHJlcXVpcmUsICJnYW1lc2Vuc2UvaW1hZ2VzIik7IGlmIG5vdCBfSCB0aGVuIGxpYl9lcnJvcigiaW1hZ2VzIikgZW5kCmxvY2FsIF9JLCBiYXNlNjQgICAgICAgPSBwY2FsbChyZXF1aXJlLCAiZ2FtZXNlbnNlL2Jhc2U2NCIpOyBpZiBub3QgX0kgdGhlbiBsaWJfZXJyb3IoImJhc2U2NCIpIGVuZApsb2NhbCBfSiwgZGlzY29yZCAgICAgID0gcGNhbGwocmVxdWlyZSwgImdhbWVzZW5zZS9kaXNjb3JkX3dlYmhvb2tzIik7IGlmIG5vdCBfSiB0aGVuIGxpYl9lcnJvcigiZGlzY29yZF93ZWJob29rcyIpIGVuZApsb2NhbCBfSywgZW50ICAgICAgICAgID0gcGNhbGwocmVxdWlyZSwgImdhbWVzZW5zZS9lbnRpdHkiKTsgaWYgbm90IF9LIHRoZW4gbGliX2Vycm9yKCJlbnRpdHkiKSBlbmQKbG9jYWwgdmVjdG9yICAgICAgICAgICA9IHJlcXVpcmUgInZlY3RvciIKbG9jYWwgZmZpICAgICAgICAgICAgICA9IHJlcXVpcmUgImZmaSIKCi0tIExQSCBNYWNybwpMUEhfTk9fVklSVFVBTElaRSA9IGZ1bmN0aW9uKC4uLikgcmV0dXJuIC4uLiBlbmQKTFBIX0pJVCA9IGZ1bmN0aW9uKC4uLikgcmV0dXJuIC4uLiBlbmQKCi0tIHdyaXRlIGxvYWQgY291dG4gZmlsZQoKCmxvY2FsIHhfbWFpbiwgeV9tYWluID0gY2xpZW50LnNjcmVlbl9zaXplKCkKCmxvY2FsIHJhd19zID0gdmVjdG9yKHhfbWFpbiwgeV9tYWluKQoKLS0gT2JleApsb2NhbCBvYmV4X2RhdGEgPSBvYmV4X2ZldGNoIGFuZCBvYmV4X2ZldGNoKCkgb3Ige3VzZXJuYW1lID0gIk1vbnN0cnkiLCBidWlsZCA9ICJwcml2YXRlIiwgZGlzY29yZCA9ICJNb25zdHJ5In0KbG9jYWwgdXNlcm5hbWUgPSBvYmV4X2RhdGEudXNlcm5hbWU6bG93ZXIoKQpsb2NhbCBidWlsZCA9IG9iZXhfZGF0YS5idWlsZDpsb3dlcigpID09ICJkZWJ1ZyIgYW5kICJhbHBoYSIgb3Igb2JleF9kYXRhLmJ1aWxkOmxvd2VyKCkKbG9jYWwgdmVyc2lvbiA9ICIxLjE5IgoKbG9jYWwgY3JyX3QgPSBmZmkudHlwZW9mKCd2b2lkKihfX3RoaXNjYWxsKikodm9pZCopJykKbG9jYWwgY3JfdCA9IGZmaS50eXBlb2YoJ3ZvaWQqKF9fdGhpc2NhbGwqKSh2b2lkKiknKQpsb2NhbCBnbV90ID0gZmZpLnR5cGVvZignY29uc3Qgdm9pZCooX190aGlzY2FsbCopKHZvaWQqKScpCmxvY2FsIGdzYV90ID0gZmZpLnR5cGVvZignaW50KF9fZmFzdGNhbGwqKSh2b2lkKiwgdm9pZCosIGludCknKQpmZmkuY2RlZltbCiAgICBzdHJ1Y3QgYW5pbWF0aW9uX2xheWVyX3QgewogICAgICAgIGNoYXIgcGFkMjBbMjRdOwogICAgICAgIHVpbnQzMl90IG1fblNlcXVlbmNlOwogICAgICAgIGZsb2F0IG1fZmxQcmV2Q3ljbGU7CiAgICAgICAgZmxvYXQgbV9mbFdlaWdodDsKICAgICAgICBjaGFyIHBhZDIwWzRdOwogICAgICAgIGZsb2F0IG1fZmxQbGF5YmFja1JhdGU7CiAgICAgICAgZmxvYXQgbV9mbEN5Y2xlOwogICAgICAgIHZvaWQgKm1fcE93bmVyOwogICAgICAgIGNoYXIgcGFkXzAwMzhbIDQgXTsKICAgIH07CiAgICBzdHJ1Y3QgY19hbmltc3RhdGUgeyAKICAgICAgICBjaGFyIHBhZFsgMyBdOwogICAgICAgIGNoYXIgbV9iRm9yY2VXZWFwb25VcGRhdGU7IC8vMHg0CiAgICAgICAgY2hhciBwYWQxWyA5MSBdOwogICAgICAgIHZvaWQqIG1fcEJhc2VFbnRpdHk7IC8vMHg2MAogICAgICAgIHZvaWQqIG1fcEFjdGl2ZVdlYXBvbjsgLy8weDY0CiAgICAgICAgdm9pZCogbV9wTGFzdEFjdGl2ZVdlYXBvbjsgLy8weDY4CiAgICAgICAgZmxvYXQgbV9mbExhc3RDbGllbnRTaWRlQW5pbWF0aW9uVXBkYXRlVGltZTsgLy8weDZDCiAgICAgICAgaW50IG1faUxhc3RDbGllbnRTaWRlQW5pbWF0aW9uVXBkYXRlRnJhbWVjb3VudDsgLy8weDcwCiAgICAgICAgZmxvYXQgbV9mbEFuaW1VcGRhdGVEZWx0YTsgLy8weDc0CiAgICAgICAgZmxvYXQgbV9mbEV5ZVlhdzsgLy8weDc4CiAgICAgICAgZmxvYXQgbV9mbFBpdGNoOyAvLzB4N0MKICAgICAgICBmbG9hdCBtX2ZsR29hbEZlZXRZYXc7IC8vMHg4MAogICAgICAgIGZsb2F0IG1fZmxDdXJyZW50RmVldFlhdzsgLy8weDg0CiAgICAgICAgZmxvYXQgbV9mbEN1cnJlbnRUb3Jzb1lhdzsgLy8weDg4CiAgICAgICAgZmxvYXQgbV9mbFVua25vd25WZWxvY2l0eUxlYW47IC8vMHg4QwogICAgICAgIGZsb2F0IG1fZmxMZWFuQW1vdW50OyAvLzB4OTAKICAgICAgICBjaGFyIHBhZDJbIDQgXTsKICAgICAgICBmbG9hdCBtX2ZsRmVldEN5Y2xlOyAvLzB4OTgKICAgICAgICBmbG9hdCBtX2ZsRmVldFlhd1JhdGU7IC8vMHg5QwogICAgICAgIGNoYXIgcGFkM1sgNCBdOwogICAgICAgIGZsb2F0IG1fZkR1Y2tBbW91bnQ7IC8vMHhBNAogICAgICAgIGZsb2F0IG1fZkxhbmRpbmdEdWNrQWRkaXRpdmVTb21ldGhpbmc7IC8vMHhBOAogICAgICAgIGNoYXIgcGFkNFsgNCBdOwogICAgICAgIGZsb2F0IG1fdk9yaWdpblg7IC8vMHhCMAogICAgICAgIGZsb2F0IG1fdk9yaWdpblk7IC8vMHhCNAogICAgICAgIGZsb2F0IG1fdk9yaWdpblo7IC8vMHhCOAogICAgICAgIGZsb2F0IG1fdkxhc3RPcmlnaW5YOyAvLzB4QkMKICAgICAgICBmbG9hdCBtX3ZMYXN0T3JpZ2luWTsgLy8weEMwCiAgICAgICAgZmxvYXQgbV92TGFzdE9yaWdpblo7IC8vMHhDNAogICAgICAgIGZsb2F0IG1fdlZlbG9jaXR5WDsgLy8weEM4CiAgICAgICAgZmxvYXQgbV92VmVsb2NpdHlZOyAvLzB4Q0MKICAgICAgICBjaGFyIHBhZDVbIDQgXTsKICAgICAgICBmbG9hdCBtX2ZsVW5rbm93bkZsb2F0MTsgLy8weEQ0CiAgICAgICAgY2hhciBwYWQ2WyA4IF07CiAgICAgICAgZmxvYXQgbV9mbFVua25vd25GbG9hdDI7IC8vMHhFMAogICAgICAgIGZsb2F0IG1fZmxVbmtub3duRmxvYXQzOyAvLzB4RTQKICAgICAgICBmbG9hdCBtX2ZsVW5rbm93bjsgLy8weEU4CiAgICAgICAgZmxvYXQgbV9mbFNwZWVkMkQ7IC8vMHhFQwogICAgICAgIGZsb2F0IG1fZmxVcFZlbG9jaXR5OyAvLzB4RjAKICAgICAgICBmbG9hdCBtX2ZsU3BlZWROb3JtYWxpemVkOyAvLzB4RjQKICAgICAgICBmbG9hdCBtX2ZsRmVldFNwZWVkRm9yd2FyZHNPclNpZGVXYXlzOyAvLzB4RjgKICAgICAgICBmbG9hdCBtX2ZsRmVldFNwZWVkVW5rbm93bkZvcndhcmRPclNpZGV3YXlzOyAvLzB4RkMKICAgICAgICBmbG9hdCBtX2ZsVGltZVNpbmNlU3RhcnRlZE1vdmluZzsgLy8weDEwMAogICAgICAgIGZsb2F0IG1fZmxUaW1lU2luY2VTdG9wcGVkTW92aW5nOyAvLzB4MTA0CiAgICAgICAgYm9vbCBtX2JPbkdyb3VuZDsgLy8weDEwOAogICAgICAgIGJvb2wgbV9iSW5IaXRHcm91bmRBbmltYXRpb247IC8vMHgxMDkKICAgICAgICBmbG9hdCBtX2ZsVGltZVNpbmNlSW5BaXI7IC8vMHgxMEEKICAgICAgICBmbG9hdCBtX2ZsTGFzdE9yaWdpblo7IC8vMHgxMEUKICAgICAgICBmbG9hdCBtX2ZsSGVhZEhlaWdodE9yT2Zmc2V0RnJvbUhpdHRpbmdHcm91bmRBbmltYXRpb247IC8vMHgxMTIKICAgICAgICBmbG9hdCBtX2ZsU3RvcFRvRnVsbFJ1bm5pbmdGcmFjdGlvbjsgLy8weDExNgogICAgICAgIGNoYXIgcGFkN1sgNCBdOyAvLzB4MTFBCiAgICAgICAgZmxvYXQgbV9mbE1hZ2ljRnJhY3Rpb247IC8vMHgxMUUKICAgICAgICBjaGFyIHBhZDhbIDYwIF07IC8vMHgxMjIKICAgICAgICBmbG9hdCBtX2ZsV29ybGRGb3JjZTsgLy8weDE1RQogICAgICAgIGNoYXIgcGFkOVsgNDYyIF07IC8vMHgxNjIKICAgICAgICBmbG9hdCBtX2ZsTWF4WWF3OyAvLzB4MzM0CiAgICB9OwpdXQoKbG9jYWwgY2xhc3NwdHIgPSBmZmkudHlwZW9mKCd2b2lkKioqJykKbG9jYWwgcmF3aWVudGl0eWxpc3QgPSBjbGllbnQuY3JlYXRlX2ludGVyZmFjZSgnY2xpZW50LmRsbCcsICdWQ2xpZW50RW50aXR5TGlzdDAwMycpIG9yIGVycm9yKCdWQ2xpZW50RW50aXR5TGlzdDAwMyB3YXNudCBmb3VuZCcsIDIpCgpsb2NhbCBpZW50aXR5bGlzdCA9IGZmaS5jYXN0KGNsYXNzcHRyLCByYXdpZW50aXR5bGlzdCkgb3IgZXJyb3IoJ3Jhd2llbnRpdHlsaXN0IGlzIG5pbCcsIDIpCmxvY2FsIGdldF9jbGllbnRfbmV0d29ya2FibGUgPSBmZmkuY2FzdCgndm9pZCooX190aGlzY2FsbCopKHZvaWQqLCBpbnQpJywgaWVudGl0eWxpc3RbMF1bMF0pIG9yIGVycm9yKCdnZXRfY2xpZW50X25ldHdvcmthYmxlX3QgaXMgbmlsJywgMikKbG9jYWwgZ2V0X2NsaWVudF9lbnRpdHkgPSBmZmkuY2FzdCgndm9pZCooX190aGlzY2FsbCopKHZvaWQqLCBpbnQpJywgaWVudGl0eWxpc3RbMF1bM10pIG9yIGVycm9yKCdnZXRfY2xpZW50X2VudGl0eSBpcyBuaWwnLCAyKQoKbG9jYWwgcmF3aXZtb2RlbGluZm8gPSBjbGllbnQuY3JlYXRlX2ludGVyZmFjZSgnZW5naW5lLmRsbCcsICdWTW9kZWxJbmZvQ2xpZW50MDA0JykKbG9jYWwgaXZtb2RlbGluZm8gPSBmZmkuY2FzdChjbGFzc3B0ciwgcmF3aXZtb2RlbGluZm8pIG9yIGVycm9yKCdyYXdpdm1vZGVsaW5mbyBpcyBuaWwnLCAyKQpsb2NhbCBnZXRfc3R1ZGlvX21vZGVsID0gZmZpLmNhc3QoJ3ZvaWQqKF9fdGhpc2NhbGwqKSh2b2lkKiwgY29uc3Qgdm9pZCopJywgaXZtb2RlbGluZm9bMF1bMzJdKQoKbG9jYWwgc2VxX2FjdGl2aXR5X3NpZyA9IGNsaWVudC5maW5kX3NpZ25hdHVyZSgnY2xpZW50LmRsbCcsJ1x4NTVceDhCXHhFQ1x4NTNceDhCXHg1RFx4MDhceDU2XHg4Qlx4RjFceDgzJykKCmxvY2FsIGZ1bmN0aW9uIGdldF9tb2RlbChiKWlmIGIgdGhlbiBiPWZmaS5jYXN0KGNsYXNzcHRyLGIpbG9jYWwgYz1mZmkuY2FzdChjcnJfdCxiWzBdWzBdKWxvY2FsIGQ9YyhiKW9yIGVycm9yKCdlcnJvciBnZXR0aW5nIGNsaWVudCB1bmtub3duJywyKWlmIGQgdGhlbiBkPWZmaS5jYXN0KGNsYXNzcHRyLGQpbG9jYWwgZT1mZmkuY2FzdChjcl90LGRbMF1bNV0pKGQpb3IgZXJyb3IoJ2Vycm9yIGdldHRpbmcgY2xpZW50IHJlbmRlcmFibGUnLDIpaWYgZSB0aGVuIGU9ZmZpLmNhc3QoY2xhc3NwdHIsZSlyZXR1cm4gZmZpLmNhc3QoZ21fdCxlWzBdWzhdKShlKW9yIGVycm9yKCdlcnJvciBnZXR0aW5nIG1vZGVsX3QnLDIpZW5kIGVuZCBlbmQgZW5kCmxvY2FsIGZ1bmN0aW9uIGdldF9zZXF1ZW5jZV9hY3Rpdml0eShiLGMsZCliPWZmaS5jYXN0KGNsYXNzcHRyLGIpbG9jYWwgZT1nZXRfc3R1ZGlvX21vZGVsKGl2bW9kZWxpbmZvLGdldF9tb2RlbChjKSlpZiBlPT1uaWwgdGhlbiByZXR1cm4tMSBlbmQ7bG9jYWwgZj1mZmkuY2FzdChnc2FfdCwgc2VxX2FjdGl2aXR5X3NpZylyZXR1cm4gZihiLGUsZCllbmQKbG9jYWwgZnVuY3Rpb24gZ2V0X2FuaW1fbGF5ZXIoYixjKWM9YyBvciAxO2I9ZmZpLmNhc3QoY2xhc3NwdHIsYilyZXR1cm4gZmZpLmNhc3QoJ3N0cnVjdCBhbmltYXRpb25fbGF5ZXJfdCoqJyxmZmkuY2FzdCgnY2hhcionLGIpKzB4Mjk5MClbMF1bY11lbmQKCgotLSBNYWluCmxvY2FsIGxhdmVuZGVyID0ge30KCmxhdmVuZGVyLnByZXNldHMgPSB7IH0KCmxhdmVuZGVyLmRhdGFiYXNlID0gewogICAgY29uZmlncyA9ICI6bGF2ZW5kZXI6OmNvbmZpZ3M6IiwKICAgIGxvY2F0aW9ucyA9ICI6bGF2ZW5kZXI6OmxvY2F0aW9uczoiLAogICAgbGFzdF9jb25maWcgPSAiOmxhdmVuZGVyOjpsYXN0X2NvbmZpZzoiCn0KCmxhdmVuZGVyLnVpID0gewogICAgYWEgPSB7ICAgICAgICAKICAgICAgICBzdGF0ZSA9IHt9LAogICAgICAgIHN0YXRlcyA9IHt9LAogICAgfSwKICAgIGNvbmZpZyA9IHt9LAogICAgcmFnZSA9IHt9LAogICAgbWlzYyA9IHt9LAogICAgdmlzdWFscyA9IHt9LAogICAgYWxwaGEgPSB7fSwKICAgIHByaXZhdGUgPSB7fSwKICAgIGN1cnJlbnRfdGFiID17fSwKICAgIHRhYiA9IHt9LAogICAgdGFicyA9IHsiSE9NRSIsICJBTlRJLUFJTSIsICJWSVNVQUxTIiwgIk1JU0MiLCAiQ09ORklHUyIsICJBTFBIQSIsICJQUklWQVRFIn0KfQoKbGF2ZW5kZXIucmVmcyA9IHsKICAgIGFhID0ge30sCiAgICBmbCA9IHt9LAogICAgcmFnZSAgPSB7fSwKICAgIG1pc2MgPSB7fSwKICAgIHZpc3VhbHMgPSB7fSwKICAgIHNldHRpbmdzID0ge30sCiAgICBjb25maWdzID0ge30sCiAgICBsdWEgPSB7fQp9CgpsYXZlbmRlci5hbnRpYWltID0gewogICAgc3RhdGVzID0geyJnbG9iYWwiLCAic3RhbmRpbmciLCAibW92aW5nIiwgImR1Y2tpbmciLCAiYWlyIiwgImFpciBkdWNrIiwgInNsb3d3YWxrIiwgInVzZSJ9LAogICAgc3RhdGUgPSAiZ2xvYmFsIgp9CgpsYXZlbmRlci5sb2NhdGlvbnMgPSBkYXRhYmFzZS5yZWFkKGxhdmVuZGVyLmRhdGFiYXNlLmxvY2F0aW9ucykgb3Ige30KCmxhdmVuZGVyLmxvY2F0aW9ucy5rZXliaW5kcyA9IGxhdmVuZGVyLmxvY2F0aW9ucy5rZXliaW5kcyBvciB2ZWN0b3IoMzAwLCA0MDApCmxhdmVuZGVyLnZpc3VhbHMgPSB7CiAgICBrZXliaW5kcyA9IHsKICAgICAgICBiaW5kX2xpc3QgID0geyAiRG91YmxlIHRhcCIsICJPbiBzaG90IGFudGktYWltIiwgIk1pbmltdW0gZGFtYWdlIiwgIlF1aWNrIHBlZWsgYXNzaXN0IiwgIkZvcmNlIGJvZHkgYWltIiwgIkZvcmNlIHNhZmUgcG9pbnQiLCAiRmFrZSBkdWNrIiwgIkZyZWVzdGFuZGluZyIsICJQaW5nIHNwaWtlIiB9LAogICAgICAgIHJlZl9saXN0ID0geyB7dWkucmVmZXJlbmNlKCJSQUdFIiwgIkFpbWJvdCIsICJEb3VibGUgdGFwIil9LCB7dWkucmVmZXJlbmNlKCJBQSIsICJPdGhlciIsICJPbiBzaG90IGFudGktYWltIil9LCB7c2VsZWN0KDEsIHVpLnJlZmVyZW5jZSgiUkFHRSIsICJBaW1ib3QiLCAiTWluaW11bSBkYW1hZ2Ugb3ZlcnJpZGUiKSl9LCB7dWkucmVmZXJlbmNlKCJSQUdFIiwgIk90aGVyIiwgIlF1aWNrIHBlZWsgYXNzaXN0Iil9LCB1aS5yZWZlcmVuY2UoIlJBR0UiLCAiQWltYm90IiwgIkZvcmNlIGJvZHkgYWltIiksIHVpLnJlZmVyZW5jZSgiUkFHRSIsICJBaW1ib3QiLCAiZm9yY2Ugc2FmZSBwb2ludCIpLCB1aS5yZWZlcmVuY2UoIlJBR0UiLCAiT3RoZXIiLCAiZHVjayBwZWVrIGFzc2lzdCIpLCB7dWkucmVmZXJlbmNlKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAiRnJlZXN0YW5kaW5nIil9LCB7dWkucmVmZXJlbmNlKCJNSVNDIiwgIk1pc2NlbGxhbmVvdXMiLCAiUGluZyBzcGlrZSIpfSB9LAogICAgICAgIHBvcyAgPSBsYXZlbmRlci5sb2NhdGlvbnMua2V5YmluZHMsCiAgICAgICAgZHJhZ2dpbmcgPSBmYWxzZSwKICAgICAgICBpbl9kcmFnID0gZmFsc2UsCiAgICAgICAgaG92ZXJpbmcgPSBmYWxzZSwKICAgICAgICBiaW5kX21vZGUgID0geyAiYWx3YXlzIG9uIiwgImhvbGRpbmciLCAidG9nZ2xlZCIsICJvZmYgaG90a2V5IiB9LAogICAgICAgIHdpZHRoID0gMCwKICAgICAgICBoZWlnaHQgPSAyMywKICAgICAgICBvcGFjaXR5ID0gMCwKICAgICAgICBvcGFjaXR5X21vZGUgPSAwLAogICAgICAgIHBhZGRpbmcgPSAyMCwKICAgICAgICBiaW5kcyA9IHt9LAogICAgICAgIHRpdGxlID0gImtleWJpbmRzIgogICAgfSwKICAgIHdhdGVybWFyayA9IHsKICAgICAgICBwYWRkaW5nID0gdmVjdG9yKDQwLCAyNSksCiAgICAgICAgb3BhY2l0eSA9IDAKICAgIH0sCiAgICBwYW5lbCA9IHsKICAgICAgICBwYWRkaW5nID0gdmVjdG9yKDIzLCAwKSwKICAgICAgICBvcGFjaXR5ID0gMAogICAgfSwKICAgIHZlbG9jaXR5ID0gewogICAgICAgIHBhZGRpbmcgPSB2ZWN0b3IoMCwgMCksCiAgICAgICAgb3BhY2l0eSA9IDAKICAgIH0KfQoKCgpsYXZlbmRlci5wb3MgPSB7CiAgICB3YXRlcm1hcmsgPSB2ZWN0b3IoY2xpZW50LnNjcmVlbl9zaXplKCkgLyAyLCBzZWxlY3QoMiwgY2xpZW50LnNjcmVlbl9zaXplKCkgLyAyKSkgKiAyLAogICAgcGFuZWwgPSB2ZWN0b3IoY2xpZW50LnNjcmVlbl9zaXplKCkgLyBjbGllbnQuc2NyZWVuX3NpemUoKSwgc2VsZWN0KDIsIGNsaWVudC5zY3JlZW5fc2l6ZSgpKSAvIDIpLAogICAgdmVsb2NpdHkgPSB2ZWN0b3IoeF9tYWluIC8gMiwgeV9tYWluIC8gNCksCiAgICBtaW5fZG1nID0gdmVjdG9yKHhfbWFpbiAvIDIsIHlfbWFpbiAvIDIpLAogICAgbW9kZXJuID0gdmVjdG9yKHhfbWFpbiAvIDIsIHlfbWFpbiAvIDIpLAogICAgcmVzb2x2ZXIgPSB2ZWN0b3IoeF9tYWluIC8geF9tYWluLCB5X21haW4gLyAyKSwKICAgIHByZXZpZXdfbGluZV92ZWwgPSB2ZWN0b3IoeF9tYWluIC8gMiwgeV9tYWluIC8geV9tYWluICkKfQoKbGF2ZW5kZXIuaGFuZGxlcnMgPSB7CiAgICB1aSA9IHsKICAgICAgICBlbGVtZW50cyA9IHt9LAogICAgICAgIGNvbmZpZyAgPSB7fQogICAgfSwKICAgIGFhID0gewogICAgICAgIHN0YXRlID0ge30KICAgIH0sCiAgICByYWdlID0ge30sCiAgICB2aXN1YWxzID0ge30sCiAgICBtaXNjID0ge30KfQoKbG9jYWwgeCwgeSA9IGNsaWVudC5zY3JlZW5fc2l6ZSgpCgpsb2NhbCBjZW50ZXIgPSB2ZWN0b3IoeC8yLHkvMikKCmxvY2FsIHdhcm5pbmcgPSBpbWFnZXMuZ2V0X3Bhbm9yYW1hX2ltYWdlKCJpY29ucy91aS93YXJuaW5nLnN2ZyIpCgotLSBTa2VldCBSZWZlcmVuY2VzCgotLSBSZWZlcmVuY2VzCgpsYXZlbmRlci5yZWZzLmFhLm1hc3RlciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB1aS5yZWZlcmVuY2UoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICJFbmFibGVkIikKbGF2ZW5kZXIucmVmcy5hYS55YXdfYmFzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gdWkucmVmZXJlbmNlKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAiWWF3IGJhc2UiKQpsYXZlbmRlci5yZWZzLmFhLnBpdGNoLCBsYXZlbmRlci5yZWZzLmFhLnBpdGNoX2N1c3RvbSAgICAgICAgICAgICAgPSB1aS5yZWZlcmVuY2UoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICJQaXRjaCIpCmxhdmVuZGVyLnJlZnMuYWEueWF3LCBsYXZlbmRlci5yZWZzLmFhLnlhd19vZmZzZXQgICAgICAgICAgICAgICAgICA9IHVpLnJlZmVyZW5jZSgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIllhdyIpCmxhdmVuZGVyLnJlZnMuYWEueWF3X2ppdHRlciwgbGF2ZW5kZXIucmVmcy5hYS55YXdfaml0dGVyX29mZnNldCAgICA9IHVpLnJlZmVyZW5jZSgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIllhdyBqaXR0ZXIiKQpsYXZlbmRlci5yZWZzLmFhLmJvZHlfeWF3LCBsYXZlbmRlci5yZWZzLmFhLmJvZHlfeWF3X29mZnNldCAgICAgICAgPSB1aS5yZWZlcmVuY2UoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICJCb2R5IHlhdyIpCmxhdmVuZGVyLnJlZnMuYWEuZnJlZXN0YW5kaW5nX2JvZHlfeWF3ICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IHVpLnJlZmVyZW5jZSgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIkZyZWVzdGFuZGluZyBib2R5IHlhdyIpCmxhdmVuZGVyLnJlZnMuYWEuZWRnZV95YXcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IHVpLnJlZmVyZW5jZSgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIkVkZ2UgeWF3IikKbGF2ZW5kZXIucmVmcy5hYS5mcmVlc3RhbmRpbmcsIGxhdmVuZGVyLnJlZnMuYWEuZnJlZXN0YW5kaW5nX2tleSAgID0gdWkucmVmZXJlbmNlKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAiRnJlZXN0YW5kaW5nIikKbGF2ZW5kZXIucmVmcy5hYS5yb2xsX29mZnNldCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gdWkucmVmZXJlbmNlKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAiUm9sbCIpCmxhdmVuZGVyLnJlZnMuZmwuZW5hYmxlLCBsYXZlbmRlci5yZWZzLmFhLmVuYWJsZV9rZXkgICAgICAgICAgICAgICA9IHVpLnJlZmVyZW5jZSgiQUEiLCAiRmFrZSBsYWciLCAiRW5hYmxlZCIpCmxhdmVuZGVyLnJlZnMuZmwubGltaXQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IHVpLnJlZmVyZW5jZSgiQUEiLCAiRmFrZSBsYWciLCAiTGltaXQiKQpsYXZlbmRlci5yZWZzLmZsLnR5cGUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB1aS5yZWZlcmVuY2UoIkFBIiwgIkZha2UgbGFnIiwgIkFtb3VudCIpCmxhdmVuZGVyLnJlZnMuZmwudmFyaWFuY2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IHVpLnJlZmVyZW5jZSgiQUEiLCAiRmFrZSBsYWciLCAiVmFyaWFuY2UiKQoKbGF2ZW5kZXIucmVmcy5yYWdlLmRvdWJsZV90YXAsIGxhdmVuZGVyLnJlZnMucmFnZS5kb3VibGVfdGFwX2tleSAgID0gdWkucmVmZXJlbmNlKCJSQUdFIiwgIkFpbWJvdCIsICJEb3VibGUgdGFwIikKbGF2ZW5kZXIucmVmcy5yYWdlLm1pbmltdW1fZGFtYWdlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gdWkucmVmZXJlbmNlKCJSQUdFIiwgIkFpbWJvdCIsICJNaW5pbXVtIGRhbWFnZSIpCmxhdmVuZGVyLnJlZnMucmFnZS5taW5pbXVtX2RhbWFnZV9vdmVycmlkZSwgbGF2ZW5kZXIucmVmcy5yYWdlLm1kX2tleSwgbGF2ZW5kZXIucmVmcy5yYWdlLm1kX3NsaWRlciA9IHVpLnJlZmVyZW5jZSgiUkFHRSIsICJBaW1ib3QiLCAiTWluaW11bSBkYW1hZ2Ugb3ZlcnJpZGUiKQpsYXZlbmRlci5yZWZzLnJhZ2UuZm9yY2VfYm9keWFpbSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB1aS5yZWZlcmVuY2UoIlJBR0UiLCAiQWltYm90IiwgIkZvcmNlIGJvZHkgYWltIikKbGF2ZW5kZXIucmVmcy5yYWdlLnByZWZlcl9ib2R5YWltICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gdWkucmVmZXJlbmNlKCJSQUdFIiwgIkFpbWJvdCIsICJQcmVmZXIgYm9keSBhaW0iKQpsYXZlbmRlci5yZWZzLnJhZ2UucHJlZmVyX3NhZmVwb2ludCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB1aS5yZWZlcmVuY2UoIlJBR0UiLCAiQWltYm90IiwgIlByZWZlciBzYWZlIHBvaW50IikKbGF2ZW5kZXIucmVmcy5yYWdlLmZvcmNlX3NhZmVwb2ludCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gdWkucmVmZXJlbmNlKCJSQUdFIiwgIkFpbWJvdCIsICJGb3JjZSBzYWZlIHBvaW50IikKbGF2ZW5kZXIucmVmcy5yYWdlLnF1aWNrX3BlZWssIGxhdmVuZGVyLnJlZnMucmFnZS5xdWlja19wZWVrX2tleSAgID0gdWkucmVmZXJlbmNlKCJSQUdFIiwgIk90aGVyIiwgIlF1aWNrIHBlZWsgYXNzaXN0IikKCmxhdmVuZGVyLnJlZnMubWlzYy5mYWtlX3BlZWssIGxhdmVuZGVyLnJlZnMubWlzYy5mYWtlX3BlZWtfa2V5ICAgICA9IHVpLnJlZmVyZW5jZSgiQUEiLCAiT3RoZXIiLCAiRmFrZSBwZWVrIikKbGF2ZW5kZXIucmVmcy5taXNjLmhpZGVfc2hvdHMsIGxhdmVuZGVyLnJlZnMubWlzYy5oaWRlX3Nob3RzX2tleSAgID0gdWkucmVmZXJlbmNlKCJBQSIsICJPdGhlciIsICJPbiBzaG90IGFudGktYWltIikKbGF2ZW5kZXIucmVmcy5taXNjLmZha2VkdWNraW5nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gdWkucmVmZXJlbmNlKCJSQUdFIiwgIk90aGVyIiwgIkR1Y2sgcGVlayBhc3Npc3QiKQpsYXZlbmRlci5yZWZzLm1pc2MubGVncyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB1aS5yZWZlcmVuY2UoIkFBIiwgIk90aGVyIiwgIkxlZyBtb3ZlbWVudCIpCmxhdmVuZGVyLnJlZnMubWlzYy5zbG93X21vdGlvbiwgbGF2ZW5kZXIucmVmcy5taXNjLnNsb3dfbW90aW9uX2tleSA9IHVpLnJlZmVyZW5jZSgiQUEiLCAiT3RoZXIiLCAiU2xvdyBtb3Rpb24iKQpsYXZlbmRlci5yZWZzLm1pc2MubWVudV9jb2xvciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSB1aS5yZWZlcmVuY2UoIk1pc2MiLCAiU2V0dGluZ3MiLCAiTWVudSBjb2xvciIpCmxhdmVuZGVyLnJlZnMubWlzYy50aGlyZHBlcnNvbiwgbGF2ZW5kZXIucmVmcy5taXNjLnRoaXJkcGVyc29uX2tleSA9IHVpLnJlZmVyZW5jZSgiVmlzdWFscyIsICJFZmZlY3RzIiwgIkZvcmNlIHRoaXJkIHBlcnNvbiAoYWxpdmUpIikKbGF2ZW5kZXIucmVmcy5taXNjLmNsYW50YWcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gdWkucmVmZXJlbmNlKCJNSVNDIiwgIk1pc2NlbGxhbmVvdXMiLCAiQ2xhbiB0YWcgc3BhbW1lciIpCmxhdmVuZGVyLnJlZnMucGluZ19zcGlrZSwgbGF2ZW5kZXIucmVmcy5waW5nX3NwaWtlX2tleSAgICAgICAgICAgICA9IHVpLnJlZmVyZW5jZSgiTUlTQyIsICJNaXNjZWxsYW5lb3VzIiwgIlBpbmcgc3Bpa2UiKQoKLS0gT09QIEZ1bmN0aW9ucwoKbG9jYWwgZnVuY3Rpb24gbm9ybWFsaXNlX2FuZ2xlKGFuZ2xlKQoJYW5nbGUgPSAgYW5nbGUgJSAzNjAgCglhbmdsZSA9IChhbmdsZSArIDM2MCkgJSAzNjAKCWlmIChhbmdsZSA+IDE4MCkgIHRoZW4KCQlhbmdsZSA9IGFuZ2xlIC0gMzYwCgllbmQKCXJldHVybiBhbmdsZQplbmQKCmxvY2FsIG4gPSAwCmxvY2FsIGFuaW1hdGlvbl90aW1lID0gMApsYXZlbmRlci5mdW5jcyA9IHsKCiAgICBjaGVja19idWlsZCA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKGJ1aWxkX2NoZWNrKQogICAgICAgIGxvY2FsIHJldHVybl9jaGVjayA9IGJ1aWxkID09IGJ1aWxkX2NoZWNrIG9yIG5vdCBvYmV4X2ZldGNoCiAgICAgICAgaWYgcmV0dXJuX2NoZWNrID09IG5pbCB0aGVuCiAgICAgICAgICAgIHJldHVybl9jaGVjayA9IGZhbHNlCiAgICAgICAgZWxzZQogICAgICAgICAgICByZXR1cm5fY2hlY2sgPSBidWlsZCA9PSBidWlsZF9jaGVjayBvciBub3Qgb2JleF9mZXRjaAogICAgICAgIGVuZAoKICAgICAgICByZXR1cm4gcmV0dXJuX2NoZWNrCiAgICBlbmQpLAoKICAgIGFhID0gewogICAgICAgIGNvbnZlcnRfcGl0Y2ggPSBMUEhfTk9fVklSVFVBTElaRShmdW5jdGlvbihzdHIpCiAgICAgICAgICAgIGlmIHN0ciA9PSAidXAiIHRoZW4KICAgICAgICAgICAgICAgIHJldHVybiAtODkKICAgICAgICAgICAgZWxzZWlmIHN0ciA9PSAiZG93biIgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuIDg5CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHJldHVybiAwCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZCksCiAgICAgICAgcmVzZXQgPSBMUEhfTk9fVklSVFVBTElaRShmdW5jdGlvbih2YWx1ZSkKICAgICAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEubWFzdGVyLCB2YWx1ZSkKICAgICAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEueWF3X2Jhc2UsICJMb2NhbCB2aWV3IikKICAgICAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEucGl0Y2gsICJPZmYiKQogICAgICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS55YXcsICJPZmYiKQogICAgICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS55YXdfb2Zmc2V0LCAwKQogICAgICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS55YXdfaml0dGVyLCAiT2ZmIikKICAgICAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEueWF3X2ppdHRlcl9vZmZzZXQsIDApCiAgICAgICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLmJvZHlfeWF3LCAiT2ZmIikKICAgICAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEuYm9keV95YXdfb2Zmc2V0LCAwKQogICAgICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS5mcmVlc3RhbmRpbmdfYm9keV95YXcsIGZhbHNlKQogICAgICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS5mcmVlc3RhbmRpbmcsIGZhbHNlKQogICAgICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS5lZGdlX3lhdywgZmFsc2UpCiAgICAgICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLnJvbGxfb2Zmc2V0LCAwKQogICAgICAgIGVuZCksCiAgICAgICAgYm9keV95YXdfaW52ZXJ0ID0gTFBIX05PX1ZJUlRVQUxJWkUoZnVuY3Rpb24oKQogICAgICAgICAgICByZXR1cm4gbWF0aC5mbG9vcihtYXRoLm1pbig2MCwgKGVudGl0eS5nZXRfcHJvcChlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpLCAibV9mbFBvc2VQYXJhbWV0ZXIiLCAxMSkgKiAxMjAgLSA2MCkpKSA+IDAKICAgICAgICBlbmQpLAogICAgICAgIG5vcm1hbGl6ZV95YXcgPSBMUEhfTk9fVklSVFVBTElaRShmdW5jdGlvbihhbmdsZSkKCQkJYW5nbGUgPSAgYW5nbGUgJSAzNjAgCgkJCWFuZ2xlID0gKGFuZ2xlICsgMzYwKSAlIDM2MAoJCQlpZiAoYW5nbGUgPiAxODApICB0aGVuCgkJCQlhbmdsZSA9IGFuZ2xlIC0gMzYwCgkJCWVuZAoJCQlyZXR1cm4gYW5nbGUKCQllbmQpLAogICAgICAgIGV4dGVuZF92ZWN0b3IgPSBMUEhfTk9fVklSVFVBTElaRShmdW5jdGlvbihwb3N4LCBwb3N5LCBwb3N6LCBsZW5ndGgsIGFuZ2xlKQogICAgICAgICAgICBsb2NhbCByYWQgPSBtYXRoLnJhZChhbmdsZSkKICAgICAgICAgICAgcmV0dXJuIHBvc3ggKyBtYXRoLmNvcyhyYWQpICogbGVuZ3RoLCBwb3N5ICsgbWF0aC5zaW4ocmFkKSogbGVuZ3RoLCBwb3N6CiAgICAgICAgZW5kKSwKICAgICAgICBmcmVlc3RhbmRpbmdfc2lkZSA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKHJldmVyc2VkX3RyYWNlcywgZG9ybWFudCkKCiAgICAgICAgICAgIGlmIGxhdmVuZGVyLnRhcmdldCA9PSBuaWwgYW5kIG5vdCBkb3JtYW50IHRoZW4KICAgICAgICAgICAgICAgIHJldHVybiBuaWwKICAgICAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIG1lID0gZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKQogICAgICAgIAogICAgICAgICAgICBsb2NhbCBseCwgbHksIGx6ID0gZW50aXR5LmdldF9vcmlnaW4obWUpCiAgICAgICAgICAgIGx6ID0gbHogKyA2NAogICAgICAgIAogICAgICAgICAgICBsb2NhbCBleCwgZXksIGV6CiAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBkb3JtYW50IHRoZW4KICAgICAgICAKICAgICAgICAgICAgICAgIGV4LCBleSwgZXogPSBlbnRpdHkuZ2V0X29yaWdpbihsYXZlbmRlci50YXJnZXQpCiAgICAgICAgICAgICAgICBleiA9IGV6ICsgNjQKICAgICAgICAKICAgICAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGRhdGEgPSB7bGVmdCA9IDAsIHJpZ2h0ID0gMH0KICAgICAgICAgICAgbG9jYWwgYW5nbGVzID0gey00NSwgLTMwLCAzMCwgNDV9CiAgICAgICAgICAgIGxvY2FsIF8sIHlhdyA9IGNsaWVudC5jYW1lcmFfYW5nbGVzKCkKICAgICAgICAKICAgICAgICAgICAgZm9yIGksIGFuZ2xlIGluIGlwYWlycyhhbmdsZXMpIGRvCiAgICAgICAgICAgICAgICBsb2NhbCBkYW1hZ2UgPSAwCiAgICAgICAgICAgICAgICBpZiBkb3JtYW50IHRoZW4KICAgICAgICAgICAgICAgICAgICBsb2NhbCBoZWFkeCwgaGVhZHksIGhlYWR6ID0gbGF2ZW5kZXIuZnVuY3MuYWEuZXh0ZW5kX3ZlY3RvcihseCwgbHksIGx6LCA4MDAwLCB5YXcgKyBhbmdsZSkKICAgICAgICAgICAgICAgICAgICBsb2NhbCBmcmFjdGlvbiA9IGNsaWVudC50cmFjZV9saW5lKG1lLCBseCwgbHksIGx6LCBoZWFkeCwgaGVhZHksIGhlYWR6KQogICAgICAgICAgICAgICAgICAgIGRhdGFbYW5nbGUgPiAwIGFuZCAicmlnaHQiIG9yICJsZWZ0Il0gPSBkYXRhW2FuZ2xlID4gMCBhbmQgInJpZ2h0IiBvciAibGVmdCJdICsgZnJhY3Rpb24KICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBpZiBub3QgcmV2ZXJzZWRfdHJhY2VzIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgaGVhZHgsIGhlYWR5LCBoZWFkeiA9IGxhdmVuZGVyLmZ1bmNzLmFhLmV4dGVuZF92ZWN0b3IobHgsIGx5LCBseiwgMjAwLCBsYXZlbmRlci50YXJnZXRfYW5nbGUgKyBhbmdsZSkKICAgICAgICAgICAgICAgICAgICAgICAgXywgZGFtYWdlID0gY2xpZW50LnRyYWNlX2J1bGxldChsYXZlbmRlci50YXJnZXQsIGV4LCBleSwgZXosIGhlYWR4LCBoZWFkeSwgaGVhZHosIGxhdmVuZGVyLnRhcmdldCkKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVthbmdsZSA+IDAgYW5kICJyaWdodCIgb3IgImxlZnQiXSA9IGRhdGFbYW5nbGUgPiAwIGFuZCAicmlnaHQiIG9yICJsZWZ0Il0gKyBkYW1hZ2UKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsIGhlYWR4LCBoZWFkeSwgaGVhZHogPSBsYXZlbmRlci5mdW5jcy5hYS5leHRlbmRfdmVjdG9yKGV4LCBleSwgZXosIDIwMCwgbGF2ZW5kZXIudGFyZ2V0X2FuZ2xlIC0gYW5nbGUpCiAgICAgICAgICAgICAgICAgICAgICAgIF8sIGRhbWFnZSA9IGNsaWVudC50cmFjZV9idWxsZXQobWUsIGx4LCBseSwgbHosIGhlYWR4LCBoZWFkeSwgaGVhZHosIG1lKQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2FuZ2xlIDwgMCBhbmQgInJpZ2h0IiBvciAibGVmdCJdID0gZGF0YVthbmdsZSA+IDAgYW5kICJyaWdodCIgb3IgImxlZnQiXSArIGRhbWFnZQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIAogICAgICAgICAgICBpZiBkYXRhLmxlZnQgPiBkYXRhLnJpZ2h0IHRoZW4KICAgICAgICAgICAgICAgIHJldHVybiAxCiAgICAgICAgCiAgICAgICAgICAgIGVsc2VpZiBkYXRhLnJpZ2h0ID4gZGF0YS5sZWZ0IHRoZW4KICAgICAgICAgICAgICAgIHJldHVybiAwCiAgICAgICAgCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgcmV0dXJuIDIKICAgICAgICAKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKSwKICAgICAgICBleHRyYXBvbGF0ZV9wb3NpdGlvbiA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKHhwb3MseXBvcyx6cG9zLHRpY2tzLHBsYXllcikKCSAgICAgICAgbG9jYWwgeCx5LHogPSBlbnRpdHkuZ2V0X3Byb3AocGxheWVyLCAibV92ZWNWZWxvY2l0eSIpCiAgICAKICAgICAgICAgICAgcmV0dXJuIHhwb3MgKyAoeCpnbG9iYWxzLnRpY2tpbnRlcnZhbCgpKnRpY2tzKSwgeXBvcyArICh5Kmdsb2JhbHMudGlja2ludGVydmFsKCkqdGlja3MpLCB6cG9zICsgKHoqZ2xvYmFscy50aWNraW50ZXJ2YWwoKSp0aWNrcykKICAgICAgICBlbmQpLAogICAgICAgIGdldF92ZWxvY2l0eSA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKHBsYXllcikKICAgICAgICAgICAgbG9jYWwgeCx5LHogPSBlbnRpdHkuZ2V0X3Byb3AocGxheWVyLCAibV92ZWNWZWxvY2l0eSIpCiAgICAgICAgICAgIGlmIHggPT0gbmlsIHRoZW4gcmV0dXJuIGVuZAogICAgICAgICAgICByZXR1cm4gbWF0aC5zcXJ0KHgqeCArIHkqeSArIHoqeikKICAgICAgICBlbmQpLAogICAgICAgIGdldF92ZWxvY2l0eV8yZCA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKHBsYXllcikKICAgICAgICAgICAgbG9jYWwgdmVsMSwgdmVsMiwgdmVsMyA9IGVudGl0eS5nZXRfcHJvcChwbGF5ZXIsICdtX3ZlY1ZlbG9jaXR5JykKICAgICAgICAgICAgcmV0dXJuIG1hdGguZmxvb3IobWF0aC5zcXJ0KHZlbDEgKiB2ZWwxICsgdmVsMiAqIHZlbDIpKQogICAgICAgIGVuZCksCiAgICAgICAgaW5fYWlyID0gTFBIX05PX1ZJUlRVQUxJWkUoZnVuY3Rpb24ocGxheWVyKQogICAgICAgICAgICBsb2NhbCBmbGFncyA9IGVudGl0eS5nZXRfcHJvcChwbGF5ZXIsICJtX2ZGbGFncyIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBiaXQuYmFuZChmbGFncywgMSkgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgIGVuZCksCiAgICAgICAgaXNfY3JvdWNoaW5nID0gTFBIX05PX1ZJUlRVQUxJWkUoZnVuY3Rpb24ocGxheWVyKQogICAgICAgICAgICBsb2NhbCBmbGFncyA9IGVudGl0eS5nZXRfcHJvcChwbGF5ZXIsICJtX2ZGbGFncyIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBiaXQuYmFuZChmbGFncywgNCkgPT0gNCB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBmYWxzZQogICAgICAgIGVuZCksCiAgICAgICAgCiAgICAgICAgZ2V0X3N0YXRlID0gTFBIX05PX1ZJUlRVQUxJWkUoZnVuY3Rpb24obWUpCgogICAgICAgICAgICBsb2NhbCB2ZWxvY2l0eSA9IGxhdmVuZGVyLmZ1bmNzLmFhLmdldF92ZWxvY2l0eShtZSkKICAgICAgICAgICAgbG9jYWwgZHVjayA9IGxhdmVuZGVyLmZ1bmNzLmFhLmlzX2Nyb3VjaGluZyhtZSkKICAgICAgICAgICAgbG9jYWwganVtcGluZyA9IGxhdmVuZGVyLmZ1bmNzLmFhLmluX2FpcihtZSkKICAgICAgICAgICAgbG9jYWwgdG9fcmV0dXJuID0gInJ1bm5pbmciCgogICAgICAgICAgICBpZiBqdW1waW5nIHRoZW4KICAgICAgICAgICAgICAgIHRvX3JldHVybiA9ICJqdW1waW5nIgogICAgICAgICAgICBlbHNlaWYgZHVjayB0aGVuCiAgICAgICAgICAgICAgICB0b19yZXR1cm4gPSAiY3JvdWNoaW5nIgogICAgICAgICAgICBlbHNlaWYgdmVsb2NpdHkgPCAxLjMgdGhlbgogICAgICAgICAgICAgICAgdG9fcmV0dXJuID0gInN0YW5kaW5nIgogICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIHJldHVybiB0b19yZXR1cm4KICAgICAgICBlbmQpLAogICAgICAgIGdldF9tYXhfYm9keV95YXcgPSBMUEhfTk9fVklSVFVBTElaRShmdW5jdGlvbihtZSkKICAgICAgICAgICAgbG9jYWwgdmVsb2NpdHkgPSBsYXZlbmRlci5mdW5jcy5hYS5nZXRfdmVsb2NpdHkobWUpCiAgICAgICAgICAgIGxvY2FsIGJvZHlfeWF3ID0gKDE4MC9tYXRoLnBpKSAtIChtYXRoLm1pbih2ZWxvY2l0eSwyNTApLygyNTAqMikgKiAoMTgwL21hdGgucGkpKQogICAgICAgIAogICAgICAgICAgICByZXR1cm4gYm9keV95YXcKICAgICAgICBlbmQpCgogICAgICAgIH0sCiAgICBtaXNjID0gewogICAgICAgIGdldF9lbnRpdGllcyA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKGVuZW15X29ubHksIGFsaXZlX29ubHkpCiAgICAgICAgICAgIGxvY2FsIGVuZW15X29ubHkgPSBlbmVteV9vbmx5IH49IG5pbCBhbmQgZW5lbXlfb25seSBvciBmYWxzZQogICAgICAgICAgICBsb2NhbCBhbGl2ZV9vbmx5ID0gYWxpdmVfb25seSB+PSBuaWwgYW5kIGFsaXZlX29ubHkgb3IgdHJ1ZQogICAgICAgICAgICAKICAgICAgICAgICAgbG9jYWwgcmVzdWx0ID0ge30KICAgICAgICAKICAgICAgICAgICAgbG9jYWwgbWUgPSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpCiAgICAgICAgICAgIGxvY2FsIHBsYXllcl9yZXNvdXJjZSA9IGVudGl0eS5nZXRfcGxheWVyX3Jlc291cmNlKCkKICAgICAgICAgICAgCiAgICAgICAgICAgIGZvciBwbGF5ZXIgPSAxLCBnbG9iYWxzLm1heHBsYXllcnMoKSBkbwogICAgICAgICAgICAgICAgbG9jYWwgaXNfZW5lbXksIGlzX2FsaXZlID0gdHJ1ZSwgdHJ1ZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBlbmVteV9vbmx5IGFuZCBub3QgZW50aXR5LmlzX2VuZW15KHBsYXllcikgdGhlbiBpc19lbmVteSA9IGZhbHNlIGVuZAogICAgICAgICAgICAgICAgaWYgaXNfZW5lbXkgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIGFsaXZlX29ubHkgYW5kIGVudGl0eS5nZXRfcHJvcChwbGF5ZXJfcmVzb3VyY2UsICdtX2JBbGl2ZScsIHBsYXllcikgfj0gMSB0aGVuIGlzX2FsaXZlID0gZmFsc2UgZW5kCiAgICAgICAgICAgICAgICAgICAgaWYgaXNfYWxpdmUgdGhlbiB0YWJsZS5pbnNlcnQocmVzdWx0LCBwbGF5ZXIpIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIAogICAgICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgZW5kKSwKICAgICAgICBzZXRfYWFfdmlzaWJpbGl0eSA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKHZpc2libGUpCiAgICAgICAgICAgIGZvciBrLCB2IGluIHBhaXJzKGxhdmVuZGVyLnJlZnMuYWEpIGRvCiAgICAgICAgICAgICAgICB1aS5zZXRfdmlzaWJsZSh2LCB2aXNpYmxlKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpLAoJCWNvbnRhaW5zID0gTFBIX05PX1ZJUlRVQUxJWkUoZnVuY3Rpb24odCwgdikKCQkJZm9yIGksIHZ2IGluIHBhaXJzKHQpIGRvCgkJCQlpZiB2diA9PSB2IHRoZW4KCQkJCQlyZXR1cm4gdHJ1ZQoJCQkJZW5kCgkJCWVuZAoJCQlyZXR1cm4gZmFsc2UKCQllbmQpLAogICAgICAgIGxlcnAgPSBmdW5jdGlvbihhLCBiLCB0KQogICAgICAgICAgICByZXR1cm4gYSArIChiIC0gYSkgKiB0CiAgICAgICAgZW5kLAogICAgICAgIHRhYmxlX2xlcnAgPSBMUEhfTk9fVklSVFVBTElaRShmdW5jdGlvbihhLCBiLCBwZXJjZW50YWdlKQogICAgICAgICAgICBsb2NhbCByZXN1bHQgPSB7fQogICAgICAgICAgICBmb3IgaT0xLCAjYSBkbwogICAgICAgICAgICAgICAgcmVzdWx0W2ldID0gbGF2ZW5kZXIuZnVuY3MubWlzYy5sZXJwKGFbaV0sIGJbaV0sIHBlcmNlbnRhZ2UpCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgZW5kKSwKICAgICAgICBnZXRfa2V5X21vZGUgPSBMUEhfSklUKGZ1bmN0aW9uKHJlZikKICAgICAgICAgICAgbG9jYWwga2V5ID0geyB1aS5nZXQocmVmKSB9CiAgICAgICAgICAgIGxvY2FsIG1vZGUgPSBrZXlbMl0KICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIG1vZGUgPT0gbmlsIHRoZW4KICAgICAgICAgICAgICAgIHJldHVybiAibmlsIgogICAgICAgICAgICBlbmQKICAgICAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLmJpbmRfbW9kZVttb2RlICsgMV0KICAgICAgICBlbmQpLAogICAgICAgIGtiX2dldF9tYXhfd2lkdGggPSBMUEhfSklUKGZ1bmN0aW9uKCkKICAgICAgICAgICAgbG9jYWwgbWF4ID0gMAogICAgICAgIAogICAgICAgICAgICBmb3IgbmFtZSwgYmluZCBpbiBwYWlycyhsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLmJpbmRzKSBkbwogICAgICAgICAgICAgICAgbG9jYWwgcmVmID0gdHlwZShiaW5kLnJlZikgPT0gInRhYmxlIiBhbmQgYmluZC5yZWZbMl0gb3IgYmluZC5yZWYKICAgICAgICAgICAgICAgIGxvY2FsIHN0YXRlID0gdWkuZ2V0KHJlZikKICAgICAgICAgICAgICAgIGxvY2FsIG1vZGUgPSBsYXZlbmRlci5mdW5jcy5taXNjLmdldF9rZXlfbW9kZShyZWYpCiAgICAgICAgICAgICAgICBsb2NhbCBuYW1lX3cgPSBsYXZlbmRlci5mdW5jcy5yZW5kZXJlci5tZWFzdXJlX3RleHQoImMiLCBuYW1lKS54CiAgICAgICAgICAgICAgICBsb2NhbCBtb2RlX3cgPSBsYXZlbmRlci5mdW5jcy5yZW5kZXJlci5tZWFzdXJlX3RleHQoImMiLCBtb2RlKS54CiAgICAgICAgCiAgICAgICAgICAgICAgICBtYXggPSBtYXRoLm1heChtYXgsIG5hbWVfdyArIG1vZGVfdyArIGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMucGFkZGluZykKICAgICAgICAKICAgICAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgICAgIGlmIG1heCA9PSAwIHRoZW4KICAgICAgICAgICAgICAgIG1heCA9IGxhdmVuZGVyLmZ1bmNzLnJlbmRlcmVyLm1lYXN1cmVfdGV4dCgiYyIsIGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMudGl0bGUpLnggKyBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLnBhZGRpbmcKICAgICAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBtYXgKICAgICAgICBlbmQpLAogICAgICAgIGludmVyc2VfbGVycCA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKGEsIGIsIHdlaWdodCkKICAgICAgICAgICAgcmV0dXJuICh3ZWlnaHQgLSBhKSAvIChiIC0gYSkKICAgICAgICBlbmQpLAogICAgICAgIHNwbGl0ID0gTFBIX05PX1ZJUlRVQUxJWkUoZnVuY3Rpb24oc3RyaW5nLCBzZXApCiAgICAgICAgICAgIGxvY2FsIHJlc3VsdCA9IHt9CiAgICAgICAgICAgIGZvciBzdHIgaW4gKHN0cmluZyk6Z21hdGNoKCIoW14iLi5zZXAuLiJdKykiKSBkbwogICAgICAgICAgICAgICAgdGFibGUuaW5zZXJ0KHJlc3VsdCwgc3RyKQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgICAgIGVuZCksCiAgICAgICAgY29sb3VyX2NvbnNvbGUgPSBMUEhfSklUKGZ1bmN0aW9uKHByZWZpeCwgc3RyaW5nKQogICAgICAgICAgICBjbGllbnQuY29sb3JfbG9nKHByZWZpeFsxXSwgcHJlZml4WzJdLCBwcmVmaXhbM10sICJsYXZlbmRlciB+IFwwIikKICAgICAgICAgICAgY2xpZW50LmNvbG9yX2xvZygyNTUsIDI1NSwgMjMyLCBzdHJpbmcpCiAgICAgICAgZW5kKSwKICAgICAgICBjYW5faGl0X2VuZW15ID0gTFBIX05PX1ZJUlRVQUxJWkUoZnVuY3Rpb24odGFyZ2V0LCB0aWNrcywgaGVhZF9vbmx5KQogICAgCiAgICAgICAgICAgIGxvY2FsIG1lID0gZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKQogICAgICAgIAogICAgICAgICAgICBsb2NhbCBtYXhfYm9keV95YXcgPSBsYXZlbmRlci5mdW5jcy5hYS5nZXRfbWF4X2JvZHlfeWF3KHRhcmdldCkKICAgICAgICAKICAgICAgICAgICAgbG9jYWwgZXllX3lhdyA9IG5vcm1hbGlzZV9hbmdsZShhbnRpX2FpbS5nZXRfYWJzX3lhdygpKQogICAgICAgIAogICAgICAgICAgICBsb2NhbCB4LCB5LCB6ID0gZW50aXR5LmdldF9vcmlnaW4obWUpCiAgICAgICAgICAgIHogPSB6ICsgNjQKICAgICAgICAKICAgICAgICAgICAgbG9jYWwgeCwgeSwgeiA9IGxhdmVuZGVyLmZ1bmNzLmFhLmV4dHJhcG9sYXRlX3Bvc2l0aW9uKHgsIHksIHosIHRpY2tzLCBtZSkKICAgICAgICAKICAgICAgICAgICAgbG9jYWwgZXlleCwgZXlleSA9IGVudGl0eS5nZXRfb3JpZ2luKHRhcmdldCkKICAgICAgICAgICAgXywgXywgZXlleiA9IGVudGl0eS5oaXRib3hfcG9zaXRpb24odGFyZ2V0LCAwKQogICAgICAgIAogICAgICAgICAgICBsb2NhbCBseCwgbHksIGx6ID0gbGF2ZW5kZXIuZnVuY3MuYWEuZXh0ZW5kX3ZlY3RvcihleWV4LCBleWV5LCBleWV6LCA4LCBub3JtYWxpc2VfYW5nbGUoZXllX3lhdyAtIChtYXhfYm9keV95YXcvbWF0aC5waSkpKQogICAgICAgIAogICAgICAgICAgICBsb2NhbCByeCwgcnksIHJ6ID0gbGF2ZW5kZXIuZnVuY3MuYWEuZXh0ZW5kX3ZlY3RvcihleWV4LCBleWV5LCBleWV6LCA4LCBub3JtYWxpc2VfYW5nbGUoZXllX3lhdyArIChtYXhfYm9keV95YXcvbWF0aC5waSkpKQogICAgICAgIAogICAgICAgICAgICBsb2NhbCBfLCBsZGFtYWdlID0gY2xpZW50LnRyYWNlX2J1bGxldChtZSwgeCwgeSwgeiwgbHgsIGx5LCBseiwgbWUpCiAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIF8sIHJkYW1hZ2UgPSBjbGllbnQudHJhY2VfYnVsbGV0KG1lLCB4LCB5LCB6LCByeCwgcnksIHJ6LCBtZSkKICAgICAgICAKICAgICAgICAgICAgbG9jYWwgZGFtYWdlID0gbGRhbWFnZSArIHJkYW1hZ2UKICAgICAgICAKICAgICAgICAgICAgaWYgbm90IGhlYWRfb25seSB0aGVuCiAgICAgICAgCiAgICAgICAgICAgICAgICBsb2NhbCBieCwgYnksIGJ6ID0gZW50aXR5LmhpdGJveF9wb3NpdGlvbih0YXJnZXQsIDMpCiAgICAgICAgCiAgICAgICAgICAgICAgICBsb2NhbCBfLCBiZGFtYWdlID0gY2xpZW50LnRyYWNlX2J1bGxldChtZSwgeCwgeSwgeiwgYngsIGJ5LCBieiwgbWUpCiAgICAgICAgCiAgICAgICAgICAgICAgICBkYW1hZ2UgPSBkYW1hZ2UgKyBiZGFtYWdlCiAgICAgICAgCiAgICAgICAgICAgIGVuZAogICAgICAgIAogICAgICAgICAgICByZXR1cm4gZGFtYWdlID4gMAogICAgICAgIAogICAgICAgIGVuZCksCiAgICAgICAgY2FuX2VuZW15X2hpdF9tZSA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKHRhcmdldCwgdGlja3MsIGhlYWRfb25seSkKICAgIAogICAgICAgICAgICBsb2NhbCBtZSA9IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkKICAgICAgICAKICAgICAgICAgICAgbG9jYWwgbWF4X2JvZHlfeWF3ID0gbGF2ZW5kZXIuZnVuY3MuYWEuZ2V0X21heF9ib2R5X3lhdyhtZSkKICAgICAgICAKICAgICAgICAgICAgbG9jYWwgZXllX3lhdyA9IG5vcm1hbGlzZV9hbmdsZShhbnRpX2FpbS5nZXRfYWJzX3lhdygpKQogICAgICAgIAogICAgICAgICAgICBsb2NhbCB4LCB5LCB6ID0gZW50aXR5LmdldF9vcmlnaW4odGFyZ2V0KQogICAgICAgICAgICB6ID0geiArIDY0CiAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIHgsIHksIHogPSBsYXZlbmRlci5mdW5jcy5hYS5leHRyYXBvbGF0ZV9wb3NpdGlvbih4LCB5LCB6LCB0aWNrcywgdGFyZ2V0KQogICAgICAgIAogICAgICAgICAgICBsb2NhbCBleWV4LCBleWV5ID0gY2xpZW50LmV5ZV9wb3NpdGlvbigpCiAgICAgICAgICAgIF8sIF8sIGV5ZXogPSBlbnRpdHkuaGl0Ym94X3Bvc2l0aW9uKG1lLCAwKQogICAgICAgIAogICAgICAgICAgICBsb2NhbCBseCwgbHksIGx6ID0gbGF2ZW5kZXIuZnVuY3MuYWEuZXh0ZW5kX3ZlY3RvcihleWV4LCBleWV5LCBleWV6LCA4LCBub3JtYWxpc2VfYW5nbGUoZXllX3lhdyAtIChtYXhfYm9keV95YXcvbWF0aC5waSkpKQogICAgICAgIAogICAgICAgICAgICBsb2NhbCByeCwgcnksIHJ6ID0gbGF2ZW5kZXIuZnVuY3MuYWEuZXh0ZW5kX3ZlY3RvcihleWV4LCBleWV5LCBleWV6LCA4LCBub3JtYWxpc2VfYW5nbGUoZXllX3lhdyArIChtYXhfYm9keV95YXcvbWF0aC5waSkpKQogICAgICAgIAogICAgICAgICAgICBsb2NhbCBfLCBsZGFtYWdlID0gY2xpZW50LnRyYWNlX2J1bGxldCh0YXJnZXQsIHgsIHksIHosIGx4LCBseSwgbHosIHRhcmdldCkKICAgICAgICAKICAgICAgICAgICAgbG9jYWwgXywgcmRhbWFnZSA9IGNsaWVudC50cmFjZV9idWxsZXQodGFyZ2V0LCB4LCB5LCB6LCByeCwgcnksIHJ6LCB0YXJnZXQpCiAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGRhbWFnZSA9IGxkYW1hZ2UgKyByZGFtYWdlCiAgICAgICAgCiAgICAgICAgICAgIGlmIG5vdCBoZWFkX29ubHkgdGhlbgogICAgICAgIAogICAgICAgICAgICAgICAgbG9jYWwgYngsIGJ5LCBieiA9IGVudGl0eS5oaXRib3hfcG9zaXRpb24obWUsIDMpCiAgICAgICAgCiAgICAgICAgICAgICAgICBsb2NhbCBfLCBiZGFtYWdlID0gY2xpZW50LnRyYWNlX2J1bGxldCh0YXJnZXQsIHgsIHksIHosIGJ4LCBieSwgYnosIHRhcmdldCkKICAgICAgICAKICAgICAgICAgICAgICAgIGRhbWFnZSA9IGRhbWFnZSArIGJkYW1hZ2UKICAgICAgICAKICAgICAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBkYW1hZ2UgPiAwCiAgICAgICAgCiAgICAgICAgZW5kKSwKICAgICAgICBhcHByb2FjaF9hbmdsZSA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKGFuZ2xlLCB0YXJnZXQpCgogICAgICAgICAgICBpZiBhbmdsZSA8IHRhcmdldCB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gbWF0aC5tYXgoYW5nbGUgKyAxLCB0YXJnZXQpCiAgICAgICAgICAgIGVsc2VpZiBhbmdsZSA+IHRhcmdldCB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gbWF0aC5taW4oYW5nbGUgKyAxLCB0YXJnZXQpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQKICAgICAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgZW5kKSwKICAgICAgICBoaXRfZmxhZyA9IExQSF9KSVQoZnVuY3Rpb24oZW50KQoKICAgICAgICAgICAgaWYgZW50aXR5LmlzX2Rvcm1hbnQoZW50KSBvciBub3QgZW50aXR5LmlzX2FsaXZlKGVudCkgdGhlbgogICAgICAgICAgICAgICAgcmV0dXJuIGVuZAogICAgICAgIAogICAgICAgICAgICBlc3BEYXRhID0gZW50aXR5LmdldF9lc3BfZGF0YShlbnQpCiAgICAgICAgCiAgICAgICAgICAgIHJldHVybiBiaXQuYmFuZChlc3BEYXRhLmZsYWdzLCAyMDQ4KSB+PSAwCiAgICAgICAgZW5kKQogICAgfSwKICAgIHJlbmRlcmVyID0gewogICAgICAgIG1lYXN1cmVfdGV4dCA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKGZsYWdzLCAuLi4pCiAgICAgICAgICAgIGxvY2FsIGFyZ3MgPSB7Li4ufQogICAgICAgICAgICBsb2NhbCBzdHJpbmcgPSB0YWJsZS5jb25jYXQoYXJncywgIiIpCiAgICAgICAgCiAgICAgICAgICAgIHJldHVybiB2ZWN0b3IocmVuZGVyZXIubWVhc3VyZV90ZXh0KGZsYWdzLCBzdHJpbmcpKQogICAgICAgIGVuZCksCiAgICAgICAgcmdiYV90b19oZXggPSBMUEhfTk9fVklSVFVBTElaRShmdW5jdGlvbihyLCBnLCBiLCBhKQogICAgICAgICAgICByZXR1cm4gYml0LnRvaGV4KAogICAgICAgICAgICAgIChtYXRoLmZsb29yKHIgKyAwLjUpICogMTY3NzcyMTYpICsgCiAgICAgICAgICAgICAgKG1hdGguZmxvb3IoZyArIDAuNSkgKiA2NTUzNikgKyAKICAgICAgICAgICAgICAobWF0aC5mbG9vcihiICsgMC41KSAqIDI1NikgKyAKICAgICAgICAgICAgICAobWF0aC5mbG9vcihhICsgMC41KSkKICAgICAgICAgICAgKQogICAgICAgIGVuZCksCiAgICAgICAgZ3JhZGllbnRfdGV4dCA9IExQSF9KSVQoZnVuY3Rpb24ocjIsIGcyLCBiMiwgYTIsIHRleHRfdG9fZHJhdywgc3BlZWQsIGJhc2VfciwgYmFzZV9nLCBiYXNlX2IsIGJhc2VfYSkKICAgICAgICAgICAgbG9jYWwgaGlnaGxpZ2h0X2ZyYWN0aW9uID0gIChnbG9iYWxzLnJlYWx0aW1lKCkgLyAyICUgMS4yICogc3BlZWQpIC0gMS4yCiAgICAgICAgICAgIGxvY2FsIG91dHB1dCA9ICIiCiAgICAgICAgICAgIGZvciBpZHggPSAxLCAjdGV4dF90b19kcmF3IGRvCiAgICAgICAgICAgICAgICBsb2NhbCBjaGFyYWN0ZXIgPSB0ZXh0X3RvX2RyYXc6c3ViKGlkeCwgaWR4KQogICAgICAgICAgICAgICAgbG9jYWwgY2hhcmFjdGVyX2ZyYWN0aW9uID0gaWR4IC8gI3RleHRfdG9fZHJhdwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBsb2NhbCByLCBnLCBiLCBhID0gYmFzZV9yLCBiYXNlX2csIGJhc2VfYiwgYmFzZV9hCiAgICAgICAgICAgICAgICBsb2NhbCBoaWdobGlnaHRfZGVsdGEgPSBtYXRoLmFicyhjaGFyYWN0ZXJfZnJhY3Rpb24gLSAwLjUgLSBoaWdobGlnaHRfZnJhY3Rpb24pICogMQogICAgICAgICAgICAgICAgaWYgaGlnaGxpZ2h0X2RlbHRhIDw9IDEgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIHJfZnJhY3Rpb24sIGdfZnJhY3Rpb24sIGJfZnJhY3Rpb24sIGFfZnJhY3Rpb24gPSByMiAtIHIsIGcyIC0gZywgYjIgLSBiLCBhMiAtIGEKICAgICAgICAgICAgICAgICAgICByID0gciArIHJfZnJhY3Rpb24gKiAoMSAtIGhpZ2hsaWdodF9kZWx0YSkKICAgICAgICAgICAgICAgICAgICBnID0gZyArIGdfZnJhY3Rpb24gKiAoMSAtIGhpZ2hsaWdodF9kZWx0YSkKICAgICAgICAgICAgICAgICAgICBiID0gYiArIGJfZnJhY3Rpb24gKiAoMSAtIGhpZ2hsaWdodF9kZWx0YSkKICAgICAgICAgICAgICAgICAgICBhID0gYSArIGFfZnJhY3Rpb24gKiAoMSAtIGhpZ2hsaWdodF9kZWx0YSkKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0IC4uICgnXGElMDJ4JTAyeCUwMnglMDJ4JXMnKTpmb3JtYXQociwgZywgYiwgYSwgdGV4dF90b19kcmF3OnN1YihpZHgsIGlkeCkpCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICByZXR1cm4gb3V0cHV0CiAgICAgICAgZW5kKSwKICAgICAgICB0d29fZ3JhZGllbnRfdGV4dCA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKHRleHQsIHIsIGcsIGIsIHNwZWVkKQogICAgICAgICAgICBsb2NhbCBmaW5hbF90ZXh0ID0gJycKICAgICAgICAgICAgbG9jYWwgY3VydGltZSA9IGdsb2JhbHMuY3VydGltZSgpCiAgICAgICAgICAgIGxvY2FsIGEgPSAyNTUKICAgICAgICAgICAgbG9jYWwgY2VudGVyID0gbWF0aC5mbG9vcigjdGV4dCAvIDIpICsgMSAgLS0gY2FsY3VsYXRlIHRoZSBjZW50ZXIgb2YgdGhlIHRleHQKICAgICAgICAgICAgZm9yIGk9MSwgI3RleHQgZG8KICAgICAgICAgICAgICAgIC0tIGNhbGN1bGF0ZSB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgY2VudGVyIGNoYXJhY3RlcgogICAgICAgICAgICAgICAgbG9jYWwgZGlzdGFuY2UgPSBtYXRoLmFicyhpIC0gY2VudGVyKQogICAgICAgICAgICAgICAgLS0gY2FsY3VsYXRlIHRoZSBhbHBoYSBiYXNlZCBvbiB0aGUgZGlzdGFuY2UgYW5kIHRoZSBzcGVlZCBhbmQgdGltZQogICAgICAgICAgICAgICAgYSA9IDI1NSAtIG1hdGguYWJzKDI1NSAqIG1hdGguc2luKHNwZWVkICogY3VydGltZSAvIDQgLSBkaXN0YW5jZSAqIDQgLyAyMCkpCiAgICAgICAgICAgICAgICAtLWxvY2FsIGNvbCA9IHIsIGcsIGIsIGEKICAgICAgICAgICAgICAgIGxvY2FsIGNvbHIgPSB1bnBhY2soe2xhdmVuZGVyLmZ1bmNzLnJlbmRlcmVyLnJnYmFfdG9faGV4KHIsIGcsIGIsIGEpfSkKICAgICAgICAgICAgICAgIGZpbmFsX3RleHQgPSBmaW5hbF90ZXh0IC4uICdcYScgLi4gY29sciAuLiB0ZXh0OnN1YihpLCBpKQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgcmV0dXJuIGZpbmFsX3RleHQKICAgICAgICBlbmQpLAogICAgICAgIGNvbG91cl90ZXh0X21lbnUgPSBMUEhfSklUKGZ1bmN0aW9uKHN0cmluZ190b19jb2xvdXIpCiAgICAgICAgICAgIGxvY2FsIHIsIGcsIGIsIGEgPSAxODUsIDE5MCwgMjU1LCAyNTUKICAgICAgICAgICAgcmV0dXJuICJcYSIgLi4gdW5wYWNrKHtsYXZlbmRlci5mdW5jcy5yZW5kZXJlci5yZ2JhX3RvX2hleChyLCBnLCBiLCBhKX0pIC4uIHN0cmluZ190b19jb2xvdXIgLi4gIlxhQ0RDRENERkYiCiAgICAgICAgZW5kKSwKICAgICAgICBjb2xvdXJfdGV4dCA9IExQSF9KSVQoZnVuY3Rpb24oc3RyaW5nX3RvX2NvbG91ciwgYWNjZW50KQogICAgICAgICAgICBsb2NhbCByLCBnLCBiLCBhID0gdWkuZ2V0KGFjY2VudCkKICAgICAgICAgICAgcmV0dXJuICJcYSIgLi4gdW5wYWNrKHtsYXZlbmRlci5mdW5jcy5yZW5kZXJlci5yZ2JhX3RvX2hleChyLCBnLCBiLCBhKX0pIC4uIHN0cmluZ190b19jb2xvdXIgLi4gIlxhQ0RDRENERkYiCiAgICAgICAgZW5kKSwKCQlyZWMgPSBMUEhfSklUKGZ1bmN0aW9uKHgsIHksIHcsIGgsIHIsIGcsIGIsIGEsIHJhZGl1cykKCQkJcmFkaXVzID0gbWF0aC5taW4oeC8yLCB5LzIsIHJhZGl1cykKCQkJcmVuZGVyZXIucmVjdGFuZ2xlKHgsIHkgKyByYWRpdXMsIHcsIGggLSByYWRpdXMqMiwgciwgZywgYiwgYSkKCQkJcmVuZGVyZXIucmVjdGFuZ2xlKHggKyByYWRpdXMsIHksIHcgLSByYWRpdXMqMiwgcmFkaXVzLCByLCBnLCBiLCBhKQoJCQlyZW5kZXJlci5yZWN0YW5nbGUoeCArIHJhZGl1cywgeSArIGggLSByYWRpdXMsIHcgLSByYWRpdXMqMiwgcmFkaXVzLCByLCBnLCBiLCBhKQoJCQlyZW5kZXJlci5jaXJjbGUoeCArIHJhZGl1cywgeSArIHJhZGl1cywgciwgZywgYiwgYSwgcmFkaXVzLCAxODAsIDAuMjUpCgkJCXJlbmRlcmVyLmNpcmNsZSh4IC0gcmFkaXVzICsgdywgeSArIHJhZGl1cywgciwgZywgYiwgYSwgcmFkaXVzLCA5MCwgMC4yNSkKCQkJcmVuZGVyZXIuY2lyY2xlKHggLSByYWRpdXMgKyB3LCB5IC0gcmFkaXVzICsgaCwgciwgZywgYiwgYSwgcmFkaXVzLCAwLCAwLjI1KQoJCQlyZW5kZXJlci5jaXJjbGUoeCArIHJhZGl1cywgeSAtIHJhZGl1cyArIGgsIHIsIGcsIGIsIGEsIHJhZGl1cywgLTkwLCAwLjI1KQoJCWVuZCksCgogICAgICAgIHJlY3RhbmdsZV9vdXRsaW5lID0gTFBIX05PX1ZJUlRVQUxJWkUoZnVuY3Rpb24oeCwgeSwgdywgaCwgciwgZywgYiwgYSwgdGhpY2tuZXNzLCByYWRpdXMpCiAgICAgICAgICAgIGlmIHRoaWNrbmVzcyA9PSBuaWwgb3IgdGhpY2tuZXNzIDwgMSB0aGVuCiAgICAgICAgICAgICAgdGhpY2tuZXNzID0gMTsKICAgICAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgICAgIGlmIHJhZGl1cyA9PSBuaWwgb3IgcmFkaXVzIDwgMCB0aGVuCiAgICAgICAgICAgICAgcmFkaXVzID0gMDsKICAgICAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGxpbWl0ID0gbWF0aC5taW4odyAqIDAuNSwgaCAqIDAuNSkgKiAwLjU7CiAgICAgICAgICAgIHRoaWNrbmVzcyA9IG1hdGgubWluKGxpbWl0IC8gMC41LCB0aGlja25lc3MpOwogICAgICAgIAogICAgICAgICAgICBsb2NhbCBvZmZzZXQgPSAwOwogICAgICAgIAogICAgICAgICAgICBpZiByYWRpdXMgPj0gdGhpY2tuZXNzIHRoZW4KICAgICAgICAgICAgICByYWRpdXMgPSBtYXRoLm1pbihsaW1pdCArIChsaW1pdCAtIHRoaWNrbmVzcyksIHJhZGl1cyk7CiAgICAgICAgICAgICAgb2Zmc2V0ID0gcmFkaXVzICsgdGhpY2tuZXNzOwogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgcmFkaXVzID09IDAgdGhlbgogICAgICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoeCArIG9mZnNldCAtIDEsIHksIHcgLSBvZmZzZXQgKiAyICsgMiwgdGhpY2tuZXNzLCByLCBnLCBiLCBhKTsKICAgICAgICAgICAgcmVuZGVyZXIucmVjdGFuZ2xlKHggKyBvZmZzZXQgLSAxLCB5ICsgaCwgdyAtIG9mZnNldCAqIDIgKyAyLCAtdGhpY2tuZXNzLCByLCBnLCBiLCBhKTsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoeCArIG9mZnNldCwgeSwgdyAtIG9mZnNldCAqIDIsIHRoaWNrbmVzcywgciwgZywgYiwgYSk7CiAgICAgICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4ICsgb2Zmc2V0LCB5ICsgaCwgdyAtIG9mZnNldCAqIDIsIC10aGlja25lc3MsIHIsIGcsIGIsIGEpOwogICAgICAgICAgICBlbmQKICAgICAgICAKICAgICAgICAgICAgbG9jYWwgYm91bmRzID0gbWF0aC5tYXgob2Zmc2V0LCB0aGlja25lc3MpOwogICAgICAgIAogICAgICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoeCwgeSArIGJvdW5kcywgdGhpY2tuZXNzLCBoIC0gYm91bmRzICogMiwgciwgZywgYiwgYSk7CiAgICAgICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4ICsgdywgeSArIGJvdW5kcywgLXRoaWNrbmVzcywgaCAtIGJvdW5kcyAqIDIsIHIsIGcsIGIsIGEpOwogICAgICAgIAogICAgICAgICAgICBpZiByYWRpdXMgPT0gMCB0aGVuCiAgICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgICAgIGVuZAogICAgICAgIAogICAgICAgICAgICByZW5kZXJlci5jaXJjbGVfb3V0bGluZSh4ICsgb2Zmc2V0LCB5ICsgb2Zmc2V0LCByLCBnLCBiLCBhLCBvZmZzZXQsIDE4MCwgMC4yNSwgdGhpY2tuZXNzKTsgLS0gPyBsZWZ0LXRvcAogICAgICAgICAgICByZW5kZXJlci5jaXJjbGVfb3V0bGluZSh4ICsgb2Zmc2V0LCB5ICsgaCAtIG9mZnNldCwgciwgZywgYiwgYSwgb2Zmc2V0LCA5MCwgMC4yNSwgdGhpY2tuZXNzKTsgLS0gPyBsZWZ0LWJvdHR0b20KICAgICAgICAKICAgICAgICAgICAgcmVuZGVyZXIuY2lyY2xlX291dGxpbmUoeCArIHcgLSBvZmZzZXQsIHkgKyBvZmZzZXQsIHIsIGcsIGIsIGEsIG9mZnNldCwgMjcwLCAwLjI1LCB0aGlja25lc3MpOyAtLSA/IHJpZ2h0LXRvcAogICAgICAgICAgICByZW5kZXJlci5jaXJjbGVfb3V0bGluZSh4ICsgdyAtIG9mZnNldCwgeSArIGggLSBvZmZzZXQsIHIsIGcsIGIsIGEsIG9mZnNldCwgMCwgMC4yNSwgdGhpY2tuZXNzKTsgLS0gPyByaWdodC1ib3R0b20KICAgICAgICBlbmQpLAoKCQktLWdsb3dfbW9kdWxlID0gZnVuY3Rpb24oeCwgeSwgdywgaCwgYWNjZW50LCB3aWR0aCwgcm91bmRpbmcsIGFjY2VudF9pbm5lcikKCQktLQlsb2NhbCB0aGlja25lc3MgPSAxCgkJLS0JbG9jYWwgb2Zmc2V0ID0gMQoJCS0tCWxvY2FsIHIsIGcsIGIsIGEgPSBhY2NlbnQ6dW5wYWNrKCkKCQktLQlpZiBhY2NlbnRfaW5uZXIgdGhlbgoJCS0tCQltX3JlbmRlci5yZWMoeCAsIHksIHcsIGgsIGFjY2VudF9pbm5lciwgcm91bmRpbmcpCgkJLS0JCS0tcmVuZGVyZXIuYmx1cih4ICwgeSwgdywgaCkKCQktLQkJLS1tX3JlbmRlci5yZWNfb3V0bGluZSh4ICsgd2lkdGgqdGhpY2tuZXNzIC0gd2lkdGgqdGhpY2tuZXNzLCB5ICsgd2lkdGgqdGhpY2tuZXNzIC0gd2lkdGgqdGhpY2tuZXNzLCB3IC0gd2lkdGgqdGhpY2tuZXNzKjIgKyB3aWR0aCp0aGlja25lc3MqMiwgaCAtIHdpZHRoKnRoaWNrbmVzcyoyICsgd2lkdGgqdGhpY2tuZXNzKjIsIGNvbG9yKHIsIGcsIGIsIDI1NSksIHJvdW5kaW5nLCB0aGlja25lc3MpCgkJLS0JZW5kCgkJLS0JZm9yIGsgPSAwLCB3aWR0aCBkbwoJCS0tCQlsb2NhbCBhY2NlbnQgPSBjb2xvcihyLCBnLCBiLCBhICogKGsvd2lkdGgpXigyLjMpKQoJCS0tCQltX3JlbmRlci5yZWNfb3V0bGluZSh4ICsgKGsgLSB3aWR0aCAtIG9mZnNldCkqdGhpY2tuZXNzLCB5ICsgKGsgLSB3aWR0aCAtIG9mZnNldCkgKiB0aGlja25lc3MsIHcgLSAoayAtIHdpZHRoIC0gb2Zmc2V0KSp0aGlja25lc3MqMiwgaCAtIChrIC0gd2lkdGggLSBvZmZzZXQpKnRoaWNrbmVzcyoyLCBhY2NlbnQsIHJvdW5kaW5nICsgdGhpY2tuZXNzICogKHdpZHRoIC0gayArIG9mZnNldCksIHRoaWNrbmVzcykKCQktLQllbmQKCQktLWVuZCwKICAgICAgICByb3VuZGVkX3JlY3RhbmdsZSA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKHgsIHksIHcsIGgsIHIsIGcsIGIsIGEsIHJhZGl1cykKICAgICAgICAgICAgeSA9IHkgKyByYWRpdXMKICAgICAgICAgICAgbG9jYWwgZGF0YWNpcmNsZSA9IHsKICAgICAgICAgICAgICAgIHt4ICsgcmFkaXVzLCB5LCAxODB9LAogICAgICAgICAgICAgICAge3ggKyB3IC0gcmFkaXVzLCB5LCA5MH0sCiAgICAgICAgICAgICAgICB7eCArIHJhZGl1cywgeSArIGggLSByYWRpdXMgKiAyLCAyNzB9LAogICAgICAgICAgICAgICAge3ggKyB3IC0gcmFkaXVzLCB5ICsgaCAtIHJhZGl1cyAqIDIsIDB9LAogICAgICAgICAgICB9CiAgICAgICAgCiAgICAgICAgICAgIGxvY2FsIGRhdGEgPSB7CiAgICAgICAgICAgICAgICB7eCArIHJhZGl1cywgeSwgdyAtIHJhZGl1cyAqIDIsIGggLSByYWRpdXMgKiAyfSwKICAgICAgICAgICAgICAgIHt4ICsgcmFkaXVzLCB5IC0gcmFkaXVzLCB3IC0gcmFkaXVzICogMiwgcmFkaXVzfSwKICAgICAgICAgICAgICAgIHt4ICsgcmFkaXVzLCB5ICsgaCAtIHJhZGl1cyAqIDIsIHcgLSByYWRpdXMgKiAyLCByYWRpdXN9LAogICAgICAgICAgICAgICAge3gsIHksIHJhZGl1cywgaCAtIHJhZGl1cyAqIDJ9LAogICAgICAgICAgICAgICAge3ggKyB3IC0gcmFkaXVzLCB5LCByYWRpdXMsIGggLSByYWRpdXMgKiAyfSwKICAgICAgICAgICAgfQogICAgICAgIAogICAgICAgICAgICBmb3IgXywgZGF0YSBpbiBwYWlycyhkYXRhY2lyY2xlKSBkbwogICAgICAgICAgICAgICAgcmVuZGVyZXIuY2lyY2xlKGRhdGFbMV0sIGRhdGFbMl0sIHIsIGcsIGIsIGEsIHJhZGl1cywgZGF0YVszXSwgMC4yNSkKICAgICAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgICAgIGZvciBfLCBkYXRhIGluIHBhaXJzKGRhdGEpIGRvCiAgICAgICAgICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZShkYXRhWzFdLCBkYXRhWzJdLCBkYXRhWzNdLCBkYXRhWzRdLCByLCBnLCBiLCBhKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpLAogICAgICAgIGdsb3dfcmVjdGFuZ2xlID0gTFBIX05PX1ZJUlRVQUxJWkUoZnVuY3Rpb24oeCwgeSwgdywgaCwgciwgZywgYiwgYSwgcm91bmQsIHNpemUsIGdfdykKICAgICAgICAgICAgZm9yIGkgPSAxLCBzaXplLCAwLjMgZG8KICAgICAgICAgICAgICAgIGxvY2FsIGZpeHBvc2l0b24gPSAoaSAgLSAxKSAqIDIJIAogICAgICAgICAgICAgICAgbG9jYWwgZml4aSA9IGkgIC0gMQogICAgICAgICAgICAgICAgbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIucm91bmRlZF9yZWN0YW5nbGUoeCAtIGZpeGksIHkgLSBmaXhpLCB3ICsgZml4cG9zaXRvbiAsIGggKyBmaXhwb3NpdG9uICwgciAsIGcgLGIgLCAoYSAtICBpICogZ193KSAscm91bmQpCQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpLAogICAgICAgIG91dGxpbmVfZ2xvdyA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKHgsIHksIHcsIGgsIHIsIGcsIGIsIGEsIHRoaWNrbmVzcywgcmFkaXVzKQoJICAgIAlpZiB0aGlja25lc3MgPT0gbmlsIG9yIHRoaWNrbmVzcyA8IDEgdGhlbgoJICAgIAkJdGhpY2tuZXNzID0gMTsKCSAgICAJZW5kCiAgICAgICAgCgkgICAgCWlmIHJhZGl1cyA9PSBuaWwgb3IgcmFkaXVzIDwgMCB0aGVuCgkgICAgCQlyYWRpdXMgPSAwOwoJICAgIAllbmQKICAgICAgICAKCSAgICAJbG9jYWwgbGltaXQgPSBtYXRoLm1pbih3ICogMC41LCBoICogMC41KTsKICAgICAgICAKCSAgICAJcmFkaXVzID0gbWF0aC5taW4obGltaXQsIHJhZGl1cyk7CgkgICAgCXRoaWNrbmVzcyA9IHRoaWNrbmVzcyArIHJhZGl1czsKICAgICAgICAKCSAgICAJbG9jYWwgcmQgPSByYWRpdXMgKiAyOwoJICAgIAl4LCB5LCB3LCBoID0geCArIHJhZGl1cyAtIDEsIHkgKyByYWRpdXMgLSAxLCB3IC0gcmQgKyAyLCBoIC0gcmQgKyAyOwogICAgICAgIAoJICAgIAlsb2NhbCBmYWN0b3IgPSAxOwoJICAgIAlsb2NhbCBzdGVwID0gbGF2ZW5kZXIuZnVuY3MubWlzYy5pbnZlcnNlX2xlcnAocmFkaXVzLCB0aGlja25lc3MsIHJhZGl1cyArIDEpOwogICAgICAgIAoJICAgIAlmb3IgayA9IHJhZGl1cywgdGhpY2tuZXNzIGRvCgkgICAgCSAgbG9jYWwga2QgPSBrICogMjsKCSAgICAJICBsb2NhbCByb3VuZGluZyA9IHJhZGl1cyA9PSAwIGFuZCByYWRpdXMgb3IgazsKICAgICAgICAgICAgCgkgICAgCSAgbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIucmVjdGFuZ2xlX291dGxpbmUoeCAtIGssIHkgLSBrLCB3ICsga2QsIGggKyBrZCwgciwgZywgYiwgYSAqIGZhY3RvciAvIDMsIDEsIHJvdW5kaW5nKTsKCSAgICAJICBmYWN0b3IgPSBmYWN0b3IgLSBzdGVwOwoJICAgIAllbmQKCSAgICBlbmQpLAogICAgICAgIGZhZGVfcm91bmRlZF9yZWN0ID0gTFBIX05PX1ZJUlRVQUxJWkUoZnVuY3Rpb24oeCwgeSwgdywgaCwgcmFkaXVzLCByLCBnLCBiLCBhLCBnbG93KQogICAgICAgICAgICBsb2NhbCBuID0gYSA9PSAwIGFuZCAwIG9yIGEgLyAxNQogICAgICAgICAgICAtLXJlbmRlcmVyLnJlY3RhbmdsZSh4ICsgcmFkaXVzLCB5LCB3IC0gcmFkaXVzICogMiwgMSwgciwgZywgYiwgYSkKICAgICAgICAgICAgcmVuZGVyZXIuY2lyY2xlX291dGxpbmUoeCArIHJhZGl1cywgeSArIHJhZGl1cywgciwgZywgYiwgYSwgcmFkaXVzLCAxODAsIDAuMjUsIDEpCiAgICAgICAgICAgIC0tcmVuZGVyZXIuY2lyY2xlX291dGxpbmUoeCArIHcgLSByYWRpdXMsIHkgKyByYWRpdXMsIHIsIGcsIGIsIGEsIHJhZGl1cywgMjcwLCAwLjI1LCAxKQogICAgICAgICAgICByZW5kZXJlci5ncmFkaWVudCh4LCB5ICsgcmFkaXVzLCAxLCAxK2ggLSByYWRpdXMgKiAyLCByLCBnLCBiLCBhLCByLCBnLCBiLCBuLCBmYWxzZSkKICAgICAgICAgICAgcmVuZGVyZXIuZ3JhZGllbnQoeCArIHcgLSAxLCB5ICsgcmFkaXVzIC0gMSwgMSwgMStoIC0gcmFkaXVzICogMiwgciwgZywgYiwgbiwgciwgZywgYiwgYSwgZmFsc2UpCiAgICAgICAgICAgIC0tcmVuZGVyZXIuY2lyY2xlX291dGxpbmUoeCArIHJhZGl1cywgeSArIGggLSByYWRpdXMsIHIsIGcsIGIsIDE1NSwgcmFkaXVzLCA5MCwgMC4yNSwgMSkKICAgICAgICAgICAgcmVuZGVyZXIuY2lyY2xlX291dGxpbmUoeCArIHcgLSByYWRpdXMsIHkgKyBoIC0gcmFkaXVzLCByLCBnLCBiLCBhLCByYWRpdXMsIDAsIDAuMjUsIDEpCiAgICAgICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4ICsgcmFkaXVzLCB5ICsgaCAtIDEsIHcgLSByYWRpdXMgKiAyLCAxLCByLCBnLCBiLCBuKQogICAgICAgICAgICBpZiBhID4gNDUgdGhlbgoJICAgIAkgICAgbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIub3V0bGluZV9nbG93KHgsIHksIHcsIGgsIHIsIGcsIGIsIGdsb3csIDUsIHJhZGl1cykKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kKSwKICAgICAgICBmYWRlX3JvdW5kZWRfcmVjdF9ub3RpZiA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKHgsIHksIHcsIGgsIHJhZGl1cywgciwgZywgYiwgYSwgZ2xvdywgdzEpCiAgICAgICAgICAgIGxvY2FsIG4gPSBhIC8gMTUKICAgICAgICAgICAgbG9jYWwgdzEgPSB3MSA8IDMgYW5kIDAgb3IgdzEKICAgICAgICAgICAgbG9jYWwgY2lyY19maWxsID0gdzEgPiA1IGFuZCAwLjI1IG9yIHcxIC8gMTUwCiAgICAgICAgICAgIAogICAgICAgICAgICAtLSBsZWZ0CiAgICAgICAgICAgIHJlbmRlcmVyLmNpcmNsZV9vdXRsaW5lKHggKyByYWRpdXMsIHkgKyByYWRpdXMsIHIsIGcsIGIsIGEsIHJhZGl1cywgMTgwLCBjaXJjX2ZpbGwsIDEpCiAgICAgICAgICAgIC0tIHJpZ2h0CiAgICAgICAgICAgIHJlbmRlcmVyLmNpcmNsZV9vdXRsaW5lKHggKyB3IC0gcmFkaXVzLCB5ICsgaCAtIHJhZGl1cywgciwgZywgYiwgYSwgcmFkaXVzLCAwLCBjaXJjX2ZpbGwsIDEpCiAgICAgICAgICAgIC0tIGxlZnQKICAgICAgICAgICAgcmVuZGVyZXIuZ3JhZGllbnQoeCArIHJhZGl1cyAtIDIsIHksIHcxLCAxLCByLCBnLCBiLCBhLCByLCBnLCBiLCBuLCB0cnVlKQogICAgICAgICAgICAtLSByaWdodAogICAgICAgICAgICByZW5kZXJlci5ncmFkaWVudCh4ICsgdyAtIHcxIC0gcmFkaXVzICsgMiwgeSArIGggLSAxLCB3MSwgMSwgciwgZywgYiwgbiwgciwgZywgYiwgYSwgdHJ1ZSkKCiAgICAgICAgICAgIC0tIGxlZnQKICAgICAgICAgICAgcmVuZGVyZXIuZ3JhZGllbnQoeCArIHJhZGl1cyAtIDUsIHkgKyBoIC8gMiAtIHJhZGl1cyAqIDIgKyAyLCAxLCB3MSAvIDMuNSwgciwgZywgYiwgYSwgciwgZywgYiwgbiwgZmFsc2UpCiAgICAgICAgICAgIC0tIHJpZ2h0CiAgICAgICAgICAgIHJlbmRlcmVyLmdyYWRpZW50KHggKyB3IC0gMSwgeSAtIHcxIC8gMy41IC0gKHJhZGl1cyAtIGggKSArIDEsIDEsIHcxIC8gMy41LCByLCBnLCBiLCBuLCByLCBnLCBiLCBhLCBmYWxzZSkKCiAgICAgICAgICAgIGlmIGEgPiA0NSB0aGVuCiAgICAgICAgICAgICAgICBsYXZlbmRlci5mdW5jcy5yZW5kZXJlci5vdXRsaW5lX2dsb3coeCwgeSwgdywgaCwgciwgZywgYiwgZ2xvdywgNSwgcmFkaXVzKQogICAgICAgICAgICBlbmQKCiAgICAgICAgZW5kKSwKICAgICAgICBmYWRlX3JvdW5kZWRfcmVjdF92ZWwgPSBMUEhfTk9fVklSVFVBTElaRShmdW5jdGlvbih4LCB5LCB3LCBoLCByYWRpdXMsIHIsIGcsIGIsIGEsIGdsb3csIHcxKQogICAgICAgICAgICBsb2NhbCBuID0gYSAvIDE1CiAgICAgICAgICAgIGxvY2FsIHcxID0gdzEgPCAzIGFuZCAwIG9yIHcxCiAgICAgICAgICAgIGxvY2FsIGNpcmNfZmlsbCA9IHcxID4gNSBhbmQgMC4yNSBvciB3MSAvIDE1MAogICAgICAgICAgICAKICAgICAgICAgICAgLS0gbGVmdAogICAgICAgICAgICByZW5kZXJlci5jaXJjbGVfb3V0bGluZSh4ICsgcmFkaXVzLCB5ICsgcmFkaXVzLCByLCBnLCBiLCBhLCByYWRpdXMsIDE4MCwgY2lyY19maWxsLCAxKQogICAgICAgICAgICAtLSByaWdodAogICAgICAgICAgICByZW5kZXJlci5jaXJjbGVfb3V0bGluZSh4ICsgdyAtIHJhZGl1cywgeSArIGggLSByYWRpdXMsIHIsIGcsIGIsIGEsIHJhZGl1cywgMCwgY2lyY19maWxsLCAxKQoKICAgICAgICAgICAgLS0gbGVmdAogICAgICAgICAgICByZW5kZXJlci5ncmFkaWVudCh4ICsgcmFkaXVzIC0gMiwgeSwgdzEsIDEsIHIsIGcsIGIsIGEsIHIsIGcsIGIsIG4sIHRydWUpCiAgICAgICAgICAgIC0tIHJpZ2h0CiAgICAgICAgICAgIHJlbmRlcmVyLmdyYWRpZW50KHggKyB3IC0gdzEgLSByYWRpdXMgKyAyLCB5ICsgaCAtIDEsIHcxLCAxLCByLCBnLCBiLCBuLCByLCBnLCBiLCBhLCB0cnVlKQoKICAgICAgICAgICAgLS0gbGVmdAogICAgICAgICAgICByZW5kZXJlci5ncmFkaWVudCh4ICsgcmFkaXVzIC0gNSwgeSArIGggLyAyIC0gcmFkaXVzIC0gaCAvIDIgKyAxMCwgMSwgdzEgLyAzLjUsIHIsIGcsIGIsIGEsIHIsIGcsIGIsIG4sIGZhbHNlKQogICAgICAgICAgICAtLSByaWdodAogICAgICAgICAgICByZW5kZXJlci5ncmFkaWVudCh4ICsgdyAtIDEsIHkgLSB3MSAvIDMuNSAtIChyYWRpdXMgLSBoICkgKyAxLCAxLCB3MSAvIDMuNSwgciwgZywgYiwgbiwgciwgZywgYiwgYSwgZmFsc2UpCgogICAgICAgICAgICAtLSBnbG93CiAgICAgICAgICAgIGlmIGEgPiA0NSB0aGVuCiAgICAgICAgICAgICAgICBsYXZlbmRlci5mdW5jcy5yZW5kZXJlci5vdXRsaW5lX2dsb3coeCwgeSwgdywgaCwgciwgZywgYiwgZ2xvdywgNSwgcmFkaXVzKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQpLAoKICAgICAgICBob3Jpem9udGFsX2ZhZGVfZ2xvdyA9IExQSF9OT19WSVJUVUFMSVpFKGZ1bmN0aW9uKHgsIHksIHcsIGgsIHJhZGl1cywgciwgZywgYiwgYSwgZ2xvdywgcjEsIGcxLCBiMSkKICAgICAgICAgICAgbG9jYWwgbiA9IGEgLyAyNTUgKiBuCiAgICAgICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSh4LCB5ICsgcmFkaXVzLCAxLCBoIC0gcmFkaXVzICogMiwgciwgZywgYiwgYSkKICAgICAgICAgICAgcmVuZGVyZXIuY2lyY2xlX291dGxpbmUoeCArIHJhZGl1cywgeSArIHJhZGl1cywgciwgZywgYiwgYSwgcmFkaXVzLCAxODAsIDAuMjUsIDEpCiAgICAgICAgICAgIHJlbmRlcmVyLmNpcmNsZV9vdXRsaW5lKHggKyByYWRpdXMsIHkgKyBoIC0gcmFkaXVzLCByLCBnLCBiLCBhLCByYWRpdXMsIDkwLCAwLjI1LCAxKQogICAgICAgICAgICByZW5kZXJlci5ncmFkaWVudCh4ICsgcmFkaXVzLCB5LCB3IC8gMy41IC0gcmFkaXVzICogMiwgMSwgciwgZywgYiwgYSwgMCwgMCwgMCwgbiAvIDAsIHRydWUpCiAgICAgICAgICAgIHJlbmRlcmVyLmdyYWRpZW50KHggKyByYWRpdXMsIHkgKyBoIC0gMSwgdyAvIDMuNSAtIHJhZGl1cyAqIDIsIDEsIHIsIGcsIGIsIGEsIDAsIDAsIDAsIG4gLyAwLCB0cnVlKQogICAgICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoeCArIHJhZGl1cywgeSArIGggLSAxLCB3IC0gcmFkaXVzICogMiwgMSwgcjEsIGcxLCBiMSwgbikKICAgICAgICAgICAgcmVuZGVyZXIucmVjdGFuZ2xlKHggKyByYWRpdXMsIHksIHcgLSByYWRpdXMgKiAyLCAxLCByMSwgZzEsIGIxLCBuKQogICAgICAgICAgICByZW5kZXJlci5jaXJjbGVfb3V0bGluZSh4ICsgdyAtIHJhZGl1cywgeSArIHJhZGl1cywgcjEsIGcxLCBiMSwgbiwgcmFkaXVzLCAtOTAsIDAuMjUsIDEpCiAgICAgICAgICAgIHJlbmRlcmVyLmNpcmNsZV9vdXRsaW5lKHggKyB3IC0gcmFkaXVzLCB5ICsgaCAtIHJhZGl1cywgcjEsIGcxLCBiMSwgbiwgcmFkaXVzLCAwLCAwLjI1LCAxKQogICAgICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoeCArIHcgLSAxLCB5ICsgcmFkaXVzLCAxLCBoIC0gcmFkaXVzICogMiwgcjEsIGcxLCBiMSwgbikKCSAgICAJbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIub3V0bGluZV9nbG93KHgsIHksIHcsIGgsIHIsIGcsIGIsIGdsb3csIDUsIHJhZGl1cykKICAgICAgICBlbmQpCiAgICB9LAogICAgZWFzZSA9IHsKICAgICAgICBpbl9vdXRfcXVhcnQgPSBmdW5jdGlvbih4KQoKICAgICAgICAgICAgbG9jYWwgc3F0ID0geF4yCiAgICAgICAgICAgIHJldHVybiBzcXQgLyAoMiAqIChzcXQgLSB4KSArIDEpOwogICAgICAgIAogICAgICAgIGVuZAogICAgfQp9CgotLSBOb3RpZnkgbGlicmFyeQoKbG9jYWwgbm90aWZ5ID0gewogICAgbm90aWZpY2F0aW9ucyA9IHsKICAgICAgICBzaWRlID0ge30sCiAgICAgICAgYm90dG9tID0ge30KICAgIH0sCiAgICBtYXggPSB7CiAgICAgICAgc2lkZSA9IDExLAogICAgICAgIGJvdHRvbSA9IDUKICAgIH0KfQoKbm90aWZ5Ll9faW5kZXggPSBub3RpZnkKCmxvY2FsIHdhcm5pbmcgPSBpbWFnZXMuZ2V0X3Bhbm9yYW1hX2ltYWdlKCJpY29ucy91aS93YXJuaW5nLnN2ZyIpCgpsb2NhbCBzY3JlZW5fc2l6ZSA9IGZ1bmN0aW9uKCkKICAgIHJldHVybiB2ZWN0b3IoY2xpZW50LnNjcmVlbl9zaXplKCkpCmVuZAoKbm90aWZ5LnF1ZXVlX2JvdHRvbSA9IGZ1bmN0aW9uKCkKICAgIGlmICNub3RpZnkubm90aWZpY2F0aW9ucy5ib3R0b20gPD0gbm90aWZ5Lm1heC5ib3R0b20gdGhlbgogICAgICAgIHJldHVybiAwCiAgICBlbmQKICAgIHJldHVybiAjbm90aWZ5Lm5vdGlmaWNhdGlvbnMuYm90dG9tIC0gbm90aWZ5Lm1heC5ib3R0b20KZW5kCgpub3RpZnkucXVldWVfc2lkZSA9IGZ1bmN0aW9uKCkKICAgIGlmICNub3RpZnkubm90aWZpY2F0aW9ucy5zaWRlIDw9IG5vdGlmeS5tYXguc2lkZSB0aGVuCiAgICAgICAgcmV0dXJuIDAKICAgIGVuZAogICAgcmV0dXJuICNub3RpZnkubm90aWZpY2F0aW9ucy5zaWRlIC0gbm90aWZ5Lm1heC5zaWRlCmVuZAoKbm90aWZ5LmNsZWFyX2JvdHRvbSA9IGZ1bmN0aW9uKCkKICAgIGZvciBpPTEsIG5vdGlmeS5xdWV1ZV9ib3R0b20oKSBkbwogICAgICAgIHRhYmxlLnJlbW92ZShub3RpZnkubm90aWZpY2F0aW9ucy5ib3R0b20sICNub3RpZnkubm90aWZpY2F0aW9ucy5ib3R0b20pCiAgICBlbmQKZW5kCgpub3RpZnkuY2xlYXJfc2lkZSA9IGZ1bmN0aW9uKCkKICAgIGZvciBpPTEsIG5vdGlmeS5xdWV1ZV9zaWRlKCkgZG8KICAgICAgICB0YWJsZS5yZW1vdmUobm90aWZ5Lm5vdGlmaWNhdGlvbnMuc2lkZSwgI25vdGlmeS5ub3RpZmljYXRpb25zLnNpZGUpCiAgICBlbmQKZW5kCgoKbm90aWZ5Lm5ld19ib3R0b20gPSBmdW5jdGlvbih0aW1lb3V0LCBjb2xvciwgdGl0bGUsIC4uLikKICAgIHRhYmxlLmluc2VydChub3RpZnkubm90aWZpY2F0aW9ucy5ib3R0b20sIHsKICAgICAgICBzdGFydGVkID0gZmFsc2UsCiAgICAgICAgaW5zdGFuY2UgPSBzZXRtZXRhdGFibGUoewogICAgICAgICAgICBbImFjdGl2ZSJdICA9IGZhbHNlLAogICAgICAgICAgICBbInRpbWVvdXQiXSA9IHRpbWVvdXQsCiAgICAgICAgICAgIFsiY29sb3IiXSAgID0geyByID0gY29sb3JbMV0sIGcgPSBjb2xvclsyXSwgYiA9IGNvbG9yWzNdLCBhID0gMCB9LAogICAgICAgICAgICBbIngiXSAgICAgICA9IHNjcmVlbl9zaXplKCkueC8yLAogICAgICAgICAgICBbInkiXSAgICAgICA9IHNjcmVlbl9zaXplKCkueSwKICAgICAgICAgICAgWyJ0ZXh0Il0gICAgPSB7Li4ufSwKICAgICAgICAgICAgWyJ0aXRsZSJdICAgPSB0aXRsZSwKICAgICAgICAgICAgWyJ0eXBlIl0gICAgPSAiYm90dG9tIgogICAgICAgIH0sIG5vdGlmeSkKICAgIH0pCmVuZAoKZnVuY3Rpb24gbm90aWZ5OmhhbmRsZXIoKQoKICAgIGxvY2FsIHNpZGVfY291bnQgPSAwCiAgICBsb2NhbCBzaWRlX3Zpc2libGVfYW1vdW50ID0gMAoKICAgIGZvciBpbmRleCwgbm90aWZpY2F0aW9uIGluIHBhaXJzKG5vdGlmeS5ub3RpZmljYXRpb25zLnNpZGUpIGRvCiAgICAgICAgaWYgbm90IG5vdGlmaWNhdGlvbi5pbnN0YW5jZS5hY3RpdmUgYW5kIG5vdGlmaWNhdGlvbi5zdGFydGVkIHRoZW4KICAgICAgICAgICAgdGFibGUucmVtb3ZlKG5vdGlmeS5ub3RpZmljYXRpb25zLnNpZGUsIGluZGV4KQogICAgICAgIGVuZAogICAgZW5kCgogICAgZm9yIGkgPSAxLCAjbm90aWZ5Lm5vdGlmaWNhdGlvbnMuc2lkZSBkbwogICAgICAgIGlmIG5vdGlmeS5ub3RpZmljYXRpb25zLnNpZGVbaV0uaW5zdGFuY2UuYWN0aXZlIHRoZW4KICAgICAgICAgICAgc2lkZV92aXNpYmxlX2Ftb3VudCA9IHNpZGVfdmlzaWJsZV9hbW91bnQgKyAxCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBmb3IgaW5kZXgsIG5vdGlmaWNhdGlvbiBpbiBwYWlycyhub3RpZnkubm90aWZpY2F0aW9ucy5zaWRlKSBkbwoKICAgICAgICBpZiBpbmRleCA+IG5vdGlmeS5tYXguc2lkZSB0aGVuCiAgICAgICAgICAgIGdvdG8gc2tpcAogICAgICAgIGVuZAogICAgICAgIAogICAgICAgIGlmIG5vdGlmaWNhdGlvbi5pbnN0YW5jZS5hY3RpdmUgdGhlbgogICAgICAgICAgICBub3RpZmljYXRpb24uaW5zdGFuY2U6cmVuZGVyX3NpZGUoc2lkZV9jb3VudCwgc2lkZV92aXNpYmxlX2Ftb3VudCkKICAgICAgICAgICAgc2lkZV9jb3VudCA9IHNpZGVfY291bnQgKyAxCiAgICAgICAgZW5kCgogICAgICAgIGlmIG5vdCBub3RpZmljYXRpb24uc3RhcnRlZCB0aGVuCiAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5pbnN0YW5jZTpzdGFydCgpCiAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5zdGFydGVkID0gdHJ1ZQogICAgICAgIGVuZAoKICAgIGVuZAoKICAgIGxvY2FsIGJvdHRvbV9jb3VudCA9IDAKICAgIGxvY2FsIGJvdHRvbV92aXNpYmxlX2Ftb3VudCA9IDAKCiAgICBmb3IgaW5kZXgsIG5vdGlmaWNhdGlvbiBpbiBwYWlycyhub3RpZnkubm90aWZpY2F0aW9ucy5ib3R0b20pIGRvCiAgICAgICAgaWYgbm90IG5vdGlmaWNhdGlvbi5pbnN0YW5jZS5hY3RpdmUgYW5kIG5vdGlmaWNhdGlvbi5zdGFydGVkIHRoZW4KICAgICAgICAgICAgdGFibGUucmVtb3ZlKG5vdGlmeS5ub3RpZmljYXRpb25zLmJvdHRvbSwgaW5kZXgpCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBmb3IgaSA9IDEsICNub3RpZnkubm90aWZpY2F0aW9ucy5ib3R0b20gZG8KICAgICAgICBpZiBub3RpZnkubm90aWZpY2F0aW9ucy5ib3R0b21baV0uaW5zdGFuY2UuYWN0aXZlIHRoZW4KICAgICAgICAgICAgYm90dG9tX3Zpc2libGVfYW1vdW50ID0gYm90dG9tX3Zpc2libGVfYW1vdW50ICsgMQogICAgICAgIGVuZAogICAgZW5kCgogICAgZm9yIGluZGV4LCBub3RpZmljYXRpb24gaW4gcGFpcnMobm90aWZ5Lm5vdGlmaWNhdGlvbnMuYm90dG9tKSBkbwoKICAgICAgICBpZiBpbmRleCA+IG5vdGlmeS5tYXguYm90dG9tIHRoZW4KICAgICAgICAgICAgZ290byBza2lwCiAgICAgICAgZW5kCiAgICAgICAgCiAgICAgICAgaWYgbm90aWZpY2F0aW9uLmluc3RhbmNlLmFjdGl2ZSB0aGVuCiAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5pbnN0YW5jZTpyZW5kZXJfYm90dG9tKGJvdHRvbV9jb3VudCwgYm90dG9tX3Zpc2libGVfYW1vdW50KQogICAgICAgICAgICBib3R0b21fY291bnQgPSBib3R0b21fY291bnQgKyAxCiAgICAgICAgZW5kCgogICAgICAgIGlmIG5vdCBub3RpZmljYXRpb24uc3RhcnRlZCB0aGVuCiAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5pbnN0YW5jZTpzdGFydCgpCiAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5zdGFydGVkID0gdHJ1ZQogICAgICAgIGVuZAoKICAgIGVuZAoKICAgIDo6c2tpcDo6CmVuZAoKZnVuY3Rpb24gbm90aWZ5OnN0YXJ0KCkKICAgIHNlbGYuYWN0aXZlID0gdHJ1ZQogICAgc2VsZi5kZWxheSA9IGdsb2JhbHMucmVhbHRpbWUoKSArIHNlbGYudGltZW91dAplbmQKCmZ1bmN0aW9uIG5vdGlmeTp3aWR0aCgpCgogICAgbG9jYWwgdyA9IDAKICAgIAogICAgbG9jYWwgdGl0bGVfd2lkdGggPSBsYXZlbmRlci5mdW5jcy5yZW5kZXJlci5tZWFzdXJlX3RleHQoImIiLCBzZWxmLnRpdGxlKS54CiAgICBsb2NhbCB3YXJuaW5nX3gsIHdhcm5pbmdfeSA9IHdhcm5pbmc6bWVhc3VyZShuaWwsIDE1KQoKICAgIGZvciBfLCBsaW5lIGluIHBhaXJzKHNlbGYudGV4dCkgZG8KICAgICAgICBsb2NhbCBsaW5lX3dpZHRoID0gbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIubWVhc3VyZV90ZXh0KCIiLCBsaW5lKS54CiAgICAgICAgdyA9IHcgKyBsaW5lX3dpZHRoICsgMwogICAgZW5kCgogICAgcmV0dXJuIG1hdGgubWF4KHcsIHRpdGxlX3dpZHRoICsgd2FybmluZ194ICsgNSkKZW5kCgpmdW5jdGlvbiBub3RpZnk6cmVuZGVyX3RleHQoeCwgeSkKICAgIGxvY2FsIHhfb2Zmc2V0ID0gMAogICAgbG9jYWwgcGFkZGluZyA9IDMKCiAgICBmb3IgaSwgbGluZSBpbiBwYWlycyhzZWxmLnRleHQpIGRvCiAgICAgICAgaWYgaSAlIDIgfj0gMCB0aGVuCiAgICAgICAgICAgIHIsIGcsIGIgPSAyMjUsIDIyNSwgMjMyCiAgICAgICAgZWxzZQogICAgICAgICAgIHIsIGcsIGIgPSBzZWxmLmNvbG9yLnIsIHNlbGYuY29sb3IuZywgc2VsZi5jb2xvci5iCgogICAgICAgIGVuZAogICAgICAgIHJlbmRlcmVyLnRleHQoeCArIHhfb2Zmc2V0LCB5LCByLCBnLCBiLCBzZWxmLmNvbG9yLmEsICIiLCAwLCBsaW5lKQogICAgICAgIHhfb2Zmc2V0ID0geF9vZmZzZXQgKyBsYXZlbmRlci5mdW5jcy5yZW5kZXJlci5tZWFzdXJlX3RleHQoIiIsIGxpbmUpLnggKyBwYWRkaW5nCiAgICBlbmQKZW5kCgpmdW5jdGlvbiBub3RpZnk6cmVuZGVyX2JvdHRvbShpbmRleCwgdmlzaWJsZV9hbW91bnQpCiAgICBsb2NhbCBzY3JlZW4gPSBzY3JlZW5fc2l6ZSgpCiAgICBsb2NhbCB4LCB5ID0gc2VsZi54IC0gNSwgc2VsZi55IC0gMjAKICAgIGxvY2FsIHBhZGRpbmcgPSAxMAogICAgbG9jYWwgdywgaCA9IHNlbGY6d2lkdGgoKSArIHBhZGRpbmcgKiAyIC0gMiwgNSArIHBhZGRpbmcqIDIKICAgIGxvY2FsIGNvbG91ciA9IHt1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5ub3RpZmljYXRpb25fYWNjZW50KX0KCiAgICBpZiBnbG9iYWxzLnJlYWx0aW1lKCkgPCBzZWxmLmRlbGF5IHRoZW4KICAgICAgICBzZWxmLnkgPSBlYXNlLnF1YWRfaW5fb3V0KDAuNCwgc2VsZi55LCAoKCBzY3JlZW4ueSAtIDUgKSAtICggKHZpc2libGVfYW1vdW50IC0gaW5kZXgpICogaCoxLjQgKSkgLSBzZWxmLnksIDEpCiAgICAgICAgc2VsZi5jb2xvci5hID0gZWFzZS5xdWFkX2luKDAuMTgsIHNlbGYuY29sb3IuYSwgMjU1IC0gc2VsZi5jb2xvci5hLCAxKQogICAgZWxzZQogICAgICAgIHNlbGYueSA9IGVhc2UucXVhZF9pbigwLjMsIHNlbGYueSwgc2NyZWVuLnkgLSBzZWxmLnksIDEpCiAgICAgICAgc2VsZi5jb2xvci5hID0gZWFzZS5xdWFkX291dCgwLjEsIHNlbGYuY29sb3IuYSwgMCAtIHNlbGYuY29sb3IuYSwgMSkKCiAgICAgICAgaWYgc2VsZi5jb2xvci5hIDw9IDIgdGhlbgogICAgICAgICAgICBzZWxmLmFjdGl2ZSA9IGZhbHNlCiAgICAgICAgZW5kCiAgICBlbmQKICAgIAogICAgbG9jYWwgcHJvZ3Jlc3MgPSBtYXRoLm1heCgwLCAoc2VsZi5kZWxheSAtIGdsb2JhbHMucmVhbHRpbWUoKSkgLyBzZWxmLnRpbWVvdXQpCiAgICBsb2NhbCBiYXJfd2lkdGggPSAody0xMCkgKiBwcm9ncmVzcwoKICAgIGxvY2FsIGFuaW1hdGVfdzEgPSBwcm9ncmVzcyAqICh3LzIpID49IGggKiAyIGFuZCBoICogMiBvciBwcm9ncmVzcyAqICh3LzIpCgogICAgbG9jYWwgYW5pbWF0ZV9nbG93X3MgPSBwcm9ncmVzcyAqIDEwMAoKICAgIGxhdmVuZGVyLmZ1bmNzLnJlbmRlcmVyLnJvdW5kZWRfcmVjdGFuZ2xlKHggLSB3LzIsIHksIHcsIGgsIDE5LCAxOSwgMTksIHNlbGYuY29sb3IuYSwgNSkKICAgIGxhdmVuZGVyLmZ1bmNzLnJlbmRlcmVyLnJlY3RhbmdsZV9vdXRsaW5lKHggLSB3LzIsIHksIHcsIGgsIDMyLCAzMiwgMzIsIHNlbGYuY29sb3IuYSwgMiwgMykKICAgIGxhdmVuZGVyLmZ1bmNzLnJlbmRlcmVyLmZhZGVfcm91bmRlZF9yZWN0X25vdGlmKHggLSB3LzIgLSAxLCB5LCB3ICsgMiwgaCwgNSwgc2VsZi5jb2xvci5yLCBzZWxmLmNvbG9yLmcsIHNlbGYuY29sb3IuYiwgMjU1LCBhbmltYXRlX2dsb3dfcyAqIDIsIGFuaW1hdGVfdzEpCiAgICBzZWxmOnJlbmRlcl90ZXh0KHggLSB3LzIgKyBwYWRkaW5nLCB5ICsgaC8yIC0gbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIubWVhc3VyZV90ZXh0KCIiLCB0YWJsZS5jb25jYXQoc2VsZi50ZXh0LCAiICIpKS55LzIpCmVuZAoKLS0gQ29uZmlncyBmdW5jcwoKZnVuY3Rpb24gZ2V0X2NvbmZpZyhuYW1lKQogICAgbG9jYWwgZGF0YWJhc2UgPSBkYXRhYmFzZS5yZWFkKGxhdmVuZGVyLmRhdGFiYXNlLmNvbmZpZ3MpIG9yIHt9CgogICAgZm9yIGksIHYgaW4gcGFpcnMoZGF0YWJhc2UpIGRvCiAgICAgICAgaWYgdi5uYW1lID09IG5hbWUgdGhlbgogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgY29uZmlnID0gdi5jb25maWcsCiAgICAgICAgICAgICAgICBpbmRleCA9IGkKICAgICAgICAgICAgfQogICAgICAgIGVuZAogICAgZW5kCgogICAgZm9yIGksIHYgaW4gcGFpcnMobGF2ZW5kZXIucHJlc2V0cykgZG8KICAgICAgICBpZiB2Lm5hbWUgPT0gbmFtZSB0aGVuCiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBjb25maWcgPSBiYXNlNjQuZGVjb2RlKHYuY29uZmlnKSwKICAgICAgICAgICAgICAgIGluZGV4ID0gaQogICAgICAgICAgICB9CiAgICAgICAgZW5kCiAgICBlbmQKCiAgICByZXR1cm4gZmFsc2UKZW5kCgpmdW5jdGlvbiBzYXZlX2NvbmZpZyhuYW1lKQoKICAgIGxvY2FsIGRiID0gZGF0YWJhc2UucmVhZChsYXZlbmRlci5kYXRhYmFzZS5jb25maWdzKSBvciB7fQogICAgbG9jYWwgY29uZmlnID0ge30KCiAgICBpZiBuYW1lOm1hdGNoKCJbXiV3XSIpIH49IG5pbCB0aGVuCiAgICAgICAgcmV0dXJuCiAgICBlbmQKCiAgICBmb3IgXywgdiBpbiBwYWlycyhsYXZlbmRlci5oYW5kbGVycy51aS5jb25maWcpIGRvCiAgICAgICAgbG9jYWwgdmFsID0gdWkuZ2V0KHYpCgogICAgICAgIGlmIHR5cGUodmFsKSA9PSAidGFibGUiIHRoZW4KICAgICAgICAgICAgaWYgI3ZhbCA+IDAgdGhlbgogICAgICAgICAgICAgICAgdmFsID0gdGFibGUuY29uY2F0KHZhbCwgInwiKQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB2YWwgPSBuaWwKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCgogICAgICAgIHRhYmxlLmluc2VydChjb25maWcsIHRvc3RyaW5nKHZhbCkpCiAgICBlbmQKCiAgICBsb2NhbCBjZmcgPSBnZXRfY29uZmlnKG5hbWUpCgogICAgaWYgbm90IGNmZyB0aGVuCiAgICAgICAgdGFibGUuaW5zZXJ0KGRiLCB7IG5hbWUgPSBuYW1lLCBjb25maWcgPSB0YWJsZS5jb25jYXQoY29uZmlnLCAiOiIpIH0pCiAgICBlbHNlCiAgICAgICAgZGJbY2ZnLmluZGV4XS5jb25maWcgPSB0YWJsZS5jb25jYXQoY29uZmlnLCAiOiIpCiAgICBlbmQKCiAgICBkYXRhYmFzZS53cml0ZShsYXZlbmRlci5kYXRhYmFzZS5jb25maWdzLCBkYikKZW5kCgpmdW5jdGlvbiBkZWxldGVfY29uZmlnKG5hbWUpCiAgICBsb2NhbCBkYiA9IGRhdGFiYXNlLnJlYWQobGF2ZW5kZXIuZGF0YWJhc2UuY29uZmlncykgb3Ige30KCiAgICBmb3IgaSwgdiBpbiBwYWlycyhkYikgZG8KICAgICAgICBpZiB2Lm5hbWUgPT0gbmFtZSB0aGVuCiAgICAgICAgICAgIHRhYmxlLnJlbW92ZShkYiwgaSkKICAgICAgICAgICAgYnJlYWsKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGZvciBpLCB2IGluIHBhaXJzKGxhdmVuZGVyLnByZXNldHMpIGRvCiAgICAgICAgaWYgdi5uYW1lID09IG5hbWUgdGhlbgogICAgICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGRhdGFiYXNlLndyaXRlKGxhdmVuZGVyLmRhdGFiYXNlLmNvbmZpZ3MsIGRiKQplbmQKCmZ1bmN0aW9uIGdldF9jb25maWdfbGlzdCgpCiAgICBsb2NhbCBkYiA9IGRhdGFiYXNlLnJlYWQobGF2ZW5kZXIuZGF0YWJhc2UuY29uZmlncykgb3Ige30KICAgIGxvY2FsIGNvbmZpZyA9IHt9CiAgICBsb2NhbCBwcmVzZXRzID0gbGF2ZW5kZXIucHJlc2V0cwoKICAgIGZvciBpLCB2IGluIHBhaXJzKHByZXNldHMpIGRvCiAgICAgICAgdGFibGUuaW5zZXJ0KGNvbmZpZywgdi5uYW1lKQogICAgZW5kCgogICAgZm9yIGksIHYgaW4gcGFpcnMoZGIpIGRvCiAgICAgICAgdGFibGUuaW5zZXJ0KGNvbmZpZywgdi5uYW1lKQogICAgZW5kCgogICAgcmV0dXJuIGNvbmZpZwplbmQKCmZ1bmN0aW9uIGNvbmZpZ190b3N0cmluZygpCiAgICBsb2NhbCBjb25maWcgPSB7fQogICAgZm9yIF8sIHYgaW4gcGFpcnMobGF2ZW5kZXIuaGFuZGxlcnMudWkuY29uZmlnKSBkbwogICAgICAgIGxvY2FsIHZhbCA9IHVpLmdldCh2KQogICAgICAgIGlmIHR5cGUodmFsKSA9PSAidGFibGUiIHRoZW4KICAgICAgICAgICAgaWYgI3ZhbCA+IDAgdGhlbgogICAgICAgICAgICAgICAgdmFsID0gdGFibGUuY29uY2F0KHZhbCwgInwiKQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICB2YWwgPSBuaWwKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgdGFibGUuaW5zZXJ0KGNvbmZpZywgdG9zdHJpbmcodmFsKSkKICAgIGVuZAoKICAgIHJldHVybiB0YWJsZS5jb25jYXQoY29uZmlnLCAiOiIpCmVuZAoKZnVuY3Rpb24gbG9hZF9zZXR0aW5ncyhjb25maWcpCiAgICBsb2NhbCB0eXBlX2Zyb21fc3RyaW5nID0gZnVuY3Rpb24oaW5wdXQpCiAgICAgICAgaWYgdHlwZShpbnB1dCkgfj0gInN0cmluZyIgdGhlbiByZXR1cm4gaW5wdXQgZW5kCgogICAgICAgIGxvY2FsIHZhbHVlID0gaW5wdXQ6bG93ZXIoKQoKICAgICAgICBpZiB2YWx1ZSA9PSAidHJ1ZSIgdGhlbgogICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgIGVsc2VpZiB2YWx1ZSA9PSAiZmFsc2UiIHRoZW4KICAgICAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgICAgZWxzZWlmIHRvbnVtYmVyKHZhbHVlKSB+PSBuaWwgdGhlbgogICAgICAgICAgICByZXR1cm4gdG9udW1iZXIodmFsdWUpCiAgICAgICAgZWxzZQogICAgICAgICAgICByZXR1cm4gdG9zdHJpbmcoaW5wdXQpCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBjb25maWcgPSBsYXZlbmRlci5mdW5jcy5taXNjLnNwbGl0KGNvbmZpZywgIjoiKQogICAgbG9jYWwgaSA9IDEKCiAgICBmb3IgXywgdiBpbiBwYWlycyhsYXZlbmRlci5oYW5kbGVycy51aS5jb25maWcpIGRvCiAgICAgICAgaWYgc3RyaW5nLmZpbmQoY29uZmlnW2ldLCAifCIpIHRoZW4KICAgICAgICAgICAgbG9jYWwgdmFsdWVzID0gbGF2ZW5kZXIuZnVuY3MubWlzYy5zcGxpdChjb25maWdbaV0sICJ8IikKICAgICAgICAgICAgdWkuc2V0KHYsIHZhbHVlcykKICAgICAgICBlbHNlCiAgICAgICAgICAgIHVpLnNldCh2LCB0eXBlX2Zyb21fc3RyaW5nKGNvbmZpZ1tpXSkpCiAgICAgICAgZW5kCiAgICAgICAgaSA9IGkgKyAxCiAgICBlbmQKZW5kCgoKZnVuY3Rpb24gZXhwb3J0X3NldHRpbmdzKCkKICAgIGxvY2FsIGNvbmZpZyA9IGNvbmZpZ190b3N0cmluZygpCiAgICBsb2NhbCBlbmNvZGVkID0gYmFzZTY0LmVuY29kZShjb25maWcpCiAgICBjbGlwYm9hcmQuc2V0KGVuY29kZWQpCmVuZAoKZnVuY3Rpb24gaW1wb3J0X3NldHRpbmdzKCkKCiAgICBsb2NhbCBjb25maWcgPSBjbGlwYm9hcmQuZ2V0KCkKICAgIGxvY2FsIGRlY29kZWQgPSBiYXNlNjQuZGVjb2RlKGNvbmZpZykKICAgIGxvYWRfc2V0dGluZ3MoZGVjb2RlZCkKZW5kCgpmdW5jdGlvbiBsb2FkX2NvbmZpZyhuYW1lKQogICAgbG9jYWwgY29uZmlnID0gZ2V0X2NvbmZpZyhuYW1lKQogICAgbG9hZF9zZXR0aW5ncyhjb25maWcuY29uZmlnKQoKICAgIGRhdGFiYXNlLndyaXRlKGxhdmVuZGVyLmRhdGFiYXNlLmxhc3RfY29uZmlnLCBuYW1lKQplbmQKCgotLSBVSSBoYW5kbGVyCgpsb2NhbCB1cGRhdGUgPSBmdW5jdGlvbigpCiAgICBmb3IgaywgdiBpbiBwYWlycyhsYXZlbmRlci5oYW5kbGVycy51aS5lbGVtZW50cykgZG8KICAgICAgICBpZiB0eXBlKHYuY29uZGl0aW9uKSA9PSAiZnVuY3Rpb24iIHRoZW4KICAgICAgICAgICAgdWkuc2V0X3Zpc2libGUodi5lbGVtZW50LCB2LmNvbmRpdGlvbigpKQogICAgICAgIGVsc2UKICAgICAgICAgICAgdWkuc2V0X3Zpc2libGUodi5lbGVtZW50LCB2LmNvbmRpdGlvbikKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGNvbmRpdGlvbiwgY29uZmlnLCBjYWxsYmFjaykKICAgIGNvbmRpdGlvbiA9IGNvbmRpdGlvbiBvciB0cnVlCiAgICBjb25maWcgPSBjb25maWcgb3IgZmFsc2UKICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgb3IgZnVuY3Rpb24oKSBlbmQKCiAgICB0YWJsZS5pbnNlcnQobGF2ZW5kZXIuaGFuZGxlcnMudWkuZWxlbWVudHMsIHsgZWxlbWVudCA9IGVsZW1lbnQsIGNvbmRpdGlvbiA9IGNvbmRpdGlvbn0pCgogICAgaWYgY29uZmlnIHRoZW4KICAgICAgICB0YWJsZS5pbnNlcnQobGF2ZW5kZXIuaGFuZGxlcnMudWkuY29uZmlnLCBlbGVtZW50KQogICAgZW5kCgogICAgdWkuc2V0X2NhbGxiYWNrKGVsZW1lbnQsIGZ1bmN0aW9uKHZhbHVlKQogICAgICAgIHVwZGF0ZSgpCiAgICAgICAgY2FsbGJhY2sodmFsdWUpCiAgICBlbmQpCgogICAgdXBkYXRlKCkKCiAgICByZXR1cm4gZWxlbWVudAplbmQKCgotLSBXZWxjb21lIFNjcmVlbgoKZnVuY3Rpb24gc3RhcnR1cCgpCiAgICAtLSBXZWxjb21lIHNjcmVlbgogICAgbG9jYWwgbG9nbyA9IHsKICAgICIgICAgICAgICAgICAgICAgICAgLS06PS0rPT0rKyAgICAgICAgICAgICAgICAgICAgICAiLAogICAgIiAgICAgICAgICAgICAgICAgICAtPTorLj0tICArOiAqICAgICAgICAgICAgICAgICAgICIsCiAgICAiICAgICAgICAgICAgICAgICAgID0tICouID0tID0tLiouICAgICAgICAgICAgICAgICAgIiwKICAgICIgICAgICAgICAgICAgICAtKy0tLSAgLS0uKi0tLT0lICAgICAgICAgICAgICAgICAgICAiLAogICAgIiAgICAgICAgICAgICAgIDorICAgICArLSogICA9PS4gICAgICAgICAgICAgICAgICAgICIsCiAgICAiICAgICAgICAgICAgICAtKz0gICAgOiUrICAgLisuICAgICAgICAgICAgICAgICAgICAgIiwKICAgICIgICAgICAgICAgICAgKzouKi0tIDoqPSsgIDo9PS4gICAgICAgICAgICAgICAgICAgICAiLAogICAgIiAgICAgICAgICAgID0tIC4qIDoqPSAgIyArOiAgICAgICAgICAgICAgICAgICAgICAgICIsCiAgICAiICAgICAgICAgICAgIyAgPTogICMgICAjPSsuICAgICAgICAgICAgICAgICAgICAgICAgIiwKICAgICIgICAgICAgICAgIC4jLiAqICAgIy0uICMgLiAgICAgICAgICAgICAgICAgICAgICAgICAiLAogICAgIiAgICAgICA6LS0rLSsjKi4uKy0uOj0tKjogICAgICAgICAgICAgICAgICAgICAgICAgICIsCiAgICAiICAgICAgICMgIy46Ky4rKyogICAqKzouIyAgICAgICAgICAgICAgICAgICAgICAgICAgIiwKICAgICIgICAgLS09Lj0tICogICA6KiAgKzogOisuICAgICAgICAgICAgICAgICAgICAgICAgICAiLAogICAgIiAgICAjICAgKi49LSAgICMgLSsgICArLiAgICAgICAgICAgICAgICAgICAgICAgICAgICIsCiAgICAiICAuPSMgICAqKyMgIDo9KyotIC46LSs6ICAgICAgICAgICAgICAgICAgICAgICAgICAgIiwKICAgICIgID06OisuKi4qKi4rOiAgLSo9PS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLAogICAgIiAgOj0gLiU6IDojKiAgIC0rLTorOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIsCiAgICAiICAgIyAgOisgICMgIDorLiAuPSs9KiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiwKICAgICIgLSsgICAgKiAgKiAtPSAgPS0gICs6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLAogICAgIiAjICAgICAtPToqKysgID0tICAgKi4gICAgICAgICBXZWxjb21lIHRvIExhdmVuZGVyLCAiIC4uIHVzZXJuYW1lLAogICAgIiA6PS06PT0rJT0gICM9PSogICA6KzogICAgICAgICBZb3UgaGF2ZSwgIiAuLiBidWlsZCAuLiAiIGFjY2Vzcy4iLAogICAgIiAgICAtKyAgKjogKi4gLio9PT0rICAgICAgICAgICB2ZXJzaW9uIGxvYWRlZDogIiAuLiB2ZXJzaW9uLAogICAgIiAgKy0qLSAgICMuKyAgICouICAjICAgICAgICAgICBBbnkgcXVlc3Rpb25zIG9yIGlzc3VlcywgQ3JlYXRlIGEgdGlja2V0IHZpYSBvdXIgRGlzY29yZCIsCiAgICAiIDo9IC4qICAgKj0qICA6KyAgICogICAgICAgICAgIGRpc2NvcmQuZ2cvYW50aWFpbSAgIiwKICAgICIgICogIC4qICs6IC4qKz0rICA9LSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLAogICAgIiAgLiogOistKj0gICouICouLSM6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIsCiAgICAiICAgICsrPSAgListKyAgKj0uICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiwKICAgICIgICAgPSoqOiAgICo9LisuICA6PS49LiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLAogICAgIiAgICAqICAuLT09Ki0jOiAgLiMrLS0tICAgICAgICAgICAgICAgICAgICAgICAgICAgICIsCiAgICAiICAgIC4qLiAgIDorICAtPTojPSAgKy4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIiwKICAgICIgICAgICA9PS06OiMgICAuIyAgIDorICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLAogICAgIiAgICAgIDotPSsrKyogICArOiA9LSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIsCiAgICAiICAgICAgPT0gICAgICs6IC4qKi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiwKICAgICIgICAgICAgLj09LS4uLioqOis9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLAogICAgIiAgICAgICAgICAgOjouICA6IyMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIsCiAgICAiICAgICAgICAgICAgICAgICAuJSsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiwKICAgICIgICAgICAgICAgICAgICAgICAtQD0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiLAogICAgIiAgICAgICAgICAgICAgICAgICA9QCsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIsCiAgICAiICAgICAgICAgICAgICAgICAgICAtQCMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiwKICAgICIgICAgICAgICAgICAgICAgICAgICA6JSUtICAgICAgICAgICAgICAgICAgICAgICAgICAiLAogICAgIiAgICAgICAgICAgICAgICAgICAgICAuKkAqLiAgICAgICAgICAgICAgICAgICAgICAgICIsCiAgICAiICAgICAgICAgICAgICAgICAgICAgICAgLSUlPSAgICAgICAgICAgICAgICAgICAgICAgIiwKICAgICIgICAgICAgICAgICAgICAgICAgICAgICAgID0lJT0gICAgICAgICAgICAgICAgICAgICAiLAogICAgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IyUrLiAgICAgICAgICAgICAgICAgICIsCiAgICAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiolKi0gICAgICAgICAgICAgICAgIiwKICAgICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtKiUrOiAgICAgICAgICAgICAiLAogICAgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0qJSotLiAgICAgICAgICIsCiAgICAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOisjJSstLiAgICAgIiwKICAgICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSsjJSMrLS4iCiAgICAgCiAgICAgICAgICAgCiAgICB9CiAgICBjbGllbnQuZXhlYygiY2xlYXIiKQogICAgZm9yIF8sIGxpbmUgaW4gcGFpcnMobG9nbykgZG8KICAgICAgICBjbGllbnQuY29sb3JfbG9nKDE4NSwgMTkwLCAyNTUsIGxpbmUpCiAgICBlbmQKCiAgICAtLSBQcmVwYXJlIEFBCiAgICBsYXZlbmRlci5mdW5jcy5hYS5yZXNldCh0cnVlKQplbmQKc3RhcnR1cCgpCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJwb3N0X2NvbmZpZ19sb2FkIiwgZnVuY3Rpb24oKQogICAgbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPSAiSE9NRSIKZW5kKQoKLS0gcmVwbGFjZSBvdGhlciB0YWIKbGF2ZW5kZXIudWkuc2xvd21vdGlvbiA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY2hlY2tib3goIkFBIiwgIkZha2UgbGFnIiwgIlNsb3cgbW90aW9uIikpCmxhdmVuZGVyLnVpLnNsb3dtb3Rpb25rZXkgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2hvdGtleSgiQUEiLCAiRmFrZSBsYWciLCAiU2xvdyBtb3Rpb24iLCB0cnVlLCAwKSkKbGF2ZW5kZXIudWkub25zaG90YWEgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NoZWNrYm94KCJBQSIsICJGYWtlIGxhZyIsICJcYWI2YjY2NWZmT24gc2hvdCBhbnRpLWFpbSIpKQpsYXZlbmRlci51aS5vbnNob3RhYWtleSA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfaG90a2V5KCJBQSIsICJGYWtlIGxhZyIsICJcYWI2YjY2NWZmT24gc2hvdCBhbnRpLWFpbSIsIHRydWUsIDApKQpsYXZlbmRlci51aS5mYWtlcGVlayA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY2hlY2tib3goIkFBIiwgIkZha2UgbGFnIiwgIlxhYjZiNjY1ZmZGYWtlIHBlZWsiKSkKbGF2ZW5kZXIudWkuZmFrZXBlZWtrZXkgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2hvdGtleSgiQUEiLCAiRmFrZSBsYWciLCAiXGFiNmI2NjVmZkZha2UgcGVlayIsIHRydWUsIDApKQoKCgpsYXZlbmRlci5jdXJyZW50X3N0YXRlID0gbGF2ZW5kZXIuY3VycmVudF9zdGF0ZSA9PSBuaWwgYW5kICJERUZBVUxUIiBvciBsYXZlbmRlci5jdXJyZW50X3N0YXRlOnVwcGVyKCkKCmxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID0gIkhPTUUiCgpsYXZlbmRlci51aS50YWJfdmlzdWFsaXplID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19sYWJlbCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIiAiKSkKCi0tIEFuaW1hdGVkIE1haW4gVGV4dApsYXZlbmRlci5oYW5kbGVycy5jb250cm9sX2FuaW1hdGlvbl9tYWluID0gZnVuY3Rpb24oKQogICAgaWYgbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkFOVElBSU0iIHRoZW4KICAgICAgICBjdXJfdGFiID0gImFudGktYWltIgoKICAgIGVsc2VpZiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiTUlTQyIgdGhlbgogICAgICAgIGN1cl90YWIgPSAibWlzY2VsbGFuZW91cyIKCiAgICBlbHNlaWYgbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkNPTkZJR1MiIHRoZW4KICAgICAgICBjdXJfdGFiID0gImNvbmZpZ3VyYXRpb25zIgogICAgZWxzZQogICAgICAgIGN1cl90YWIgPSBsYXZlbmRlci51aS5jdXJyZW50X3RhYjpsb3dlcigpCiAgICBlbmQKCiAgICBpZiBub3QgdWkuaXNfbWVudV9vcGVuKCkgdGhlbgogICAgICAgIHJldHVybiBlbmQKICAgIGxvY2FsIGNvbG91ciA9IHsxODUsIDE5MCwgMjU1fQogICAgaWYgbGF2ZW5kZXIudWkuY3VycmVudF90YWIgfj0gIkhPTUUiIHRoZW4KICAgICAgICB1aS5zZXQobGF2ZW5kZXIudWkudGFiX3Zpc3VhbGl6ZSwgbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIuY29sb3VyX3RleHRfbWVudSgi4oCiICIpIC4uICJzZWxlY3RlZCB0YWI6ICIgLi4gbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIudHdvX2dyYWRpZW50X3RleHQoY3VyX3RhYiwgY29sb3VyWzFdLCBjb2xvdXJbMl0sIGNvbG91clszXSwgMTUpKQogICAgZWxzZQogICAgICAgIHVpLnNldChsYXZlbmRlci51aS50YWJfdmlzdWFsaXplLCBsYXZlbmRlci5mdW5jcy5yZW5kZXJlci5jb2xvdXJfdGV4dF9tZW51KCLigKIgIikgLi4gIndlbGNvbWUgdG8gIiAuLiBsYXZlbmRlci5mdW5jcy5yZW5kZXJlci50d29fZ3JhZGllbnRfdGV4dCgibGF2ZW5kZXIucHViIiwgY29sb3VyWzFdLCBjb2xvdXJbMl0sIGNvbG91clszXSwgNikpCiAgICBlbmQKZW5kCgpsYXZlbmRlci51aS50YWIubWFpbl9iYXJfMSA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfbGFiZWwoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICJcYTlGOUY5RjZC4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6vIikpCgotLSByZXBsYWNlIG90aGVyIHdpdGggZGV0YWlscwpsYXZlbmRlci51aS50YWIuZGV0YWlsc190eHQgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2xhYmVsKCJBQSIsICJPdGhlciIsICJcYUI5QkVGRkZG4oCiIFxhQ0RDRENERkYiIC4uIHVzZXJuYW1lIC4uICIncyBcYUI5QkVGRkZGZGV0YWlscyIpKQoKbGF2ZW5kZXIudWkudGFiLmRldGFpbHNfYmFyID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19sYWJlbCgiQUEiLCAiT3RoZXIiLCAiXGE5RjlGOUY2QuKOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOryIpKQpsYXZlbmRlci51aS50YWIuZGV0YWlsc19sb2FkY291bnQgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2xhYmVsKCJBQSIsICJPdGhlciIsICJuaWwiKSkKbGF2ZW5kZXIudWkudGFiLmRldGFpbHNfdmVyc2lvbiA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfbGFiZWwoIkFBIiwgIk90aGVyIiwgIlxhOUY5RjlGNkJ2ZXJzaW9uOiBcYUI5QkVGRkZGIiAuLiB2ZXJzaW9uKSkKbGF2ZW5kZXIudWkudGFiLmRldGFpbHNfYnVpbGQgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2xhYmVsKCJBQSIsICJPdGhlciIsICJcYTlGOUY5RjZCYnVpbGQ6IFxhQjlCRUZGRkYiIC4uIGJ1aWxkKSkKCi0tIE1haW4gVUkgQnV0dG9ubnMKLS0gYjliZWZmCmxhdmVuZGVyLnVpLnRhYi5hbnRpYWltID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19idXR0b24oIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLogXGFCOUJFRkZGRmFudGktYWltXGFDRENEQ0RGRiDigLkiLCBmdW5jdGlvbigpIGVuZCksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJIT01FIiBlbmQpCmxhdmVuZGVyLnVpLnRhYi52aXN1YWxzID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19idXR0b24oIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLogXGFCOUJFRkZGRnZpc3VhbHNcYUNEQ0RDREZGIOKAuSIsIGZ1bmN0aW9uKCkgZW5kKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkhPTUUiIGVuZCkKbGF2ZW5kZXIudWkudGFiLm1pc2MgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2J1dHRvbigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuiBcYUI5QkVGRkZGbWlzY1xhQ0RDRENERkYg4oC5IiwgZnVuY3Rpb24oKSBlbmQpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiSE9NRSIgZW5kKQpsYXZlbmRlci51aS50YWIuY29uZmlncyA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfYnV0dG9uKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC6IFxhQjlCRUZGRkZjb25maWdzXGFDRENEQ0RGRiDigLkiLCBmdW5jdGlvbigpIGVuZCksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJIT01FIiBlbmQpCmxhdmVuZGVyLnVpLnRhYi5hbHBoYSA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfYnV0dG9uKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC6IFxhQjlCRUZGRkZhbHBoYVxhQ0RDRENERkYg4oC5IiwgZnVuY3Rpb24oKSBlbmQpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiSE9NRSIgYW5kIChidWlsZCA9PSAiYWxwaGEiIG9yIG5vdCBvYmV4X2ZldGNoKSBlbmQpCmxhdmVuZGVyLnVpLnRhYi5wcml2YXRlID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19idXR0b24oIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLogXGFCOUJFRkZGRnByaXZhdGVcYUNEQ0RDREZGIOKAuSIsIGZ1bmN0aW9uKCkgZW5kKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkhPTUUiIGFuZCAoYnVpbGQgPT0gInByaXZhdGUiIG9yIG5vdCBvYmV4X2ZldGNoKSBlbmQpCmxhdmVuZGVyLnVpLnRhYi5ob21lID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19idXR0b24oIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLogXGFCOUJFRkZGRnJldHVybiBob21lXGFDRENEQ0RGRiDigLkiLCBmdW5jdGlvbigpIGVuZCksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiIH49ICJIT01FIiBlbmQpCmxhdmVuZGVyLnVpLnRhYi5tYWluX2Jhcl8yID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19sYWJlbCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIlxhOUY5RjlGNkLijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq8iKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgfj0gIkhPTUUiIGVuZCkKCgotLSBCdXR0b24gQ29udHJvbGxlcgoKZm9yIGksIHYgaW4gcGFpcnMobGF2ZW5kZXIudWkudGFiKSBkbwogICAgdWkuc2V0X2NhbGxiYWNrKHYsIGZ1bmN0aW9uKCkKICAgICAgICBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9IGk6dXBwZXIoKQoJCXVwZGF0ZSgpCiAgICBlbmQpCmVuZAoKCi0tIFVJIEVsZW1lbnRzCgotLSBBbnRpIEFpbQoKLS1sYXZlbmRlci51aS5hYS5zZWxlY3Rpb24gPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbWJvYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC64oC6IFxhQjlCRUZGRkZhbnRpIGFpbSBzZWxlY3Rpb24iLCB7ImFudGkgYWltIGJ1aWxkZXIiLCAiYW50aSBicnV0ZSBidWlsZGVyIiwgImV4cGxvaXRzIn0pLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiQU5USUFJTSIgZW5kKQpsYXZlbmRlci51aS5hYS5zZWxlY3Rpb24gPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbWJvYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC64oC6IFxhQjlCRUZGRkZhbnRpIGFpbSBzZWxlY3Rpb24iLCB7InN0YXRlIGJ1aWxkZXIiLCAiYW50aS1icnV0ZWZvcmNlIiwgImV4dHJhIn0pLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiQU5USUFJTSIgZW5kKQoKbGF2ZW5kZXIudWkuYWEuc3RhdGUgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbWJvYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC5XGFCOUJFRkZGRmJ1aWxkZXJcYUNEQ0RDREZG4oC6IHBsYXllciBcYUI5QkVGRkZGc3RhdGUiLCBsYXZlbmRlci5hbnRpYWltLnN0YXRlcyksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJBTlRJQUlNIiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnNlbGVjdGlvbikgPT0gInN0YXRlIGJ1aWxkZXIiIGVuZCkKCmZvciBrLCB2IGluIHBhaXJzKGxhdmVuZGVyLmFudGlhaW0uc3RhdGVzKSBkbwogICAgbGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdID0ge30KCiAgICBpZiB2IH49ICJnbG9iYWwiIHRoZW4KICAgICAgICBsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0ubWFzdGVyID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jaGVja2JveCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuVxhQjlCRUZGRkZlbmFibGVcYUNEQ0RDREZG4oC6ICIgLi4gdiwgZmFsc2UpLCBmdW5jdGlvbigpCiAgICAgICAgICAgICByZXR1cm4gdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlKSA9PSB2IGFuZCBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiQU5USUFJTSIgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zZWxlY3Rpb24pID09ICJzdGF0ZSBidWlsZGVyIgogICAgICAgIGVuZCwgdHJ1ZSkKICAgIGVuZAoKICAgIGxvY2FsIHNob3cgPSBmdW5jdGlvbigpIHJldHVybiB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGUpID09IHYgYW5kIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJBTlRJQUlNIiBhbmQgKHYgPT0gImdsb2JhbCIgYW5kIHRydWUgb3IgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS5tYXN0ZXIpKSBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnNlbGVjdGlvbikgPT0gInN0YXRlIGJ1aWxkZXIiIGVuZAoKICAgIGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS5waXRjaCAgICAgICAgICAgICAgICAgID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jb21ib2JveCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgICLigLlcYUI5QkVGRkZGIiAuLiB2IC4uICAiXGFDRENEQ0RGRuKAuiBwaXRjaCIsIHsib2ZmIiwgImRlZmF1bHQiLCAidXAiLCAiZG93biIsICJtaW5pbWFsIiwgInJhbmRvbSJ9KSwgZnVuY3Rpb24oKSByZXR1cm4gc2hvdygpIGVuZCwgdHJ1ZSkKICAgIGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS55YXdfYmFzZSAgICAgICAgICAgICAgID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jb21ib2JveCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgICLigLlcYUI5QkVGRkZGIiAuLiB2IC4uICAiXGFDRENEQ0RGRuKAuiB5YXcgXGFCOUJFRkZGRmJhc2UiLCB7ImxvY2FsIHZpZXciLCAiYXQgdGFyZ2V0cyJ9KSwgZnVuY3Rpb24oKSByZXR1cm4gc2hvdygpIGVuZCwgdHJ1ZSkKICAgIGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS55YXcgICAgICAgICAgICAgICAgICAgID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jb21ib2JveCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgICLigLlcYUI5QkVGRkZGIiAuLiB2IC4uICAiXGFDRENEQ0RGRuKAuiB5YXciLCB7Im9mZiIsICIxODAiLCAic3BpbiIsICJzdGF0aWMiLCAiMTgwIHoiLCAiY3Jvc3NoYWlyIn0pLCBmdW5jdGlvbigpIHJldHVybiBzaG93KCkgZW5kLCB0cnVlKQogICAgbGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLmppdHRlcl90eXBlICAgICAgICAgICAgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbWJvYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAgIuKAuVxhQjlCRUZGRkYiIC4uIHYgLi4gICJcYUNEQ0RDREZG4oC6IGppdHRlciB0eXBlIiwgeyJkZWZhdWx0IiwgImRlbGF5ZWQiLCAiZmxpY2sifSksIGZ1bmN0aW9uKCkgcmV0dXJuIHNob3coKSBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS55YXcpIH49ICJvZmYiIGVuZCwgdHJ1ZSkKICAgIGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS55YXdfaml0dGVyX3NwZWVkICAgICAgID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KCAgdWkubmV3X3NsaWRlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgICLigLlcYUI5QkVGRkZGIiAuLiB2IC4uICAiXGFDRENEQ0RGRuKAuiB5YXcgaml0dGVyIFxhQjlCRUZGRkZzcGVlZCIsIDIsIDIwLCAyLCB0cnVlLCAidCIpLCBmdW5jdGlvbigpIHJldHVybiBzaG93KCkgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0ueWF3KSB+PSAib2ZmIiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS5qaXR0ZXJfdHlwZSkgPT0gImRlbGF5ZWQiIGVuZCwgdHJ1ZSkKICAgIGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS5mbGlja19zcGVlZCAgICAgICAgICAgID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KCAgdWkubmV3X3NsaWRlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgICLigLlcYUI5QkVGRkZGIiAuLiB2IC4uICAiXGFDRENEQ0RGRuKAuiB5YXcgZmxpY2sgXGFCOUJFRkZGRm11bHRpcGxpZXIiLCAxLCAzLCAxLCB0cnVlLCAiIiwgMSwge1sxXSA9ICIzeCIsIFsyXSA9ICIyeCIsIFszXSA9ICIxeCJ9KSwgZnVuY3Rpb24oKSByZXR1cm4gc2hvdygpIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLnlhdykgfj0gIm9mZiIgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0uaml0dGVyX3R5cGUpID09ICJmbGljayIgZW5kLCB0cnVlKQogCiAgICBsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0ueWF3X3R5cGUgICAgICAgICAgICAgICA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyggIHVpLm5ld19jb21ib2JveCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuVxhQjlCRUZGRkYiIC4uIHYgLi4gICJcYUNEQ0RDREZG4oC6IHlhdyBcYUI5QkVGRkZGdHlwZSIsIHsic3RhdGljIiwgImppdHRlciJ9KSwgZnVuY3Rpb24oKSByZXR1cm4gc2hvdygpIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLnlhdykgfj0gIm9mZiIgYW5kICh1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLmppdHRlcl90eXBlKSA9PSAiZGVmYXVsdCIpIGVuZCwgdHJ1ZSkKICAgIGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS55YXdfb2Zmc2V0X2xlZnQgICAgICAgID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KCAgdWkubmV3X3NsaWRlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgICLigLlcYUI5QkVGRkZGIiAuLiB2IC4uICAiXGFDRENEQ0RGRuKAuiB5YXcgb2Zmc2V0IFxhQjlCRUZGRkZsZWZ0IiwgLTE4MCwgMTgwLCAwLCB0cnVlLCAiwrAiKSwgZnVuY3Rpb24oKSByZXR1cm4gc2hvdygpIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLnlhdykgfj0gIm9mZiIgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0uaml0dGVyX3R5cGUpIH49ICJmbGljayIgYW5kICh1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLnlhd190eXBlKSA9PSAiaml0dGVyIiBvciB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLmppdHRlcl90eXBlKSA9PSAiZGVsYXllZCIgb3IgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS55YXdfdHlwZSkgPT0gInN5bmNocm9uaXplZCIpIGVuZCwgdHJ1ZSkKICAgIGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS55YXdfb2Zmc2V0X3JpZ2h0ICAgICAgID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KCAgdWkubmV3X3NsaWRlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgICLigLlcYUI5QkVGRkZGIiAuLiB2IC4uICAiXGFDRENEQ0RGRuKAuiB5YXcgb2Zmc2V0IFxhQjlCRUZGRkZyaWdodCIsIC0xODAsIDE4MCwgMCwgdHJ1ZSwgIsKwIiksIGZ1bmN0aW9uKCkgcmV0dXJuIHNob3coKSBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS55YXcpIH49ICJvZmYiIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLmppdHRlcl90eXBlKSB+PSAiZmxpY2siIGFuZCAodWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS55YXdfdHlwZSkgPT0gImppdHRlciIgb3IgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS5qaXR0ZXJfdHlwZSkgPT0gImRlbGF5ZWQiIG9yIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0ueWF3X3R5cGUpID09ICJzeW5jaHJvbml6ZWQiKSBlbmQsIHRydWUpCiAgICBsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0ueWF3X29mZnNldF9mbGlja19yaWdodCA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyggIHVpLm5ld19zbGlkZXIoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICAi4oC5XGFCOUJFRkZGRiIgLi4gdiAuLiAgIlxhQ0RDRENERkbigLogeWF3IG9mZnNldCBmbGlja1xhQjlCRUZGRkYgcmlnaHQiLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIpLCBmdW5jdGlvbigpIHJldHVybiBzaG93KCkgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0ueWF3KSB+PSAib2ZmIiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS5qaXR0ZXJfdHlwZSkgPT0gImZsaWNrIiBlbmQsIHRydWUpCiAgICBsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0ueWF3X29mZnNldF9mbGlja19sZWZ0ICA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyggIHVpLm5ld19zbGlkZXIoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICAi4oC5XGFCOUJFRkZGRiIgLi4gdiAuLiAgIlxhQ0RDRENERkbigLogeWF3IG9mZnNldCBmbGlja1xhQjlCRUZGRkYgbGVmdCIsIC0xODAsIDE4MCwgMCwgdHJ1ZSwgIsKwIiksIGZ1bmN0aW9uKCkgcmV0dXJuIHNob3coKSBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS55YXcpIH49ICJvZmYiIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLmppdHRlcl90eXBlKSA9PSAiZmxpY2siIGVuZCwgdHJ1ZSkKIAogICAgbGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLnlhd19vZmZzZXRfYmFzZSAgICAgICAgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcoICB1aS5uZXdfc2xpZGVyKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAgIuKAuVxhQjlCRUZGRkYiIC4uIHYgLi4gICJcYUNEQ0RDREZG4oC6IHlhdyBvZmZzZXQgXGFCOUJFRkZGRmJhc2UiLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIpLCBmdW5jdGlvbigpIHJldHVybiBzaG93KCkgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0ueWF3KSB+PSAib2ZmIiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS5qaXR0ZXJfdHlwZSkgPT0gImZsaWNrIiBlbmQsIHRydWUpCiAgICBsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0ueWF3X29mZnNldF9zdGF0aWMgICAgICA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyggIHVpLm5ld19zbGlkZXIoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICAi4oC5XGFCOUJFRkZGRiIgLi4gdiAuLiAgIlxhQ0RDRENERkbigLogeWF3IG9mZnNldCBcYUI5QkVGRkZGc3RhdGljIiwgLTE4MCwgMTgwLCAwLCB0cnVlLCAiwrAiKSwgZnVuY3Rpb24oKSByZXR1cm4gc2hvdygpIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLnlhdykgfj0gIm9mZiIgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0ueWF3X3R5cGUpID09ICJzdGF0aWMiIGFuZCAodWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS5qaXR0ZXJfdHlwZSkgPT0gImRlZmF1bHQiKSBlbmQsIHRydWUpCiAgICAgCiAgICBsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0ueWF3X2ppdHRlciAgICAgICAgICAgICA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29tYm9ib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICAi4oC5XGFCOUJFRkZGRiIgLi4gdiAuLiAgIlxhQ0RDRENERkbigLogeWF3IFxhQjlCRUZGRkZqaXR0ZXIiLCB7Im9mZiIsICJvZmZzZXQiLCAiY2VudGVyIiwgInJhbmRvbSIsICJza2l0dGVyIn0pLCBmdW5jdGlvbigpIHJldHVybiBzaG93KCkgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0uaml0dGVyX3R5cGUpIH49ICJkZWxheWVkIiBlbmQsIHRydWUpCiAgICBsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0ueWF3X2ppdHRlcl9kICAgICAgICAgICA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29tYm9ib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICAi4oC5XGFCOUJFRkZGRiIgLi4gdiAuLiAgIlxhQ0RDRENERkbigLogeWF3IFxhQjlCRUZGRkZqaXR0ZXIgZGVsYXllZCIsIHsib2Zmc2V0IiwgImNlbnRlciJ9KSwgZnVuY3Rpb24oKSByZXR1cm4gc2hvdygpIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLmppdHRlcl90eXBlKSA9PSAiZGVsYXllZCIgZW5kLCB0cnVlKQoKCiAgICBsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0ueWF3X2ppdHRlcl9vZmZzZXQgICAgICA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyggIHVpLm5ld19zbGlkZXIoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICJcbiIgLi4gdiAuLiAiIC0geWF3IGppdHRlciIsIC0xODAsIDE4MCwgMCwgdHJ1ZSwgIsKwIiksIGZ1bmN0aW9uKCkgcmV0dXJuIHNob3coKSBhbmQgKHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0ueWF3X2ppdHRlcikgfj0gIm9mZiIgb3IgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS55YXdfaml0dGVyX2QpID09ICJjZW50ZXIiIG9yIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0ueWF3X2ppdHRlcl9kKSA9PSAib2Zmc2V0IikgZW5kLCB0cnVlKQogICAgbGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLmJvZHlfeWF3ICAgICAgICAgICAgICAgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbWJvYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAgIuKAuVxhQjlCRUZGRkYiIC4uIHYgLi4gICJcYUNEQ0RDREZG4oC6IGJvZHkgXGFCOUJFRkZGRnlhdyIsIHsib2ZmIiwgIm9wcG9zaXRlIiwgImppdHRlciIsICJzdGF0aWMifSksIGZ1bmN0aW9uKCkgcmV0dXJuIHNob3coKSBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS5qaXR0ZXJfdHlwZSkgfj0gImRlbGF5ZWQiIGVuZCwgdHJ1ZSkKICAgIGxhdmVuZGVyLnVpLmFhLnN0YXRlc1t2XS5ib2R5X3lhd19vZmZzZXQgICAgICAgID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3ICAodWkubmV3X3NsaWRlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIlxuIiAuLiB2IC4uICIgLSBib2R5IHlhdyBvZmZzZXQiLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIpLCBmdW5jdGlvbigpIHJldHVybiBzaG93KCkgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbdl0uYm9keV95YXcpIH49ICJvZmYiIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLmJvZHlfeWF3KSB+PSAib3Bwb3NpdGUiIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLmppdHRlcl90eXBlKSB+PSAiZGVsYXllZCIgZW5kLCB0cnVlKQogICAgbGF2ZW5kZXIudWkuYWEuc3RhdGVzW3ZdLmZvcmNlX2RlZmVuc2l2ZSAgICAgICAgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NoZWNrYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC5XGFCOUJFRkZGRiIgLi4gdiAuLiAgIlxhQ0RDRENERkbigLogZm9yY2UgXGFCOUJFRkZGRmRlZmVuc2l2ZSIpLCBmdW5jdGlvbigpIHJldHVybiBzaG93KCkgZW5kKQplbmQKCi0tIEFudGkgQnJ1dGUgYnVpbGRlcgoKbG9jYWwgc3RhZ2VzID0geyAiMSIsICIyIiwgIjMiIH0KbGF2ZW5kZXIudWkuYWEuYW50aWJydXRlX21hc3RlciA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY2hlY2tib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLlcYUI5QkVGRkZGYW50aSBicnV0ZVxhQ0RDRENERkbigLogbWFzdGVyIiksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJBTlRJQUlNIiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnNlbGVjdGlvbikgPT0gImFudGktYnJ1dGVmb3JjZSIgZW5kLCB0cnVlKQpsYXZlbmRlci51aS5hYS5yZXNldF9jb25kaXRpb25zID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19tdWx0aXNlbGVjdCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuVxhQjlCRUZGRkZhbnRpIGJydXRlXGFDRENEQ0RGRuKAuiByZXNldCBjb25kaXRpb25zIiwgInRpbWVvdXQiLCAiaGVhZHNob3QiLCAicm91bmQgc3RhcnQiLCAiZGVhdGgiKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkFOVElBSU0iIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc2VsZWN0aW9uKSA9PSAiYW50aS1icnV0ZWZvcmNlIiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLmFudGlicnV0ZV9tYXN0ZXIpIGVuZCwgdHJ1ZSkKbGF2ZW5kZXIudWkuYWEucmVzZXRfdGltZXIgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X3NsaWRlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuuKAuiBcYUI5QkVGRkZGdGltZW91dCIsIDEsIDEwLCA1LCB0cnVlLCAicyIpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiQU5USUFJTSIgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zZWxlY3Rpb24pID09ICJhbnRpLWJydXRlZm9yY2UiIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuYW50aWJydXRlX21hc3RlcikgYW5kIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnJlc2V0X2NvbmRpdGlvbnMpLCAidGltZW91dCIpIGVuZCwgdHJ1ZSkKbGF2ZW5kZXIudWkuYWEuc3RhZ2UgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbWJvYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC5XGFCOUJFRkZGRmFudGkgYnJ1dGVcYUNEQ0RDREZG4oC6IHN0YWdlIiwgc3RhZ2VzKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkFOVElBSU0iIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc2VsZWN0aW9uKSA9PSAiYW50aS1icnV0ZWZvcmNlIiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLmFudGlicnV0ZV9tYXN0ZXIpIGVuZCkKbGF2ZW5kZXIudWkuYWEucHJldmlld19zdGFnZSA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29tYm9ib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLlcYUI5QkVGRkZGYW50aSBicnV0ZVxhQ0RDRENERkbigLogZm9yY2Ugc3RhZ2UiLCAibm9uZSIsICIxIiwgIjIiLCAiMyIpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiQU5USUFJTSIgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zZWxlY3Rpb24pID09ICJhbnRpLWJydXRlZm9yY2UiIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuYW50aWJydXRlX21hc3RlcikgZW5kLCB0cnVlKQpsYXZlbmRlci51aS5hYS5hbnRpYnJ1dGVfZGlzYWJsZXJzID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19tdWx0aXNlbGVjdCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuVxhQjlCRUZGRkZhbnRpIGJydXRlXGFDRENEQ0RGRuKAuiBkaXNhYmxlIG9uIiwgInN0YW5kaW5nIiwgIm1vdmluZyIsICJkdWNraW5nIiwgImFpciIsICJhaXIgZHVjayIsICJzbG93d2FsayIsICJ1c2UiKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkFOVElBSU0iIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc2VsZWN0aW9uKSA9PSAiYW50aS1icnV0ZWZvcmNlIiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLmFudGlicnV0ZV9tYXN0ZXIpIGVuZCwgdHJ1ZSkKCmxvY2FsIHN0YWdlID0ge30KCmZvciBpLHYgaW4gcGFpcnMoc3RhZ2VzKSBkbwogICAgc3RhZ2Vbdl0gPSB7fQogICAgc3RhZ2Vbdl0ubWFzdGVyID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jaGVja2JveCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuVxhQjlCRUZGRkZlbmFibGVcYUNEQ0RDREZG4oC6IHN0YWdlIFxhQjlCRUZGRkYiIC4uIHYpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiQU5USUFJTSIgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zZWxlY3Rpb24pID09ICJhbnRpLWJydXRlZm9yY2UiIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuYW50aWJydXRlX21hc3RlcikgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGFnZSkgPT0gdiBlbmQsIHRydWUpCiAgICBsb2NhbCBzaG93ID0gZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkFOVElBSU0iIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc2VsZWN0aW9uKSA9PSAiYW50aS1icnV0ZWZvcmNlIiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLmFudGlicnV0ZV9tYXN0ZXIpIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhZ2UpID09IHYgYW5kIHVpLmdldChzdGFnZVt2XS5tYXN0ZXIpIGVuZAoKICAgIHN0YWdlW3ZdLnBpdGNoICAgICAgICAgICAgID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jb21ib2JveCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuVxhQjlCRUZGRkZzdGFnZSAiIC4uIHYgLi4gICJcYUNEQ0RDREZG4oC6IHBpdGNoIiwgeyJvZmYiLCAiZGVmYXVsdCIsICJ1cCIsICJkb3duIiwgIm1pbmltYWwiLCAicmFuZG9tIn0pLCBmdW5jdGlvbigpIHJldHVybiBzaG93KCkgZW5kLCB0cnVlKQogICAgc3RhZ2Vbdl0ueWF3X2Jhc2UgICAgICAgICAgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbWJvYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC5XGFCOUJFRkZGRnN0YWdlICIgLi4gdiAuLiAgIlxhQ0RDRENERkbigLogeWF3IFxhQjlCRUZGRkZiYXNlIiwgeyJsb2NhbCB2aWV3IiwgImF0IHRhcmdldHMifSksIGZ1bmN0aW9uKCkgcmV0dXJuIHNob3coKSBlbmQsIHRydWUpCiAgICBzdGFnZVt2XS55YXcgICAgICAgICAgICAgICA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29tYm9ib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLlcYUI5QkVGRkZGc3RhZ2UgIiAuLiB2IC4uICAiXGFDRENEQ0RGRuKAuiB5YXciLCB7Im9mZiIsICIxODAiLCAic3BpbiIsICJzdGF0aWMiLCAiMTgwIHoiLCAiY3Jvc3NoYWlyIn0pLCBmdW5jdGlvbigpIHJldHVybiBzaG93KCkgZW5kLCB0cnVlKQogICAgCiAgICBzdGFnZVt2XS55YXdfb2Zmc2V0X3R5cGUgICA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29tYm9ib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLlcYUI5QkVGRkZGc3RhZ2UgIiAuLiB2IC4uICAiXGFDRENEQ0RGRuKAuiB5YXcgXGFCOUJFRkZGRnR5cGUiLCB7ImppdHRlciJ9KSwgZnVuY3Rpb24oKSByZXR1cm4gc2hvdygpIGFuZCB1aS5nZXQoc3RhZ2Vbdl0ueWF3KSB+PSAib2ZmIiBlbmQsIHRydWUpCiAgICBzdGFnZVt2XS55YXdfb2Zmc2V0X2xlZnQgICA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyggIHVpLm5ld19zbGlkZXIoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLlcYUI5QkVGRkZGc3RhZ2UgIiAuLiB2IC4uICAiXGFDRENEQ0RGRuKAuiB5YXcgb2Zmc2V0IFxhQjlCRUZGRkZsZWZ0IiwgLTE4MCwgMTgwLCAwLCB0cnVlLCAiwrAiKSwgZnVuY3Rpb24oKSByZXR1cm4gc2hvdygpIGFuZCB1aS5nZXQoc3RhZ2Vbdl0ueWF3KSB+PSAib2ZmIiBhbmQgdWkuZ2V0KHN0YWdlW3ZdLnlhd19vZmZzZXRfdHlwZSkgPT0gImppdHRlciIgZW5kLCB0cnVlKQogICAgc3RhZ2Vbdl0ueWF3X29mZnNldF9yaWdodCAgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcoICB1aS5uZXdfc2xpZGVyKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC5XGFCOUJFRkZGRnN0YWdlICIgLi4gdiAuLiAgIlxhQ0RDRENERkbigLogeWF3IG9mZnNldCBcYUI5QkVGRkZGcmlnaHQiLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIpLCBmdW5jdGlvbigpIHJldHVybiBzaG93KCkgYW5kIHVpLmdldChzdGFnZVt2XS55YXcpIH49ICJvZmYiIGFuZCB1aS5nZXQoc3RhZ2Vbdl0ueWF3X29mZnNldF90eXBlKSA9PSAiaml0dGVyIiBlbmQsIHRydWUpCiAgICAKCiAgICBzdGFnZVt2XS55YXdfaml0dGVyICAgICAgICA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29tYm9ib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLlcYUI5QkVGRkZGc3RhZ2UgIiAuLiB2IC4uICAiXGFDRENEQ0RGRuKAuiB5YXcgaml0dGVyIFxhQjlCRUZGRkZ0eXBlIiwgeyJvZmYiLCAib2Zmc2V0IiwgImNlbnRlciIsICJyYW5kb20iLCAic2tpdHRlciJ9KSwgZnVuY3Rpb24oKSByZXR1cm4gc2hvdygpIGVuZCwgdHJ1ZSkKICAgIHN0YWdlW3ZdLnlhd19qaXR0ZXJfb2Zmc2V0ID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KCAgdWkubmV3X3NsaWRlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuVxhQjlCRUZGRkZzdGFnZSAiIC4uIHYgLi4gICJcYUNEQ0RDREZG4oC6IHlhdyBcYUI5QkVGRkZGaml0dGVyIiwgLTE4MCwgMTgwLCAwLCB0cnVlLCAiwrAiKSwgZnVuY3Rpb24oKSByZXR1cm4gc2hvdygpIGFuZCB1aS5nZXQoc3RhZ2Vbdl0ueWF3X2ppdHRlcikgfj0gIm9mZiIgZW5kLCB0cnVlKQoKICAgIAogICAgc3RhZ2Vbdl0uYm9keV95YXcgICAgICAgICAgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbWJvYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC5XGFCOUJFRkZGRnN0YWdlICIgLi4gdiAuLiAgIlxhQ0RDRENERkbigLogYm9keSBcYUI5QkVGRkZGeWF3IiwgeyJvZmYiLCAic3RhdGljIiwgImppdHRlciIsICJvcHBvc2l0ZSJ9KSwgZnVuY3Rpb24oKSByZXR1cm4gc2hvdygpIGVuZCwgdHJ1ZSkKICAgIHN0YWdlW3ZdLmJvZHlfeWF3X29mZnNldCAgID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3ICAodWkubmV3X3NsaWRlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuVxhQjlCRUZGRkZzdGFnZSAiIC4uIHYgLi4gICJcYUNEQ0RDREZG4oC6IGJvZHkgeWF3IFxhQjlCRUZGRkZvZmZzZXQiLCAtMTgwLCAxODAsIDAsIHRydWUsICLCsCIpLCBmdW5jdGlvbigpIHJldHVybiBzaG93KCkgYW5kIHVpLmdldChzdGFnZVt2XS5ib2R5X3lhdykgfj0gIm9mZiIgYW5kIHVpLmdldChzdGFnZVt2XS5ib2R5X3lhdykgfj0gIm9wcG9zaXRlIiBlbmQsIHRydWUpCgogICAtLSBzdGFnZVt2XS5mcmVlc3RhbmRpbmdfYm9keV95YXcgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NoZWNrYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC5XGFCOUJFRkZGRnN0YWdlICIgLi4gdiAuLiAgIlxhQ0RDRENERkbigLogRnJlZXN0YW5kaW5nIGJvZHkgeWF3IiwgZmFsc2UpLCBmdW5jdGlvbigpIHJldHVybiBzaG93KCkgYW5kIHVpLmdldChzdGFnZVt2XS5ib2R5X3lhdykgfj0gIk9mZiIgZW5kLCB0cnVlKQplbmQKCi0tIEV4dHJhCmxhdmVuZGVyLnVpLmFhLmZhc3RfbGFkZGVyID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jaGVja2JveCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuVxhQjlCRUZGRkZleHRyYVxhQ0RDRENERkbigLogZmFzdCBcYUI5QkVGRkZGbGFkZGVyIiksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJBTlRJQUlNIiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnNlbGVjdGlvbikgPT0gImV4dHJhIiBlbmQpCgpsYXZlbmRlci51aS5hYS5tYW51YWxfbWFzdGVyID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jaGVja2JveCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuVxhQjlCRUZGRkZleHRyYVxhQ0RDRENERkbigLogZm9yY2UgXGFCOUJFRkZGRnlhdyIpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiQU5USUFJTSIgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zZWxlY3Rpb24pID09ICJleHRyYSIgZW5kKQpsYXZlbmRlci51aS5hYS5tYW51YWxfbGVmdCA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfaG90a2V5KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAiIOKAuuKAuiBcYUI5QkVGRkZGZm9yY2UgbGVmdCIsIGZhbHNlKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkFOVElBSU0iIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc2VsZWN0aW9uKSA9PSAiZXh0cmEiIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEubWFudWFsX21hc3RlcikgZW5kKQpsYXZlbmRlci51aS5hYS5tYW51YWxfcmlnaHQgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2hvdGtleSgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIiDigLrigLogXGFCOUJFRkZGRmZvcmNlIHJpZ2h0IiwgZmFsc2UpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiQU5USUFJTSIgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zZWxlY3Rpb24pID09ICJleHRyYSIgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5tYW51YWxfbWFzdGVyKSBlbmQpCmxhdmVuZGVyLnVpLmFhLm1hbnVhbF9iYWNrID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19ob3RrZXkoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICIg4oC64oC6IFxhQjlCRUZGRkZmb3JjZSBiYWNrIiwgZmFsc2UpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiQU5USUFJTSIgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zZWxlY3Rpb24pID09ICJleHRyYSIgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5tYW51YWxfbWFzdGVyKSBlbmQpCmxhdmVuZGVyLnVpLmFhLm1hbnVhbF9mb3J3YXJkID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19ob3RrZXkoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICIg4oC64oC6IFxhQjlCRUZGRkZmb3JjZSBmb3J3YXJkIiwgZmFsc2UpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiQU5USUFJTSIgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zZWxlY3Rpb24pID09ICJleHRyYSIgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5tYW51YWxfbWFzdGVyKSBlbmQpCmxhdmVuZGVyLnVpLmFhLm1hbnVhbF9qaXR0ZXIgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NoZWNrYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAiIOKAuuKAuiBcYUI5QkVGRkZGZm9yY2Ugaml0dGVyIiksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJBTlRJQUlNIiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnNlbGVjdGlvbikgPT0gImV4dHJhIiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLm1hbnVhbF9tYXN0ZXIpIGVuZCkKCmxhdmVuZGVyLnVpLmFhLmFudGlfYmFja3N0YWIgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NoZWNrYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC5XGFCOUJFRkZGRmV4dHJhXGFDRENEQ0RGRuKAuiBhbnRpIFxhQjlCRUZGRkZiYWNrc3RhYiIpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiQU5USUFJTSIgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zZWxlY3Rpb24pID09ICJleHRyYSIgZW5kKQoKbGF2ZW5kZXIudWkuYWEuZnJlZXN0YW5kaW5nX2Rpc2FibGVycyA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfbXVsdGlzZWxlY3QoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLlcYUI5QkVGRkZGZXh0cmFcYUNEQ0RDREZG4oC6IGZyZWVzdGFuZGluZyBcYUI5QkVGRkZGZGlzYWJsZXJzIiwgInN0YW5kaW5nIiwgIm1vdmluZyIsICJkdWNraW5nIiwgImFpciIsICJhaXIgZHVjayIsICJzbG93d2FsayIsICJ1c2UiKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkFOVElBSU0iIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc2VsZWN0aW9uKSA9PSAiZXh0cmEiIGVuZCkKbGF2ZW5kZXIudWkuYWEuZnJlZXN0YW5kaW5nX2tleSA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfaG90a2V5KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAiIOKAuuKAuiBcYUI5QkVGRkZGZnJlZXN0YW5kaW5nIGtleSIsIGZhbHNlLCAwKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkFOVElBSU0iIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc2VsZWN0aW9uKSA9PSAiZXh0cmEiIGVuZCkKbGF2ZW5kZXIudWkuYWEuZnJlZXN0YW5kaW5nX2ppdHRlciA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY2hlY2tib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICIg4oC64oC6IFxhQjlCRUZGRkZqaXR0ZXIiKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkFOVElBSU0iIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc2VsZWN0aW9uKSA9PSAiZXh0cmEiIGVuZCkKCi0tIFZpc3VhbHMKLS0+IENyb3NzaGFpciBJbmRpY2F0b3JzCmxhdmVuZGVyLnVpLnZpc3VhbHMuY3Jvc3NoYWlyX2luZGljYXRvciA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29tYm9ib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLlcYUI5QkVGRkZGdmlzdWFsc1xhQ0RDRENERkbigLogY3Jvc3NoYWlyIFxhQjlCRUZGRkZpbmRpY2F0b3JzIiwgeyItIiwgImRlZmF1bHQiLCAibW9kZXJuIn0pLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgZW5kKQotLT4gQ29sb3VycyBmb3IgY3Jvc3NoYWlyIGluZGljYXRvcnMKbGF2ZW5kZXIudWkudmlzdWFscy5tYWluX2FjY2VudF9sYWIgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2xhYmVsKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAiIOKAuuKAuiBcYUI5QkVGRkZGbWFpbiBhY2NlbnQiKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiIGFuZCAodWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuY3Jvc3NoYWlyX2luZGljYXRvcikgPT0gImRlZmF1bHQiIG9yIHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmNyb3NzaGFpcl9pbmRpY2F0b3IpID09ICJtb2Rlcm4iKSBlbmQpCmxhdmVuZGVyLnVpLnZpc3VhbHMubWFpbl9hY2NlbnQgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbG9yX3BpY2tlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgImlubGluZSBtYWluIGFjY2VudCIsIDE4NSwgMTkwLCAyNTUsIDI1NSksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJWSVNVQUxTIiBhbmQgKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmNyb3NzaGFpcl9pbmRpY2F0b3IpID09ICJkZWZhdWx0IiBvciB1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5jcm9zc2hhaXJfaW5kaWNhdG9yKSA9PSAibW9kZXJuIikgZW5kKQpsYXZlbmRlci51aS52aXN1YWxzLnRyYWlsX2FjY2VudF9sYWIgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2xhYmVsKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAiIOKAuuKAuiBcYUI5QkVGRkZGdHJhaWwgYWNjZW50IiksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJWSVNVQUxTIiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuY3Jvc3NoYWlyX2luZGljYXRvcikgPT0gIm1vZGVybiIgZW5kKQpsYXZlbmRlci51aS52aXN1YWxzLnRyYWlsX2FjY2VudCA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29sb3JfcGlja2VyKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAiaW5saW5lIHRyYWlsIGFjY2VudCIsIDIzLCAyMywgMjMsIDApLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgYW5kIHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmNyb3NzaGFpcl9pbmRpY2F0b3IpID09ICJtb2Rlcm4iIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy5zdGF0ZV9hY2NlbnRfbGFiID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19sYWJlbCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIiDigLrigLogXGFCOUJFRkZGRnN0YXRlIGFjY2VudCIpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgYW5kIHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmNyb3NzaGFpcl9pbmRpY2F0b3IpID09ICJtb2Rlcm4iIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy5zdGF0ZV9hY2NlbnQgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbG9yX3BpY2tlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgImlubGluZSBzdGF0ZSBhY2NlbnQiLCAyNTUsIDI1NSwgMjU1LCAyNTUpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgYW5kIHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmNyb3NzaGFpcl9pbmRpY2F0b3IpID09ICJtb2Rlcm4iIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy5rZXlzdGF0ZV9hY2NlbnRfbGFiID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19sYWJlbCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIiDigLrigLogXGFCOUJFRkZGRmtleXN0YXRlIGFjY2VudCIpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgYW5kIHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmNyb3NzaGFpcl9pbmRpY2F0b3IpID09ICJtb2Rlcm4iIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy5rZXlzdGF0ZV9hY2NlbnQgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbG9yX3BpY2tlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgImlubGluZSBrZXlzdGF0ZSBhY2NlbnQiLCAyNTUsIDI1NSwgMjU1LCAyNTUpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgYW5kIHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmNyb3NzaGFpcl9pbmRpY2F0b3IpID09ICJtb2Rlcm4iIGVuZCkKLS0+IEV4dHJhCmxhdmVuZGVyLnVpLnZpc3VhbHMuZXh0cmFfdmlzdWFsID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19tdWx0aXNlbGVjdCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuVxhQjlCRUZGRkZ2aXN1YWxzXGFDRENEQ0RGRuKAuiBleHRyYSBcYUI5QkVGRkZGaW5kaWNhdG9ycyIsICJ3YXRlcm1hcmsiLCAia2V5YmluZCBsaXN0IiwgInZlbG9jaXR5IHdhcm5pbmciKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy53YXRlcm1hcmtfYWNjZW50X2xhYiA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfbGFiZWwoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICIg4oC64oC6IFxhQjlCRUZGRkZ3YXRlcm1hcmsgYWNjZW50IiksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJWSVNVQUxTIiBhbmQgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5leHRyYV92aXN1YWwpLCAid2F0ZXJtYXJrIikgZW5kKQpsYXZlbmRlci51aS52aXN1YWxzLndhdGVybWFya19hY2NlbnQgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbG9yX3BpY2tlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgImlubGluZSB3YXRlcm1hcmsgYWNjZW50IiwgMTg1LCAxOTAsIDI1NSwgMjU1KSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiIGFuZCBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmV4dHJhX3Zpc3VhbCksICJ3YXRlcm1hcmsiKSBlbmQpCmxhdmVuZGVyLnVpLnZpc3VhbHMua2Jfc2VjX2Jhcl9hY2NlbnRfbGFiID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19sYWJlbCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIiDigLrigLogXGFCOUJFRkZGRmtleWJpbmQgYmFyIGFjY2VudCIpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgYW5kIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuZXh0cmFfdmlzdWFsKSwgImtleWJpbmQgbGlzdCIpIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy5rZXliaW5kX3NlY19iYXJfYWNjZW50ID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jb2xvcl9waWNrZXIoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICJpbmxpbmUgc2VjIGJhciBhY2NlbnQiLCAxODUsIDE5MCwgMjU1LCAyNTUpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgYW5kIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuZXh0cmFfdmlzdWFsKSwgImtleWJpbmQgbGlzdCIpIGVuZCkKLS1sYXZlbmRlci51aS52aXN1YWxzLmRlYnVnX3BhbmVsX2xhYiA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfbGFiZWwoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICIg4oC64oC6IFxhQjlCRUZGRkZkZWJ1ZyBwYW5lbCBhY2NlbnQiKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiIGFuZCBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmV4dHJhX3Zpc3VhbCksICJkZWJ1ZyBwYW5lbCIpIGVuZCkKLS1sYXZlbmRlci51aS52aXN1YWxzLmRlYnVnX3BhbmVsX2FjY2VudCA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29sb3JfcGlja2VyKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAiaW5saW5lIGRlYnVnIHBhbmVsIGFjY2VudCIsIDE4NSwgMTkwLCAyNTUsIDI1NSksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJWSVNVQUxTIiBhbmQgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5leHRyYV92aXN1YWwpLCAiZGVidWcgcGFuZWwiKSBlbmQpCmxhdmVuZGVyLnVpLnZpc3VhbHMudmVsb2NpdHlfbGFiID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19sYWJlbCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIiDigLrigLogXGFCOUJFRkZGRnZlbG9jaXR5IHdhcm5pbmcgYWNjZW50IiksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJWSVNVQUxTIiBhbmQgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5leHRyYV92aXN1YWwpLCAidmVsb2NpdHkgd2FybmluZyIpIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy52ZWxvY2l0eV9hY2NlbnQgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbG9yX3BpY2tlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgImlubGluZSB2ZWxvY2l0eSB3YXJuaW5nIGFjY2VudCIsIDE4NSwgMTkwLCAyNTUsIDI1NSksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJWSVNVQUxTIiBhbmQgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5leHRyYV92aXN1YWwpLCAidmVsb2NpdHkgd2FybmluZyIpIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy5ub3RpZmljYXRpb25fbGFiID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19sYWJlbCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIiDigLrigLogXGFCOUJFRkZGRm5vdGlmaWNhdGlvbiBhY2NlbnQiKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy5ub3RpZmljYXRpb25fYWNjZW50ID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jb2xvcl9waWNrZXIoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICJpbmxpbmUgbm90aWZpY2F0aW9uIGFjY2VudCIsIDE4NSwgMTkwLCAyNTUsIDI1NSksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJWSVNVQUxTIiBlbmQpCgotLT4gaW5mb3JtYXRpdmUKbGF2ZW5kZXIudWkudmlzdWFscy5pbmZvcm1hdGl2ZV92aXN1YWwgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X211bHRpc2VsZWN0KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC5XGFCOUJFRkZGRnZpc3VhbHNcYUNEQ0RDREZG4oC6IGluZm9ybWF0aXZlIFxhQjlCRUZGRkZpbmRpY2F0b3JzIiwgIm1pbiBkYW1hZ2UgaW5kaWNhdG9yIiwgInNob3QgbG9nIChub3RpZnkpIiwgInNob3QgbG9nIChjb25zb2xlKSIsICJhbnRpIGJydXRlIGxvZyAobm90aWZ5KSIsICJhbnRpIGJydXRlIGxvZyAoY29uc29sZSkiLCAiZm9yY2UgeWF3IiksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJWSVNVQUxTIiBlbmQpCgpsYXZlbmRlci51aS52aXN1YWxzLm1pbl9kbWdfYWNjZW50X2xhYiA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfbGFiZWwoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICIg4oC64oC6IFxhQjlCRUZGRkZtaW5pbXVtIGRhbWFnZSBhY2NlbnQiKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiIGFuZCBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmluZm9ybWF0aXZlX3Zpc3VhbCksICJtaW4gZGFtYWdlIGluZGljYXRvciIpIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy5taW5fZG1nX2FjY2VudCA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29sb3JfcGlja2VyKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAiaW5saW5lIG1pbiBkbWcgYWNjZW50IiwgMjU1LCAyNTUsIDIzNSwgMjU1KSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiIGFuZCBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmluZm9ybWF0aXZlX3Zpc3VhbCksICJtaW4gZGFtYWdlIGluZGljYXRvciIpIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy5sb2dfbm90aWZ5X2hpdF9hY2NlbnRfbGFiID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19sYWJlbCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIiDigLrigLogXGFCOUJFRkZGRnNob3QgbG9nIGhpdCAobm90aWZ5KSBhY2NlbnQiKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiIGFuZCBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmluZm9ybWF0aXZlX3Zpc3VhbCksICJzaG90IGxvZyAobm90aWZ5KSIpIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy5sb2dfbm90aWZ5X2hpdF9hY2NlbnQgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbG9yX3BpY2tlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgImlubGluZSBzaG90IGxvZyBoaXQgKG5vdGlmeSkgYWNjZW50IiwgMTg1LCAxOTAsIDI1NSwgMjU1KSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiIGFuZCBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmluZm9ybWF0aXZlX3Zpc3VhbCksICJzaG90IGxvZyAobm90aWZ5KSIpIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy5sb2dfbm90aWZ5X21pc3NfYWNjZW50X2xhYiA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfbGFiZWwoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICIg4oC64oC6IFxhQjlCRUZGRkZzaG90IGxvZyBtaXNzIChub3RpZnkpIGFjY2VudCIpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgYW5kIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuaW5mb3JtYXRpdmVfdmlzdWFsKSwgInNob3QgbG9nIChub3RpZnkpIikgZW5kKQpsYXZlbmRlci51aS52aXN1YWxzLmxvZ19ub3RpZnlfbWlzc19hY2NlbnQgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbG9yX3BpY2tlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgImlubGluZSBzaG90IGxvZyBtaXNzIChub3RpZnkpIGFjY2VudCIsIDE4NSwgMTkwLCAyNTUsIDI1NSksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJWSVNVQUxTIiBhbmQgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5pbmZvcm1hdGl2ZV92aXN1YWwpLCAic2hvdCBsb2cgKG5vdGlmeSkiKSBlbmQpCmxhdmVuZGVyLnVpLnZpc3VhbHMubG9nX2NvbnNvbGVfYWNjZW50X2xhYiA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfbGFiZWwoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICIg4oC64oC6IFxhQjlCRUZGRkZzaG90IGxvZyAoY29uc29sZSkgYWNjZW50IiksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJWSVNVQUxTIiBhbmQgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5pbmZvcm1hdGl2ZV92aXN1YWwpLCAic2hvdCBsb2cgKGNvbnNvbGUpIikgZW5kKQpsYXZlbmRlci51aS52aXN1YWxzLmxvZ19jb25zb2xlX2FjY2VudCA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29sb3JfcGlja2VyKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAiaW5saW5lIHNob3QgbG9nIChjb25zb2xlKSBhY2NlbnQiLCA4NSwgMjI3LCA1MCwgMjU1KSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiIGFuZCBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmluZm9ybWF0aXZlX3Zpc3VhbCksICJzaG90IGxvZyAoY29uc29sZSkiKSBlbmQpCmxhdmVuZGVyLnVpLnZpc3VhbHMubG9nX2FiX25vdGlmeV9hY2NlbnRfbGFiID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19sYWJlbCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIiDigLrigLogXGFCOUJFRkZGRmFudGkgYnJ1dGUgbG9nIChub3RpZnkpIGFjY2VudCIpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgYW5kIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuaW5mb3JtYXRpdmVfdmlzdWFsKSwgImFudGkgYnJ1dGUgbG9nIChub3RpZnkpIikgZW5kKQpsYXZlbmRlci51aS52aXN1YWxzLmxvZ19hYl9ub3RpZnlfYWNjZW50ID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jb2xvcl9waWNrZXIoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICJpbmxpbmUgYW50aSBicnV0ZSBsb2cgKG5vdGlmeSkgYWNjZW50IiwgMTg1LCAxOTAsIDI1NSwgMjU1KSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiIGFuZCBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmluZm9ybWF0aXZlX3Zpc3VhbCksICJhbnRpIGJydXRlIGxvZyAobm90aWZ5KSIpIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy5sb2dfYWJfY29uc29sZV9hY2NlbnRfbGFiID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19sYWJlbCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIiDigLrigLogXGFCOUJFRkZGRmFudGkgYnJ1dGUgbG9nIChjb25zb2xlKSBhY2NlbnQiKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiIGFuZCBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmluZm9ybWF0aXZlX3Zpc3VhbCksICJhbnRpIGJydXRlIGxvZyAoY29uc29sZSkiKSBlbmQpCmxhdmVuZGVyLnVpLnZpc3VhbHMubG9nX2FiX2NvbnNvbGVfYWNjZW50ID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jb2xvcl9waWNrZXIoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICJpbmxpbmUgYW50aSBicnV0ZSBsb2cgKGNvbnNvbGUpIGFjY2VudCIsIDg1LCAyMjcsIDUwLCAyNTUpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgYW5kIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuaW5mb3JtYXRpdmVfdmlzdWFsKSwgImFudGkgYnJ1dGUgbG9nIChjb25zb2xlKSIpIGVuZCkKCmxhdmVuZGVyLnVpLnZpc3VhbHMubWFudWFsX2Fycm93cyA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29tYm9ib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLrigLogXGFCOUJFRkZGRmZvcmNlIHlhdyBhcnJvd3MiLCB7ImJhc2ljIiwgInNtYWxsIiwgImNsZWFuIn0pLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgYW5kIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuaW5mb3JtYXRpdmVfdmlzdWFsKSwgImZvcmNlIHlhdyIpIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy5tYW51YWxfYWFfZm9yY2UgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NoZWNrYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC64oC6IFxhQjlCRUZGRkZpZ25vcmUgYWN0aXZhdGlvbiIpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgYW5kIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuaW5mb3JtYXRpdmVfdmlzdWFsKSwgImZvcmNlIHlhdyIpIGVuZCkKCmxhdmVuZGVyLnVpLnZpc3VhbHMubWFudWFsX2FhX21haW5fbGFiID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19sYWJlbCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIiDigLrigLogXGFCOUJFRkZGRmZvcmNlIHlhdyBtYWluIGFjY2VudCIpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgYW5kIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuaW5mb3JtYXRpdmVfdmlzdWFsKSwgImZvcmNlIHlhdyIpIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy5tYW51YWxfYWFfbWFpbl9jb2xvdXIgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NvbG9yX3BpY2tlcigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgImlubGluZSBmb3JjZSB5YXcgbWFpbiBhY2NlbnQiLCAxODUsIDE5MCwgMjU1LCAyNTUpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgYW5kIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuaW5mb3JtYXRpdmVfdmlzdWFsKSwgImZvcmNlIHlhdyIpIGVuZCkKbGF2ZW5kZXIudWkudmlzdWFscy5tYW51YWxfYWFzZWNfbGFiID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19sYWJlbCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIiDigLrigLogXGFCOUJFRkZGRmZvcmNlIHlhdyBzZWNvbmRhcnkgYWNjZW50IiksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJWSVNVQUxTIiBhbmQgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5pbmZvcm1hdGl2ZV92aXN1YWwpLCAiZm9yY2UgeWF3IikgZW5kKQpsYXZlbmRlci51aS52aXN1YWxzLm1hbnVhbF9hYV9zZWNfY29sb3VyID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jb2xvcl9waWNrZXIoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLrigLogXGFCOUJFRkZGRmZvcmNlIHlhdyBzZWNvbmRhcnkgYWNjZW50IiwgMCwgMCwgMCwgMzApLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIgYW5kIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuaW5mb3JtYXRpdmVfdmlzdWFsKSwgImZvcmNlIHlhdyIpIGVuZCkKLS0gTWlzYwpsYXZlbmRlci51aS5taXNjLmNsYW50YWcgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NoZWNrYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC5XGFCOUJFRkZGRm1pc2NcYUNEQ0RDREZG4oC6IHN5bmNlZCBcYUI5QkVGRkZGY2xhbnRhZyIpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiTUlTQyIgZW5kKQpsYXZlbmRlci51aS5taXNjLmFuaW1fYnJlYWtlcl9tYXN0ZXIgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NoZWNrYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC5XGFCOUJFRkZGRm1pc2NcYUNEQ0RDREZG4oC6IGFuaW0gXGFCOUJFRkZGRmJyZWFrZXJzIiksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJNSVNDIiBlbmQpCmxhdmVuZGVyLnVpLm1pc2Muc3RhbmRpbmdfYW5pbV9icmVha2VyID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jb21ib2JveCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuuKAuiBcYUI5QkVGRkZGc3RhbmRpbmcgYW5pbSIsIHsiLSIsICJmaXN0IGJ1bXAifSksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJNSVNDIiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLm1pc2MuYW5pbV9icmVha2VyX21hc3RlcikgYW5kIHVpLmdldChsYXZlbmRlci51aS5taXNjLmZvcmNlX2FuaW1fYnJlYWtlcikgPT0gIi0iIGFuZCB1bnBhY2sodWkuZ2V0KGxhdmVuZGVyLnVpLm1pc2MucG9vX2FuaW1fYnJlYWtlcikpID09IG5pbCBlbmQpCmxhdmVuZGVyLnVpLm1pc2MubW92aW5nX2FuaW1fYnJlYWtlciA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29tYm9ib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLrigLogXGFCOUJFRkZGRm1vdmluZyBhbmltIiwgeyItIiwgImRpc2xvY2F0ZWQgYXJtIiwgImZyb3plbiJ9KSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIk1JU0MiIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkubWlzYy5hbmltX2JyZWFrZXJfbWFzdGVyKSBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLm1pc2MuZm9yY2VfYW5pbV9icmVha2VyKSA9PSAiLSIgYW5kIHVucGFjayh1aS5nZXQobGF2ZW5kZXIudWkubWlzYy5wb29fYW5pbV9icmVha2VyKSkgPT0gbmlsIGVuZCkKbGF2ZW5kZXIudWkubWlzYy5haXJfYW5pbV9icmVha2VyID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jb21ib2JveCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuuKAuiBcYUI5QkVGRkZGYWlyIGFuaW0iLCB7Ii0iLCAiZHVtYiIsICJzdGlmZiBkdWNrIn0pLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiTUlTQyIgYW5kIHVpLmdldChsYXZlbmRlci51aS5taXNjLmFuaW1fYnJlYWtlcl9tYXN0ZXIpIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkubWlzYy5mb3JjZV9hbmltX2JyZWFrZXIpID09ICItIiBhbmQgdW5wYWNrKHVpLmdldChsYXZlbmRlci51aS5taXNjLnBvb19hbmltX2JyZWFrZXIpKSA9PSBuaWwgZW5kKQpsYXZlbmRlci51aS5taXNjLmZvcmNlX2FuaW1fYnJlYWtlciA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29tYm9ib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLrigLogXGFCOUJFRkZGRmZvcmNlIGFuaW0iLCB7Ii0iLCAidC1wb3NlIn0pLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiTUlTQyIgYW5kIHVpLmdldChsYXZlbmRlci51aS5taXNjLmFuaW1fYnJlYWtlcl9tYXN0ZXIpIGFuZCB1bnBhY2sodWkuZ2V0KGxhdmVuZGVyLnVpLm1pc2MucG9vX2FuaW1fYnJlYWtlcikpID09IG5pbCBlbmQpCmxhdmVuZGVyLnVpLm1pc2MucG9vX2FuaW1fYnJlYWtlciA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfbXVsdGlzZWxlY3QoIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLrigLogXGFCOUJFRkZGRmJhc2ljIGFuaW0iLCAiemVybyBwaXRjaCBsYW5kaW5nIiwgImxlZyBicmVha2VyIiwgIm1vb24gd2FsayIsICJzdGF0aWMgaW4gYWlyIiksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJNSVNDIiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLm1pc2MuYW5pbV9icmVha2VyX21hc3RlcikgYW5kIHVpLmdldChsYXZlbmRlci51aS5taXNjLmZvcmNlX2FuaW1fYnJlYWtlcikgPT0gIi0iIGVuZCkKCgotLT4ga2lsbHNheQpsYXZlbmRlci51aS5taXNjLmtpbGxzYXkgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2NoZWNrYm94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC5XGFCOUJFRkZGRm1pc2NcYUNEQ0RDREZG4oC6IGtpbGwgXGFCOUJFRkZGRnNheSIpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiTUlTQyIgZW5kKQoKCi0tID4gQ29uZmlncwotLSBMaXN0CmxhdmVuZGVyLnVpLmNvbmZpZy5saXN0ID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19saXN0Ym94KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAiY29uZmlncyIsICIgIiksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJDT05GSUdTIiBlbmQpCi0tIE5hbWUKbGF2ZW5kZXIudWkuY29uZmlnLm5hbWUgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X3RleHRib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICJjb25maWcgbmFtZSIsICIgIiksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJDT05GSUdTIiBlbmQpCi0tIExvYWQKbGF2ZW5kZXIudWkuY29uZmlnLmxvYWQgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2J1dHRvbigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuuKAuiBcYUI5QkVGRkZGbG9hZCIsIGZ1bmN0aW9uKCkgZW5kKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkNPTkZJR1MiIGVuZCkKLS0gU2F2ZQpsYXZlbmRlci51aS5jb25maWcuc2F2ZSA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfYnV0dG9uKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC64oC6IFxhQjlCRUZGRkZzYXZlIiwgZnVuY3Rpb24oKSBlbmQpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiQ09ORklHUyIgZW5kKQotLSBEZWxldGUKbGF2ZW5kZXIudWkuY29uZmlnLmRlbGV0ZSA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfYnV0dG9uKCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC64oC6IFxhQjlCRUZGRkZkZWxldGUiLCBmdW5jdGlvbigpIGVuZCksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJDT05GSUdTIiBlbmQpCi0tIEltcG9ydApsYXZlbmRlci51aS5jb25maWcuaW1wb3J0ID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19idXR0b24oIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLrigLogXGFCOUJFRkZGRmltcG9ydCIsIGZ1bmN0aW9uKCkgZW5kKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkNPTkZJR1MiIGVuZCkKLS0gRXhwb3J0CmxhdmVuZGVyLnVpLmNvbmZpZy5leHBvcnQgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X2J1dHRvbigiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuuKAuiBcYUI5QkVGRkZGZXhwb3J0IiwgZnVuY3Rpb24oKSByZXR1cm4gZW5kKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkNPTkZJR1MiIGVuZCkKCi0tIGFscGhhCgotLWxhdmVuZGVyLnVpLmFscGhhLnNvb25fbGFiID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19sYWJlbCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuSBcYUI5QkVGRkZGY29taW5nIFxhQ0RDRENERkZzb29uIOKAuiIpLCBmdW5jdGlvbigpIHJldHVybiBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiQUxQSEEiIGVuZCkKCi0tIHByaXZhdGUKCmxhdmVuZGVyLnVpLnByaXZhdGUucmVzb2x2ZXJfbWFzdGVyID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19jaGVja2JveCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuVxhQjlCRUZGRkZwcml2YXRlXGFDRENEQ0RGRuKAuiBkZXN5bmMgXGFCOUJFRkZGRnJlc29sdmVyIiksIGZ1bmN0aW9uKCkgcmV0dXJuIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJQUklWQVRFIiBlbmQpCmxhdmVuZGVyLnVpLnByaXZhdGUucmVzb2x2ZXJfcGFuZWwgPSBsYXZlbmRlci5oYW5kbGVycy51aS5uZXcodWkubmV3X211bHRpc2VsZWN0KCJBQSIsICJBbnRpLWFpbWJvdCBhbmdsZXMiLCAi4oC64oC6IFxhQjlCRUZGRkZvcHRpb25zIiwgImluZm8gcGFuZWwiLCAiZmxhZ3MiKSwgZnVuY3Rpb24oKSByZXR1cm4gbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlBSSVZBVEUiIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkucHJpdmF0ZS5yZXNvbHZlcl9tYXN0ZXIpIGVuZCkKCi0tIGV4Y2x1c2l2ZQoKbGF2ZW5kZXIudWkuYWEuZGVmZW5zaXZlX21hc3RlciA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY2hlY2tib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLlcYUI5QkVGRkZGIiAuLiBidWlsZCAuLiAiXGFDRENEQ0RGRuKAuiBkZWZlbnNpdmUgXGFCOUJFRkZGRnlhdyIpLCBmdW5jdGlvbigpIHJldHVybiAobGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlBSSVZBVEUiIG9yIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJBTFBIQSIpIGVuZCkKbGF2ZW5kZXIudWkuYWEuZGVmZW5zaXZlX3N0YXRlID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19tdWx0aXNlbGVjdCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuuKAuiBcYUI5QkVGRkZGYWxsb3cgaW4gc3RhdGUiLCAic3RhbmRpbmciLCAibW92aW5nIiwgImR1Y2tpbmciLCAiYWlyIiwgImFpciBkdWNrIiwgInNsb3d3YWxrIiksIGZ1bmN0aW9uKCkgcmV0dXJuIChsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiUFJJVkFURSIgb3IgbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkFMUEhBIikgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5kZWZlbnNpdmVfbWFzdGVyKSBlbmQpCgpsYXZlbmRlci51aS5hYS5kZWZlbnNpdmVfY2hlY2tzID0gbGF2ZW5kZXIuaGFuZGxlcnMudWkubmV3KHVpLm5ld19tdWx0aXNlbGVjdCgiQUEiLCAiQW50aS1haW1ib3QgYW5nbGVzIiwgIuKAuuKAuiBcYUI5QkVGRkZGYWRkaXRpb25hbCBjaGVja3MiLCAidmVsb2NpdHkiLCAibm90IGNob2tpbmciKSwgZnVuY3Rpb24oKSByZXR1cm4gKGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJQUklWQVRFIiBvciBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiQUxQSEEiKSBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLmRlZmVuc2l2ZV9tYXN0ZXIpIGVuZCkKbGF2ZW5kZXIudWkuYWEuZGVmZW5zaXZlX2N1c3RvbSA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY2hlY2tib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICLigLlcYUI5QkVGRkZGZGVmZW5zaXZlXGFDRENEQ0RGRuKAuiBjdXN0b21pc2UgXGFCOUJFRkZGRnBpdGNoIiksIGZ1bmN0aW9uKCkgcmV0dXJuIChsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiUFJJVkFURSIgb3IgbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIkFMUEhBIikgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5kZWZlbnNpdmVfbWFzdGVyKSBlbmQpCgpsYXZlbmRlci51aS5hYS5kZWZlbnNpdmVfYmFzZV9waXRjaCA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29tYm9ib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICIgIOKAuuKAuiBcYUI5QkVGRkZGYmFzZSBwaXRjaCIsIHsidXAiLCAiZG93biIsICJ6ZXJvIn0pLCBmdW5jdGlvbigpIHJldHVybiAobGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlBSSVZBVEUiIG9yIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJBTFBIQSIpIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuZGVmZW5zaXZlX21hc3RlcikgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5kZWZlbnNpdmVfY3VzdG9tKSBlbmQpCmxhdmVuZGVyLnVpLmFhLmRlZmVuc2l2ZV9mYWxsYmFja19waXRjaCA9IGxhdmVuZGVyLmhhbmRsZXJzLnVpLm5ldyh1aS5uZXdfY29tYm9ib3goIkFBIiwgIkFudGktYWltYm90IGFuZ2xlcyIsICIgIOKAuuKAuiBcYUI5QkVGRkZGZmFsbGJhY2sgcGl0Y2giLCB7InVwIiwgImRvd24iLCAiemVybyJ9KSwgZnVuY3Rpb24oKSByZXR1cm4gKGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJQUklWQVRFIiBvciBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiQUxQSEEiKSBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLmRlZmVuc2l2ZV9tYXN0ZXIpIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuZGVmZW5zaXZlX2N1c3RvbSkgZW5kKQoKLS0gU2V0IG5ldyBvdGhlciBtb3ZlcwoKaWYgcmVhZGZpbGUoImxhdmVuZGVyX2RldGFpbHMudHh0IikgPT0gbmlsIHRoZW4KICAgIHdyaXRlZmlsZSgibGF2ZW5kZXJfZGV0YWlscy50eHQiLCAiMSIpCmVsc2UKICAgIHdyaXRlZmlsZSgibGF2ZW5kZXJfZGV0YWlscy50eHQiLCB0b251bWJlcihyZWFkZmlsZSgibGF2ZW5kZXJfZGV0YWlscy50eHQiKSkgKyAxKQplbmQKCnJlcGxhY2Vfb3RoZXIgPSBmdW5jdGlvbigpCgogICAgaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLnNsb3dtb3Rpb24pIHRoZW4KICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5taXNjLnNsb3dfbW90aW9uLCB1aS5nZXQobGF2ZW5kZXIudWkuc2xvd21vdGlvbmtleSkpCiAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMubWlzYy5zbG93X21vdGlvbl9rZXksICJBbHdheXMgb24iKQogICAgZW5kCgogICAgaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLm9uc2hvdGFhKSB0aGVuCiAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMubWlzYy5oaWRlX3Nob3RzLCB1aS5nZXQobGF2ZW5kZXIudWkub25zaG90YWFrZXkpKQogICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLm1pc2MuaGlkZV9zaG90c19rZXksICJBbHdheXMgb24iKQogICAgZW5kCiAgICBpZiB1aS5nZXQobGF2ZW5kZXIudWkuZmFrZXBlZWspIHRoZW4KICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5taXNjLmZha2VfcGVlaywgdWkuZ2V0KGxhdmVuZGVyLnVpLmZha2VwZWVra2V5KSkKICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5taXNjLmZha2VfcGVla19rZXksICJBbHdheXMgb24iKQogICAgZW5kCgogICAgdWkuc2V0X3Zpc2libGUobGF2ZW5kZXIucmVmcy5taXNjLnNsb3dfbW90aW9uLCBmYWxzZSkKICAgIHVpLnNldF92aXNpYmxlKGxhdmVuZGVyLnJlZnMubWlzYy5zbG93X21vdGlvbl9rZXksIGZhbHNlKQoKICAgIHVpLnNldF92aXNpYmxlKGxhdmVuZGVyLnJlZnMubWlzYy5oaWRlX3Nob3RzLCBmYWxzZSkKICAgIHVpLnNldF92aXNpYmxlKGxhdmVuZGVyLnJlZnMubWlzYy5oaWRlX3Nob3RzX2tleSwgZmFsc2UpCgogICAgdWkuc2V0X3Zpc2libGUobGF2ZW5kZXIucmVmcy5taXNjLmZha2VfcGVlaywgZmFsc2UpCiAgICB1aS5zZXRfdmlzaWJsZShsYXZlbmRlci5yZWZzLm1pc2MuZmFrZV9wZWVrX2tleSwgZmFsc2UpCgogICAgdWkuc2V0X3Zpc2libGUobGF2ZW5kZXIucmVmcy5taXNjLmxlZ3MsIGZhbHNlKQogICAgLS0gc2V0IGxvYWQgY291dAogICAgdWkuc2V0KGxhdmVuZGVyLnVpLnRhYi5kZXRhaWxzX2xvYWRjb3VudCwgIlxhOUY5RjlGNkJsb2FkIGNvdW50OiBcYUI5QkVGRkZGIiAuLiB0b3N0cmluZyhyZWFkZmlsZSgibGF2ZW5kZXJfZGV0YWlscy50eHQiKSkpCmVuZAoKLS0gbGluZSBzY2FsaW5nIG1lbnUKCm1lbnVfbGluZV9zY2FsaW5nID0gZnVuY3Rpb24oKQogICAgbG9jYWwgbWVudV9zaXplID0gdmVjdG9yKHVpLm1lbnVfc2l6ZSgpKQogICAgbG9jYWwgbnVtID0gbWVudV9zaXplLnggLSA2NjUKICAgIGxvY2FsIHVuZGVybGluZSA9ICfijq8nCiAgICBsb2NhbCBzdHJpbmcgPSB1bmRlcmxpbmU6cmVwKG1hdGguZmxvb3IobnVtIC8gMTYpKQogICAgaWYgbWVudV9zaXplLnggPD0gNzcwIHRoZW4KICAgICAgICB1aS5zZXQobGF2ZW5kZXIudWkudGFiLm1haW5fYmFyXzEsICJcYTlGOUY5RjZCIiAuLiAi4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6v4o6vIiAuLiBzdHJpbmcpCiAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnVpLnRhYi5kZXRhaWxzX2JhciwgIlxhOUY5RjlGNkIiIC4uICLijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq/ijq8iIC4uIHN0cmluZykKCiAgICAgICAgaWYgbGF2ZW5kZXIudWkuY3VycmVudF90YWIgfj0gIkhPTUUiIHRoZW4KICAgICAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnVpLnRhYi5tYWluX2Jhcl8yLCAiXGE5RjlGOUY2QiIgLi4gIuKOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOr+KOryIgLi4gc3RyaW5nKQogICAgICAgIGVuZAogICAgZW5kCmVuZAotLSBMZWdpdCBBQSBvbiBVc2UKCm9uX3VzZSA9IGZ1bmN0aW9uKGNtZCkKCiAgICBsb2NhbCBpbl91c2UgPSBjbWQuaW5fdXNlID09IDEKICAgIGxvY2FsIG1lID0gZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKQogICAgCiAgICBpZiBub3QgbWUgb3Igbm90IGVudGl0eS5pc19hbGl2ZShtZSkgdGhlbiAKICAgICAgICByZXR1cm4gCiAgICBlbmQKCiAgICBsb2NhbCB3ZWFwb25fZW50ID0gZW50aXR5LmdldF9wbGF5ZXJfd2VhcG9uKG1lKQoKICAgIGlmIHdlYXBvbl9lbnQgPT0gbmlsIHRoZW4gCiAgICAgICAgcmV0dXJuIAogICAgZW5kCgogICAgbG9jYWwgd2VhcG9uID0gY3Nnb193ZWFwb25zKHdlYXBvbl9lbnQpCgogICAgaWYgd2VhcG9uID09IG5pbCB0aGVuIAogICAgICAgIHJldHVybiAKICAgIGVuZAoKICAgIGxvY2FsIGxvY2FsX3BvcyAgICAgPSB2ZWN0b3IoZW50aXR5LmdldF9vcmlnaW4obWUpKQogICAgbG9jYWwgaW5fYm9tYnpvbmUgICA9IGVudGl0eS5nZXRfcHJvcChtZSwgIm1fYkluQm9tYlpvbmUiKSA+IDAKICAgIGxvY2FsIGhvbGRpbmdfYm9tYiAgPSB3ZWFwb24udHlwZSA9PSAiYzQiCgogICAgbG9jYWwgYm9tYl90YWJsZSAgICA9IGVudGl0eS5nZXRfYWxsKCJDUGxhbnRlZEM0IikKICAgIGxvY2FsIGJvbWJfcGxhbnRlZCAgPSAjYm9tYl90YWJsZSA+IDAKICAgIGxvY2FsIGJvbWJfZGlzdGFuY2UgPSAxMDAKCiAgICBpZiBib21iX3BsYW50ZWQgdGhlbgogICAgICAgIGxvY2FsIGJvbWJfZW50aXR5ID0gYm9tYl90YWJsZVsjYm9tYl90YWJsZV0KICAgICAgICBsb2NhbCBib21iX3BvcyA9IHZlY3RvcihlbnRpdHkuZ2V0X29yaWdpbihib21iX2VudGl0eSkpCiAgICAgICAgYm9tYl9kaXN0YW5jZSA9IGxvY2FsX3BvczpkaXN0KGJvbWJfcG9zKQogICAgZW5kCgogICAgbG9jYWwgZGVmdXNpbmcgPSBib21iX2Rpc3RhbmNlIDwgNjIgYW5kIGVudGl0eS5nZXRfcHJvcChtZSwgIm1faVRlYW1OdW0iKSA9PSAzCgogICAgaWYgaW5fYm9tYnpvbmUgYW5kIGhvbGRpbmdfYm9tYiBvciBkZWZ1c2luZyB0aGVuIHJldHVybiBlbmQKCgoJbG9jYWwgZnJvbSA9IHZlY3RvcihjbGllbnQuZXllX3Bvc2l0aW9uKCkpCglsb2NhbCB0byA9IGZyb20gKyB2ZWN0b3IoKTppbml0X2Zyb21fYW5nbGVzKGNsaWVudC5jYW1lcmFfYW5nbGVzKCkpICogMTAyNAoKCWxvY2FsIHJheSA9IHRyYWNlLmxpbmUoZnJvbSwgdG8sIHsgc2tpcCA9IG1lLCBtYXNrID0gIk1BU0tfU0hPVCIgfSkKCiAgICBpZiBub3QgcmF5IG9yIHJheS5mcmFjdGlvbiA+IDEgb3Igbm90IHJheS5lbnRpbmRleCB0aGVuIHJldHVybiBlbmQKCgogICAgbG9jYWwgcmF5X2VudCA9IHBjYWxsKGZ1bmN0aW9uKCkgZW50aXR5LmdldF9jbGFzc25hbWUocmF5LmVudGluZGV4KSBlbmQpIGFuZCBlbnRpdHkuZ2V0X2NsYXNzbmFtZShyYXkuZW50aW5kZXgpIG9yIG5pbAoKICAgIGlmIG5vdCByYXlfZW50IG9yIHJheV9lbnQgPT0gbmlsIHRoZW4gcmV0dXJuIGVuZAoKICAgIGlmIHJheV9lbnQgfj0gIkNXb3JsZCIgYW5kIHJheV9lbnQgfj0gIkNGdW5jQnJ1c2giIGFuZCByYXlfZW50IH49ICJDQ1NQbGF5ZXIiIHRoZW4gcmV0dXJuIGVuZAoKICAgIGlmIGluX3VzZSB0aGVuCiAgICAgICAgY21kLmluX3VzZSA9IDAKICAgICAgICByZXR1cm4gdHJ1ZQogICAgZW5kCmVuZAoKLS0gR2V0IHN0YXRlCgpsb2NhbCBncm91bmRfdGlja3MgPSAwCgpsYXZlbmRlci5oYW5kbGVycy5hYS5nZXRfc3RhdGUgPSBmdW5jdGlvbihjbWQpCiAgICBsb2NhbCBtZSA9IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkKICAgIGxvY2FsIGZsYWdzID0gZW50aXR5LmdldF9wcm9wKG1lLCAibV9mRmxhZ3MiKQogICAgbG9jYWwgdmVsMSwgdmVsMiwgdmVsMyA9IGVudGl0eS5nZXRfcHJvcChtZSwgJ21fdmVjVmVsb2NpdHknKQogICAgbG9jYWwgc3BlZWQgPSBtYXRoLmZsb29yKG1hdGguc3FydCh2ZWwxICogdmVsMSArIHZlbDIgKiB2ZWwyKSkKICAgIGxvY2FsIGR1Y2tpbmcgICAgICAgPSBjbWQuaW5fZHVjayA9PSAxCiAgICBsb2NhbCBhaXIgICAgICAgICAgID0gZ3JvdW5kX3RpY2tzIDwgNQogICAgbG9jYWwgd2Fsa2luZyAgICAgICA9IHNwZWVkID4gNQogICAgbG9jYWwgc3RhbmRpbmcgICAgICA9IHNwZWVkIDw9IDUKICAgIGxvY2FsIHNsb3dfbW90aW9uICAgPSB1aS5nZXQobGF2ZW5kZXIucmVmcy5taXNjLnNsb3dfbW90aW9uKSBhbmQgdWkuZ2V0KGxhdmVuZGVyLnJlZnMubWlzYy5zbG93X21vdGlvbl9rZXkpCiAgICBsb2NhbCBmYWtlZHVja2luZyAgID0gdWkuZ2V0KGxhdmVuZGVyLnJlZnMubWlzYy5mYWtlZHVja2luZykKICAgIGxvY2FsIHVzZSAgICAgICAgICAgPSBvbl91c2UoY21kKQogICAtLSBsb2NhbCBmYWtlbGFnICAgICAgID0gbm90IGZha2VkdWNraW5nIGFuZCBhbnRpX2FpbS5nZXRfZG91YmxlX3RhcCgpID09IGZhbHNlIGFuZCBub3QgdWkuZ2V0KGxhdmVuZGVyLnJlZnMucmFnZS5kb3VibGVfdGFwX2tleSkgYW5kIG5vdCB1aS5nZXQobGF2ZW5kZXIucmVmcy5taXNjLmhpZGVfc2hvdHNfa2V5KQogICAgLS1sb2NhbCBmcmVlc3RhbmRpbmcgPSB1aS5nZXQobGF2ZW5kZXIudWkuYWEuZnJlZXN0YW5kaW5nX2tleSkgYW5kIG5vdCBjb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkuYWEuZnJlZXN0YW5kaW5nX2Rpc2FibGVycyksIGxhdmVuZGVyLmFudGlhaW0uc3RhdGUpCiAgICBncm91bmRfdGlja3MgPSBiaXQuYmFuZChmbGFncywgMSkgPT0gMCBhbmQgMCBvciAoZ3JvdW5kX3RpY2tzIDwgNSBhbmQgZ3JvdW5kX3RpY2tzICsgMSBvciBncm91bmRfdGlja3MpCgogICAgaWYgdXNlIHRoZW4KICAgICAgICBzdGF0ZSA9ICJ1c2UiCiAgICBlbHNlaWYgYWlyIGFuZCBub3QgZHVja2luZyB0aGVuCiAgICAgICAgc3RhdGUgPSAiYWlyIgogICAgZWxzZWlmIGFpciBhbmQgZHVja2luZyB0aGVuCiAgICAgICAgc3RhdGUgPSAiYWlyIGR1Y2siCiAgICBlbHNlaWYgZmFrZWR1Y2tpbmcgb3IgZHVja2luZyB0aGVuCiAgICAgICAgc3RhdGUgPSAiZHVja2luZyIKICAgIGVsc2VpZiBzbG93X21vdGlvbiB0aGVuCiAgICAgICAgc3RhdGUgPSAic2xvd3dhbGsiCiAgICBlbHNlaWYgc3RhbmRpbmcgdGhlbgogICAgICAgIHN0YXRlID0gInN0YW5kaW5nIgogICAgZWxzZWlmIHdhbGtpbmcgdGhlbgogICAgICAgIHN0YXRlID0gIm1vdmluZyIKICAgIGVuZAoKICAgIGxhdmVuZGVyLmFudGlhaW0uc3RhdGUgPSBzdGF0ZQoKICAgIHJldHVybiBzdGF0ZQplbmQKCgotLSBNYWluIFZpc3VhbHMKCmxhdmVuZGVyLnBhaW50X2ZyYWN0aW9uID0gMApsYXZlbmRlci5wYWludCA9IHsKICAgIGR0ID0gMCwKICAgIG9zID0gMCwKICAgIGZzID0gMAp9Cgptb2Rlcm5fZWRpdCA9IDAKCmxhdmVuZGVyLmhhbmRsZXJzLnZpc3VhbHMuaW5kaWNhdG9ycyA9IGZ1bmN0aW9uKCkKCiAgICBsb2NhbCBhciwgYWcsIGFiLCBhYSA9IHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLm1haW5fYWNjZW50KQogICAgbG9jYWwgbWUgPSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpCiAgICBsb2NhbCBzdGF0ZSA9IGxhdmVuZGVyLmFudGlhaW0uc3RhdGUKCiAgICAKICAgIGlmIGVudGl0eS5pc19hbGl2ZShtZSkgPT0gZmFsc2Ugb3IgdWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuY3Jvc3NoYWlyX2luZGljYXRvcikgPT0gIi0iIHRoZW4KICAgICAgICByZXR1cm4gZW5kCgogICAgbG9jYWwgbWFpbl9hY2MgPSB7dWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMubWFpbl9hY2NlbnQpfQogICAgbG9jYWwgc3RhdGVfYWNjID0ge3VpLmdldChsYXZlbmRlci51aS52aXN1YWxzLnN0YXRlX2FjY2VudCl9CiAgICBsb2NhbCBrZXlzdGF0ZV9hY2MgPSB7dWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMua2V5c3RhdGVfYWNjZW50KX0KICAgIGxvY2FsIHRyYWlsX2FjY2VudCA9IHt1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy50cmFpbF9hY2NlbnQpfQoKICAgIGxvY2FsIGR0ID0gdWkuZ2V0KGxhdmVuZGVyLnJlZnMucmFnZS5kb3VibGVfdGFwX2tleSkgYW5kIHVpLmdldChsYXZlbmRlci5yZWZzLnJhZ2UuZG91YmxlX3RhcCkKICAgIGxvY2FsIG9zID0gdWkuZ2V0KGxhdmVuZGVyLnJlZnMubWlzYy5oaWRlX3Nob3RzKSBhbmQgdWkuZ2V0KGxhdmVuZGVyLnJlZnMubWlzYy5oaWRlX3Nob3RzX2tleSkKICAgIGxvY2FsIGZkID0gdWkuZ2V0KGxhdmVuZGVyLnJlZnMubWlzYy5mYWtlZHVja2luZykKICAgIGxvY2FsIGZzID0gdWkuZ2V0KGxhdmVuZGVyLnJlZnMuYWEuZnJlZXN0YW5kaW5nX2tleSkgYW5kIHVpLmdldChsYXZlbmRlci5yZWZzLmFhLmZyZWVzdGFuZGluZykKICAgIGxvY2FsIHNjb3BpbmcgPSBlbnRpdHkuZ2V0X3Byb3AobWUsICJtX2JJc1Njb3BlZCIpID09IDEgYW5kIHRydWUgb3IgZmFsc2UKCglpZiB1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5jcm9zc2hhaXJfaW5kaWNhdG9yKSA9PSAibW9kZXJuIiB0aGVuCiAgICAgICAgbW9kZXJuX2VkaXQgPSBlYXNlLnF1YWRfaW4oMC4yLCBtb2Rlcm5fZWRpdCwgKHNjb3BpbmcgYW5kIDMwIG9yIDApIC0gbW9kZXJuX2VkaXQsIDEpCgogICAgICAgIGxvY2FsIG1lYXN1cmVfdGl0bGUgPSB2ZWN0b3IocmVuZGVyZXIubWVhc3VyZV90ZXh0KCItYyIsICJMQVZFTkRFUiIpKQogICAgICAgIGxvY2FsIGtleXN0YXRlX2FjdGl2ZSA9IG9zIGFuZCBub3QgZHQgYW5kICJPUyIgb3IgZHQgYW5kIG5vdCBmZCBhbmQgIkRUIiBvciBmZCBhbmQgIkZEIiBvciAiIgoKICAgICAgICByZW5kZXJlci50ZXh0KGxhdmVuZGVyLnBvcy5tb2Rlcm4ueCArIG1vZGVybl9lZGl0LCBsYXZlbmRlci5wb3MubW9kZXJuLnkgKyAyNSwgbWFpbl9hY2NbMV0sIG1haW5fYWNjWzJdLCBtYWluX2FjY1szXSwgbWFpbl9hY2NbNF0sICItYyIsIDAsIGxhdmVuZGVyLmZ1bmNzLnJlbmRlcmVyLmdyYWRpZW50X3RleHQobWFpbl9hY2NbMV0sIG1haW5fYWNjWzJdLCBtYWluX2FjY1szXSwgbWFpbl9hY2NbNF0sICJMQVZFTkRFUiIsIDIuNDIsIHRyYWlsX2FjY2VudFsxXSwgdHJhaWxfYWNjZW50WzJdLCB0cmFpbF9hY2NlbnRbM10sIHRyYWlsX2FjY2VudFs0XSkpCiAgICAgICAgcmVuZGVyZXIudGV4dChsYXZlbmRlci5wb3MubW9kZXJuLnggKyBtb2Rlcm5fZWRpdCwgbGF2ZW5kZXIucG9zLm1vZGVybi55ICsgMjUgKyBtZWFzdXJlX3RpdGxlLnksIHN0YXRlX2FjY1sxXSwgc3RhdGVfYWNjWzJdLCBzdGF0ZV9hY2NbM10sIDI1NSwgIi1jIiwgMCwgc3RhdGU6dXBwZXIoKSkKICAgICAgICByZW5kZXJlci50ZXh0KGxhdmVuZGVyLnBvcy5tb2Rlcm4ueCArIG1vZGVybl9lZGl0LCBsYXZlbmRlci5wb3MubW9kZXJuLnkgKyAyNSArIChtZWFzdXJlX3RpdGxlLnkgKiAyKSwga2V5c3RhdGVfYWNjWzFdLCBrZXlzdGF0ZV9hY2NbMl0sIGtleXN0YXRlX2FjY1szXSwgMjU1LCAiLWMiLCAwLCBrZXlzdGF0ZV9hY3RpdmUpCgoKCgoJZWxzZWlmIHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmNyb3NzaGFpcl9pbmRpY2F0b3IpID09ICJkZWZhdWx0IiB0aGVuCiAgICAgICAgbG9jYWwgc2NvcGVkID0gZW50aXR5LmdldF9wcm9wKG1lLCAibV9iSXNTY29wZWQiKSA9PSAxCiAgICAgICAgaWYgc2NvcGVkIHRoZW4KICAgICAgICAgICAgbGF2ZW5kZXIucGFpbnRfZnJhY3Rpb24gPSBtYXRoLm1heChsYXZlbmRlci5wYWludF9mcmFjdGlvbiAtIGdsb2JhbHMuZnJhbWV0aW1lKCksMCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIGxhdmVuZGVyLnBhaW50X2ZyYWN0aW9uID0gbWF0aC5taW4obGF2ZW5kZXIucGFpbnRfZnJhY3Rpb24gKyBnbG9iYWxzLmZyYW1ldGltZSgpLDAuNSkKICAgICAgICBlbmQKCiAgICAgICAgbG9jYWwgZnJhY3Rpb24gPSBsYXZlbmRlci5mdW5jcy5lYXNlLmluX291dF9xdWFydChsYXZlbmRlci5wYWludF9mcmFjdGlvbioyKQogICAgICAgIGxvY2FsIHNwYWNlID0gcmVuZGVyZXIubWVhc3VyZV90ZXh0KCItIiwgIiAgIikKICAgICAgICBsb2NhbCB3NCA9IHJlbmRlcmVyLm1lYXN1cmVfdGV4dCgiLSIsICJEVCIpCiAgICAgICAgbG9jYWwgdzUgPSByZW5kZXJlci5tZWFzdXJlX3RleHQoIi0iLCAiT1MiKQogICAgICAgIGxvY2FsIHc2ID0gcmVuZGVyZXIubWVhc3VyZV90ZXh0KCItIiwgIkZTIikKCiAgICAgICAgaWYgZHQgb3IgbGF2ZW5kZXIucGFpbnQuZHQgfj0gMCBvciBsYXZlbmRlci5wYWludC53YXNfZHQgdGhlbgogICAgICAgICAgICBpZiBkdCB0aGVuCiAgICAgICAgICAgICAgICBsYXZlbmRlci5wYWludC5kdCA9IG1hdGgubWluKGxhdmVuZGVyLnBhaW50LmR0ICsgZ2xvYmFscy5mcmFtZXRpbWUoKSo1LDEpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGxhdmVuZGVyLnBhaW50LmR0ID0gbWF0aC5tYXgobGF2ZW5kZXIucGFpbnQuZHQgLSBnbG9iYWxzLmZyYW1ldGltZSgpKjUsMCkKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGxvY2FsIHN0ciA9ICJEVCIKICAgICAgICAgICAgbG9jYWwgc2l6ZSA9IHc0ICsgKHNwYWNlICsgdzUpICogbGF2ZW5kZXIuZnVuY3MuZWFzZS5pbl9vdXRfcXVhcnQobGF2ZW5kZXIucGFpbnQub3MpICsgKHNwYWNlICsgdzYpICogbGF2ZW5kZXIuZnVuY3MuZWFzZS5pbl9vdXRfcXVhcnQobGF2ZW5kZXIucGFpbnQuZnMpICsgc3BhY2UgKiBsYXZlbmRlci5mdW5jcy5lYXNlLmluX291dF9xdWFydChsYXZlbmRlci5wYWludC5vcykgKiBsYXZlbmRlci5mdW5jcy5lYXNlLmluX291dF9xdWFydChsYXZlbmRlci5wYWludC5mcykKICAgICAgICAgICAgcmVuZGVyZXIudGV4dCh4LzIgLSAoc2l6ZS8yKSAqIGZyYWN0aW9uLCB5LzIgKyAyMCArIDIwICogbGF2ZW5kZXIuZnVuY3MuZWFzZS5pbl9vdXRfcXVhcnQobGF2ZW5kZXIucGFpbnQuZHQpLCAyNTUsIDI1NSwgMjU1LCAyNTUgKiBsYXZlbmRlci5mdW5jcy5lYXNlLmluX291dF9xdWFydChsYXZlbmRlci5wYWludC5kdCksICItIiwgMCwgc3RyKQogICAgICAgIGVuZAogICAgICAgIGlmIGZzIG9yIGxhdmVuZGVyLnBhaW50LmZzIH49IDAgdGhlbgogICAgICAgICAgICBpZiBmcyB0aGVuCiAgICAgICAgICAgICAgICBsYXZlbmRlci5wYWludC5mcyA9IG1hdGgubWluKGxhdmVuZGVyLnBhaW50LmZzICsgZ2xvYmFscy5mcmFtZXRpbWUoKSo1LDEpCiAgICAgICAgICAgIGVsc2UKCiAgICAgICAgICAgICAgICBsYXZlbmRlci5wYWludC5mcyA9IG1hdGgubWF4KGxhdmVuZGVyLnBhaW50LmZzIC0gZ2xvYmFscy5mcmFtZXRpbWUoKSo1LDApCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBsb2NhbCBzdHIgPSAiRlMiCiAgICAgICAgICAgIGxvY2FsIHNpemUgPSB3NiArIChzcGFjZSArIHc0KSAqIGxhdmVuZGVyLmZ1bmNzLmVhc2UuaW5fb3V0X3F1YXJ0KGxhdmVuZGVyLnBhaW50LmR0KSArIChzcGFjZSArIHc1KSAqIGxhdmVuZGVyLmZ1bmNzLmVhc2UuaW5fb3V0X3F1YXJ0KGxhdmVuZGVyLnBhaW50Lm9zKSArIHNwYWNlICogbGF2ZW5kZXIuZnVuY3MuZWFzZS5pbl9vdXRfcXVhcnQobGF2ZW5kZXIucGFpbnQuZHQpICogbGF2ZW5kZXIuZnVuY3MuZWFzZS5pbl9vdXRfcXVhcnQobGF2ZW5kZXIucGFpbnQub3MpCiAgICAgICAgICAgIHJlbmRlcmVyLnRleHQoeC8yIC0gKHNpemUvMikgKiBmcmFjdGlvbiArICh3NCArIHNwYWNlKSAqIGxhdmVuZGVyLmZ1bmNzLmVhc2UuaW5fb3V0X3F1YXJ0KGxhdmVuZGVyLnBhaW50LmR0KSwgeS8yICsgMjAgKyAyMCAqIGxhdmVuZGVyLmZ1bmNzLmVhc2UuaW5fb3V0X3F1YXJ0KGxhdmVuZGVyLnBhaW50LmZzKSwgMjU1LCAyNTUsIDI1NSwgMjU1ICogbGF2ZW5kZXIuZnVuY3MuZWFzZS5pbl9vdXRfcXVhcnQobGF2ZW5kZXIucGFpbnQuZnMpLCAiLSIsIDAsIHN0cikKICAgICAgICBlbmQKCiAgICAgICAgaWYgb3Mgb3IgbGF2ZW5kZXIucGFpbnQub3Mgfj0gMCB0aGVuCiAgICAgICAgICAgIGlmIG9zIHRoZW4KICAgICAgICAgICAgICAgIGxhdmVuZGVyLnBhaW50Lm9zID0gbWF0aC5taW4obGF2ZW5kZXIucGFpbnQub3MgKyBnbG9iYWxzLmZyYW1ldGltZSgpICogNSwxKQogICAgICAgICAgICBlbHNlCgogICAgICAgICAgICAgICAgbGF2ZW5kZXIucGFpbnQub3MgPSBtYXRoLm1heChsYXZlbmRlci5wYWludC5vcyAtIGdsb2JhbHMuZnJhbWV0aW1lKCkgKiA1LDApCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBsb2NhbCBzdHIgPSAiT1MiCiAgICAgICAgICAgIGxvY2FsIHNpemUgPSB3NSArIChzcGFjZSArIHc2KSAqIGxhdmVuZGVyLmZ1bmNzLmVhc2UuaW5fb3V0X3F1YXJ0KGxhdmVuZGVyLnBhaW50LmZzKSArIChzcGFjZSArIHc0KSAqIGxhdmVuZGVyLmZ1bmNzLmVhc2UuaW5fb3V0X3F1YXJ0KGxhdmVuZGVyLnBhaW50LmR0KSArIHNwYWNlICogbGF2ZW5kZXIuZnVuY3MuZWFzZS5pbl9vdXRfcXVhcnQobGF2ZW5kZXIucGFpbnQuZnMpICogbGF2ZW5kZXIuZnVuY3MuZWFzZS5pbl9vdXRfcXVhcnQobGF2ZW5kZXIucGFpbnQuZHQpCiAgICAgICAgICAgIHJlbmRlcmVyLnRleHQoeC8yIC0gKHNpemUvMikgKiBmcmFjdGlvbiArICh3NCArIHNwYWNlKSpsYXZlbmRlci5mdW5jcy5lYXNlLmluX291dF9xdWFydChsYXZlbmRlci5wYWludC5kdCkgKyAoc3BhY2UgKyB3NikgKiBsYXZlbmRlci5mdW5jcy5lYXNlLmluX291dF9xdWFydChsYXZlbmRlci5wYWludC5mcyksIHkvMiArIDIwICsgMjAgKiBsYXZlbmRlci5mdW5jcy5lYXNlLmluX291dF9xdWFydChsYXZlbmRlci5wYWludC5vcyksIDI1NSwgMjU1LCAyNTUsIDI1NSogbGF2ZW5kZXIuZnVuY3MuZWFzZS5pbl9vdXRfcXVhcnQobGF2ZW5kZXIucGFpbnQub3MpLCAiLSIsIDAsIHN0cikKCiAgICAgICAgZW5kCgogICAgICAgIGxvY2FsIHIsIGcsIGIsIGEgPSB1bnBhY2sobGF2ZW5kZXIuZnVuY3MubWlzYy50YWJsZV9sZXJwKHsyNTUsMjU1LDI1NSwyNTV9LCB7YXIsIGFnLCBhYiwgYWF9LCBtYXRoLmFicyhtYXRoLnNpbihnbG9iYWxzLmN1cnRpbWUoKS8yKSkpKQoKICAgICAgICBsb2NhbCByMiwgZzIsIGIyLCBhMiA9IHVucGFjayhsYXZlbmRlci5mdW5jcy5taXNjLnRhYmxlX2xlcnAoe2FyLCBhZywgYWIsIGFhfSwgezI1NSwyNTUsMjU1LDE1NX0sIG1hdGguYWJzKG1hdGguc2luKGdsb2JhbHMuY3VydGltZSgpLzIpKSkpCgogICAgICAgIGxvY2FsIHcxID0gcmVuZGVyZXIubWVhc3VyZV90ZXh0KCItIiwgIiBMQVZFTkRFUiAiKQoKICAgICAgICBsb2NhbCB3MiA9IHJlbmRlcmVyLm1lYXN1cmVfdGV4dCgiLSIsIHN0cmluZy51cHBlcihidWlsZCkpCgogICAgICAgIHJlbmRlcmVyLnRleHQoeC8yIC0gKCh3MSArIHcyKS8yICogZnJhY3Rpb24pLCB5LzIgKyAyMCwgciwgZywgYiwgYSwgIi0iLCAwLCAiTEFWRU5ERVIgIikKCiAgICAgICAgcmVuZGVyZXIudGV4dCh4LzIgLSAoKHcxICsgdzIpLzIgKiBmcmFjdGlvbikgKyB3MSwgeS8yICsgMjAsIHIyLCBnMiwgYjIsIGEyICwgIi0iLCAwLCBzdHJpbmcudXBwZXIoYnVpbGQpKQoKICAgICAgICBsb2NhbCB3MyA9IHJlbmRlcmVyLm1lYXN1cmVfdGV4dCgiLSIsIHN0cmluZy51cHBlcih0b3N0cmluZyhsYXZlbmRlci5hbnRpYWltLnN0YXRlKSkpCgogICAgICAgIHJlbmRlcmVyLnRleHQoeC8yIC0gKHczLzIpKmZyYWN0aW9uLCB5LzIgKyAzMCwgMjU1LCAyNTUsIDI1NSwgMTU1LCAiLSIsIDAsIHN0cmluZy51cHBlcih0b3N0cmluZyhsYXZlbmRlci5hbnRpYWltLnN0YXRlKSkpCgogICAgICAgIGxhdmVuZGVyLndhc19zY29wZWQgPSBzY29wZWQKCgllbHNlaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuY3Jvc3NoYWlyX2luZGljYXRvcikgPT0gInNpbXBsZSIgdGhlbgoKCWVuZAoKZW5kCgotLSBNQU5VQUwgQUEgQVJST1dTCgotLSBLRVlCSU5EUwoKCi0taW5pdCBiaW5kIGxpc3QKZm9yIGksIGJpbmQgaW4gaXBhaXJzKGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMuYmluZF9saXN0KSBkbwogICAgbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5iaW5kc1tiaW5kXSA9IHsKICAgICAgICBbInBvcyJdID0gdmVjdG9yKGxhdmVuZGVyLmxvY2F0aW9ucy5rZXliaW5kcyksCiAgICAgICAgWyJvcGFjaXR5Il0gPSAwLAogICAgICAgIFsib3BhY2l0eV9tb2RlIl0gPSAwLAogICAgICAgIFsicmVmIl0gPSBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLnJlZl9saXN0W2ldCiAgICB9CmVuZAoKLS0gaGFuZGxlIGFuZCByZW5kZXIga2V5YmluZHMKbG9jYWwgZHJhZ2dpbmdfa2JhYV9vcGFjaXR5ID0gMApsb2NhbCBkcmFnX2tiX2NoZWNrID0gZmFsc2UKbGF2ZW5kZXIuaGFuZGxlcnMudmlzdWFscy5rZXliaW5kcyA9IGZ1bmN0aW9uKCkKCiAgICBpZiBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcihtZSkgPT0gbmlsIGFuZCBub3QgKHVpLmlzX21lbnVfb3BlbigpIGFuZCBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIpIHRoZW4KICAgICAgICByZXR1cm4gZW5kCgogICAgbG9jYWwgdGV4dF9jb2wgPSB7IDIyNSwgMjI1LCAyMzIgfQogICAgbG9jYWwgYmFyX2NvbCA9IHsgdWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMua2V5YmluZF9zZWNfYmFyX2FjY2VudCkgfQogICAgbG9jYWwgbWFpbl9jb2wgPSB7IDE5LCAxOSwgMTkgfQogICAgbG9jYWwgc2NyZWVuID0gdmVjdG9yKGNsaWVudC5zY3JlZW5fc2l6ZSgpKQogICAgbG9jYWwgbW91c2UgPSB2ZWN0b3IodWkubW91c2VfcG9zaXRpb24oKSkKICAgIGxvY2FsIG1vdXNlX2Rvd24gPSBjbGllbnQua2V5X3N0YXRlKDB4MDEpCiAgICBsb2NhbCBtZW51X29wZW4gPSB1aS5pc19tZW51X29wZW4oKSBhbmQgbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiCiAgICBsb2NhbCBtYXhfd2lkdGggPSBsYXZlbmRlci5mdW5jcy5taXNjLmtiX2dldF9tYXhfd2lkdGgoKQogICAgbG9jYWwgY2hlY2tfa2V5YmluZHMgPSB1aS5nZXQobGF2ZW5kZXIucmVmcy5yYWdlLmRvdWJsZV90YXBfa2V5KSBvciB1aS5nZXQobGF2ZW5kZXIucmVmcy5taXNjLmhpZGVfc2hvdHNfa2V5KSBvciB1aS5nZXQobGF2ZW5kZXIucmVmcy5yYWdlLnF1aWNrX3BlZWtfa2V5KSBvciB1aS5nZXQodWkucmVmZXJlbmNlKCJSQUdFIiwgIkFpbWJvdCIsICJGb3JjZSBib2R5IGFpbSIpKSBvciB1aS5nZXQodWkucmVmZXJlbmNlKCJSQUdFIiwgIkFpbWJvdCIsICJGb3JjZSBzYWZlIHBvaW50IikpIG9yIHVpLmdldCh1aS5yZWZlcmVuY2UoIlJBR0UiLCAiT3RoZXIiLCAiRHVjayBwZWVrIGFzc2lzdCIpKSBvciB1aS5nZXQobGF2ZW5kZXIucmVmcy5hYS5mcmVlc3RhbmRpbmdfa2V5KSBvciB1aS5nZXQobGF2ZW5kZXIucmVmcy5waW5nX3NwaWtlX2tleSkgb3IgdWkuZ2V0KGxhdmVuZGVyLnJlZnMucmFnZS5tZF9rZXkpCiAgICBsb2NhbCBoID0gbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5oZWlnaHQKICAgIGxvY2FsIHBhZGRpbmcgPSBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLnBhZGRpbmcKCiAgICBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLmhvdmVyaW5nID0gbW91c2UueCA+PSBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLnBvcy54IC0gcGFkZGluZy8yIGFuZCBtb3VzZS54IDw9IGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMucG9zLnggKyBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLndpZHRoICsgcGFkZGluZy8yIGFuZCBtb3VzZS55ID49IGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMucG9zLnkgYW5kIG1vdXNlLnkgPD0gbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5wb3MueSArIGgKCiAgICBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLndpZHRoID0gbWVudV9vcGVuIGFuZCBlYXNlLnF1YWRfaW4oMC4yLCBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLndpZHRoLCAxMzAgLSBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLndpZHRoLCAxKSBvciBlYXNlLnF1YWRfaW4oMC4yLCBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLndpZHRoLCBtYXhfd2lkdGggLSBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLndpZHRoIC0gMTAsIDEpCgogICAgaWYgbWVudV9vcGVuIHRoZW4KICAgICAgICAtLWRyYWcKICAgICAgICBpZiBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLmhvdmVyaW5nIHRoZW4KICAgICAgICAgICAgbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5kcmFnZ2luZyA9IG1vdXNlX2Rvd24KICAgICAgICBlbmQKCiAgICAgICAgaWYgbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5kcmFnZ2luZyB0aGVuCiAgICAgICAgICAgIGlmIG5vdCBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLmluX2RyYWcgdGhlbgogICAgICAgICAgICAgICAgbGF2ZW5kZXIubG9jYXRpb25zLmtleWJpbmRzID0gdmVjdG9yKGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMucG9zLnggLSBtb3VzZS54LCBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLnBvcy55IC0gbW91c2UueSkKICAgICAgICAgICAgICAgIGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMuaW5fZHJhZyA9IHRydWUKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICAgICAgZHJhZ2dpbmdfa2JhYV9vcGFjaXR5ID0gZWFzZS5xdWFkX2luX291dCgwLjIsIGRyYWdnaW5nX2tiYWFfb3BhY2l0eSwgKGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMuaW5fZHJhZyBhbmQgMTE1IG9yIDApIC0gZHJhZ2dpbmdfa2JhYV9vcGFjaXR5LCAxKQoKICAgICAgICBpZiBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLmRyYWdnaW5nIHRoZW4KICAgICAgICAgICAgbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5wb3MgPSB2ZWN0b3IobWF0aC5tYXgoMCwgbWF0aC5taW4oc2NyZWVuLnggLSBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLndpZHRoLCBtb3VzZS54ICsgbGF2ZW5kZXIubG9jYXRpb25zLmtleWJpbmRzLngpKSwgbWF0aC5tYXgoMCwgbWF0aC5taW4oc2NyZWVuLnkgLSAyMCwgbW91c2UueSArIGxhdmVuZGVyLmxvY2F0aW9ucy5rZXliaW5kcy55KSkpCiAgICAgICAgZWxzZQogICAgICAgICAgICBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLmluX2RyYWcgPSBmYWxzZQogICAgICAgIGVuZAogICAgICAgIGlmIGRyYWdnaW5nX2tiYWFfb3BhY2l0eSA+IDEgdGhlbgogICAgICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUobGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5wb3MueCAqIC0gMSAsIGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMucG9zLnkgKyBwYWRkaW5nIC8gMiwgcmF3X3MueCAqIHJhd19zLngsIDEsIDI1NSwgMjU1LCAyNTUsIGRyYWdnaW5nX2tiYWFfb3BhY2l0eSkKICAgICAgICAgICAgcmVuZGVyZXIucmVjdGFuZ2xlKGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMucG9zLnggKyBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLndpZHRoIC8gMiwgbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5wb3MueSAqIC0gMSwgMSwgcmF3X3MueSAqIHJhd19zLnksIDI1NSwgMjU1LCAyNTUsIGRyYWdnaW5nX2tiYWFfb3BhY2l0eSkKICAgICAgICAgICAgcmVuZGVyZXIucmVjdGFuZ2xlKDAsIDAsIHhfbWFpbiwgeV9tYWluLCA1NSwgNTUsIDU1LCBkcmFnZ2luZ19rYmFhX29wYWNpdHkpCiAgICAgICAgICAgIHJlbmRlcmVyLmJsdXIoMCwgMCwgeF9tYWluLCB5X21haW4pCiAgICAgICAgZW5kCgogICAgICAgIC0tb3BhY2l0eQogICAgICAgIGlmIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuZXh0cmFfdmlzdWFsKSwgImtleWJpbmQgbGlzdCIpIHRoZW4KICAgICAgICAgICAgaWYgY2hlY2tfa2V5YmluZHMgb3IgbWVudV9vcGVuIHRoZW4KICAgICAgICAgICAgICAgIGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMub3BhY2l0eSA9IGVhc2UucXVhZF9pbigwLjQsIGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMub3BhY2l0eSwgMjU1IC0gbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5vcGFjaXR5LCAxKQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLm9wYWNpdHkgPSBlYXNlLnF1YWRfaW4oMC40LCBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLm9wYWNpdHksIDAgLSBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLm9wYWNpdHksIDEpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVsc2UKICAgICAgICAgICAgbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5vcGFjaXR5ID0gZWFzZS5xdWFkX2luKDAuMywgbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5vcGFjaXR5LCAwIC0gbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5vcGFjaXR5LCAxKQogICAgICAgIGVuZAogICAgZW5kCgogICAgaWYgbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5vcGFjaXR5IDwgMTAgdGhlbgogICAgICAgIHJldHVybiBlbmQKCgogICAgLS1yZW5kZXIgdG9wCiAgICBsYXZlbmRlci5mdW5jcy5yZW5kZXJlci5yb3VuZGVkX3JlY3RhbmdsZShsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLnBvcy54IC0gcGFkZGluZy8yLCBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLnBvcy55LCBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLndpZHRoICsgcGFkZGluZywgaCwgbWFpbl9jb2xbMV0sIG1haW5fY29sWzJdLCBtYWluX2NvbFszXSwgbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5vcGFjaXR5LCA1KQogICAgbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIucmVjdGFuZ2xlX291dGxpbmUobGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5wb3MueCAtIHBhZGRpbmcvMiwgbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5wb3MueSwgbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy53aWR0aCArIHBhZGRpbmcsIGgsIDMyLCAzMiwgMzIsIGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMub3BhY2l0eSwgMiwgMykKICAgIHJlbmRlcmVyLnRleHQobGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5wb3MueCArIGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMud2lkdGgvMiwgbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5wb3MueSArIGgvMiwgMjI1LCAyMjUsIDIzMiwgbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5vcGFjaXR5LCAiY2IiLCAwLCBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLnRpdGxlKQogICAgbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIuZmFkZV9yb3VuZGVkX3JlY3Rfbm90aWYobGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5wb3MueCAtIHBhZGRpbmcvMiAtIDEsIGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMucG9zLnksIGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMud2lkdGggKyBwYWRkaW5nICsgMiwgaCwgNSwgYmFyX2NvbFsxXSwgYmFyX2NvbFsyXSwgYmFyX2NvbFszXSwgbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5vcGFjaXR5LCAxOTAsIGggKiAyKQoKICAgIC0tcmVuZGVyIGJpbmRzCiAgICBsb2NhbCBjb3VudCA9IDAKICAgIGZvciBuYW1lLCBiaW5kIGluIHBhaXJzKGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMuYmluZHMpIGRvCiAgICAgICAgbG9jYWwgcmVmID0gdHlwZShiaW5kLnJlZikgPT0gInRhYmxlIiBhbmQgYmluZC5yZWZbMl0gb3IgYmluZC5yZWYKICAgICAgICBsb2NhbCBzdGF0ZSA9IG1lbnVfb3BlbiBhbmQgdHJ1ZSBvciB1aS5nZXQocmVmKQogICAgICAgIGxvY2FsIG1vZGUgPSBsYXZlbmRlci5mdW5jcy5taXNjLmdldF9rZXlfbW9kZShyZWYpCgogICAgICAgIGlmIG1lbnVfb3BlbiBhbmQgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5leHRyYV92aXN1YWwpLCAia2V5YmluZCBsaXN0IikgdGhlbgogICAgICAgICAgICBiaW5kLnBvcy54ID0gbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5wb3MueCAtIChwYWRkaW5nLzIpCiAgICAgICAgICAgIGJpbmQucG9zLnkgPSBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLnBvcy55ICsgaCArICgxNSAqIGNvdW50KQogICAgICAgIGVsc2UKICAgICAgICAgICAgYmluZC5wb3MueCA9IGVhc2UucXVhZF9pbigwLjQsIGJpbmQucG9zLngsIChsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLnBvcy54IC0gKHBhZGRpbmcvMikpIC0gYmluZC5wb3MueCwgMSkKICAgICAgICAgICAgYmluZC5wb3MueSA9IGVhc2UucXVhZF9pbigwLjQsIGJpbmQucG9zLnksIGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMucG9zLnkgKyBoICsgKDE1ICogY291bnQpIC0gYmluZC5wb3MueSwgMSkKICAgICAgICBlbmQKCgogICAgICAgIGlmIHN0YXRlIGFuZCBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmV4dHJhX3Zpc3VhbCksICJrZXliaW5kIGxpc3QiKSB0aGVuCiAgICAgICAgICAgIGJpbmQub3BhY2l0eSA9IGVhc2UucXVhZF9pbigwLjQsIGJpbmQub3BhY2l0eSwgMjU1IC0gYmluZC5vcGFjaXR5LCAxKQogICAgICAgICAgICBiaW5kLm9wYWNpdHlfbW9kZSA9IGVhc2UucXVhZF9pbigwLjQsIGJpbmQub3BhY2l0eV9tb2RlLCAxMjUgLSBiaW5kLm9wYWNpdHlfbW9kZSwgMSkKICAgICAgICBlbHNlCiAgICAgICAgICAgIGJpbmQub3BhY2l0eSA9IGVhc2UucXVhZF9pbigwLjQsIGJpbmQub3BhY2l0eSwgMCAtIGJpbmQub3BhY2l0eSwgMSkKICAgICAgICAgICAgYmluZC5vcGFjaXR5X21vZGUgPSBlYXNlLnF1YWRfaW4oMC40LCBiaW5kLm9wYWNpdHlfbW9kZSwgMCAtIGJpbmQub3BhY2l0eV9tb2RlLCAxKQogICAgICAgIGVuZAoKICAgICAgICBpZiBiaW5kLm9wYWNpdHkgPD0gMjAgdGhlbgogICAgICAgICAgICBnb3RvIHNraXAKICAgICAgICBlbmQKCiAgICAgICAgY291bnQgPSBjb3VudCArIDEKCiAgICAgICAgbG9jYWwgY29sID0gezIyNiwgMjI2LCAyMjZ9CiAgICAgICAgCiAgICAgICAgcmVuZGVyZXIudGV4dChiaW5kLnBvcy54ICsgbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIubWVhc3VyZV90ZXh0KCJjIiwgbmFtZSkueC8yICsgNSwgYmluZC5wb3MueSArIGgvMiwgdGV4dF9jb2xbMV0sIHRleHRfY29sWzJdLCB0ZXh0X2NvbFszXSwgYmluZC5vcGFjaXR5LCAiYyIsIDAsIG5hbWU6bG93ZXIoKSkKICAgICAgICByZW5kZXJlci50ZXh0KGJpbmQucG9zLnggKyBsYXZlbmRlci52aXN1YWxzLmtleWJpbmRzLndpZHRoIC0gbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIubWVhc3VyZV90ZXh0KCJjIiwgbW9kZSkueC8yICsgMTUsIGJpbmQucG9zLnkgKyBoLzIsIGNvbFsxXSwgY29sWzJdLCBjb2xbM10sIGJpbmQub3BhY2l0eV9tb2RlLCAiYyIsIDAsIG1vZGUpCgogICAgICAgIDo6c2tpcDo6CiAgICBlbmQKZW5kCgotLSBXYXRlcm1hcmsKbG9jYWwgZHJhZ2dpbmdfb3BhY2l0eV93bSA9IDAKbGF2ZW5kZXIuaGFuZGxlcnMudmlzdWFscy53YXRlcm1hcmsgPSBmdW5jdGlvbigpCiAgICBsb2NhbCBwYWRkaW5nID0gbGF2ZW5kZXIudmlzdWFscy53YXRlcm1hcmsucGFkZGluZwogICAgbG9jYWwgY29sb3VyID0gbGF2ZW5kZXIudWkudmlzdWFscy53YXRlcm1hcmtfYWNjZW50CiAgICBsb2NhbCByLCBnLCBiID0gdWkuZ2V0KGNvbG91cikKICAgIGxvY2FsIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsID0gY2xpZW50LnN5c3RlbV90aW1lKCkKICAgIGxvY2FsIGhyLCBtLCBzID0gc3RyaW5nLmZvcm1hdCgiJTAyZCIsIGhvdXIpLCBzdHJpbmcuZm9ybWF0KCIlMDJkIiwgbWludXRlKSwgc3RyaW5nLmZvcm1hdCgiJTAyZCIsIHNlY29uZCkKICAgIGxvY2FsIHN0cmluZyA9ICJsYXZlbmRlciIuLiBsYXZlbmRlci5mdW5jcy5yZW5kZXJlci5jb2xvdXJfdGV4dCgiLnB1YiIsIGNvbG91cikgLi4gIiBbIiAuLiBidWlsZCAuLiAiXSB8ICIgLi4gbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIuY29sb3VyX3RleHQodXNlcm5hbWUsIGNvbG91cikgLi4gIiB8ICIgLi4gbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIuY29sb3VyX3RleHQoaHIsIGNvbG91cikgLi4gIjoiIC4uIGxhdmVuZGVyLmZ1bmNzLnJlbmRlcmVyLmNvbG91cl90ZXh0KG0sIGNvbG91cikgLi4gIjoiIC4uIGxhdmVuZGVyLmZ1bmNzLnJlbmRlcmVyLmNvbG91cl90ZXh0KHMsIGNvbG91cikKICAgIGxvY2FsIG1lYXN1cmVfc3RyaW5nID0gdmVjdG9yKHJlbmRlcmVyLm1lYXN1cmVfdGV4dCgiIiwgc3RyaW5nIC4uICIgICAiKSkKICAgIGxvY2FsIGggPSAyNQogICAgbG9jYWwgdyA9IG1lYXN1cmVfc3RyaW5nLnggKyAxMAoKICAgIGlmIG5vdCBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmV4dHJhX3Zpc3VhbCksICJ3YXRlcm1hcmsiKSB0aGVuCiAgICAgICAgcmV0dXJuIGVuZAoKICAgICAtLQogICAgIGxvY2FsIG1vdXNlX3dtID0gdmVjdG9yKHVpLm1vdXNlX3Bvc2l0aW9uKCkpCiAgICAgbG9jYWwgbW91c2VfZG93bl93bSA9IGNsaWVudC5rZXlfc3RhdGUoMHgxKQogICAgIGxvY2FsIGhvdmVyaW5nX3dtID0gbW91c2Vfd20ueCA+PSAobGF2ZW5kZXIucG9zLndhdGVybWFyay54IC0gcGFkZGluZy54KSAtIHcgYW5kIG1vdXNlX3dtLnggPD0gKChsYXZlbmRlci5wb3Mud2F0ZXJtYXJrLnggLSBwYWRkaW5nLngpIC0gdykgKyB3IGFuZCBtb3VzZV93bS55ID49IGxhdmVuZGVyLnBvcy53YXRlcm1hcmsueSArIHBhZGRpbmcueSBhbmQgbW91c2Vfd20ueSA8PSBsYXZlbmRlci5wb3Mud2F0ZXJtYXJrLnkgKyBwYWRkaW5nLnkgKyBoCiAKICAgICBpZiBtb3VzZV9kb3duX3dtIHRoZW4KICAgICAgICAgaWYgaG92ZXJpbmdfd20gdGhlbgogICAgICAgICAgICAgZHJhZ2dpbmdfd20gPSB0cnVlCiAgICAgICAgIGVuZAogICAgIGVsc2UKICAgICAgICAgZHJhZ2dpbmdfd20gPSBmYWxzZQogICAgIGVuZAogICAgICAgIC0tIAogICAgIGlmIGRyYWdnaW5nX3dtIGFuZCBub3QgbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5kcmFnZ2luZyBhbmQgbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiIHRoZW4KICAgICAgICAgaWYgbm90IGluX2RyYWdfd20gdGhlbgogICAgICAgICAgICAgZHJhZ19wb3Nfd20gPSBsYXZlbmRlci5wb3Mud2F0ZXJtYXJrIC0gbW91c2Vfd20KICAgICAgICAgICAgIGluX2RyYWdfd20gPSB0cnVlCiAgICAgICAgIGVuZAogICAgICAgICBsYXZlbmRlci5wb3Mud2F0ZXJtYXJrID0gZHJhZ19wb3Nfd20gKyBtb3VzZV93bQogICAgIGVuZAogCiAgICAgZHJhZ2dpbmdfb3BhY2l0eV93bSA9IGVhc2UucXVhZF9pbl9vdXQoMC4yLCBkcmFnZ2luZ19vcGFjaXR5X3dtLCAoZHJhZ2dpbmdfd20gYW5kIDExNSBvciAwKSAtIGRyYWdnaW5nX29wYWNpdHlfd20sIDEpCiAgICAgaWYgdWkuaXNfbWVudV9vcGVuKCkgYW5kIGxhdmVuZGVyLnVpLmN1cnJlbnRfdGFiID09ICJWSVNVQUxTIiBhbmQgbm90IGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMuZHJhZ2dpbmcgdGhlbgogICAgICAgIGxhdmVuZGVyLnZpc3VhbHMud2F0ZXJtYXJrLm9wYWNpdHkgPSBlYXNlLnF1YWRfaW5fb3V0KDAuMywgbGF2ZW5kZXIudmlzdWFscy53YXRlcm1hcmsub3BhY2l0eSwgMjU1IC0gbGF2ZW5kZXIudmlzdWFscy53YXRlcm1hcmsub3BhY2l0eSwgMSkKICAgICAgIC0tIHJlbmRlcmVyLnJlY3RhbmdsZShsYXZlbmRlci5wb3Mud2F0ZXJtYXJrLngsIGxhdmVuZGVyLnBvcy53YXRlcm1hcmsueSArIHBhZGRpbmcueSArIChtZWFzdXJlX3N0cmluZy55IC8gMiksIDEsICgobGF2ZW5kZXIucG9zLndhdGVybWFyay54ICogMiAtIG1lYXN1cmVfc3RyaW5nLngpIC0gcGFkZGluZy54ICogMikgKiAyLCAyNTUsIDI1NSwgMjU1LCBkcmFnZ2luZ19vcGFjaXR5X3dtKQogICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSgobGF2ZW5kZXIucG9zLndhdGVybWFyay54IC0gcGFkZGluZy54KSAtIHcgLyAyLCBsYXZlbmRlci5wb3Mud2F0ZXJtYXJrLnkgLyBsYXZlbmRlci5wb3Mud2F0ZXJtYXJrLnksIDEsIGxhdmVuZGVyLnBvcy53YXRlcm1hcmsueCAqIGxhdmVuZGVyLnBvcy53YXRlcm1hcmsueCwgMjU1LCAyNTUsIDI1NSwgZHJhZ2dpbmdfb3BhY2l0eV93bSkKICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoKChsYXZlbmRlci5wb3Mud2F0ZXJtYXJrLnggLSBwYWRkaW5nLngpIC0gdyAvIDIpICogLSAxLCBsYXZlbmRlci5wb3Mud2F0ZXJtYXJrLnkgKyBoICsgcGFkZGluZy55IC8gMiwgcmF3X3MueCAqIHJhd19zLngsIDEsIDI1NSwgMjU1LCAyNTUsIGRyYWdnaW5nX29wYWNpdHlfd20pCgogICAgICAgIHJlbmRlcmVyLnJlY3RhbmdsZSgwLCAwLCB4X21haW4sIHlfbWFpbiwgNTUsIDU1LCA1NSwgZHJhZ2dpbmdfb3BhY2l0eV93bSkKICAgICAgICBpZiBkcmFnZ2luZ193bSB0aGVuCiAgICAgICAgICAgIHJlbmRlcmVyLmJsdXIoMCwgMCwgeF9tYWluLCB5X21haW4pCiAgICAgICAgZW5kCiAgICAgZWxzZQogICAgICAgIGxhdmVuZGVyLnZpc3VhbHMud2F0ZXJtYXJrLm9wYWNpdHkgPSBlYXNlLnF1YWRfaW4oMC4zLCBsYXZlbmRlci52aXN1YWxzLndhdGVybWFyay5vcGFjaXR5LCAobGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5leHRyYV92aXN1YWwpLCAid2F0ZXJtYXJrIikgYW5kIDI1NSBvciAwKSAtIGxhdmVuZGVyLnZpc3VhbHMud2F0ZXJtYXJrLm9wYWNpdHksIDEpCiAgICBlbmQKICAgIAogICAgaWYgbGF2ZW5kZXIudmlzdWFscy53YXRlcm1hcmsub3BhY2l0eSA8IDEwIHRoZW4KICAgICAgICByZXR1cm4gZW5kCgogICAgbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIucm91bmRlZF9yZWN0YW5nbGUoKGxhdmVuZGVyLnBvcy53YXRlcm1hcmsueCAtIHBhZGRpbmcueCkgLSB3ICwgbGF2ZW5kZXIucG9zLndhdGVybWFyay55ICsgcGFkZGluZy55LCB3LCBoLCAxOSwgMTksIDE5LCBsYXZlbmRlci52aXN1YWxzLndhdGVybWFyay5vcGFjaXR5LCA1KQogICAgbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIucmVjdGFuZ2xlX291dGxpbmUoKGxhdmVuZGVyLnBvcy53YXRlcm1hcmsueCAtIHBhZGRpbmcueCkgLSB3ICwgbGF2ZW5kZXIucG9zLndhdGVybWFyay55ICsgcGFkZGluZy55LCB3LCBoLCAzMiwgMzIsIDMyLCBsYXZlbmRlci52aXN1YWxzLndhdGVybWFyay5vcGFjaXR5LCAyLCAzKQogICAgbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIuZmFkZV9yb3VuZGVkX3JlY3Rfbm90aWYoKGxhdmVuZGVyLnBvcy53YXRlcm1hcmsueCAtIHBhZGRpbmcueCAtIDEpIC0gdyAsIGxhdmVuZGVyLnBvcy53YXRlcm1hcmsueSArIHBhZGRpbmcueSwgdyArIDIsIGgsIDUsIHIsIGcsIGIsIGxhdmVuZGVyLnZpc3VhbHMud2F0ZXJtYXJrLm9wYWNpdHksIDE5MCwgaCAqIDIpCgogICAgaWYgbGF2ZW5kZXIudmlzdWFscy53YXRlcm1hcmsub3BhY2l0eSA+IDk1IHRoZW4KICAgICAgICByZW5kZXJlci50ZXh0KChsYXZlbmRlci5wb3Mud2F0ZXJtYXJrLnggLSBtZWFzdXJlX3N0cmluZy54KSAtIHBhZGRpbmcueCwgbGF2ZW5kZXIucG9zLndhdGVybWFyay55ICsgcGFkZGluZy55ICsgKG1lYXN1cmVfc3RyaW5nLnkgLyAyKSwgMjI2LCAyMjYsIDIyNiwgMjU1LCAiIiwgMCwgc3RyaW5nKQogICAgZW5kCgplbmQKCmxhdmVuZGVyLmhhbmRsZXJzLnZpc3VhbHMuZGVidWdfcGFuZWwgPSBmdW5jdGlvbigpCiAgICBpZiBlbnRpdHkuaXNfYWxpdmUoZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSkgPT0gZmFsc2UgdGhlbiAKICAgICAgICByZXR1cm4gZW5kCiAgICBsb2NhbCBwYWRkaW5nID0gbGF2ZW5kZXIudmlzdWFscy5wYW5lbC5wYWRkaW5nCiAgICBsb2NhbCBjb2xvdXIgPSBsYXZlbmRlci51aS52aXN1YWxzLmRlYnVnX3BhbmVsX2FjY2VudAogICAgbG9jYWwgciwgZywgYiA9IHVpLmdldChjb2xvdXIpCiAgICBsb2NhbCBoID0gMTU1CiAgICBsb2NhbCB3ID0gMjUKCiAgICBsYXZlbmRlci52aXN1YWxzLnBhbmVsLm9wYWNpdHkgPSBlYXNlLnF1YWRfaW4oMC4zLCBsYXZlbmRlci52aXN1YWxzLnBhbmVsLm9wYWNpdHksIChsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmV4dHJhX3Zpc3VhbCksICJkZWJ1ZyBwYW5lbCIpIGFuZCAyNTUgb3IgMCkgLSBsYXZlbmRlci52aXN1YWxzLnBhbmVsLm9wYWNpdHksIDEpCgogICAgaWYgbGF2ZW5kZXIudmlzdWFscy5wYW5lbC5vcGFjaXR5IDwgMTAgdGhlbgogICAgICAgIHJldHVybiBlbmQKCiAgICAKICAgIGxvY2FsIHRleHRfcGFkZGluZyA9IHZlY3RvcigxMCwgNSkgLS0geCBhbmQgeSBwYWRkaW5nIGZvciB0aGUgdGV4dAogICAgc3RyaW5nX3RvcCA9ICIgZGVidWcgIiAuLiBsYXZlbmRlci5mdW5jcy5yZW5kZXJlci5jb2xvdXJfdGV4dCgicGFuZWwiLCBjb2xvdXIpCiAgICBtZWFzdXJlX3RvcF9zdHJpbmcgPSB2ZWN0b3IocmVuZGVyZXIubWVhc3VyZV90ZXh0KCIiLCBzdHJpbmdfdG9wKSkKCiAgICBsb2NhbCByZWN0X3cgPSBtZWFzdXJlX3RvcF9zdHJpbmcueCArIDIqdyArIDIqdGV4dF9wYWRkaW5nLngKICAgIGxvY2FsIHJlY3RfaCA9IG1lYXN1cmVfdG9wX3N0cmluZy55ICsgMip0ZXh0X3BhZGRpbmcueQogICAgaWYgaCA+IHJlY3RfaCB0aGVuCiAgICAgICAgcmVjdF9oID0gaAogICAgZW5kCiAgICAKICAgIC0tIEJhY2tncm91bmQKICAgIGxvY2FsIHJlY3RfeCA9IHBhZGRpbmcueCArIGxhdmVuZGVyLnBvcy5wYW5lbC54CiAgICBsb2NhbCByZWN0X3kgPSBsYXZlbmRlci5wb3MucGFuZWwueSArIHBhZGRpbmcueQoKICAgIC0tCiAgICBsb2NhbCB0aHJlYXQgPSBlbnRpdHkuZ2V0X3BsYXllcl9uYW1lKGNsaWVudC5jdXJyZW50X3RocmVhdCgpKQogICAgbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIucm91bmRlZF9yZWN0YW5nbGUocmVjdF94LCByZWN0X3ksIHJlY3RfdyAtIDIsIHJlY3RfaCwgMTksIDE5LCAxOSwgbGF2ZW5kZXIudmlzdWFscy5wYW5lbC5vcGFjaXR5LCA1KQogICAgbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIucmVjdGFuZ2xlX291dGxpbmUocmVjdF94LCByZWN0X3ksIHJlY3RfdyAtIDIsIHJlY3RfaCwgMzIsIDMyLCAzMiwgbGF2ZW5kZXIudmlzdWFscy5wYW5lbC5vcGFjaXR5LCAyLCAzKQogICAgbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIuZmFkZV9yb3VuZGVkX3JlY3QocmVjdF94IC0gMSwgcmVjdF95LCByZWN0X3csIHJlY3RfaCwgNSwgciwgZywgYiwgbGF2ZW5kZXIudmlzdWFscy5wYW5lbC5vcGFjaXR5LCAxOTApCiAgICBpZiBsYXZlbmRlci52aXN1YWxzLnBhbmVsLm9wYWNpdHkgPiA5NSB0aGVuCiAgICAgICAgbG9jYWwgdGV4dF94ID0gcmVjdF94ICsgdGV4dF9wYWRkaW5nLnggKyB3CiAgICAgICAgbG9jYWwgdGV4dF95ID0gcmVjdF95ICsgdGV4dF9wYWRkaW5nLnkKICAgICAgICByZW5kZXJlci50ZXh0KHRleHRfeCwgdGV4dF95LCAyNTUsIDI1NSwgMjU1LCAyNTUsICJiIiwgMCwgc3RyaW5nX3RvcCkKICAgICAgICAtLSBTdHJpbmcKICAgICAgICByZW5kZXJlci50ZXh0KHcgLyAyICsgcmVjdF93IC8gMiAtIHRleHRfeCArIDIwLCB0ZXh0X3kgKyAyNSwgMjU1LCAyNTUsIDI1NSwgMTAwLCAiYiIsIDAsICJCVUlMRCIpCiAgICAgICAgcmVuZGVyZXIudGV4dCh3IC8gMiArIHJlY3RfdyAvIDIgLSB0ZXh0X3ggKyAyMCwgdGV4dF95ICsgNDAsIDI1NSwgMjU1LCAyNTUsIDI1NSwgIiIsIDAsIGxhdmVuZGVyLmZ1bmNzLnJlbmRlcmVyLmNvbG91cl90ZXh0KGJ1aWxkOnVwcGVyKCksIGNvbG91cikpCiAgICAgICAgcmVuZGVyZXIudGV4dCh3IC8gMiArIHJlY3RfdyAvIDIgLSB0ZXh0X3ggKyA3NSwgdGV4dF95ICsgMjUsIDI1NSwgMjU1LCAyNTUsIDEwMCwgImIiLCAwLCAiVkVSU0lPTiIpCiAgICAgICAgcmVuZGVyZXIudGV4dCh3IC8gMiArIHJlY3RfdyAvIDIgLSB0ZXh0X3ggKyA3NSwgdGV4dF95ICsgNDAsIDI1NSwgMjU1LCAyNTUsIDI1NSwgIiIsIDAsIGxhdmVuZGVyLmZ1bmNzLnJlbmRlcmVyLmNvbG91cl90ZXh0KHZlcnNpb24sIGNvbG91cikpCiAgICAgICAgcmVuZGVyZXIudGV4dCh3IC8gMiArIHJlY3RfdyAvIDIgLSB0ZXh0X3ggKyAyMCwgdGV4dF95ICsgNjUsIDI1NSwgMjU1LCAyNTUsIDEwMCwgImIiLCAwLCAiQ1VSUkVOVCBUQVJHRVQiKQogICAgICAgIHJlbmRlcmVyLnRleHQodyAvIDIgKyByZWN0X3cgLyAyIC0gdGV4dF94ICsgMjAsIHRleHRfeSArIDgwLCAyNTUsIDI1NSwgMjU1LCAyNTUsICIiLCB0ZXh0X3ggKyB3ICogMiwgbGF2ZW5kZXIuZnVuY3MucmVuZGVyZXIuY29sb3VyX3RleHQodGhyZWF0OnVwcGVyKCksIGNvbG91cikpCiAgICAgICAgcmVuZGVyZXIudGV4dCh3IC8gMiArIHJlY3RfdyAvIDIgLSB0ZXh0X3ggKyAyMCwgdGV4dF95ICsgMTA1LCAyNTUsIDI1NSwgMjU1LCAxMDAsICJiIiwgMCwgIkFOVEktQUlNIFNUQVRFIikKICAgICAgICByZW5kZXJlci50ZXh0KHcgLyAyICsgcmVjdF93IC8gMiAtIHRleHRfeCArIDIwLCB0ZXh0X3kgKyAxMjAsIDI1NSwgMjU1LCAyNTUsIDI1NSwgIiIsIDAsIGxhdmVuZGVyLmZ1bmNzLnJlbmRlcmVyLmNvbG91cl90ZXh0KGxhdmVuZGVyLmN1cnJlbnRfc3RhdGUsIGNvbG91cikpCiAgICBlbmQKZW5kCmxvY2FsIGRyYWdnaW5nX29wYWNpdHlfdmVsID0gMApsYXZlbmRlci5oYW5kbGVycy52aXN1YWxzLnZlbG9jaXR5X3dhcm5pbmcgPSBmdW5jdGlvbigpCgogICAgbG9jYWwgbWUgPSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpCiAgICBsb2NhbCB2ZWxfbW9kID0gZW50aXR5LmdldF9wcm9wKG1lLCAibV9mbFZlbG9jaXR5TW9kaWZpZXIiKQogICAgbG9jYWwgY29sb3VyID0gbGF2ZW5kZXIudWkudmlzdWFscy52ZWxvY2l0eV9hY2NlbnQKICAgIGxvY2FsIHIsIGcsIGIgPSB1aS5nZXQoY29sb3VyKQoKICAgIGxvY2FsIHN0cmluZ19tZWFzID0gdmVjdG9yKHJlbmRlcmVyLm1lYXN1cmVfdGV4dCgiYyIsICJ2ZWxvY2l0eSB3YXJuaW5nIikpCgogICAgaWYgbm90IGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuZXh0cmFfdmlzdWFsKSwgInZlbG9jaXR5IHdhcm5pbmciKSB0aGVuCiAgICAgICAgcmV0dXJuIGVuZAoKICAgIGlmIChlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcihtZSkgPT0gbmlsIG9yIGVudGl0eS5pc19hbGl2ZShtZSkgPT0gZmFsc2UpIGFuZCBub3QgKHVpLmlzX21lbnVfb3BlbigpIGFuZCBsYXZlbmRlci51aS5jdXJyZW50X3RhYiA9PSAiVklTVUFMUyIpIHRoZW4KICAgICAgICByZXR1cm4gZW5kCiAgICAKICAgIGxvY2FsIHdhcm5pbmdfeCwgd2FybmluZ195ID0gd2FybmluZzptZWFzdXJlKG5pbCwgMTUpCiAgICBsb2NhbCBoID0gNDUKICAgIGxvY2FsIHcgPSBzdHJpbmdfbWVhcy54ICsgNQoKICAgIC0tCiAgICBsb2NhbCBtb3VzZV92ZWwgPSB2ZWN0b3IodWkubW91c2VfcG9zaXRpb24oKSkKICAgIGxvY2FsIG1vdXNlX2Rvd25fdmVsID0gY2xpZW50LmtleV9zdGF0ZSgweDEpCiAgICBsb2NhbCBob3ZlcmluZ192ZWwgPSBtb3VzZV92ZWwueCA+PSBsYXZlbmRlci5wb3MudmVsb2NpdHkueCAtIHcgLyA1IC0gKHdhcm5pbmdfeCArIDI1KSBhbmQgbW91c2VfdmVsLnggPD0gKGxhdmVuZGVyLnBvcy52ZWxvY2l0eS54IC0gdyAvIDUgLSAod2FybmluZ194ICsgMjUpKSArIHcgKyB3YXJuaW5nX3ggKyAxNSBhbmQgbW91c2VfdmVsLnkgPj0gbGF2ZW5kZXIucG9zLnZlbG9jaXR5LnkgKyBoICogMiBhbmQgbW91c2VfdmVsLnkgPD0gKGxhdmVuZGVyLnBvcy52ZWxvY2l0eS55ICsgaCAqIDIpICsgaAoKICAgIGlmIG1vdXNlX2Rvd25fdmVsIHRoZW4KICAgICAgICBpZiBob3ZlcmluZ192ZWwgdGhlbgogICAgICAgICAgICBkcmFnZ2luZ192ZWwgPSB0cnVlCiAgICAgICAgZW5kCiAgICBlbHNlCiAgICAgICAgZHJhZ2dpbmdfdmVsID0gZmFsc2UKICAgIGVuZAogICAgICAgLS0gCiAgICBpZiBkcmFnZ2luZ192ZWwgYW5kIG5vdCBkcmFnZ2luZ193bSBhbmQgbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiIHRoZW4KICAgICAgICBpZiBub3QgaW5fZHJhZ192ZWwgdGhlbgogICAgICAgICAgICBkcmFnX3Bvc192ZWwgPSBsYXZlbmRlci5wb3MudmVsb2NpdHkgLSBtb3VzZV92ZWwKICAgICAgICAgICAgaW5fZHJhZ192ZWwgPSB0cnVlCiAgICAgICAgZW5kCiAgICAgICAgbGF2ZW5kZXIucG9zLnZlbG9jaXR5LnkgPSBkcmFnX3Bvc192ZWwueSArIG1vdXNlX3ZlbC55CiAgICBlbmQKCiAgICBsb2NhbCBwYWRkaW5nID0gbGF2ZW5kZXIudmlzdWFscy52ZWxvY2l0eS5wYWRkaW5nCiAgICBkcmFnZ2luZ19vcGFjaXR5X3ZlbCA9IGVhc2UucXVhZF9pbl9vdXQoMC4yLCBkcmFnZ2luZ19vcGFjaXR5X3ZlbCwgKGRyYWdnaW5nX3ZlbCBhbmQgMTE1IG9yIDApIC0gZHJhZ2dpbmdfb3BhY2l0eV92ZWwsIDEpCiAgICBpZiB1aS5pc19tZW51X29wZW4oKSBhbmQgbGF2ZW5kZXIudWkuY3VycmVudF90YWIgPT0gIlZJU1VBTFMiIHRoZW4KICAgICAgICBsYXZlbmRlci52aXN1YWxzLnZlbG9jaXR5Lm9wYWNpdHkgPSBlYXNlLnF1YWRfaW5fb3V0KDAuMywgbGF2ZW5kZXIudmlzdWFscy52ZWxvY2l0eS5vcGFjaXR5LCAyNTUgLSBsYXZlbmRlci52aXN1YWxzLnZlbG9jaXR5Lm9wYWNpdHksIDEpCiAgICAgICAgcmVuZGVyZXIucmVjdGFuZ2xlKGxhdmVuZGVyLnBvcy5wcmV2aWV3X2xpbmVfdmVsLngsIGxhdmVuZGVyLnBvcy5wcmV2aWV3X2xpbmVfdmVsLnksIDEsIGxhdmVuZGVyLnBvcy5wcmV2aWV3X2xpbmVfdmVsLnggKiAyLCAyNTUsIDI1NSwgMjU1LCBkcmFnZ2luZ193bSBhbmQgMCBvciBkcmFnZ2luZ19vcGFjaXR5X3ZlbCkKICAgICAgICByZW5kZXJlci5yZWN0YW5nbGUoMCwgMCwgeF9tYWluLCB5X21haW4sIDU1LCA1NSwgNTUsIGRyYWdnaW5nX3dtIGFuZCAwIG9yIGRyYWdnaW5nX29wYWNpdHlfdmVsKQogICAgICAgIGlmIGRyYWdnaW5nX3ZlbCB0aGVuCiAgICAgICAgICAgIHJlbmRlcmVyLmJsdXIoMCwgMCwgeF9tYWluLCB5X21haW4pCiAgICAgICAgZW5kCiAgICBlbHNlCiAgICAgICAgbGF2ZW5kZXIudmlzdWFscy52ZWxvY2l0eS5vcGFjaXR5ID0gZWFzZS5xdWFkX2luX291dCgwLjMsIGxhdmVuZGVyLnZpc3VhbHMudmVsb2NpdHkub3BhY2l0eSwgKHZlbF9tb2QgPT0gMSBhbmQgMCBvciAyNTUpIC0gbGF2ZW5kZXIudmlzdWFscy52ZWxvY2l0eS5vcGFjaXR5LCAxKQogICAgZW5kCgogICAgaWYgbGF2ZW5kZXIudmlzdWFscy52ZWxvY2l0eS5vcGFjaXR5IDwgMTAgdGhlbgogICAgICAgIHJldHVybiBlbmQKCiAgICAtLSByaWdodCBib3gKICAgIGxhdmVuZGVyLmZ1bmNzLnJlbmRlcmVyLnJvdW5kZWRfcmVjdGFuZ2xlKGxhdmVuZGVyLnBvcy52ZWxvY2l0eS54IC0gdyAvIDUgLSAod2FybmluZ194ICsgMjUpLCBsYXZlbmRlci5wb3MudmVsb2NpdHkueSArIGggKiAyLCB3ICsgd2FybmluZ194ICsgMTUsIGgsIDE5LCAxOSwgMTksIGxhdmVuZGVyLnZpc3VhbHMudmVsb2NpdHkub3BhY2l0eSwgNSkKICAgIGxhdmVuZGVyLmZ1bmNzLnJlbmRlcmVyLnJlY3RhbmdsZV9vdXRsaW5lKGxhdmVuZGVyLnBvcy52ZWxvY2l0eS54IC0gdyAvIDUgLSAod2FybmluZ194ICsgMjUpLCBsYXZlbmRlci5wb3MudmVsb2NpdHkueSArIGggKiAyLCB3ICsgd2FybmluZ194ICsgMTUsIGgsIDMyLCAzMiwgMzIsIGxhdmVuZGVyLnZpc3VhbHMudmVsb2NpdHkub3BhY2l0eSwgMiwgMykKICAgIGxhdmVuZGVyLmZ1bmNzLnJlbmRlcmVyLmZhZGVfcm91bmRlZF9yZWN0X3ZlbChsYXZlbmRlci5wb3MudmVsb2NpdHkueCAtIHcgLyA1IC0gKHdhcm5pbmdfeCArIDI1KSwgbGF2ZW5kZXIucG9zLnZlbG9jaXR5LnkgKyBoICogMiwgdyArIHdhcm5pbmdfeCArIDE1LCBoLCA1LCByLCBnLCBiLCBsYXZlbmRlci52aXN1YWxzLnZlbG9jaXR5Lm9wYWNpdHksIHZlbF9tb2QgPT0gbmlsIGFuZCAyNTUgb3IgdmVsX21vZCAqIDI1NSwgdmVsX21vZCA9PSBuaWwgYW5kIDEwMCBvciB2ZWxfbW9kICogMTAwKQogICAgcmVuZGVyZXIudGV4dChsYXZlbmRlci5wb3MudmVsb2NpdHkueCArIHcgLyAzLjUgLCBsYXZlbmRlci5wb3MudmVsb2NpdHkueSArIGggKiAyICsgc3RyaW5nX21lYXMueSAqIDEuMSwgMjI2LCAyMjYsIDIyNiwgbGF2ZW5kZXIudmlzdWFscy52ZWxvY2l0eS5vcGFjaXR5LCAiYyIsIDAsICJ2ZWxvY2l0eSIpCiAgICByZW5kZXJlci50ZXh0KGxhdmVuZGVyLnBvcy52ZWxvY2l0eS54ICsgdyAvIDMuNSAsIGxhdmVuZGVyLnBvcy52ZWxvY2l0eS55ICsgaCAqIDIgKyBzdHJpbmdfbWVhcy55ICogMi41LCAyMjYsIDIyNiwgMjI2LCBsYXZlbmRlci52aXN1YWxzLnZlbG9jaXR5Lm9wYWNpdHksICJjIiwgMCwgbWF0aC5mbG9vcih2ZWxfbW9kID09IG5pbCBhbmQgMTAwIG9yIHZlbF9tb2QgKiAxMDApIC4uICIlIikKICAgIHdhcm5pbmc6ZHJhdyhsYXZlbmRlci5wb3MudmVsb2NpdHkueCAtIHcgLyAyICsgKHdhcm5pbmdfeCAtIDM1IC8gMiksIGxhdmVuZGVyLnBvcy52ZWxvY2l0eS55ICsgaCAqIDIgKyB3YXJuaW5nX3ggLSA4LCBuaWwsIDMwLCByLCBnLCBiLCBsYXZlbmRlci52aXN1YWxzLnZlbG9jaXR5Lm9wYWNpdHkpCgplbmQKCmxhdmVuZGVyLmhhbmRsZXJzLnZpc3VhbHMubWluX2RtZ19pbmRpY2F0b3IgPSBmdW5jdGlvbigpCgogICAgbG9jYWwgbWUgPSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpCgogICAgbG9jYWwgY29sb3VyID0ge3VpLmdldChsYXZlbmRlci51aS52aXN1YWxzLm1pbl9kbWdfYWNjZW50KX0KCiAgICBpZiBlbnRpdHkuaXNfYWxpdmUobWUpID09IGZhbHNlIG9yIG5vdCBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmluZm9ybWF0aXZlX3Zpc3VhbCksICJtaW4gZGFtYWdlIGluZGljYXRvciIpIHRoZW4KICAgICAgICByZXR1cm4gZW5kCgogICAgaWYgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5pbmZvcm1hdGl2ZV92aXN1YWwpLCAibWluIGRhbWFnZSBpbmRpY2F0b3IiKSBhbmQgdWkuZ2V0KGxhdmVuZGVyLnJlZnMucmFnZS5tZF9rZXkpIGFuZCB1aS5nZXQobGF2ZW5kZXIucmVmcy5yYWdlLm1pbmltdW1fZGFtYWdlX292ZXJyaWRlKSB0aGVuCiAgICAgICAgcmVuZGVyZXIudGV4dChsYXZlbmRlci5wb3MubWluX2RtZy54ICsgMjAsIGxhdmVuZGVyLnBvcy5taW5fZG1nLnkgLSAzMCwgY29sb3VyWzFdLCBjb2xvdXJbMl0sIGNvbG91clszXSwgMjU1LCAiIiwgMCwgdWkuZ2V0KGxhdmVuZGVyLnJlZnMucmFnZS5tZF9zbGlkZXIpKQogICAgZW5kCgoKZW5kCgoKLS0gTWFudWFsIEFBCgpsb2NhbCBsZWZ0cmVhZHkgPSBmYWxzZQpsb2NhbCByaWdodHJlYWR5ID0gZmFsc2UKbG9jYWwgZm9yd2FyZHJlYWR5ID0gZmFsc2UKbG9jYWwgbWFudWFsX21vZGUgPSAiYmFjayIKbGF2ZW5kZXIuaGFuZGxlcnMuYWEubWFudWFsX2FhID0gZnVuY3Rpb24oKQogICAgaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLm1hbnVhbF9tYXN0ZXIpID09IGZhbHNlIG9yIGxhdmVuZGVyLmhhbmRsZXJzLmFhLmFudGlfYmFja3N0YWIoKSB0aGVuCiAgICAgICAgcmV0dXJuIAogICAgZW5kCiAgICBpZiB1aS5nZXQobGF2ZW5kZXIudWkuYWEubWFudWFsX2JhY2spIHRoZW4KICAgICAgICBtYW51YWxfbW9kZSA9ICJiYWNrIgogICAgZWxzZWlmIHVpLmdldChsYXZlbmRlci51aS5hYS5tYW51YWxfbGVmdCkgYW5kIGxlZnRyZWFkeSB0aGVuCiAgICAgICAgaWYgbWFudWFsX21vZGUgPT0gImxlZnQiIHRoZW4KICAgICAgICAgICAgbWFudWFsX21vZGUgPSAiYmFjayIKICAgICAgICBlbHNlCiAgICAgICAgICAgIG1hbnVhbF9tb2RlID0gImxlZnQiCiAgICAgICAgZW5kCiAgICAgICAgbGVmdHJlYWR5ID0gZmFsc2UKICAgIGVsc2VpZiB1aS5nZXQobGF2ZW5kZXIudWkuYWEubWFudWFsX3JpZ2h0KSBhbmQgcmlnaHRyZWFkeSB0aGVuCiAgICAgICAgaWYgbWFudWFsX21vZGUgPT0gInJpZ2h0IiB0aGVuCiAgICAgICAgICAgIG1hbnVhbF9tb2RlID0gImJhY2siCiAgICAgICAgZWxzZQogICAgICAgICAgICBtYW51YWxfbW9kZSA9ICJyaWdodCIKICAgICAgICBlbmQKICAgICAgICByaWdodHJlYWR5ID0gZmFsc2UKICAgIGVsc2VpZiB1aS5nZXQobGF2ZW5kZXIudWkuYWEubWFudWFsX2ZvcndhcmQpIGFuZCBmb3J3YXJkcmVhZHkgdGhlbgogICAgICAgIGlmIG1hbnVhbF9tb2RlID09ICJmb3J3YXJkIiB0aGVuCiAgICAgICAgICAgIG1hbnVhbF9tb2RlID0gImJhY2siCiAgICAgICAgZWxzZQogICAgICAgICAgICBtYW51YWxfbW9kZSA9ICJmb3J3YXJkIgogICAgICAgIGVuZAogICAgICAgIGZvcndhcmRyZWFkeSA9IGZhbHNlCiAgICBlbmQKICAgIGlmIHVpLmdldChsYXZlbmRlci51aS5hYS5tYW51YWxfbGVmdCkgPT0gZmFsc2UgdGhlbgogICAgICAgIGxlZnRyZWFkeSA9IHRydWUKICAgIGVuZAogICAgaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLm1hbnVhbF9yaWdodCkgPT0gZmFsc2UgdGhlbgogICAgICAgIHJpZ2h0cmVhZHkgPSB0cnVlCiAgICBlbmQKICAgIGlmIHVpLmdldChsYXZlbmRlci51aS5hYS5tYW51YWxfZm9yd2FyZCkgPT0gZmFsc2UgdGhlbgogICAgICAgIGZvcndhcmRyZWFkeSA9IHRydWUKICAgIGVuZCAKICAgIGlmIG1hbnVhbF9tb2RlID09ICJiYWNrIiB0aGVuCiAgICAgICAgCiAgICBlbHNlaWYgbWFudWFsX21vZGUgPT0gImxlZnQiIHRoZW4KICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS55YXdfb2Zmc2V0LCAtOTApCiAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEueWF3X2Jhc2UsICJMb2NhbCB2aWV3IikKICAgIGVsc2VpZiBtYW51YWxfbW9kZSA9PSAicmlnaHQiIHRoZW4KICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS55YXdfb2Zmc2V0LCA5MCkKICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS55YXdfYmFzZSwgIkxvY2FsIHZpZXciKQogICAgZWxzZWlmIG1hbnVhbF9tb2RlID09ICJmb3J3YXJkIiB0aGVuCiAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEueWF3X29mZnNldCwgLTE4MCkKICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS55YXdfYmFzZSwgIkxvY2FsIHZpZXciKQogICAgZW5kCiAgICBpZiBtYW51YWxfbW9kZSA9PSAibGVmdCIgb3IgbWFudWFsX21vZGUgPT0gInJpZ2h0IiBvciBtYW51YWxfbW9kZSA9PSAiZm9yd2FyZCIgdGhlbgogICAgICAgIGlmIHVpLmdldChsYXZlbmRlci51aS5hYS5tYW51YWxfaml0dGVyKSB0aGVuCiAgICAgICAgZWxzZQogICAgICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS55YXdfaml0dGVyLCAnT2ZmJykKICAgICAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEuYm9keV95YXcsICJTdGF0aWMiKQogICAgICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS5ib2R5X3lhd19vZmZzZXQsIDE4MCkKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuIG1hbnVhbF9tb2RlCmVuZAoKCmxvY2FsIG1vdmVyID0gMApsYXZlbmRlci5oYW5kbGVycy5tYW51YWxfYWFfYXJyb3dzID0gZnVuY3Rpb24oKQoKICAgIGxvY2FsIG1hbnVhbF9tb2RlID0gbGF2ZW5kZXIuaGFuZGxlcnMuYWEubWFudWFsX2FhKCkKICAgIGxvY2FsIG1lID0gZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKQoKICAgIGlmIG1lID09IG5pbCBvciBub3QgZW50aXR5LmlzX2FsaXZlKG1lKSBvciBub3QgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5pbmZvcm1hdGl2ZV92aXN1YWwpLCAiZm9yY2UgeWF3IikgdGhlbgogICAgICAgIHJldHVybiAKICAgIGVuZAoKICAgIGxvY2FsIHIsIGcsIGIsIGEgPSB1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5tYW51YWxfYWFfbWFpbl9jb2xvdXIpCiAgICBsb2NhbCByMiwgZzIsIGIyLCBhMiA9IHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLm1hbnVhbF9hYV9zZWNfY29sb3VyKQogICAgbG9jYWwgYWN0aXZlID0gbWFudWFsX21vZGUgPT0gImxlZnQiIG9yIG1hbnVhbF9tb2RlID09ICJyaWdodCIKCiAgICBpZiBtYW51YWxfbW9kZSA9PSAibGVmdCIgdGhlbgogICAgICAgIHNtYWxsX3NpZGUsIHNtYWxsXyA9ICLigLkiLCAi4oC6IgogICAgICAgIGJpZ19zaWRlLCBiaWdfID0gIuKvhyIsICLir4giCiAgICAgICAgbW9kX3NpZGUsIG1vZF8gPSAi4q6cIiwgIuKuniIKICAgICAgICBtb3ZlciA9IC0xCiAgICBlbHNlaWYgbWFudWFsX21vZGUgPT0gInJpZ2h0IiB0aGVuCiAgICAgICAgc21hbGxfc2lkZSwgc21hbGxfID0gIuKAuiIsICLigLkiCiAgICAgICAgYmlnX3NpZGUsIGJpZ18gPSAi4q+IIiwgIuKvhyIKICAgICAgICBtb2Rfc2lkZSwgbW9kXyA9ICLirp4iLCAi4q6cIgogICAgICAgIG1vdmVyID0gMQogICAgZWxzZQogICAgICAgIHNtYWxsX3NpZGUgPSAiIgogICAgICAgIGJpZ19zaWRlID0gIiIKICAgICAgICBtb2Rfc2lkZSA9ICIiCiAgICAgICAgbW92ZXIgPSAwCiAgICBlbmQKCiAgICBpZiB1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5tYW51YWxfYWFfZm9yY2UpIGFuZCBub3QgYWN0aXZlIHRoZW4KCiAgICAgICAgaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMubWFudWFsX2Fycm93cykgPT0gInNtYWxsIiB0aGVuCiAgICAgICAgICAgIHJlbmRlcmVyLnRleHQoY2VudGVyLnggKyA3NSwgY2VudGVyLnkgLSAzLCByMiwgZzIsIGIyLCBhMiwgIitjIiwgMCwgIuKAuiIpCiAgICAgICAgICAgIHJlbmRlcmVyLnRleHQoY2VudGVyLnggKyAtNzUsIGNlbnRlci55IC0gMywgcjIsIGcyLCBiMiwgYTIsICIrYyIsIDAsICLigLkiKQogICAgICAgIGVsc2VpZiB1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5tYW51YWxfYXJyb3dzKSA9PSAiYmFzaWMiIHRoZW4KICAgICAgICAgICAgcmVuZGVyZXIudGV4dChjZW50ZXIueCArIDc1LCBjZW50ZXIueSAtIDMsIHIyLCBnMiwgYjIsIGEyLCAiK2MiLCAwLCAi4q+IIikKICAgICAgICAgICAgcmVuZGVyZXIudGV4dChjZW50ZXIueCArIC03NSwgY2VudGVyLnkgLSAzLCByMiwgZzIsIGIyLCBhMiwgIitjIiwgMCwgIuKvhyIpCiAgICAgICAgZWxzZWlmIHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLm1hbnVhbF9hcnJvd3MpID09ICJjbGVhbiIgdGhlbgogICAgICAgICAgICByZW5kZXJlci50ZXh0KGNlbnRlci54ICsgNzUsIGNlbnRlci55IC0gMywgcjIsIGcyLCBiMiwgYTIsICIrYyIsIDAsICLirp4iKQogICAgICAgICAgICByZW5kZXJlci50ZXh0KGNlbnRlci54ICsgLTc1LCBjZW50ZXIueSAtIDMsIHIyLCBnMiwgYjIsIGEyLCAiK2MiLCAwLCAi4q6cIikKICAgICAgICBlbmQKCiAgICBlbmQKCiAgICBpZiB1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5tYW51YWxfYXJyb3dzKSA9PSAic21hbGwiIHRoZW4KICAgICAgICByZW5kZXJlci50ZXh0KGNlbnRlci54ICsgKDc1ICogbW92ZXIpLCBjZW50ZXIueSAtIDMsIHIsIGcsIGIsIGEsICIrYyIsIDAsIHNtYWxsX3NpZGUpCiAgICAgICAgaWYgYWN0aXZlIGFuZCBhMiA+IDAgdGhlbgogICAgICAgICAgICByZW5kZXJlci50ZXh0KGNlbnRlci54ICsgKDc1ICogbW92ZXIgKi0xKSwgY2VudGVyLnkgLSAzLCByMiwgZzIsIGIyLCBhMiwgIitjIiwgMCwgc21hbGxfKQogICAgICAgIGVuZAogICAgZWxzZWlmIHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLm1hbnVhbF9hcnJvd3MpID09ICJiYXNpYyIgdGhlbgogICAgICAgIHJlbmRlcmVyLnRleHQoY2VudGVyLnggKyAoNzUgKiBtb3ZlciksIGNlbnRlci55IC0gMywgciwgZywgYiwgYSwgIitjZCIsIDAsIGJpZ19zaWRlKQogICAgICAgIGlmIGFjdGl2ZSBhbmQgYTIgPiAwIHRoZW4KICAgICAgICAgICAgcmVuZGVyZXIudGV4dChjZW50ZXIueCArICg3NSAqIG1vdmVyICotMSksIGNlbnRlci55IC0gMywgcjIsIGcyLCBiMiwgYTIsICIrYyIsIDAsIGJpZ18pCiAgICAgICAgZW5kCiAgICBlbHNlaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMubWFudWFsX2Fycm93cykgPT0gImNsZWFuIiB0aGVuCiAgICAgICAgcmVuZGVyZXIudGV4dChjZW50ZXIueCArICg3NSAqIG1vdmVyKSwgY2VudGVyLnkgLSAzLCByLCBnLCBiLCBhLCAiK2NkIiwgMCwgbW9kX3NpZGUpCiAgICAgICAgaWYgYWN0aXZlIGFuZCBhMiA+IDAgdGhlbgogICAgICAgICAgICByZW5kZXJlci50ZXh0KGNlbnRlci54ICsgKDc1ICogbW92ZXIgKi0xKSwgY2VudGVyLnkgLSAzLCByMiwgZzIsIGIyLCBhMiwgIitjIiwgMCwgbW9kXykKICAgICAgICBlbmQKICAgIGVuZAplbmQKCmxvY2FsIGhpdGdyb3VwX25hbWVzID0geydnZW5lcmljJywgJ2hlYWQnLCAnY2hlc3QnLCAnc3RvbWFjaCcsICdsZWZ0IGFybScsICdyaWdodCBhcm0nLCAnbGVmdCBsZWcnLCAncmlnaHQgbGVnJywgJ25lY2snLCAnPycsICdnZWFyJ30KCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soImFpbV9oaXQiLCBmdW5jdGlvbihlKQoJbG9jYWwgaGdyb3VwID0gaGl0Z3JvdXBfbmFtZXNbZS5oaXRncm91cCArIDFdIG9yICc/JwogICAgaWYgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5pbmZvcm1hdGl2ZV92aXN1YWwpLCAic2hvdCBsb2cgKG5vdGlmeSkiKSB0aGVuCiAgICAgICAgbm90aWZ5Lm5ld19ib3R0b20oMiwge3VpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmxvZ19ub3RpZnlfaGl0X2FjY2VudCl9LCAic2hvdF9sb2dfaGl0IiwgIiIsICJsYXZlbmRlciIsICJ+IGhpdCIsIGVudGl0eS5nZXRfcGxheWVyX25hbWUoZS50YXJnZXQpLCAiZm9yIiwgZS5kYW1hZ2UsICJpbiIsIGhncm91cCkKICAgIGVuZAoKICAgIGlmIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuaW5mb3JtYXRpdmVfdmlzdWFsKSwgInNob3QgbG9nIChjb25zb2xlKSIpIHRoZW4KICAgICAgICBsYXZlbmRlci5mdW5jcy5taXNjLmNvbG91cl9jb25zb2xlKHt1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5sb2dfY29uc29sZV9hY2NlbnQpfSwgc3RyaW5nLmZvcm1hdCgiaGl0ICVzIGZvciAlcyBpbiAlcyIsIGVudGl0eS5nZXRfcGxheWVyX25hbWUoZS50YXJnZXQpLCBlLmRhbWFnZSwgaGdyb3VwKSkKICAgIGVuZAplbmQpCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJhaW1fbWlzcyIsIGZ1bmN0aW9uKGUpCglsb2NhbCBoZ3JvdXAgPSBoaXRncm91cF9uYW1lc1tlLmhpdGdyb3VwICsgMV0gb3IgJz8nCgogICAgaWYgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5pbmZvcm1hdGl2ZV92aXN1YWwpLCAic2hvdCBsb2cgKG5vdGlmeSkiKSB0aGVuCiAgICAgICAgbm90aWZ5Lm5ld19ib3R0b20oMiwge3VpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmxvZ19ub3RpZnlfbWlzc19hY2NlbnQpfSwgInNob3RfbG9nX21pc3MiLCAiIiwgImxhdmVuZGVyIiwgIn4gbWlzc2VkIGR1ZSB0byIsIGUucmVhc29uLCAiKGhjOiAiIC4uIG1hdGguZmxvb3IoZS5oaXRfY2hhbmNlKSAuLiAiLCBhaW1lZDogIiAuLiBoZ3JvdXAgLi4gIikiKQogICAgZW5kCgogICAgaWYgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5pbmZvcm1hdGl2ZV92aXN1YWwpLCAic2hvdCBsb2cgKGNvbnNvbGUpIikgdGhlbgogICAgICAgIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29sb3VyX2NvbnNvbGUoe3VpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmxvZ19jb25zb2xlX2FjY2VudCl9LCBzdHJpbmcuZm9ybWF0KCJtaXNzZWQgZHVlIHRvICVzIChoYzogJXMsIGFpbWVkOiAlcykiLCBlLnJlYXNvbiwgbWF0aC5mbG9vcihlLmhpdF9jaGFuY2UpLCBoZ3JvdXApKQogICAgZW5kCgplbmQpCgpsb2NhbCBraWxsc2F5X2hzID0gewogICAgIvCdlarwnZWm8J2VoCDwnZWY8J2VoPCdlaUg8J2VmfCdlZbwnZWS8J2VlfCdlZbwnZWVIPCdlZPwnZWqIPCdlZ3wnZWS8J2Vp/CdlZbwnZWf8J2VlfCdlZbwnZWjIiwKICAgICLwnZWd8J2VkvCdlafwnZWW8J2Vn/CdlZXwnZWW8J2VoyDwnZWl8J2VoPCdlaAg8J2VpPCdlaXwnZWj8J2VoPCdlZ/wnZWcIPCdlZfwnZWg8J2VoyDwnZWW8J2Vn/CdlZbwnZWe8J2VqiIsCiAgICAi8J2VqPCdlZnwnZWqIPCdlZ7wnZWa8J2VpPCdlaQ/IPCdlZPwnZWW8J2VlPCdlZLwnZWm8J2VpPCdlZYg8J2VkvCdlZ4g8J2VpvCdlaTwnZWWIPCdlZ3wnZWS8J2Vp/CdlZbwnZWf8J2VlfCdlZbwnZWjIiwKICAgICLwnZWl8J2Vo/Cdlaog8J2VmfCdlZrwnZWlIPCdlZ7wnZWWIPCdlZnwnZWW8J2VkvCdlZUiLAogICAgIvCdlarwnZWmIPCdlZLwnZWj8J2VlifwnZWj8J2VliDwnZWY8J2VoPCdlaUg4oSd8J2UvPCdlYrwnZWk8J2VoPCdlZ3wnZWnIPCdlZPwnZWqIPCdlZ3wnZWS8J2Vp/CdlZbwnZWf8J2VlfCdlZbwnZWjIiwKICAgICLwnZWS8J2VniDwnZWY8J2VlvCdlaUg8J2VnfCdlZLwnZWn8J2VlvCdlZ/wnZWV8J2VlvCdlaMg8J2VpfCdlZLwnZWhIiwKICAgICLwnZWMIPCdlZLihJ3wnZS8IPCdlL7wnZWG8J2ViyDwnZWZ8J2VmvCdlaUg8J2Vk/Cdlaog8J2VnfCdlZLwnZWn8J2VlvCdlZ/wnZWV8J2VlvCdlaMiLAogICAgIvCdlarwnZWg8J2VpiDwnZWb8J2VpvCdlaTwnZWlIPCdlZjwnZWg8J2VpSDwnZ+Z8J2VlSDwnZWX8J2VoPCdlaMg8J2fnCQiLAogICAgIjEiCn0KCmxvY2FsIGtpbGxzYXlfYmFpbSA9IHsKICAgICLwnZWMIPCdlZLihJ3wnZS8IPCdlLjihJ3wnZS8IPCdlYvihJ3wnZWQIPCdlY7wnZWA4oSV4oSV8J2VgOKElfCdlL4g8J2VhPCdlLw/IiwKICAgICLwnZWq8J2VoPCdlabwnZWjJ/CdlaPwnZWWIPCdlZLwnZWj8J2VliDwnZWY8J2VoPCdlaUg8J2VlfCdlZbwnZWS8J2VlfCdlZbwnZWVIPCdlZPwnZWqIPCdlZ3wnZWS8J2Vp/CdlZbwnZWf8J2VlfCdlZbwnZWjIiwKICAgICLwnZWaIPCdlZLwnZWeIPCdlabwnZWk8J2VliDwnZWT8J2VlvCdlaTwnZWlIPCdlZLwnZWf8J2VpfCdlZrwnZWS8J2VmvCdlZ4g8J2VnfCdlabwnZWSIiwKICAgICLwnZWU8J2VkvCdlZ/wnZWlIPCdlZnwnZWa8J2VpT8/PyDwnZWD8J2UuPCdlafwnZWW8J2Vn/CdlZXwnZWW8J2VoyDwnZWd8J2VpvCdlZIiCn0KCmZ1bmN0aW9uIHRyYXNodGFsaygpCgogICAgY2xpZW50LmV4ZWMoc3RyaW5nLmZvcm1hdCgic2F5ICVzIiwgY3VycmVudF9raWxsc2F5KSkKCmVuZAoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygicGxheWVyX2h1cnQiLCBmdW5jdGlvbihlKQogICAgaWYgbm90IHVpLmdldChsYXZlbmRlci51aS5taXNjLmtpbGxzYXkpIHRoZW4KICAgICAgICByZXR1cm4KICAgIGVuZAoKICAgIGxvY2FsIGF0dGFja2VyID0gY2xpZW50LnVzZXJpZF90b19lbnRpbmRleChlLmF0dGFja2VyKQogICAgbG9jYWwgdmljdGltID0gY2xpZW50LnVzZXJpZF90b19lbnRpbmRleChlLnVzZXJpZCkKCiAgICBpZiBhdHRhY2tlciB+PSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpIG9yIHZpY3RpbSA9PSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpIHRoZW4KICAgICAgICByZXR1cm4KICAgIGVuZAoKICAgIGlmIGUuaGVhbHRoID4gMCB0aGVuCiAgICAgICAgcmV0dXJuIGVuZAoKICAgIGlmIGUuaGl0Z3JvdXAgPT0gMSB0aGVuCiAgICAgICAgY3VycmVudF9raWxsc2F5ID0ga2lsbHNheV9oc1tjbGllbnQucmFuZG9tX2ludCgxLCAja2lsbHNheV9ocyldCiAgICBlbHNlCiAgICAgICAgY3VycmVudF9raWxsc2F5ID0ga2lsbHNheV9iYWltW2NsaWVudC5yYW5kb21faW50KDEsICNraWxsc2F5X2JhaW0pXQogICAgZW5kCgogICAgY2xpZW50LmRlbGF5X2NhbGwoMS41LCB0cmFzaHRhbGspCgplbmQpCgotLSBBbnRpLUFpbQoKLS0gQU5USSBiYWNrc3RhYgoKZGlzdGFuY2Vfa25pZmUgPSB7fQpkaXN0YW5jZV9rbmlmZS5hbnRpX2tuaWZlX2Rpc3QgPSBmdW5jdGlvbiAoeDEsIHkxLCB6MSwgeDIsIHkyLCB6MikKICAgIHJldHVybiBtYXRoLnNxcnQoKHgyIC0geDEpXjIgKyAoeTIgLSB5MSleMiArICh6MiAtIHoxKV4yKQplbmQKCmxhdmVuZGVyLmhhbmRsZXJzLmFhLmFudGlfYmFja3N0YWIgPSBmdW5jdGlvbigpCiAgICBpZiB1aS5nZXQobGF2ZW5kZXIudWkuYWEuYW50aV9iYWNrc3RhYikgdGhlbgogICAgICAgIGxvY2FsIHBsYXllcnMgPSBlbnRpdHkuZ2V0X3BsYXllcnModHJ1ZSkKICAgICAgICBsb2NhbCBseCwgbHksIGx6ID0gZW50aXR5LmdldF9wcm9wKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCksICJtX3ZlY09yaWdpbiIpCiAgICAgICAgaWYgcGxheWVycyA9PSBuaWwgdGhlbiByZXR1cm4gZW5kCiAgICAgICAgZm9yIGk9MSwgI3BsYXllcnMgZG8KICAgICAgICAgICAgbG9jYWwgeCwgeSwgeiA9IGVudGl0eS5nZXRfcHJvcChwbGF5ZXJzW2ldLCAibV92ZWNPcmlnaW4iKQogICAgICAgICAgICBsb2NhbCBkaXN0YW5jZSA9IGRpc3RhbmNlX2tuaWZlLmFudGlfa25pZmVfZGlzdChseCwgbHksIGx6LCB4LCB5LCB6KQogICAgICAgICAgICBsb2NhbCB3ZWFwb24gPSBlbnRpdHkuZ2V0X3BsYXllcl93ZWFwb24ocGxheWVyc1tpXSkKICAgICAgICAgICAgaWYgZW50aXR5LmdldF9jbGFzc25hbWUod2VhcG9uKSA9PSAiQ0tuaWZlIiBhbmQgZGlzdGFuY2UgPD0gMjUwIHRoZW4KICAgICAgICAgICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLnlhd19vZmZzZXQsIDE4MCkKICAgICAgICAgICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLnBpdGNoLCAiT2ZmIikKICAgICAgICAgICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLnlhd19iYXNlLCAiQXQgdGFyZ2V0cyIpCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAogICAgcmV0dXJuIGZhbHNlCmVuZAoKCmxhdmVuZGVyLmhhbmRsZXJzLmFhLmZyZWVzdGFuZGluZyA9IGZ1bmN0aW9uKCkKICAgIGxvY2FsIGZyZWVzdGFuZGluZyA9IHVpLmdldChsYXZlbmRlci51aS5hYS5mcmVlc3RhbmRpbmdfa2V5KSBhbmQgbm90IGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLmFhLmZyZWVzdGFuZGluZ19kaXNhYmxlcnMpLCBsYXZlbmRlci5hbnRpYWltLnN0YXRlKQogICAgaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLmZyZWVzdGFuZGluZ19qaXR0ZXIpID09IGZhbHNlIGFuZCBmcmVlc3RhbmRpbmcgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5mcmVlc3RhbmRpbmdfa2V5KSB0aGVuCiAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEueWF3X2ppdHRlciwgJ09mZicpCiAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEuYm9keV95YXcsICJTdGF0aWMiKQogICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLmJvZHlfeWF3X29mZnNldCwgMTgwKQoKICAgIGVsc2UKICAgIGVuZAogICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEuZnJlZXN0YW5kaW5nX2tleSwgZnJlZXN0YW5kaW5nIGFuZCAiQWx3YXlzIG9uIiBvciAiT24gaG90a2V5IikKICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLmZyZWVzdGFuZGluZywgZnJlZXN0YW5kaW5nIGFuZCB0cnVlIG9yIGZhbHNlKQplbmQKCmxvY2FsIGNob2tlZF90aWNrID0gMApsb2NhbCBpbnZlcnNpb24gPSAwCmxvY2FsIGppdHRlcl9yZWFsID0gZmFsc2UKbG9jYWwgdGlja2VkX3NwZWVkID0gMApsb2NhbCBjaG9rZXJldmVyc2VkID0gZmFsc2UKbG9jYWwgdGlja192YXIgPSAwCmxvY2FsIGNob2tlcmV2ZXJzZWQxID0gZmFsc2UKbG9jYWwgdGlja192YXIxID0gMApsb2NhbCBmdW5jdGlvbiBjaG9rZXJldihhLCBiKQogICAgcmV0dXJuIGNob2tlcmV2ZXJzZWQgYW5kIGEgb3IgYgplbmQKCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInNldHVwX2NvbW1hbmQiLCBmdW5jdGlvbihjbWQpCgogICAgbG9jYWwgYm9keXlhdyA9IGVudGl0eS5nZXRfcHJvcChlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpLCAibV9mbFBvc2VQYXJhbWV0ZXIiLCAxMSkgKiAxMjAgLSA2MAoKICAgIGxvY2FsIHNpZGUgPSBib2R5eWF3ID49IDAgYW5kIGZhbHNlIG9yIHRydWUKICAgIGxvY2FsIHN0YXRlID0gbGF2ZW5kZXIuYW50aWFpbS5zdGF0ZQogICAgbG9jYWwgdGlja2Jhc2UgPSBlbnRpdHkuZ2V0X3Byb3AoZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSwgIm1fblRpY2tCYXNlIikKICAgIGlmIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLmZsaWNrX3NwZWVkKSA9PSAxIHRoZW4KICAgICAgICB0aWNrZWRfc3BlZWQgPSAzCiAgICBlbHNlaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0uZmxpY2tfc3BlZWQpID09IDIgdGhlbgogICAgICAgIHRpY2tlZF9zcGVlZCA9IDkKICAgIGVsc2VpZiB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3N0YXRlXS5mbGlja19zcGVlZCkgPT0gMyB0aGVuCiAgICAgICAgdGlja2VkX3NwZWVkID0gMTUKICAgIGVuZAoKICAgIGxvY2FsIHRpY2sgPSB0aWNrYmFzZSAlIHRpY2tlZF9zcGVlZCA9PSAwCiAgICBsb2NhbCBpbnZlcnRfZmxpY2tfZ2V0ID0gKGxhdmVuZGVyLmZ1bmNzLmFhLmZyZWVzdGFuZGluZ19zaWRlKGZhbHNlLCB0cnVlKSA9PSAwKSBhbmQgMSBvciAwCiAgICBsb2NhbCBpbnZlcnRfZmxpY2sgPSBpbnZlcnRfZmxpY2tfZ2V0ID09IDEKCiAgICBpZiBnbG9iYWxzLnRpY2tjb3VudCgpIC0gdGlja192YXIgPiAwIGFuZCBjbWQuY2hva2VkY29tbWFuZHMgPT0gMCB0aGVuCiAgICAgICAgY2hva2VyZXZlcnNlZCA9IG5vdCBjaG9rZXJldmVyc2VkCiAgICAgICAgdGlja192YXIgPSBnbG9iYWxzLnRpY2tjb3VudCgpCiAgICBlbmQKCiAgICBpZiBzdGF0ZSB+PSAiZ2xvYmFsIiBhbmQgbm90IHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLm1hc3RlcikgdGhlbgogICAgICAgIHN0YXRlID0gImdsb2JhbCIKICAgIGVuZAogICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLnBpdGNoLCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3N0YXRlXS5waXRjaCkpCiAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEueWF3X2Jhc2UsIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLnlhd19iYXNlKSkKICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS55YXcsIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLnlhdykpCiAgICAgICAgaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0uaml0dGVyX3R5cGUpIH49ICJkZWxheWVkIiB0aGVuCiAgICAgICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLnlhd19qaXR0ZXIsIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLnlhd19qaXR0ZXIpKQogICAgICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS5ib2R5X3lhdywgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0uYm9keV95YXcpKQogICAgICAgIGVuZAogICAgLS0gfgoKICAgIGlmIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLnlhd190eXBlKSA9PSAic3RhdGljIiBhbmQgKHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLmppdHRlcl90eXBlKSB+PSAiZGVsYXllZCIgb3IgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0uaml0dGVyX3R5cGUpIH49ICJmbGljayIpIHRoZW4KICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS55YXdfb2Zmc2V0LCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3N0YXRlXS55YXdfb2Zmc2V0X3N0YXRpYykpCiAgICBlbHNlaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0ueWF3X3R5cGUpID09ICJqaXR0ZXIiIGFuZCAodWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0uaml0dGVyX3R5cGUpIH49ICJkZWxheWVkIiBvciB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3N0YXRlXS5qaXR0ZXJfdHlwZSkgfj0gImZsaWNrIikgdGhlbgogICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLnlhd19vZmZzZXQsIGNob2tlcmV2KHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLnlhd19vZmZzZXRfbGVmdCksIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLnlhd19vZmZzZXRfcmlnaHQpKSkKICAgIC0tZWxzZWlmIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLnlhd190eXBlKSA9PSAic3luY2hyb25pemVkIiBhbmQgKHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLmppdHRlcl90eXBlKSB+PSAiZGVsYXllZCIgb3IgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0uaml0dGVyX3R5cGUpIH49ICJmbGljayIpIHRoZW4KICAgIC0tICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLnlhd19vZmZzZXQsIGdsb2JhbHMudGlja2NvdW50KCkgJSAzID09IDAgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLnlhd19vZmZzZXRfbGVmdCkgb3IgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0ueWF3X29mZnNldF9yaWdodCkpCiAgICBlbmQKCiAgICBpZiB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3N0YXRlXS5qaXR0ZXJfdHlwZSkgPT0gImRlZmF1bHQiIHRoZW4KICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS55YXdfaml0dGVyX29mZnNldCwgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0ueWF3X2ppdHRlcl9vZmZzZXQpKQogICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLmJvZHlfeWF3X29mZnNldCwgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0uYm9keV95YXdfb2Zmc2V0KSkKICAgIGVsc2VpZiB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3N0YXRlXS5qaXR0ZXJfdHlwZSkgPT0gImZsaWNrIiB0aGVuCiAgICAgICAgICAgIGlmIHRpY2sgdGhlbgogICAgICAgICAgICAgICAgY21kLmZvcmNlX2RlZmVuc2l2ZSA9IHRydWUKICAgICAgICAgICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLnlhd19vZmZzZXQsIGludmVydF9mbGljayBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0ueWF3X29mZnNldF9mbGlja19sZWZ0KSBvciB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3N0YXRlXS55YXdfb2Zmc2V0X2ZsaWNrX3JpZ2h0KSkKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEueWF3X29mZnNldCwgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0ueWF3X29mZnNldF9iYXNlKSkKICAgICAgICAgICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLnlhd19qaXR0ZXJfb2Zmc2V0LCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3N0YXRlXS55YXdfaml0dGVyX29mZnNldCkpCiAgICAgICAgICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS5ib2R5X3lhd19vZmZzZXQsIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLmJvZHlfeWF3X29mZnNldCkpCiAgICAgICAgICAgIGVuZAogICAgZWxzZWlmIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLmppdHRlcl90eXBlKSA9PSAiZGVsYXllZCIgdGhlbgogICAgICAgIGlmIGNtZC5jaG9rZWRjb21tYW5kcyA9PSAwIHRoZW4KICAgICAgICAgICAgbG9jYWwgdGlja3MgPSB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3N0YXRlXS55YXdfaml0dGVyX3NwZWVkKSAqIDIKCiAgICAgICAgICAgIGludmVyc2lvbiA9IGNtZC5jb21tYW5kX251bWJlciAlIHRpY2tzID49IHRpY2tzIC8gMgogICAgICAgIGVuZAoKICAgICAgICBqaXR0ZXJfcmVhbCA9IGludmVyc2lvbiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0ueWF3X29mZnNldF9sZWZ0KSBvciB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3N0YXRlXS55YXdfb2Zmc2V0X3JpZ2h0KQogICAgICAgIGlmIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLnlhd19qaXR0ZXJfZCkgPT0gImNlbnRlciIgdGhlbgogICAgICAgICAgICBsb2NhbCB5YXdfb2Zmc2V0X2MgPSBqaXR0ZXJfcmVhbCArIGxhdmVuZGVyLmZ1bmNzLmFhLm5vcm1hbGl6ZV95YXcoaW52ZXJzaW9uIGFuZCAtdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0ueWF3X2ppdHRlcl9vZmZzZXQpIG9yIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLnlhd19qaXR0ZXJfb2Zmc2V0KSkKCiAgICAgICAgICAgIHlhd19vZmZzZXRfYyA9IHlhd19vZmZzZXRfYyAlIDM2MAoKICAgICAgICAgICAgaWYgeWF3X29mZnNldF9jID4gMTgwIHRoZW4KICAgICAgICAgICAgICAgIHlhd19vZmZzZXRfYyA9IHlhd19vZmZzZXRfYyAtIDM2MAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEueWF3X29mZnNldCwgeWF3X29mZnNldF9jKQoKICAgICAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEueWF3X2ppdHRlciwgIk9mZiIpCiAgICAgICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLmJvZHlfeWF3LCAiU3RhdGljIikKICAgICAgICAgICAgLS1pZiBqaXR0ZXJfcmVhbCArIGxhdmVuZGVyLmZ1bmNzLmFhLm5vcm1hbGl6ZV95YXcoaW52ZXJzaW9uIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3N0YXRlXS55YXdfaml0dGVyX29mZnNldCkgb3IgLXVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLnlhd19qaXR0ZXJfb2Zmc2V0KSkgPCAxNjAgb3Igaml0dGVyX3JlYWwgKyBsYXZlbmRlci5mdW5jcy5hYS5ub3JtYWxpemVfeWF3KGludmVyc2lvbiBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0ueWF3X2ppdHRlcl9vZmZzZXQpIG9yIC11aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3N0YXRlXS55YXdfaml0dGVyX29mZnNldCkpID4gLTE2MCB0aGVuCiAgICAgICAgICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS5ib2R5X3lhd19vZmZzZXQsIHlhd19vZmZzZXRfYykKICAgICAgICAgICAgLS1lbHNlCiAgICAgICAgICAgICAgICAtLXVpLnNldChsYXZlbmRlci5yZWZzLmFhLmJvZHlfeWF3X29mZnNldCwgaW52ZXJ0X2ZsaWNrIGFuZCAxODAgb3IgLTE4MCkKICAgICAgICAgICAgLS1lbmQKICAgICAgICBlbHNlaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0ueWF3X2ppdHRlcl9kKSA9PSAib2Zmc2V0IiB0aGVuCgogICAgICAgICAgICBsb2NhbCB5YXdfb2Zmc2V0X28gPSBqaXR0ZXJfcmVhbCArIGxhdmVuZGVyLmZ1bmNzLmFhLm5vcm1hbGl6ZV95YXcoaW52ZXJzaW9uIGFuZCAwIG9yIHVpLmdldChsYXZlbmRlci51aS5hYS5zdGF0ZXNbc3RhdGVdLnlhd19qaXR0ZXJfb2Zmc2V0KSkKCiAgICAgICAgICAgIHlhd19vZmZzZXRfbyA9IHlhd19vZmZzZXRfbyAlIDM2MAoKICAgICAgICAgICAgaWYgeWF3X29mZnNldF9vID4gMTgwIHRoZW4KICAgICAgICAgICAgICAgIHlhd19vZmZzZXRfbyA9IHlhd19vZmZzZXRfbyAtIDM2MAogICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLnlhd19vZmZzZXQsIHlhd19vZmZzZXRfbykKCiAgICAgICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLnlhd19qaXR0ZXIsICJPZmYiKQogICAgICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS5ib2R5X3lhdywgIlN0YXRpYyIpCiAgICAgICAgICAgIC0taWYgaml0dGVyX3JlYWwgKyBsYXZlbmRlci5mdW5jcy5hYS5ub3JtYWxpemVfeWF3KGludmVyc2lvbiBhbmQgMCBvciB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3N0YXRlXS55YXdfaml0dGVyX29mZnNldCkpIDwgMTYwIG9yIGppdHRlcl9yZWFsICsgbGF2ZW5kZXIuZnVuY3MuYWEubm9ybWFsaXplX3lhdyhpbnZlcnNpb24gYW5kIDAgb3IgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnN0YXRlc1tzdGF0ZV0ueWF3X2ppdHRlcl9vZmZzZXQpKSA+IC0xNjAgdGhlbgogICAgICAgICAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEuYm9keV95YXdfb2Zmc2V0LCB5YXdfb2Zmc2V0X28pCiAgICAgICAgICAgIC0tZWxzZQogICAgICAgICAgICAgICAgLS11aS5zZXQobGF2ZW5kZXIucmVmcy5hYS5ib2R5X3lhd19vZmZzZXQsIGludmVydF9mbGljayBhbmQgMTgwIG9yIC0xODApCiAgICAgICAgICAgIC0tZW5kCiAgICAgICAgZW5kCiAgICAgICAgCiAgICBlbmQKICAgIHByaW50KCkKICAgIGNtZC5mb3JjZV9kZWZlbnNpdmUgPSB1aS5nZXQobGF2ZW5kZXIudWkuYWEuc3RhdGVzW3N0YXRlXS5mb3JjZV9kZWZlbnNpdmUpCgplbmQpCgoKLS0gYW50aSBicnV0ZSBidWlsZGVyCgpsb2NhbCBhYnN0YWdlID0gMAoKLS0gQW50aSBCcnV0ZSByZXNldAoKbGF2ZW5kZXIuaGFuZGxlcnMuYWEuZGVhdGggPSBmdW5jdGlvbihlKQogICAgaWYgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkuYWEucmVzZXRfY29uZGl0aW9ucyksICJkZWF0aCIpIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEuYW50aWJydXRlX21hc3RlcikgYW5kIGFic3RhZ2UgPiAwIHRoZW4KICAgICAgICBpZiBjbGllbnQudXNlcmlkX3RvX2VudGluZGV4KGUudXNlcmlkKSA9PSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpIHRoZW4KICAgICAgICAgICAgYnJ1dGVmb3JjZV9yZXNldCA9IHRydWUKICAgICAgICAgICAgYnJ1dGVmb3JjZSA9IGZhbHNlCiAgICAgICAgICAgIHNldF9icnV0ZSA9IGZhbHNlCiAgICAgICAgICAgIGFic3RhZ2UgPSAwCiAgICAgICAgICAgIGxhc3RtaXNzID0gMAogICAgICAgICAgICBpZiBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmluZm9ybWF0aXZlX3Zpc3VhbCksICJhbnRpIGJydXRlIGxvZyAobm90aWZ5KSIpIHRoZW4KICAgICAgICAgICAgICAgIG5vdGlmeS5uZXdfYm90dG9tKDIsIHt1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5sb2dfYWJfbm90aWZ5X2FjY2VudCl9LCIiLCAiIiwgImxhdmVuZGVyIiwgIn4gYW50aSBicnV0ZSByZXNldCIsICJkZWF0aCIpCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBpZiBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmluZm9ybWF0aXZlX3Zpc3VhbCksICJhbnRpIGJydXRlIGxvZyAoY29uc29sZSkiKSB0aGVuCiAgICAgICAgICAgICAgICBsYXZlbmRlci5mdW5jcy5taXNjLmNvbG91cl9jb25zb2xlKHt1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5sb2dfYWJfY29uc29sZV9hY2NlbnQpfSwgImFudGkgYnJ1dGUgcmVzZXQgfCBkZWF0aCIpCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCmVuZAoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygicGxheWVyX2RlYXRoIiwgbGF2ZW5kZXIuaGFuZGxlcnMuYWEuZGVhdGgpCgpsYXZlbmRlci5oYW5kbGVycy5hYS5yb3VuZF9zdGFydCA9IGZ1bmN0aW9uKCkKICAgIGlmIG5vdCBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmluZm9ybWF0aXZlX3Zpc3VhbCksICJhbnRpIGJydXRlIGxvZyAobm90aWZ5KSIpIHRoZW4KICAgICAgICByZXR1cm4gZW5kCiAgICBpZiBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS5hYS5yZXNldF9jb25kaXRpb25zKSwgInJvdW5kIHN0YXJ0IikgYW5kIHVpLmdldChsYXZlbmRlci51aS5hYS5hbnRpYnJ1dGVfbWFzdGVyKSBhbmQgYWJzdGFnZSA+IDAgdGhlbgogICAgICAgIGJydXRlZm9yY2VfcmVzZXQgPSB0cnVlCiAgICAgICAgYnJ1dGVmb3JjZSA9IGZhbHNlCiAgICAgICAgc2V0X2JydXRlID0gZmFsc2UKICAgICAgICBsYXN0bWlzcyA9IDAKICAgICAgICBhYnN0YWdlID0gMAogICAgICAgIGlmIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuaW5mb3JtYXRpdmVfdmlzdWFsKSwgImFudGkgYnJ1dGUgbG9nIChub3RpZnkpIikgdGhlbgogICAgICAgICAgICBub3RpZnkubmV3X2JvdHRvbSgyLCB7dWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMubG9nX2FiX25vdGlmeV9hY2NlbnQpfSwiIiwgIiIsICJsYXZlbmRlciIsICJ+IGFudGkgYnJ1dGUgcmVzZXQiLCAicm91bmQgZW5kIikKICAgICAgICBlbmQKICAgICAgICBpZiBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmluZm9ybWF0aXZlX3Zpc3VhbCksICJhbnRpIGJydXRlIGxvZyAoY29uc29sZSkiKSB0aGVuCiAgICAgICAgICAgIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29sb3VyX2NvbnNvbGUoe3VpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmxvZ19hYl9jb25zb2xlX2FjY2VudCl9LCAiYW50aSBicnV0ZSByZXNldCB8IHJvdW5kIGVuZCIpCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJyb3VuZF9wcmVzdGFydCIsIGxhdmVuZGVyLmhhbmRsZXJzLmFhLnJvdW5kX3N0YXJ0KQoKbGF2ZW5kZXIuaGFuZGxlcnMuYWEuaGVhZHNob3QgPSBmdW5jdGlvbihjKQogICAgaWYgbm90IGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMuaW5mb3JtYXRpdmVfdmlzdWFsKSwgImFudGkgYnJ1dGUgbG9nIChub3RpZnkpIikgdGhlbgogICAgICAgIHJldHVybiBlbmQKICAgIGlmIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnJlc2V0X2NvbmRpdGlvbnMpLCAiT24gaGVhZHNob3QiKSBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLmFudGlicnV0ZV9tYXN0ZXIpIGFuZCBhYnN0YWdlID4gMCB0aGVuCiAgICAgICAgbG9jYWwgYXR0YWNrZXIgPSBjbGllbnQudXNlcmlkX3RvX2VudGluZGV4KGMuYXR0YWNrZXIpCiAgICAgICAgbG9jYWwgdmljdGltID0gY2xpZW50LnVzZXJpZF90b19lbnRpbmRleChjLnVzZXJpZCkKICAgICAgICBsb2NhbCBtZSA9IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkKICAgICAgICBpZiBtZSA9PSBuaWwgb3IgYXR0YWNrZXIgPT0gbmlsIG9yIHZpY3RpbSA9PSBuaWwgdGhlbgogICAgICAgICAgICByZXR1cm4gZW5kCiAgICAgICAgaWYgYXR0YWNrZXIgfj0gbWUgYW5kIHZpY3RpbSA9PSBtZSB0aGVuCiAgICAgICAgICAgIGlmIGMuaGl0Z3JvdXAgPT0gMSB0aGVuCiAgICAgICAgICAgICAgICBicnV0ZWZvcmNlX3Jlc2V0ID0gdHJ1ZQogICAgICAgICAgICAgICAgYnJ1dGVmb3JjZSA9IGZhbHNlCiAgICAgICAgICAgICAgICBzZXRfYnJ1dGUgPSBmYWxzZQogICAgICAgICAgICAgICAgYWJzdGFnZSA9IDAKICAgICAgICAgICAgICAgIGxhc3RtaXNzID0gMAogICAgICAgICAgICAgICAgaWYgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5pbmZvcm1hdGl2ZV92aXN1YWwpLCAiYW50aSBicnV0ZSBsb2cgKG5vdGlmeSkiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgbm90aWZ5Lm5ld19ib3R0b20oMiwge3VpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmxvZ19hYl9ub3RpZnlfYWNjZW50KX0sIiIsICIiLCAibGF2ZW5kZXIiLCAifiBhbnRpIGJydXRlIHJlc2V0IiwgImhlYWRzaG90IikKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgaWYgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5pbmZvcm1hdGl2ZV92aXN1YWwpLCAiYW50aSBicnV0ZSBsb2cgKGNvbnNvbGUpIikgdGhlbgogICAgICAgICAgICAgICAgICAgIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29sb3VyX2NvbnNvbGUoe3VpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmxvZ19hYl9jb25zb2xlX2FjY2VudCl9LCAiYW50aSBicnV0ZSByZXNldCB8IGhlYWRzaG90IikKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAplbmQKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygicGxheWVyX2h1cnQiLCBsYXZlbmRlci5oYW5kbGVycy5hYS5oZWFkc2hvdCkKCgpsb2NhbCBicnV0ZWZvcmNlX3Jlc2V0ID0gdHJ1ZQpsb2NhbCBzaG90X3RpbWUgPSAwCmxvY2FsIGxhc3RtaXNzID0gMAoKCmxvY2FsIGZ1bmN0aW9uIEdldENsb3Nlc3RQb2ludChBLCBCLCBQKQogICAgYV90b19wID0geyBQWzFdIC0gQVsxXSwgUFsyXSAtIEFbMl0gfQogICAgYV90b19iID0geyBCWzFdIC0gQVsxXSwgQlsyXSAtIEFbMl0gfQoKICAgIGF0YjIgPSBhX3RvX2JbMV1eMiArIGFfdG9fYlsyXV4yCgogICAgYXRwX2RvdF9hdGIgPSBhX3RvX3BbMV0qYV90b19iWzFdICsgYV90b19wWzJdKmFfdG9fYlsyXQogICAgdCA9IGF0cF9kb3RfYXRiIC8gYXRiMgogICAgCiAgICByZXR1cm4geyBBWzFdICsgYV90b19iWzFdKnQsIEFbMl0gKyBhX3RvX2JbMl0qdCB9CmVuZAoKCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soImJ1bGxldF9pbXBhY3QiLCBmdW5jdGlvbihlKQogICAgc3RhdGUgPSBsYXZlbmRlci5hbnRpYWltLnN0YXRlCgogICAgaWYgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkuYWEuYW50aWJydXRlX2Rpc2FibGVycyksIGxhdmVuZGVyLmFudGlhaW0uc3RhdGUpIHRoZW4gCiAgICAgICAgcmV0dXJuIAogICAgZW5kCgogICAgaWYgbm90IGVudGl0eS5pc19hbGl2ZShlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpKSB0aGVuIAogICAgICAgIHJldHVybiAKICAgIGVuZAoKICAgIGxvY2FsIGVudCA9IGNsaWVudC51c2VyaWRfdG9fZW50aW5kZXgoZS51c2VyaWQpCgogICAgaWYgZW50IH49IGNsaWVudC5jdXJyZW50X3RocmVhdCgpIHRoZW4gCiAgICAgICAgcmV0dXJuIAogICAgZW5kCgogICAgaWYgZW50aXR5LmlzX2Rvcm1hbnQoZW50KSBvciBub3QgZW50aXR5LmlzX2VuZW15KGVudCkgdGhlbiAKICAgICAgICByZXR1cm4gCiAgICBlbmQKCiAgICBpZiB1aS5nZXQobGF2ZW5kZXIudWkuYWEuYW50aWJydXRlX21hc3RlcikgPT0gZmFsc2UgdGhlbgogICAgICAgIHJldHVybgogICAgZW5kCiAgICAKCiAgICBsb2NhbCBlbnRfb3JpZ2luID0geyBlbnRpdHkuZ2V0X3Byb3AoZW50LCAibV92ZWNPcmlnaW4iKSB9CiAgICBlbnRfb3JpZ2luWzNdID0gZW50X29yaWdpblszXSArIGVudGl0eS5nZXRfcHJvcChlbnQsICJtX3ZlY1ZpZXdPZmZzZXRbMl0iKQoKICAgIGxvY2FsIGxvY2FsX2hlYWQgPSB7IGVudGl0eS5oaXRib3hfcG9zaXRpb24oZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSwgMCkgfQogICAgbG9jYWwgY2xvc2VzdCA9IEdldENsb3Nlc3RQb2ludChlbnRfb3JpZ2luLCB7IGUueCwgZS55LCBlLnogfSwgbG9jYWxfaGVhZCkKCiAgICBsb2NhbCBkZWx0YSA9IHsgbG9jYWxfaGVhZFsxXS1jbG9zZXN0WzFdLCBsb2NhbF9oZWFkWzJdLWNsb3Nlc3RbMl0gfQogICAgbG9jYWwgZGVsdGFfMmQgPSBtYXRoLnNxcnQoZGVsdGFbMV1eMitkZWx0YVsyXV4yKQoKICAgIGxvY2FsIGJvZHl5YXcgPSBlbnRpdHkuZ2V0X3Byb3AoZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSwgIm1fZmxQb3NlUGFyYW1ldGVyIiwgMTEpICogMTIwIC0gNjAKCiAgICBpZiBicnV0ZWZvcmNlIHRoZW4gcmV0dXJuIGVuZAoKICAgIGlmIG1hdGguYWJzKGRlbHRhXzJkKSA8PSA0NSBhbmQgZ2xvYmFscy5jdXJ0aW1lKCkgLSBsYXN0bWlzcyA+IDAuMjI1IHRoZW4KICAgICAgICBicnV0ZWZvcmNlID0gdHJ1ZQogICAgICAgIHNob3RfdGltZSA9IGdsb2JhbHMucmVhbHRpbWUoKQogICAgICAgIGxhc3RtaXNzID0gZ2xvYmFscy5jdXJ0aW1lKCkKICAgICAgICBhYnN0YWdlID0gYWJzdGFnZSA+PSAzIGFuZCAwIG9yIGFic3RhZ2UgKyAxCiAgICAgICAgYWJzdGFnZSA9IGFic3RhZ2UgPT0gMCBhbmQgMSBvciBhYnN0YWdlCiAgICAgICAgaWYgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5pbmZvcm1hdGl2ZV92aXN1YWwpLCAiYW50aSBicnV0ZSBsb2cgKG5vdGlmeSkiKSB0aGVuCiAgICAgICAgICAgIG5vdGlmeS5uZXdfYm90dG9tKDEsIHt1aS5nZXQobGF2ZW5kZXIudWkudmlzdWFscy5sb2dfYWJfbm90aWZ5X2FjY2VudCl9LCIiLCAibGF2ZW5kZXIiLCAifiBhbnRpIGJydXRlIGFjdGl2YXRlZCBkdWUgdG8gc2hvdCBzdGFnZToiLCB0b3N0cmluZyhhYnN0YWdlKSkKICAgICAgICBlbmQKICAgICAgICBpZiBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmluZm9ybWF0aXZlX3Zpc3VhbCksICJhbnRpIGJydXRlIGxvZyAoY29uc29sZSkiKSB0aGVuCiAgICAgICAgICAgIGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29sb3VyX2NvbnNvbGUoe3VpLmdldChsYXZlbmRlci51aS52aXN1YWxzLmxvZ19hYl9jb25zb2xlX2FjY2VudCl9LCAiYW50aSBicnV0ZSBhY3RpdmF0ZWQgc3RhZ2U6ICIgLi4gdG9zdHJpbmcoYWJzdGFnZSkpCiAgICAgICAgZW5kCgogICAgZW5kCmVuZCkKCmxhdmVuZGVyLmhhbmRsZXJzLmFhLmFudGlfYnJ1dGUgPSBmdW5jdGlvbihjbWQpCiAgICBpZiBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS5hYS5hbnRpYnJ1dGVfZGlzYWJsZXJzKSwgbGF2ZW5kZXIuYW50aWFpbS5zdGF0ZSkgdGhlbiByZXR1cm4gZW5kCiAgICBsb2NhbCB0aW1lciA9IGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnJlc2V0X2NvbmRpdGlvbnMpLCAidGltZW91dCIpIGFuZCB1aS5nZXQobGF2ZW5kZXIudWkuYWEucmVzZXRfdGltZXIpIG9yIDk5OQogICAgaWYgYnJ1dGVmb3JjZSB0aGVuCiAgICAgICAgYnJ1dGVmb3JjZV9yZXNldCA9IGZhbHNlCiAgICAgICAgYWJzdGFnZSA9IGFic3RhZ2UgPT0gMCBhbmQgMSBvciBhYnN0YWdlCiAgICAgICAgc2V0X2JydXRlID0gdHJ1ZQogICAgICAgIGJydXRlZm9yY2UgPSBmYWxzZQogICAgZWxzZWlmIHNob3RfdGltZSArIHRpbWVyIDwgZ2xvYmFscy5yZWFsdGltZSgpIG9yIGJydXRlZm9yY2VfcmVzZXQgdGhlbgogICAgICAgIGFic3RhZ2UgPSAwCiAgICAgICAgYnJ1dGVmb3JjZSA9IGZhbHNlCiAgICAgICAgYnJ1dGVmb3JjZV9yZXNldCA9IHRydWUKICAgICAgICBzZXRfYnJ1dGUgPSBmYWxzZQogICAgZW5kCiAgICByZXR1cm4gc2hvdF90aW1lCmVuZAoKCmxvY2FsIHRpY2tfdmFyX2FiID0gMApsb2NhbCBjaG9rZXJldmVyc2VkX2FiID0gZmFsc2UKCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInNldHVwX2NvbW1hbmQiLCBmdW5jdGlvbihjKQogICAgaWYgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkuYWEuYW50aWJydXRlX2Rpc2FibGVycyksIGxhdmVuZGVyLmFudGlhaW0uc3RhdGUpIHRoZW4gcmV0dXJuIGVuZAoKICAgIGlmIHNldF9icnV0ZSA9PSBmYWxzZSBhbmQgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLnByZXZpZXdfc3RhZ2UpID09ICJub25lIiB0aGVuIHJldHVybiBlbmQKCiAgICBzZXRfc3RhZ2UgPSB1aS5nZXQobGF2ZW5kZXIudWkuYWEucHJldmlld19zdGFnZSkgPT0gIm5vbmUiIGFuZCB0b3N0cmluZyhhYnN0YWdlKSBvciB0b3N0cmluZyh1aS5nZXQobGF2ZW5kZXIudWkuYWEucHJldmlld19zdGFnZSkpCgogICAgaWYgc2V0X3N0YWdlID09ICIwIiB0aGVuCiAgICAgICAgcmV0dXJuIAogICAgZW5kCgogICAgaWYgdWkuZ2V0KHN0YWdlW3NldF9zdGFnZV0ubWFzdGVyKSA9PSBmYWxzZSB0aGVuCiAgICAgICAgcmV0dXJuIAogICAgZW5kCgogICAgaWYgbGF2ZW5kZXIuYW50aWFpbS5zdGF0ZSA9PSAiVXNlIiB0aGVuCiAgICAgICAgcmV0dXJuIGVuZAoKICAgIGlmIGdsb2JhbHMudGlja2NvdW50KCkgLSB0aWNrX3Zhcl9hYiA+IDAgYW5kIGMuY2hva2VkY29tbWFuZHMgPT0gMCB0aGVuCiAgICAgICAgY2hva2VyZXZlcnNlZF9hYiA9IG5vdCBjaG9rZXJldmVyc2VkX2FiCiAgICAgICAgdGlja192YXJfYWIgPSBnbG9iYWxzLnRpY2tjb3VudCgpCiAgICBlbmQKCiAgICBsb2NhbCBib2R5eWF3ID0gZW50aXR5LmdldF9wcm9wKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCksICJtX2ZsUG9zZVBhcmFtZXRlciIsIDExKSAqIDEyMCAtIDYwCgogICAgbG9jYWwgdGlja2Jhc2UgPSBlbnRpdHkuZ2V0X3Byb3AoZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSwgIm1fblRpY2tCYXNlIikKCiAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS5waXRjaCwgdWkuZ2V0KHN0YWdlW3NldF9zdGFnZV0ucGl0Y2gpKQogICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEueWF3X2Jhc2UsIHVpLmdldChzdGFnZVtzZXRfc3RhZ2VdLnlhd19iYXNlKSkKICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLnlhdywgdWkuZ2V0KHN0YWdlW3NldF9zdGFnZV0ueWF3KSkKICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLnlhd19qaXR0ZXIsIHVpLmdldChzdGFnZVtzZXRfc3RhZ2VdLnlhd19qaXR0ZXIpKQoKICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLnlhd19vZmZzZXQsIGNob2tlcmV2ZXJzZWRfYWIgYW5kIHVpLmdldChzdGFnZVtzZXRfc3RhZ2VdLnlhd19vZmZzZXRfbGVmdCkgb3IgdWkuZ2V0KHN0YWdlW3NldF9zdGFnZV0ueWF3X29mZnNldF9yaWdodCkpCgogICAgCiAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS55YXdfaml0dGVyX29mZnNldCwgdWkuZ2V0KHN0YWdlW3NldF9zdGFnZV0ueWF3X2ppdHRlcl9vZmZzZXQpKQoKICAgIHVpLnNldChsYXZlbmRlci5yZWZzLmFhLmJvZHlfeWF3LCB1aS5nZXQoc3RhZ2Vbc2V0X3N0YWdlXS5ib2R5X3lhdykpCgogICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEuYm9keV95YXdfb2Zmc2V0LCB1aS5nZXQoc3RhZ2Vbc2V0X3N0YWdlXS5ib2R5X3lhd19vZmZzZXQpKQplbmQpCgpsb2NhbCBmdW5jdGlvbiB0d2lzdChhLCBiLCB0aW1lKQogICAgaWYgZ2xvYmFscy50aWNrY291bnQoKSAlIHRpbWUgPT0gMCB0aGVuCiAgICAgICAgdHdpc3RlZCA9IHRydWUKICAgIGVsc2UKICAgICAgICB0d2lzdGVkID0gZmFsc2UKICAgIGVuZAogICAgcmV0dXJuIHR3aXN0ZWQgYW5kIGIgb3IgYQplbmQKCmxvY2FsIGNoZWNrX2xhbmQgPSAxODAKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygic2V0dXBfY29tbWFuZCIsIGZ1bmN0aW9uKGNtZCkKCiAgICBsb2NhbCBtZSA9IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkKICAgIGxvY2FsIGVudCA9IGNsaWVudC5jdXJyZW50X3RocmVhdCgpCiAgICBsb2NhbCBlbmVtaWVzID0gbGF2ZW5kZXIuZnVuY3MubWlzYy5nZXRfZW50aXRpZXModHJ1ZSwgdHJ1ZSkKICAgIGxvY2FsIHN0YXRlID0gbGF2ZW5kZXIuYW50aWFpbS5zdGF0ZQogICAgbG9jYWwgZmxhZ3MgPSBlbnRpdHkuZ2V0X3Byb3AobWUsICJtX2ZGbGFncyIpCiAgICBsb2NhbCBmYWtlbGFnID0gKHVpLmdldChsYXZlbmRlci5yZWZzLnJhZ2UuZG91YmxlX3RhcCkgYW5kIHVpLmdldChsYXZlbmRlci5yZWZzLnJhZ2UuZG91YmxlX3RhcF9rZXkpKSBvciAodWkuZ2V0KGxhdmVuZGVyLnJlZnMubWlzYy5oaWRlX3Nob3RzKSBhbmQgdWkuZ2V0KGxhdmVuZGVyLnJlZnMubWlzYy5oaWRlX3Nob3RzX2tleSkpIGFuZCBub3QgdWkuZ2V0KGxhdmVuZGVyLnJlZnMubWlzYy5mYWtlZHVja2luZykKICAgIAogICAgaWYgbm90IHVpLmdldChsYXZlbmRlci51aS5hYS5kZWZlbnNpdmVfbWFzdGVyKSB0aGVuCiAgICAgICAgcmV0dXJuIGVuZAoKICAgIGlmIG5vdCBlbnRpdHkuaXNfYWxpdmUobWUpIG9yIG1lID09IG5pbCB0aGVuCiAgICAgICAgcmV0dXJuIGVuZAoKICAgIGlmIG5vdCBmYWtlbGFnIGFuZCBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS5hYS5kZWZlbnNpdmVfY2hlY2tzKSwgIm5vdCBjaG9raW5nIikgdGhlbgogICAgICAgIHJldHVybiBlbmQKCiAgICBsb2NhbCBpbnZlcnRfZmxpY2tfZ2V0ID0gKGxhdmVuZGVyLmZ1bmNzLmFhLmZyZWVzdGFuZGluZ19zaWRlKGZhbHNlLCB0cnVlKSA9PSAwKSBhbmQgMSBvciAwCiAgICBsb2NhbCBieSA9IGludmVydF9mbGlja19nZXQgPT0gMQoKCiAgICBpZiBjbWQuY2hva2VkY29tbWFuZHMgPT0gMCB0aGVuCiAgICAgICAgbG9jYWwgdGlja3MgPSAxOSAqIDIKCiAgICAgICAgY29udHJvbF9kZWYgPSBjbWQuY29tbWFuZF9udW1iZXIgJSB0aWNrcyA+PSB0aWNrcyAvIDIKICAgIGVuZAoKICAgIGNoZWNrX2xhbmQgPSBiaXQuYmFuZChmbGFncywgMSkgPT0gMSBhbmQgY2hlY2tfbGFuZCArIDEgb3IgMAogICAgCiAgICBpZiBjaGVja19sYW5kID4gMCBhbmQgY2hlY2tfbGFuZCA8IDM4IHRoZW4KICAgICAgICBsYW5kaW5nNiA9IGZhbHNlCiAgICBlbHNlCiAgICAgICAgbGFuZGluZzYgPSB0cnVlCiAgICBlbmQKCiAgICBpZiBlbnRpdHkuaXNfZG9ybWFudChlbnQpIG9yIGVudCA9PSBuaWwgdGhlbgogICAgICAgIHJldHVybiBlbmQKCgogICAgaWYgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkuYWEuZGVmZW5zaXZlX2NoZWNrcyksICJ2ZWxvY2l0eSIpIHRoZW4KICAgICAgICBpZiBsYXZlbmRlci5mdW5jcy5hYS5nZXRfdmVsb2NpdHlfMmQobWUpID4gMjQwIGFuZCBsYXZlbmRlci5mdW5jcy5hYS5nZXRfdmVsb2NpdHlfMmQoZW50KSA8IDEwIHRoZW4KICAgICAgICAgICAgY2hlY2tfdmVsID0gdHJ1ZQogICAgICAgIGVsc2UKICAgICAgICAgICAgY2hlY2tfdmVsID0gZmFsc2UKICAgICAgICBlbmQKICAgIGVsc2UKICAgICAgICBjaGVja192ZWwgPSB0cnVlCiAgICBlbmQKCiAgICBoaXR0YWJsZSA9IGxhdmVuZGVyLmZ1bmNzLm1pc2MuY2FuX2VuZW15X2hpdF9tZShlbnQsIDE4LCBmYWxzZSkKICAgIGhpdHRhYmxlMiA9IGxhdmVuZGVyLmZ1bmNzLm1pc2MuY2FuX2hpdF9lbmVteShlbnQsIDE4LCBmYWxzZSkKICAgIGhpdHRhYmxlMyA9IGxhdmVuZGVyLmZ1bmNzLm1pc2MuY2FuX2hpdF9lbmVteShlbnQsIDYsIHRydWUpCiAgICBoaXR0YWJsZTQgPSBsYXZlbmRlci5mdW5jcy5taXNjLmNhbl9lbmVteV9oaXRfbWUoZW50LCA2LCB0cnVlKQogICAgaGl0dGFibGU1ID0gbGF2ZW5kZXIuZnVuY3MubWlzYy5oaXRfZmxhZyhlbnQpCgogICAgbG9jYWwgc3RhdGVzID0gbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkuYWEuZGVmZW5zaXZlX3N0YXRlKSwgbGF2ZW5kZXIuYW50aWFpbS5zdGF0ZSkKCgogICAgZW5kX3Jlc3VsdCA9IGhpdHRhYmxlIG9yIGhpdHRhYmxlMiBvciBoaXR0YWJsZTMgb3IgaGl0dGFibGU0IG9yIGhpdHRhYmxlNQogICAgaWYgbm90IGVuZF9yZXN1bHQgYW5kIChzdGF0ZXMgb3Igbm90IGxhbmRpbmc2KSBhbmQgY2hlY2tfdmVsIHRoZW4KICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS5waXRjaCwgImN1c3RvbSIpCiAgICAgICAgaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLmFhLmRlZmVuc2l2ZV9jdXN0b20pIHRoZW4KICAgICAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEucGl0Y2hfY3VzdG9tLCBub3QgY29udHJvbF9kZWYgYW5kIGxhdmVuZGVyLmZ1bmNzLmFhLmNvbnZlcnRfcGl0Y2godWkuZ2V0KGxhdmVuZGVyLnVpLmFhLmRlZmVuc2l2ZV9iYXNlX3BpdGNoKSkgb3IgbGF2ZW5kZXIuZnVuY3MuYWEuY29udmVydF9waXRjaCh1aS5nZXQobGF2ZW5kZXIudWkuYWEuZGVmZW5zaXZlX2ZhbGxiYWNrX3BpdGNoKSkpCiAgICAgICAgZWxzZQogICAgICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS5waXRjaF9jdXN0b20sIGNvbnRyb2xfZGVmIGFuZCBtYXRoLnJhbmRvbSgtODksIDEyKSBvciA3OCkKICAgICAgICBlbmQKCiAgICAgICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEueWF3LCBjb250cm9sX2RlZiBhbmQgInNwaW4iIG9yICIxODAiKQogICAgICAgLS0gaWYgYnkgdGhlbgogICAgICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5hYS55YXdfb2Zmc2V0LCBjb250cm9sX2RlZiBhbmQgNjMgb3IgbWF0aC5yYW5kb20oLTMsMykpCiAgICAgICAtLSBlbHNlCiAgICAgICAgLS0gICAgdWkuc2V0KGxhdmVuZGVyLnJlZnMuYWEueWF3X29mZnNldCwgY29udHJvbF9kZWYgYW5kIHR3aXN0KC0xODAsIDgwLCA4KSBvciB0d2lzdCgxODAsIC05MCwgOCkpCgogICAgICAgLS0gZW5kCiAgICBlbmQKICAgIAoKZW5kKQoKCmxvY2FsIGNsYW50YWdfc3RyaW5nID0geyJsYSIsICJsYXYiLCAibGF2ZSIsICJsYXZlbiIsICJsYXZlbmQiLCAibGF2ZW5kZSIsICJsYXZlbmRlciIsICJsYXZlbmRlci4iLCAibGF2ZW5kZXIucCIsICJsYXZlbmRlci5wdSIsICJsYXZlbmRlci5wdWIgIiwgImxhdmVuZGVyLnB1YiAiLCAibGF2ZW5kZXIucHViICIsICJhdmVuZGVyLnB1YiAiLCAidmVuZGVyLnB1YiAiLCAiZW5kZXIucHViICIsICJuZGVyLnB1YiAiLCAiZGVyLnB1YiAiLCAiZXIucHViICIsICJyLnB1YiAiLCAiLnB1YiAiLCAicHViICIsICJ1YiAiLCAiYiAiLCAiICIsICIifQpsb2NhbCBjbGFudGFnX2xlbmd0aCA9IDkgLS0gbnVtYmVyIG9mIGNoYXJhY3RlcnMgdG8gZGlzcGxheSBpbiBjbGFudGFnCmxvY2FsIHRpY2tfcmF0ZSA9IDI1IC0tIGRlZmF1bHQgdGljayByYXRlIG9mIGFuaW1hdGlvbgpsb2NhbCBwaW5nX2NvbXBlbnNhdGlvbiA9IDEwIC0tIG51bWJlciBvZiB0aWNrcyB0byBzdWJ0cmFjdCBmcm9tIHRpY2tfcmF0ZSBwZXIgNTBtcyBvZiBsYXRlbmN5Cgpsb2NhbCBmdW5jdGlvbiB1cGRhdGVfY2xhbnRhZygpCiAgICBpZiBub3QgdWkuZ2V0KGxhdmVuZGVyLnVpLm1pc2MuY2xhbnRhZykgdGhlbgogICAgICAgIHJldHVybgogICAgZW5kCiAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5taXNjLmNsYW50YWcsIGZhbHNlKQogICAgbG9jYWwgaW5kZXggPSBtYXRoLmZsb29yKGdsb2JhbHMudGlja2NvdW50KCkgLyAodGlja19yYXRlIC0gcGluZ19jb21wZW5zYXRpb24gKiBtYXRoLmZsb29yKGNsaWVudC5sYXRlbmN5KCkgLyA1MCkpKSAlICNjbGFudGFnX3N0cmluZwogICAgbG9jYWwgdGFnID0gY2xhbnRhZ19zdHJpbmdbaW5kZXgrMV0KICAgIGlmIGluZGV4ID4gI2NsYW50YWdfc3RyaW5nIC0gY2xhbnRhZ19sZW5ndGggdGhlbgogICAgICAgIHRhZyA9IHN0cmluZy5zdWIodGFnLCAxLCBjbGFudGFnX2xlbmd0aCkKICAgIGVuZAogICAgY2xpZW50LnNldF9jbGFuX3RhZyh0YWcpCmVuZAoKbG9jYWwgZnVuY3Rpb24gYW5pbWF0ZV9jbGFudGFnKCkKICAgIGlmIG5vdCB1aS5nZXQobGF2ZW5kZXIudWkubWlzYy5jbGFudGFnKSB0aGVuCiAgICAgICAgcmV0dXJuCiAgICBlbmQKICAgIGNsaWVudC5zZXRfY2xhbl90YWcoY2xhbnRhZ19zdHJpbmdbMV0pCmVuZAoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygicGFpbnQiLCB1cGRhdGVfY2xhbnRhZykKCmFuaW1hdGVfY2xhbnRhZygpCgpmdW5jdGlvbiBjbGFudGFnX1Jlc2V0KCkKICAgIGNsaWVudC5zZXRfY2xhbl90YWcoIiIpCmVuZAoKdWkuc2V0X2NhbGxiYWNrKGxhdmVuZGVyLnVpLm1pc2MuY2xhbnRhZywgZnVuY3Rpb24oKQogICAgaWYgbm90IHVpLmdldChsYXZlbmRlci51aS5taXNjLmNsYW50YWcpIHRoZW4KICAgICAgICBjbGllbnQuZGVsYXlfY2FsbCgwLjIsIGNsYW50YWdfUmVzZXQpCiAgICBlbmQKZW5kKQoKCi0tIG1pc2MKCi0tIGFuaW0gYnJlYWtlcnMKCgpsb2NhbCBnX3QgPSAxODAKCmxhdmVuZGVyLmhhbmRsZXJzLm1pc2MuYW5pbV9icmVha2VycyA9IGZ1bmN0aW9uKCkKICAgIAogICAgbG9jYWwgbG9jYWxfcGxheWVyID0gZW50LmdldF9sb2NhbF9wbGF5ZXIoKQogICAgbG9jYWwgbWUgPSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpCgogICAgbG9jYWwgZmxhZ3MgPSBlbnRpdHkuZ2V0X3Byb3AobWUsICJtX2ZGbGFncyIpCgogICAgaWYgbG9jYWxfcGxheWVyID09IG5pbCB0aGVuCiAgICAgICAgcmV0dXJuIGVuZAoKICAgIGlmIGVudGl0eS5pc19hbGl2ZShtZSkgPT0gZmFsc2UgdGhlbiByZXR1cm4gZW5kCgogICAgaWYgbm90IHVpLmdldChsYXZlbmRlci51aS5taXNjLmFuaW1fYnJlYWtlcl9tYXN0ZXIpIHRoZW4KICAgICAgICByZXR1cm4gZW5kCiAgICAKICAgIGlmIHVucGFjayh1aS5nZXQobGF2ZW5kZXIudWkubWlzYy5wb29fYW5pbV9icmVha2VyKSkgPT0gbmlsIHRoZW4KICAgICAgICBpZiB1aS5nZXQobGF2ZW5kZXIudWkubWlzYy5mb3JjZV9hbmltX2JyZWFrZXIpID09ICItIiB0aGVuCiAgICAgICAgICAgIGlmIHVpLmdldChsYXZlbmRlci51aS5taXNjLnN0YW5kaW5nX2FuaW1fYnJlYWtlcikgPT0gImZpc3QgYnVtcCIgYW5kIGxhdmVuZGVyLmFudGlhaW0uc3RhdGUgPT0gInN0YW5kaW5nIiB0aGVuCiAgICAgICAgICAgICAgICAtLXN0YW5kaW5nIGZpc3QgYnVtcAogICAgICAgICAgICAgICAgbG9jYWxfcGxheWVyOmdldF9hbmltX292ZXJsYXkoNykud2VpZ2h0ID0gMQogICAgICAgICAgICAgICAgbG9jYWxfcGxheWVyOmdldF9hbmltX292ZXJsYXkoNykuc2VxdWVuY2UgPSAxODUKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGlmIHVpLmdldChsYXZlbmRlci51aS5taXNjLm1vdmluZ19hbmltX2JyZWFrZXIpID09ICJkaXNsb2NhdGVkIGFybSIgYW5kIGxhdmVuZGVyLmFudGlhaW0uc3RhdGUgPT0gIm1vdmluZyIgdGhlbgogICAgICAgICAgICAgICAgIC0tbW92aW5nIGZpc3QgYnJva2VuIGFybXMKICAgICAgICAgICAgICAgIGxvY2FsX3BsYXllcjpnZXRfYW5pbV9vdmVybGF5KDcpLndlaWdodCA9IDEKICAgICAgICAgICAgICAgIGxvY2FsX3BsYXllcjpnZXRfYW5pbV9vdmVybGF5KDYpLnNlcXVlbmNlID0gMTg1CiAgICAgICAgICAgICAgICBsb2NhbF9wbGF5ZXI6Z2V0X2FuaW1fb3ZlcmxheSg3KS5jeWNsZSA9IDAuNQogICAgICAgICAgICAgICAgbG9jYWxfcGxheWVyOmdldF9hbmltX292ZXJsYXkoNykucGxheWJhY2tfcmF0ZSA9IDEuNQogICAgICAgICAgICBlbHNlaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLm1pc2MubW92aW5nX2FuaW1fYnJlYWtlcikgPT0gImZyb3plbiIgYW5kIGxhdmVuZGVyLmFudGlhaW0uc3RhdGUgPT0gIm1vdmluZyIgdGhlbgogICAgICAgICAgICAgICAgbG9jYWxfcGxheWVyOmdldF9hbmltX292ZXJsYXkoNykud2VpZ2h0ID0gMQogICAgICAgICAgICAgICAgbG9jYWxfcGxheWVyOmdldF9hbmltX292ZXJsYXkoNikuc2VxdWVuY2UgPSA1CiAgICAgICAgICAgICAgICBsb2NhbF9wbGF5ZXI6Z2V0X2FuaW1fb3ZlcmxheSg4KS53ZWlnaHQgPSAxCiAgICAgICAgICAgICAgICBsb2NhbF9wbGF5ZXI6Z2V0X2FuaW1fb3ZlcmxheSg3KS5zZXF1ZW5jZSA9IDQwMAogICAgICAgICAgICAgICAgbG9jYWxfcGxheWVyOmdldF9hbmltX292ZXJsYXkoNCkuY3ljbGUgPSA1CiAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLm1pc2MuYWlyX2FuaW1fYnJlYWtlcikgPT0gImR1bWIiIGFuZCBsYXZlbmRlci5hbnRpYWltLnN0YXRlID09ICJhaXIiIG9yIHVpLmdldChsYXZlbmRlci51aS5taXNjLmFpcl9hbmltX2JyZWFrZXIpID09ICJzdGlmZiBkdWNrIiBhbmQgbGF2ZW5kZXIuYW50aWFpbS5zdGF0ZSA9PSAiYWlyIGR1Y2siIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsX3BsYXllcjpnZXRfYW5pbV9vdmVybGF5KDYpLndlaWdodCA9IDEKICAgICAgICAgICAgICAgIGxvY2FsX3BsYXllcjpnZXRfYW5pbV9vdmVybGF5KDYpLnNlcXVlbmNlID0gMTM1CiAgICAgICAgICAgICAgICBsb2NhbF9wbGF5ZXI6Z2V0X2FuaW1fb3ZlcmxheSg3KS53ZWlnaHQgPSAxCiAgICAgICAgICAgICAgICBsb2NhbF9wbGF5ZXI6Z2V0X2FuaW1fb3ZlcmxheSg3KS5zZXF1ZW5jZSA9IDEwMAogICAgICAgICAgICBlbHNlaWYgdWkuZ2V0KGxhdmVuZGVyLnVpLm1pc2MuYWlyX2FuaW1fYnJlYWtlcikgPT0gInN0aWZmIGR1Y2siIGFuZCBsYXZlbmRlci5hbnRpYWltLnN0YXRlID09ICJhaXIiIG9yIHVpLmdldChsYXZlbmRlci51aS5taXNjLmFpcl9hbmltX2JyZWFrZXIpID09ICJzdGlmZiBkdWNrIiBhbmQgbGF2ZW5kZXIuYW50aWFpbS5zdGF0ZSA9PSAiYWlyIGR1Y2siIHRoZW4KICAgICAgICAgICAgICAgIGxvY2FsX3BsYXllcjpnZXRfYW5pbV9vdmVybGF5KDYpLndlaWdodCA9IDEKICAgICAgICAgICAgICAgIGxvY2FsX3BsYXllcjpnZXRfYW5pbV9vdmVybGF5KDYpLnNlcXVlbmNlID0gMzAKICAgICAgICAgICAgICAgIGxvY2FsX3BsYXllcjpnZXRfYW5pbV9vdmVybGF5KDcpLndlaWdodCA9IDEKICAgICAgICAgICAgICAgIGxvY2FsX3BsYXllcjpnZXRfYW5pbV9vdmVybGF5KDcpLnNlcXVlbmNlID0gMjUKICAgICAgICAgICAgICAgIGxvY2FsX3BsYXllcjpnZXRfYW5pbV9vdmVybGF5KDIpLmN5Y2xlID0gMQogICAgICAgICAgICBlbmQKCiAgICAgICAgIGVuZAoKICAgICAgICBpZiB1aS5nZXQobGF2ZW5kZXIudWkubWlzYy5mb3JjZV9hbmltX2JyZWFrZXIpID09ICJ0LXBvc2UiIHRoZW4KICAgICAgICAgICAgIC0tdCBwb3NlCiAgICAgICAgICAgIGxvY2FsX3BsYXllcjpnZXRfYW5pbV9vdmVybGF5KDIpLndlaWdodCA9IDEKICAgICAgICAgICAgbG9jYWxfcGxheWVyOmdldF9hbmltX292ZXJsYXkoMikuc2VxdWVuY2UgPSAxMQogICAgICAgIGVuZAogICAgZW5kCiAgICBpZiBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS5taXNjLnBvb19hbmltX2JyZWFrZXIpLCAiemVybyBwaXRjaCBsYW5kaW5nIikgdGhlbgogICAgICAgIGdfdCA9IGJpdC5iYW5kKGZsYWdzLCAxKSA9PSAxIGFuZCBnX3QgKyAxIG9yIDAKICAgIAogICAgICAgIGlmIGdfdCA+IDIwIGFuZCBnX3QgPCAyMTAgdGhlbgogICAgICAgICAgICBlbnRpdHkuc2V0X3Byb3AobWUsICJtX2ZsUG9zZVBhcmFtZXRlciIsIDAuNSwgMTIpCiAgICAgICAgZW5kCiAgICBlbmQKCiAgICBpZiBsYXZlbmRlci5mdW5jcy5taXNjLmNvbnRhaW5zKHVpLmdldChsYXZlbmRlci51aS5taXNjLnBvb19hbmltX2JyZWFrZXIpLCAic3RhdGljIGluIGFpciIpIHRoZW4KICAgICAgICBlbnRpdHkuc2V0X3Byb3AobWUsICJtX2ZsUG9zZVBhcmFtZXRlciIsIDEsIDYpIAogICAgZW5kCgogICAgaWYgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkubWlzYy5wb29fYW5pbV9icmVha2VyKSwgImxlZyBicmVha2VyIikgdGhlbgogICAgICAgIHVpLnNldChsYXZlbmRlci5yZWZzLm1pc2MubGVncywgbWF0aC5yYW5kb20oMSwyKSA9PSAxIGFuZCAiQWx3YXlzIHNsaWRlIiBvciAiTmV2ZXIgc2xpZGUiKQogICAgZW5kCgogICAgaWYgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkubWlzYy5wb29fYW5pbV9icmVha2VyKSwgIm1vb24gd2FsayIpIHRoZW4KICAgICAgICBsb2NhbCBteV9hbmltbGF5ZXIgPSBsb2NhbF9wbGF5ZXI6Z2V0X2FuaW1fb3ZlcmxheSg2KTsKICAgICAgICB1aS5zZXQobGF2ZW5kZXIucmVmcy5taXNjLmxlZ3MsICJOZXZlciBzbGlkZSIpCiAgICAgICAgaWYgbGF2ZW5kZXIuYW50aWFpbS5zdGF0ZSA9PSAiYWlyIiBvciBsYXZlbmRlci5hbnRpYWltLnN0YXRlID09ICJhaXIgZHVjayIgdGhlbgogICAgICAgICAgICBteV9hbmltbGF5ZXIud2VpZ2h0ID0gMTsKICAgICAgICAgICAgZW50aXR5LnNldF9wcm9wKGxvY2FsX3BsYXllciwgIm1fZmxQb3NlUGFyYW1ldGVyIiwgMSwgNikKICAgICAgICBlbHNlaWYgbGF2ZW5kZXIuYW50aWFpbS5zdGF0ZSA9PSAibW92aW5nIiB0aGVuCiAgICAgICAgICAgIGVudGl0eS5zZXRfcHJvcChsb2NhbF9wbGF5ZXIsICJtX2ZsUG9zZVBhcmFtZXRlciIsIDEsIDYpCiAgICAgICAgICAgIG15X2FuaW1sYXllci53ZWlnaHQgPSAxOwogICAgICAgICAgICBlbnRpdHkuc2V0X3Byb3AobG9jYWxfcGxheWVyLCAibV9mbFBvc2VQYXJhbWV0ZXIiLCAxLCA2KQogICAgICAgICAgICBlbnRpdHkuc2V0X3Byb3AoZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSwgIm1fZmxQb3NlUGFyYW1ldGVyIiwgMSwgNykKICAgICAgICBlbmQKCiAgICBlbmQKCgplbmQKCi0tIGZhc3QgbGFkZGVyCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJzZXR1cF9jb21tYW5kIiwgZnVuY3Rpb24oZSkKICAgIGxvY2FsIGxvY2FsX3BsYXllciA9IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkKICAgIGxvY2FsIHBpdGNoLCB5YXcgPSBjbGllbnQuY2FtZXJhX2FuZ2xlcygpCiAgICBsb2NhbCB5YXdfc2xpZGVyID0gMTgwCiAgICBpZiBlbnRpdHkuZ2V0X3Byb3AobG9jYWxfcGxheWVyLCAibV9Nb3ZlVHlwZSIpID09IDkgdGhlbgogICAgICAgIGUueWF3ID0gbWF0aC5mbG9vcihlLnlhdyswLjUpCiAgICAgICAgZS5yb2xsID0gMAogICAgICAgIGlmIHVpLmdldChsYXZlbmRlci51aS5hYS5mYXN0X2xhZGRlcikgdGhlbgogICAgICAgICAgICBpZiBlLmZvcndhcmRtb3ZlID09IDAgdGhlbgogICAgICAgICAgICAgICAgZS5waXRjaCA9IDg5CiAgICAgICAgICAgICAgICBlLnlhdyA9IGUueWF3ICsgeWF3X3NsaWRlcgogICAgICAgICAgICAgICAgaWYgbWF0aC5hYnMoeWF3X3NsaWRlcikgPiAwIGFuZCBtYXRoLmFicyh5YXdfc2xpZGVyKSA8IDE4MCBhbmQgZS5zaWRlbW92ZSB+PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICBlLnlhdyA9IGUueWF3IC0geWF3X3NsaWRlcgogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBpZiBtYXRoLmFicyh5YXdfc2xpZGVyKSA9PSAxODAgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIGUuc2lkZW1vdmUgPCAwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgZS5pbl9tb3ZlbGVmdCA9IDAKICAgICAgICAgICAgICAgICAgICAgICAgZS5pbl9tb3ZlcmlnaHQgPSAxCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgaWYgZS5zaWRlbW92ZSA+IDAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBlLmluX21vdmVsZWZ0ID0gMQogICAgICAgICAgICAgICAgICAgICAgICBlLmluX21vdmVyaWdodCA9IDAKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgICAgICBpZiBlLmZvcndhcmRtb3ZlID4gMCB0aGVuCiAgICAgICAgICAgIGlmIHBpdGNoIDwgNDUgdGhlbgogICAgICAgICAgICAgICAgZS5waXRjaCA9IDg5CiAgICAgICAgICAgICAgICBlLmluX21vdmVyaWdodCA9IDEKICAgICAgICAgICAgICAgIGUuaW5fbW92ZWxlZnQgPSAwCiAgICAgICAgICAgICAgICBlLmluX2ZvcndhcmQgPSAwCiAgICAgICAgICAgICAgICBlLmluX2JhY2sgPSAxCiAgICAgICAgICAgICAgICBpZiBlLnNpZGVtb3ZlID09IDAgdGhlbgogICAgICAgICAgICAgICAgICAgIGUueWF3ID0gZS55YXcgKyA5MAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBpZiBlLnNpZGVtb3ZlIDwgMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgZS55YXcgPSBlLnlhdyArIDE1MAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBpZiBlLnNpZGVtb3ZlID4gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgZS55YXcgPSBlLnlhdyArIDMwCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kIAogICAgICAgIGVuZAogICAgICAgIGlmIGUuZm9yd2FyZG1vdmUgPCAwIHRoZW4KICAgICAgICAgICAgZS5waXRjaCA9IDg5CiAgICAgICAgICAgIGUuaW5fbW92ZWxlZnQgPSAxCiAgICAgICAgICAgIGUuaW5fbW92ZXJpZ2h0ID0gMAogICAgICAgICAgICBlLmluX2ZvcndhcmQgPSAxCiAgICAgICAgICAgIGUuaW5fYmFjayA9IDAKICAgICAgICAgICAgaWYgZS5zaWRlbW92ZSA9PSAwIHRoZW4KICAgICAgICAgICAgICAgIGUueWF3ID0gZS55YXcgKyA5MAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgZS5zaWRlbW92ZSA+IDAgdGhlbgogICAgICAgICAgICAgICAgZS55YXcgPSBlLnlhdyArIDE1MAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgZS5zaWRlbW92ZSA8IDAgdGhlbgogICAgICAgICAgICAgICAgZS55YXcgPSBlLnlhdyArIDMwCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCmVuZCkKCi0tIENvbmZpZ3MgQ29udHJvbGxlciBVSQoKdWkudXBkYXRlKGxhdmVuZGVyLnVpLmNvbmZpZy5saXN0LCBnZXRfY29uZmlnX2xpc3QoKSkKdWkuc2V0X2NhbGxiYWNrKGxhdmVuZGVyLnVpLmNvbmZpZy5saXN0LCBmdW5jdGlvbih2YWx1ZSkKICAgIGxvY2FsIG5hbWUgPSAiIgoKICAgIGxvY2FsIGNvbmZpZ3MgPSBnZXRfY29uZmlnX2xpc3QoKQoKICAgIG5hbWUgPSBjb25maWdzW3VpLmdldCh2YWx1ZSkrMV0gb3IgIiIKICAgIHVpLnNldChsYXZlbmRlci51aS5jb25maWcubmFtZSwgbmFtZSkKCmVuZCkKCgoKLS0gQ09ORklHIExPQUQKCgp1aS5zZXRfY2FsbGJhY2sobGF2ZW5kZXIudWkuY29uZmlnLmxvYWQsIGZ1bmN0aW9uKCkKICAgIGxvY2FsIG5hbWUgPSB1aS5nZXQobGF2ZW5kZXIudWkuY29uZmlnLm5hbWUpCiAgICBpZiBuYW1lID09ICIiIHRoZW4gcmV0dXJuIGVuZAoKICAgIGxvY2FsIHByb3RlY3RlZCA9IGZ1bmN0aW9uKCkKICAgICAgICBsb2FkX2NvbmZpZyhuYW1lKQogICAgZW5kCgogICAgaWYgcGNhbGwocHJvdGVjdGVkKSB0aGVuCiAgICAgICAgbm90aWZ5Lm5ld19ib3R0b20oNCwge3VpLmdldChsYXZlbmRlci51aS52aXN1YWxzLm5vdGlmaWNhdGlvbl9hY2NlbnQpfSwgIiIsICJzdWNjZXNmdWxseSBsb2FkZWQ6IiwgbmFtZSkKCiAgICBlbHNlCiAgICAgICAgbm90aWZ5Lm5ld19ib3R0b20oNCwgezI1NSwgMzAsIDMwfSwgIiIsICJmYWlsZWQgdG8gbG9hZDoiLCBuYW1lKQogICAgZW5kCmVuZCkKCi0tIENPTkZJRyBTQVZFCgp1aS5zZXRfY2FsbGJhY2sobGF2ZW5kZXIudWkuY29uZmlnLnNhdmUsIGZ1bmN0aW9uKCkKCiAgICBsb2NhbCBuYW1lID0gdWkuZ2V0KGxhdmVuZGVyLnVpLmNvbmZpZy5uYW1lKQogICAgaWYgbmFtZSA9PSAiIiB0aGVuIHJldHVybiBlbmQKCiAgICBpZiBuYW1lOm1hdGNoKCJbXiV3XSIpIH49IG5pbCB0aGVuCiAgICAgICAgbm90aWZ5Lm5ld19ib3R0b20oNCwgezI1NSwgMzAsIDMwfSwgIiIsICJjYW5ub3Qgc2F2ZSB0aGlzIGNvbmZpZzoiLCBuYW1lLCAiYXMgaXQgY29udGFpbnMiLCAiaW52YWxpZCBjaGFyYWN0ZXJzIikKICAgICAgICByZXR1cm4KICAgIGVuZAoKICAgIGxvY2FsIHByb3RlY3RlZCA9IGZ1bmN0aW9uKCkKICAgICAgICBzYXZlX2NvbmZpZyhuYW1lKQogICAgZW5kCgogICAgaWYgcGNhbGwocHJvdGVjdGVkKSB0aGVuCiAgICAgICAgdWkudXBkYXRlKGxhdmVuZGVyLnVpLmNvbmZpZy5saXN0LCBnZXRfY29uZmlnX2xpc3QoKSkKICAgICAgICBub3RpZnkubmV3X2JvdHRvbSg0LCB7dWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMubm90aWZpY2F0aW9uX2FjY2VudCl9LCAiIiwgInN1Y2Nlc2Z1bGx5IHNhdmVkOiIsIG5hbWUpCiAgICBlbHNlCiAgICAgICAgbm90aWZ5Lm5ld19ib3R0b20oNCwgezI1NSwgMzAsIDMwfSwgIiIsICJmYWlsZWQgdG8gc2F2ZToiLCBuYW1lKQogICAgZW5kCgplbmQpCgotLSBDT05GSUcgREVMRVRFCgp1aS5zZXRfY2FsbGJhY2sobGF2ZW5kZXIudWkuY29uZmlnLmRlbGV0ZSwgZnVuY3Rpb24oKQogICAgbG9jYWwgbmFtZSA9IHVpLmdldChsYXZlbmRlci51aS5jb25maWcubmFtZSkKICAgIGlmIG5hbWUgPT0gIiIgdGhlbiByZXR1cm4gZW5kCgogICAgaWYgZGVsZXRlX2NvbmZpZyhuYW1lKSA9PSBmYWxzZSB0aGVuCiAgICAgICAgbm90aWZ5Lm5ld19ib3R0b20oNCwgezI1NSwgMzAsIDMwfSwgIiIsICJmYWlsZWQgdG8gZGVsZXRlOiIsIG5hbWUpCiAgICAgICAgdWkudXBkYXRlKGxhdmVuZGVyLnVpLmNvbmZpZy5saXN0LCBnZXRfY29uZmlnX2xpc3QoKSkKICAgICAgICByZXR1cm4KICAgIGVuZAogICAgCiAgICBsb2NhbCBwcm90ZWN0ZWQgPSBmdW5jdGlvbigpCiAgICAgICAgZGVsZXRlX2NvbmZpZyhuYW1lKQogICAgZW5kCgogICAgaWYgcGNhbGwocHJvdGVjdGVkKSB0aGVuCiAgICAgICAgdWkudXBkYXRlKGxhdmVuZGVyLnVpLmNvbmZpZy5saXN0LCBnZXRfY29uZmlnX2xpc3QoKSkKICAgICAgICB1aS5zZXQobGF2ZW5kZXIudWkuY29uZmlnLmxpc3QsICNsYXZlbmRlci5wcmVzZXRzICsgI2RhdGFiYXNlLnJlYWQobGF2ZW5kZXIuZGF0YWJhc2UuY29uZmlncykgLSAjZGF0YWJhc2UucmVhZChsYXZlbmRlci5kYXRhYmFzZS5jb25maWdzKSkKICAgICAgICB1aS5zZXQobGF2ZW5kZXIudWkuY29uZmlnLm5hbWUsICNkYXRhYmFzZS5yZWFkKGxhdmVuZGVyLmRhdGFiYXNlLmNvbmZpZ3MpID09IDAgYW5kICIiIG9yIGdldF9jb25maWdfbGlzdCgpWyNsYXZlbmRlci5wcmVzZXRzICsgI2RhdGFiYXNlLnJlYWQobGF2ZW5kZXIuZGF0YWJhc2UuY29uZmlncykgLSAjZGF0YWJhc2UucmVhZChsYXZlbmRlci5kYXRhYmFzZS5jb25maWdzKSsxXSkKICAgICAgICBub3RpZnkubmV3X2JvdHRvbSg0LCB7dWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMubm90aWZpY2F0aW9uX2FjY2VudCl9LCAiIiwgInN1Y2Nlc2Z1bGx5IGRlbGV0ZWQ6IiwgbmFtZSkKICAgIGVsc2UKICAgICAgICBub3RpZnkubmV3X2JvdHRvbSg0LCB7MjU1LCA1MCwgNTB9LCAiIiwgImZhaWxlZCB0byBkZWxldGU6IiwgbmFtZSkKICAgIGVuZAoKZW5kKQoKLS0gQ09ORklHIElNUE9SVAoKdWkuc2V0X2NhbGxiYWNrKGxhdmVuZGVyLnVpLmNvbmZpZy5pbXBvcnQsIGZ1bmN0aW9uKCkKICAgIGxvY2FsIHByb3RlY3RlZCA9IGZ1bmN0aW9uKCkKICAgICAgIGltcG9ydF9zZXR0aW5ncygpCiAgICBlbmQKCiAgICBpZiBwY2FsbChwcm90ZWN0ZWQpIHRoZW4KICAgICAgICBub3RpZnkubmV3X2JvdHRvbSg0LCB7dWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMubm90aWZpY2F0aW9uX2FjY2VudCl9LCAiIiwgInN1Y2Nlc2Z1bGx5IGltcG9ydGVkIiwgInRoZSBjb25maWciKQoKICAgIGVsc2UKICAgICAgICBub3RpZnkubmV3X2JvdHRvbSg0LCB7dWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMubm90aWZpY2F0aW9uX2FjY2VudCl9LCAiIiwgImZhaWxlZCB0byBpbXBvcnQiLCAidGhlIGNvbmZpZyIpCgogICAgZW5kCmVuZCkKCi0tIENPTkZJRyBFWFBPUlQKCnVpLnNldF9jYWxsYmFjayhsYXZlbmRlci51aS5jb25maWcuZXhwb3J0LCBmdW5jdGlvbigpCiAgICBsb2NhbCBwcm90ZWN0ZWQgPSBmdW5jdGlvbigpCiAgICAgICAgZXhwb3J0X3NldHRpbmdzKG5hbWUpCiAgICBlbmQKCiAgICBpZiBwY2FsbChwcm90ZWN0ZWQpIHRoZW4KICAgICAgICBub3RpZnkubmV3X2JvdHRvbSg0LCB7dWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMubm90aWZpY2F0aW9uX2FjY2VudCl9LCAiIiwgInN1Y2Nlc2Z1bGx5IGV4cG9ydGVkIiwgInRoZSBjb25maWciKQoKICAgIGVsc2UKICAgICAgICBub3RpZnkubmV3X2JvdHRvbSg0LCB7dWkuZ2V0KGxhdmVuZGVyLnVpLnZpc3VhbHMubm90aWZpY2F0aW9uX2FjY2VudCl9LCAiIiwgImZhaWxlZCB0byBleHBvcnQiLCAidGhlIGNvbmZpZyIpCiAgICBlbmQKZW5kKQoKLS0gcmVzb2x2ZXIKCmxvY2FsIHJlc29sdmVyID0gewogICAgbGFzdF9ib2R5X3lhdyA9IHt9LAogICAgbW9kZSA9IHt9LAogICAgZGF0YSA9IHsKICAgICAgICBib2R5X3lhdyA9IHt9LAogICAgICAgIGV5ZV9hbmdsZXMgPSB7fSwKICAgICAgICBsYnlfdGFyZ2V0ID0ge30sCiAgICAgICAgc2ltdWxhdGlvbl90aW1lID0ge30sCiAgICAgICAgeWF3X2RlbHRhID0ge30sCiAgICAgICAgbWlzc2VkX3Nob3RzID0ge30sCiAgICAgICAgbWlzc2VkX2JvZHlfeWF3ID0ge30sCiAgICAgICAgYW5pbWxheWVyID0ge30sCiAgICAgICAgdmVjdG9yX29yaWdpbiA9IHt9LAogICAgICAgIHN0YXRlID0ge30sCiAgICB9LAogICAgb2xkX2RhdGEgPSB7CiAgICAgICAgYm9keV95YXcgPSB7fSwKICAgICAgICBleWVfYW5nbGVzID0ge30sCiAgICAgICAgbGJ5X3RhcmdldCA9IHt9LAogICAgICAgIHNpbXVsYXRpb25fdGltZSA9IHt9LAogICAgICAgIHlhd19kZWx0YSA9IHt9LAogICAgICAgIG1pc3NlZF9zaG90cyA9IHt9LAogICAgICAgIG1pc3NlZF9ib2R5X3lhdyA9IHt9LAogICAgICAgIGFuaW1sYXllciA9IHt9LAogICAgICAgIHZlY3Rvcl9vcmlnaW4gPSB7fSwKICAgICAgICBzdGF0ZSA9IHt9LAogICAgfQp9Cgpsb2NhbCBlbnRpdHlfZGF0YSA9IHsKICAgIG1fZmxMb3dlckJvZHlUYXJnZXQgPSBuaWwsCiAgICBtX2FuZ0V5ZUFuZ2xlcyA9IHt9LAogICAgbV9PbGRTaW11bGF0aW9uVGltZSA9IDAsCiAgICBtaXNzZXMgPSB7fSwKICAgIGhpdHMgPSB7fSwKfQoKZnVuY3Rpb24gZW50aXR5X2RhdGEuY3JlYXRlKHQpCgogICAgaWYgdCA9PSBuaWwgdGhlbgogICAgICAgIHQgPSB7fQogICAgZW5kCgogICAgc2V0bWV0YXRhYmxlKHQsIHtfX2luZGV4ID0gZW50aXR5X2RhdGF9KQoKICAgIHJldHVybiB0CmVuZAoKZnVuY3Rpb24gcmVzb2x2ZXI6Y29weV9kYXRhKGluZGV4KQogICAgZm9yIGl0ZW0sIHZhbHVlIGluIHBhaXJzKHNlbGYuZGF0YSkgZG8KICAgICAgICBzZWxmLm9sZF9kYXRhW2l0ZW1dW2luZGV4XSA9IHZhbHVlW2luZGV4XQogICAgZW5kCmVuZAoKZnVuY3Rpb24gcmVzb2x2ZXI6Y2xlYXJfZGF0YSgpCiAgICBzZWxmLmRhdGEgPSB7CiAgICAgICAgYm9keV95YXcgPSB7fSwKICAgICAgICBleWVfYW5nbGVzID0ge30sCiAgICAgICAgbGJ5X3RhcmdldCA9IHt9LAogICAgICAgIHNpbXVsYXRpb25fdGltZSA9IHt9LAogICAgICAgIHlhd19kZWx0YSA9IHt9LAogICAgICAgIG1pc3NlZF9zaG90cyA9IHt9LAogICAgICAgIG1pc3NlZF9ib2R5X3lhdyA9IHt9LAogICAgICAgIGFuaW1sYXllciA9IHt9LAogICAgICAgIHZlY3Rvcl9vcmlnaW4gPSB7fSwKICAgICAgICBzdGF0ZSA9IHt9LAogICAgfQoKICAgIHNlbGYub2xkX2RhdGEgPSB7CiAgICAgICAgYm9keV95YXcgPSB7fSwKICAgICAgICBleWVfYW5nbGVzID0ge30sCiAgICAgICAgbGJ5X3RhcmdldCA9IHt9LAogICAgICAgIHNpbXVsYXRpb25fdGltZSA9IHt9LAogICAgICAgIHlhd19kZWx0YSA9IHt9LAogICAgICAgIG1pc3NlZF9zaG90cyA9IHt9LAogICAgICAgIG1pc3NlZF9ib2R5X3lhdyA9IHt9LAogICAgICAgIGFuaW1sYXllciA9IHt9LAogICAgICAgIHZlY3Rvcl9vcmlnaW4gPSB7fSwKICAgICAgICBzdGF0ZSA9IHt9LAogICAgfQplbmQKCmZ1bmN0aW9uIHJlc29sdmVyOkdldEFuaW1hdGlvblN0YXRlKF9FbnRpdHkpCiAgICBpZiBub3QgKF9FbnRpdHkpIHRoZW4KICAgICAgICByZXR1cm4KICAgIGVuZAogICAgbG9jYWwgcGxheWVyX3B0ciA9IGZmaS5jYXN0KCAidm9pZCoqKiIsIGdldF9jbGllbnRfZW50aXR5KGllbnRpdHlsaXN0LCBfRW50aXR5KSkKICAgIGxvY2FsIGFuaW1zdGF0ZV9wdHIgPSBmZmkuY2FzdCggImNoYXIqIiAsIHBsYXllcl9wdHIgKSArIDB4OTk2MAogICAgbG9jYWwgc3RhdGUgPSBmZmkuY2FzdCggInN0cnVjdCBjX2FuaW1zdGF0ZSoqIiwgYW5pbXN0YXRlX3B0ciApWzBdCgogICAgcmV0dXJuIHN0YXRlCmVuZAoKZnVuY3Rpb24gcmVzb2x2ZXI6Z2V0X3BsYXllcl9tYXhfZmVldF95YXcoX0VudGl0eSkKICAgIGxvY2FsIFNfYW5pbWF0aW9uU3RhdGVfdCA9IHNlbGY6R2V0QW5pbWF0aW9uU3RhdGUoX0VudGl0eSkKICAgIGxvY2FsIG5EdWNrQW1vdW50ID0gU19hbmltYXRpb25TdGF0ZV90Lm1fZkR1Y2tBbW91bnQKICAgIGxvY2FsIG5GZWV0U3BlZWRGb3J3YXJkc09yU2lkZVdheXMgPSBtYXRoLm1heCgwLCBtYXRoLm1pbigxLCBTX2FuaW1hdGlvblN0YXRlX3QubV9mbEZlZXRTcGVlZEZvcndhcmRzT3JTaWRlV2F5cykpCiAgICBsb2NhbCBuRmVldFNwZWVkVW5rbm93bkZvcndhcmRPclNpZGV3YXlzID0gbWF0aC5tYXgoMSwgU19hbmltYXRpb25TdGF0ZV90Lm1fZmxGZWV0U3BlZWRVbmtub3duRm9yd2FyZE9yU2lkZXdheXMpCiAgICBsb2NhbCBuVmFsdWUgPQogICAgICAgIChTX2FuaW1hdGlvblN0YXRlX3QubV9mbFN0b3BUb0Z1bGxSdW5uaW5nRnJhY3Rpb24gKiAtMC4zMDAwMDAwMSAtIDAuMTk5OTk5OTkpICogbkZlZXRTcGVlZEZvcndhcmRzT3JTaWRlV2F5cyArCiAgICAgICAgMQogICAgaWYgbkR1Y2tBbW91bnQgPiAwIHRoZW4KICAgICAgICBuVmFsdWUgPSBuVmFsdWUgKyBuRHVja0Ftb3VudCAqIG5GZWV0U3BlZWRVbmtub3duRm9yd2FyZE9yU2lkZXdheXMgKiAoMC41IC0gblZhbHVlKQogICAgZW5kCiAgICBsb2NhbCBuRGVsdGFZYXcgPSBTX2FuaW1hdGlvblN0YXRlX3QubV9mbE1heFlhdyAqIG5WYWx1ZQogICAgcmV0dXJuIG5EZWx0YVlhdyA8IDYwIGFuZCBuRGVsdGFZYXcgPj0gMCBhbmQgbkRlbHRhWWF3IG9yIDAKZW5kCgpmdW5jdGlvbiByZXNvbHZlcjpnZXRfbWF4X2JvZHlfeWF3KGVudCkKCiAgICBsb2NhbCBtYXhfYm9keV95YXcgPSAxODAvbWF0aC5waQoKICAgIGxvY2FsIGJvZHlfeWF3ID0gbWF4X2JvZHlfeWF3CgogICAgbG9jYWwgbGFzdF9ib2R5X3lhdyA9IHNlbGYubGFzdF9ib2R5X3lhd1tlbnRdCgogICAgaWYgbGFzdF9ib2R5X3lhdyA9PSBuaWwgdGhlbgogICAgICAgIGxhc3RfYm9keV95YXcgPSBtYXhfYm9keV95YXcKICAgIGVuZAoKICAgIGxvY2FsIHZlbCA9IGxhdmVuZGVyLmZ1bmNzLmFhLmdldF92ZWxvY2l0eShlbnQpCgogICAgbG9jYWwgbWF4X3ZlbG9jaXR5ID0gMjYwCgogICAgbG9jYWwgd2VhcG9uX2VudCA9IGVudGl0eS5nZXRfcGxheWVyX3dlYXBvbihlbnQpCgogICAgaWYgd2VhcG9uX2VudCB+PSBuaWwgdGhlbgoKICAgICAgICBsb2NhbCB3ZWFwb24gPSBjc2dvX3dlYXBvbnMod2VhcG9uX2VudCkKCiAgICAgICAgaWYgd2VhcG9uIH49IG5pbCB0aGVuCgogICAgICAgICAgICBtYXhfdmVsb2NpdHkgPSB3ZWFwb24ubWF4X3BsYXllcl9zcGVlZAoKICAgICAgICBlbmQKCiAgICBlbmQKCiAgICBpZiBqdW1waW5nIHRoZW4KCiAgICAgICAgaWYgdmVsIDwgMTMwIHRoZW4KCiAgICAgICAgICAgIGJvZHlfeWF3ID0gbGF2ZW5kZXIuZnVuY3MuYWEuYXBwcm9hY2hfYW5nbGUobGFzdF9ib2R5X3lhdywgbWF4X2JvZHlfeWF3KQoKICAgICAgICBlbHNlCgogICAgICAgICAgICBib2R5X3lhdyA9IGxhdmVuZGVyLmZ1bmNzLmFhLmFwcHJvYWNoX2FuZ2xlKGxhc3RfYm9keV95YXcsIG1heF9ib2R5X3lhdy8yKQoKICAgICAgICBlbmQKCiAgICBlbHNlCgogICAgICAgIGJvZHlfeWF3ID0gbWF4X2JvZHlfeWF3IC0gKG1hdGgubWluKHZlbCxtYXhfdmVsb2NpdHkpLyhtYXhfdmVsb2NpdHkqMikgKiBtYXhfYm9keV95YXcpCgogICAgZW5kCgogICAgcmV0dXJuIGJvZHlfeWF3CgplbmQKCmxvY2FsIGRiYW5nbGVzPSAwCgpmdW5jdGlvbiByZXNvbHZlcjpvbl9uZXRfdXBkYXRlX2VuZCgpCgogICAgbG9jYWwgZW5lbWllcyA9IGxhdmVuZGVyLmZ1bmNzLm1pc2MuZ2V0X2VudGl0aWVzKHRydWUsIHRydWUpCgoKICAgIGxvY2FsIG1lID0gZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKQoKICAgIGZvciBpZCA9IDEsIGdsb2JhbHMubWF4cGxheWVycygpIGRvCgogICAgICAgIGxvY2FsIGVudCA9IGVuZW1pZXNbaWRdCgogICAgICAgIGlmIGVudCA9PSBuaWwgb3Igbm90IGVudGl0eS5pc19hbGl2ZShlbnQpIG9yIG5vdCBlbnRpdHkuaXNfZW5lbXkoZW50KSBvciBlbnRpdHkuaXNfZG9ybWFudChlbnQpIHRoZW4KICAgICAgICAgICAgZ290byBza2lwCiAgICAgICAgZW5kCgogICAgICAgIHNlbGYuZGF0YS5zaW11bGF0aW9uX3RpbWVbZW50XSA9IGVudGl0eS5nZXRfcHJvcChlbnQsICJtX2ZsU2ltdWxhdGlvblRpbWUiKQogICAgICAgIHNlbGYuZGF0YS5leWVfYW5nbGVzW2VudF0gPSB2ZWN0b3IoZW50aXR5LmdldF9wcm9wKGVudCwgIm1fYW5nRXllQW5nbGVzIikpCiAgICAgICAgc2VsZi5kYXRhLmxieV90YXJnZXRbZW50XSA9IGVudGl0eS5nZXRfcHJvcChlbnQsICJtX2ZsTG93ZXJCb2R5WWF3VGFyZ2V0IikKICAgICAgICBzZWxmLmRhdGEudmVjdG9yX29yaWdpbltlbnRdID0gdmVjdG9yKGVudGl0eS5nZXRfb3JpZ2luKGVudCkpCgogICAgICAgIGlmIChzZWxmLm9sZF9kYXRhLnNpbXVsYXRpb25fdGltZVtlbnRdIH49IG5pbCBhbmQgc2VsZi5kYXRhLnNpbXVsYXRpb25fdGltZVtlbnRdID09IHNlbGYub2xkX2RhdGEuc2ltdWxhdGlvbl90aW1lW2VudF0pIHRoZW4KICAgICAgICAgICAgZ290byBza2lwCiAgICAgICAgZW5kCiAKICAgICAgICBsb2NhbCBtYXhfYm9keV95YXcgPSBzZWxmOmdldF9tYXhfYm9keV95YXcoZW50KQoKICAgICAgICBsb2NhbCBscGVudCA9IGdldF9jbGllbnRfZW50aXR5KGllbnRpdHlsaXN0LCBlbnQpCiAgICAgICAgbG9jYWwgbHBlbnRuZXR3b3JrYWJsZSA9IGdldF9jbGllbnRfbmV0d29ya2FibGUoaWVudGl0eWxpc3QsIGVudCkKCiAgICAgICAgbG9jYWwgYWN0X3RhYmxlID0ge30KCiAgICAgICAgZm9yIGk9MSwgMTIgZG8KICAgICAgICAgICAgbG9jYWwgbGF5ZXIgPSBnZXRfYW5pbV9sYXllcihscGVudCwgaSkKCiAgICAgICAgICAgIGlmIGxheWVyLm1fcE93bmVyIH49IG5pbCB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBhY3QgPSBnZXRfc2VxdWVuY2VfYWN0aXZpdHkobHBlbnQsIGxwZW50bmV0d29ya2FibGUsIGxheWVyLm1fblNlcXVlbmNlKQoKICAgICAgICAgICAgICAgIGlmIGk9PSAzIG9yIGkgPT0gNiBvciBpID09IDEyIHRoZW4KICAgICAgICAgICAgICAgICAgICAtLXJlbmRlcmVyLnRleHQoMTAsIDUwMCArIDE1KmksIDI1NSwgMjU1LCAyNTUsIDI1NSwgbmlsLCAwLCBzdHJpbmcuZm9ybWF0KCdhY3Q6ICUuNWYgY3ljbGU6ICUuNWYgcHJldmlvdXMgY3ljbGU6ICUuNWYgcGxheWJhY2sgcmF0ZSAlLjVmIHdlaWdodDogJS41ZicsIGFjdCwgbGF5ZXIubV9mbEN5Y2xlIG9yIDAsIGxheWVyLm1fZmxQcmV2Q3ljbGUsIGxheWVyLm1fZmxQbGF5YmFja1JhdGUsIGxheWVyLm1fZmxXZWlnaHQpKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgYWN0X3RhYmxlW2FjdF0gPSB7CiAgICAgICAgICAgICAgICAgICAgWyJzZXF1ZW5jZSJdID0gbGF5ZXIubV9uU2VxdWVuY2UsCiAgICAgICAgICAgICAgICAgICAgWyJwcmV2X2N5Y2xlIl0gPSBsYXllci5tX2ZsUHJldkN5Y2xlLAogICAgICAgICAgICAgICAgICAgIFsid2VpZ2h0Il0gPSBsYXllci5tX2ZsV2VpZ2h0LAogICAgICAgICAgICAgICAgICAgIFsiY3ljbGUiXSA9IGxheWVyLm1fZmxDeWNsZQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCgogICAgICAgIHNlbGYubW9kZVtlbnRdID0gIlNUQVRJQyIKCiAgICAgICAgbG9jYWwgc2lkZSA9IG5pbAoKICAgICAgICBsb2NhbCBib2R5X3lhdyA9IDI5CgogICAgICAgIHNlbGYuZGF0YS5hbmltbGF5ZXJbZW50XSA9IGFjdF90YWJsZQoKICAgICAgICBsb2NhbCB0cmFjZV9kYXRhID0ge2xlZnQgPSAwLCByaWdodCA9IDB9CgogICAgICAgIGxvY2FsIHgsIHksIHogPSBjbGllbnQuZXllX3Bvc2l0aW9uKCkKCiAgICAgICAgbG9jYWwgYW5nbGVzID0gey05MCwgLTYwLCAtMzAsIDMwLCA2MCwgOTB9CgogICAgICAgIGZvciBpLCBhbmdsZSBpbiBpcGFpcnMoYW5nbGVzKSBkbwoKICAgICAgICAgICAgbG9jYWwgdG9feCwgdG9feSwgdG9feiA9IGxhdmVuZGVyLmZ1bmNzLmFhLmV4dGVuZF92ZWN0b3Ioc2VsZi5kYXRhLnZlY3Rvcl9vcmlnaW5bZW50XS54LCBzZWxmLmRhdGEudmVjdG9yX29yaWdpbltlbnRdLnksIHNlbGYuZGF0YS52ZWN0b3Jfb3JpZ2luW2VudF0ueiArIDY0LCA4MTkyLCBzZWxmLmRhdGEuZXllX2FuZ2xlc1tlbnRdLnkgKyAxODAgLSBhbmdsZSkKCiAgICAgICAgICAgIGxvY2FsIGZyYWN0aW9uID0gY2xpZW50LnRyYWNlX2xpbmUoZW50LCBzZWxmLmRhdGEudmVjdG9yX29yaWdpbltlbnRdLngsIHNlbGYuZGF0YS52ZWN0b3Jfb3JpZ2luW2VudF0ueSwgc2VsZi5kYXRhLnZlY3Rvcl9vcmlnaW5bZW50XS56ICsgNjQsIHRvX3gsIHRvX3ksIHRvX3opCgogICAgICAgICAgICB0cmFjZV9kYXRhW2FuZ2xlIDwgMCBhbmQgImxlZnQiIG9yICJyaWdodCJdID0gdHJhY2VfZGF0YVthbmdsZSA8IDAgYW5kICJsZWZ0IiBvciAicmlnaHQiXSArIGZyYWN0aW9uCgogICAgICAgIGVuZAoKICAgICAgICBpZiB0cmFjZV9kYXRhLmxlZnQgPiB0cmFjZV9kYXRhLnJpZ2h0IHRoZW4KICAgICAgICAgICAgc2lkZSA9IDEKICAgICAgICBlbHNlCiAgICAgICAgICAgIHNpZGUgPSAwCiAgICAgICAgZW5kCgogICAgICAgIGxvY2FsIHRyYWNlX2J1bGxldF9kYXRhID0ge2xlZnQgPSAwLCByaWdodCA9IDB9CgogICAgICAgIGZvciBpLCBhbmdsZSBpbiBpcGFpcnMoYW5nbGVzKSBkbwoKICAgICAgICAgICAgbG9jYWwgdG9feCwgdG9feSwgdG9feiA9IGxhdmVuZGVyLmZ1bmNzLmFhLmV4dGVuZF92ZWN0b3Ioc2VsZi5kYXRhLnZlY3Rvcl9vcmlnaW5bZW50XS54LCBzZWxmLmRhdGEudmVjdG9yX29yaWdpbltlbnRdLnksIHNlbGYuZGF0YS52ZWN0b3Jfb3JpZ2luW2VudF0ueiArIDY0LCAxMjgsIHNlbGYuZGF0YS5leWVfYW5nbGVzW2VudF0ueSArIGFuZ2xlKQoKICAgICAgICAgICAgbG9jYWwgXywgZGFtYWdlID0gY2xpZW50LnRyYWNlX2J1bGxldChtZSwgeCwgeSwgeiwgdG9feCwgdG9feSwgdG9feiwgbWUpCgogICAgICAgICAgICB0cmFjZV9idWxsZXRfZGF0YVthbmdsZSA8IDAgYW5kICJsZWZ0IiBvciAicmlnaHQiXSA9IHRyYWNlX2J1bGxldF9kYXRhW2FuZ2xlIDwgMCBhbmQgImxlZnQiIG9yICJyaWdodCJdICsgZGFtYWdlCgogICAgICAgIGVuZAoKICAgICAgICBpZiB0cmFjZV9idWxsZXRfZGF0YS5sZWZ0ICsgdHJhY2VfYnVsbGV0X2RhdGEucmlnaHQgPiAwIHRoZW4KCiAgICAgICAgICAgIGlmIHRyYWNlX2J1bGxldF9kYXRhLmxlZnQgPiB0cmFjZV9idWxsZXRfZGF0YS5yaWdodCB0aGVuCiAgICAgICAgICAgICAgICBzaWRlID0gMQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBzaWRlID0gMAogICAgICAgICAgICBlbmQKCiAgICAgICAgZW5kCgogICAgICAgIGxvY2FsIHRhcmdldF95YXcgPSBtYXRoLmRlZyhtYXRoLmF0YW4yKHNlbGYuZGF0YS52ZWN0b3Jfb3JpZ2luW2VudF0ueSAtIHksIHNlbGYuZGF0YS52ZWN0b3Jfb3JpZ2luW2VudF0ueCAtIHgpKQoKICAgICAgICBsb2NhbCByZWxhdGl2ZV95YXcgPSBub3JtYWxpc2VfYW5nbGUoc2VsZi5kYXRhLmV5ZV9hbmdsZXNbZW50XS55IC0gdGFyZ2V0X3lhdykKCiAgICAgICAgaWYgbWF0aC5hYnMocmVsYXRpdmVfeWF3KSA+PSAzMCBhbmQgbWF0aC5hYnMocmVsYXRpdmVfeWF3KSA8PSAxMjAgdGhlbgoKICAgICAgICAgICAgc2lkZSA9IHJlbGF0aXZlX3lhdyA+IDAgYW5kIDEgb3IgMAoKICAgICAgICAgICAgaWYgbWF0aC5hYnMocmVsYXRpdmVfeWF3KSA+IDkwIHRoZW4KCiAgICAgICAgICAgICAgICBzaWRlID0gcmVsYXRpdmVfeWF3ID4gMCBhbmQgMCBvciAxCgogICAgICAgICAgICBlbHNlaWYgbWF0aC5hYnMocmVsYXRpdmVfeWF3KSA8PSA2MCB0aGVuCgogICAgICAgICAgICAgICAgYm9keV95YXcgPSBtYXhfYm9keV95YXcgLyAyCgogICAgICAgICAgICBlbmQKCiAgICAgICAgZW5kICAgICAgIAoKICAgICAgICBpZiBzZWxmLm9sZF9kYXRhLmV5ZV9hbmdsZXNbZW50XSB+PSBuaWwgdGhlbgoKICAgICAgICAgICAgc2VsZi5kYXRhLnlhd19kZWx0YVtlbnRdID0gbm9ybWFsaXNlX2FuZ2xlKHNlbGYuZGF0YS5leWVfYW5nbGVzW2VudF0ueSAtIHNlbGYub2xkX2RhdGEuZXllX2FuZ2xlc1tlbnRdLnkpCgogICAgICAgICAgICBpZiBzZWxmLm9sZF9kYXRhLnlhd19kZWx0YVtlbnRdIH49IG5pbCB0aGVuCgogICAgICAgICAgICAgICAgaWYgbWF0aC5hYnMoc2VsZi5kYXRhLnlhd19kZWx0YVtlbnRdKSA+PSAzMiBvciBtYXRoLmFicyhzZWxmLm9sZF9kYXRhLnlhd19kZWx0YVtlbnRdKSA+PSAzMiB0aGVuCgogICAgICAgICAgICAgICAgICAgIGJvZHlfeWF3ID0gbWF4X2JvZHlfeWF3CiAgICAgICAgICAgICAgICAgICAgc2lkZSA9ICAoc2VsZi5kYXRhLnlhd19kZWx0YVtlbnRdID4gMCkgYW5kIDAgb3IgMQogICAgICAgICAgICAgICAgICAgIHNlbGYubW9kZVtlbnRdID0gIkhJR0ggSklUVEVSIgoKICAgICAgICAgICAgICAgIGVsc2VpZiAobWF0aC5hYnMoc2VsZi5kYXRhLnlhd19kZWx0YVtlbnRdKSA+IDIyIGFuZCBtYXRoLmFicyhzZWxmLmRhdGEueWF3X2RlbHRhW2VudF0pIDwgMzIpIG9yIChtYXRoLmFicyhzZWxmLm9sZF9kYXRhLnlhd19kZWx0YVtlbnRdKSA+IDIyIGFuZCBtYXRoLmFicyhzZWxmLm9sZF9kYXRhLnlhd19kZWx0YVtlbnRdKSA8IDMyKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgYm9keV95YXcgPSBtYXhfYm9keV95YXcKICAgICAgICAgICAgICAgICAgICBzaWRlID0gIChzZWxmLmRhdGEueWF3X2RlbHRhW2VudF0gPiAwKSBhbmQgMCBvciAxCiAgICAgICAgICAgICAgICAgICAgc2VsZi5tb2RlW2VudF0gPSAiTE9XIEpJVFRFUiIKICAgICAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgZW5kCgogICAgICAgIGVuZAoKICAgICAgICBpZiBzZWxmLmRhdGEubWlzc2VkX3Nob3RzW2VudF0gfj0gbmlsIGFuZCBzZWxmLmRhdGEubWlzc2VkX3Nob3RzW2VudF0gPD0gNCB0aGVuCgogICAgICAgICAgICBpZiBzZWxmLmRhdGEubWlzc2VkX3Nob3RzW2VudF0gPT0gMSBhbmQgc2VsZi5kYXRhLm1pc3NlZF9zaG90c1tlbnRdIH49IHNlbGYub2xkX2RhdGEubWlzc2VkX3Nob3RzW2VudF0gdGhlbgoKICAgICAgICAgICAgICAgIHNlbGYuZGF0YS5taXNzZWRfYm9keV95YXdbZW50XSA9IChzZWxmLm9sZF9kYXRhLmJvZHlfeWF3W2VudF0gPiAwIGFuZCAxIG9yIDApCgogICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIGxvY2FsIHN0YWdlcyA9IHsKICAgICAgICAgICAgICAgIC1tYXhfYm9keV95YXcsCiAgICAgICAgICAgICAgICAyOSwKICAgICAgICAgICAgICAgIG1heF9ib2R5X3lhdywKICAgICAgICAgICAgICAgIDAKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc2VsZi5tb2RlW2VudF0gPSAiQlJVVEUiCgogICAgICAgICAgICBib2R5X3lhdyA9IHNlbGYuZGF0YS5taXNzZWRfYm9keV95YXdbZW50XSA9PSAwIGFuZCAtc3RhZ2VzW3NlbGYuZGF0YS5taXNzZWRfc2hvdHNbZW50XV0gb3Igc3RhZ2VzW3NlbGYuZGF0YS5taXNzZWRfc2hvdHNbZW50XV0KICAgICAgICAgICAgc2lkZSA9IDEKCiAgICAgICAgZWxzZWlmIHNlbGYuZGF0YS5taXNzZWRfc2hvdHNbZW50XSBvciAwID4gNCB0aGVuCiAgICAgICAgICAgIAogICAgICAgICAgICBzZWxmLmRhdGEubWlzc2VkX3Nob3RzW2VudF0gPSBuaWwKICAgICAgICAgICAgCiAgICAgICAgZW5kCgogICAgICAgIHNlbGYuZGF0YS5zdGF0ZVtlbnRdID0gbGF2ZW5kZXIuZnVuY3MuYWEuZ2V0X3N0YXRlKGVudCkKCiAgICAgICAgc2VsZi5kYXRhLmJvZHlfeWF3W2VudF0gPSAoc2lkZSA9PSAwKSBhbmQgLSBib2R5X3lhdyBvciBib2R5X3lhdwoKICAgICAgICBwbGlzdC5zZXQoZW50LCAiRm9yY2UgYm9keSB5YXciLCB1aS5nZXQobGF2ZW5kZXIudWkucHJpdmF0ZS5yZXNvbHZlcl9tYXN0ZXIpIGFuZCB0cnVlIG9yIGZhbHNlKQoKICAgICAgICBwbGlzdC5zZXQoZW50LCAiRm9yY2UgYm9keSB5YXcgdmFsdWUiLCB1aS5nZXQobGF2ZW5kZXIudWkucHJpdmF0ZS5yZXNvbHZlcl9tYXN0ZXIpIGFuZCBzZWxmLmRhdGEuYm9keV95YXdbZW50XSBvciAwKQogICAgICAgIHNlbGY6Y29weV9kYXRhKGVudCkKCiAgICAgICAgZGJhbmdsZXMgPSBtYXRoLmZsb29yKGJvZHlfeWF3KQogICAgICAgIDo6c2tpcDo6CgogICAgZW5kCgplbmQKCmZ1bmN0aW9uIHJlc29sdmVyOm9uX21pc3Moc2hvdCkKCgoKICAgIGlmIHNob3QucmVhc29uIH49ICI/IiB0aGVuIAogICAgICAgIHJldHVybgoJZW5kCgogICAgaWYgc2hvdC50YXJnZXQgPT0gbmlsIHRoZW4KICAgICAgICByZXR1cm4KICAgIGVuZAoKICAgIGxvY2FsIG1pc3NfY291bnQgPSBzZWxmLmRhdGEubWlzc2VkX3Nob3RzW3Nob3QudGFyZ2V0XSBvciAwCgogICAgc2VsZi5kYXRhLm1pc3NlZF9zaG90c1tzaG90LnRhcmdldF0gPSBtaXNzX2NvdW50ICsgMQoKCmVuZAoKZnVuY3Rpb24gcmVzb2x2ZXI6b25fcm91bmRfc3RhcnQoKQogICAgCiAgICByZXNvbHZlcjpjbGVhcl9kYXRhKCkKCmVuZAoKCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJhaW1fbWlzcyIsIGZ1bmN0aW9uKHNob3QpCiAgIAogICAtLSByZXNvbHZlcjpvbl9taXNzKHNob3QpCgoKCmVuZCkKCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInJvdW5kX3N0YXJ0IiwgZnVuY3Rpb24oKQogICAKICAgIHJlc29sdmVyOm9uX3JvdW5kX3N0YXJ0KCkKICAgIAplbmQpCgoKCmZ1bmN0aW9uIHJlc29sdmVyOm9uX3BhaW50KCkKCgoKCiAgICBpZiBub3QgbGF2ZW5kZXIuZnVuY3MubWlzYy5jb250YWlucyh1aS5nZXQobGF2ZW5kZXIudWkucHJpdmF0ZS5yZXNvbHZlcl9wYW5lbCksICJpbmZvIHBhbmVsIikgb3Igbm90IHVpLmdldChsYXZlbmRlci51aS5wcml2YXRlLnJlc29sdmVyX21hc3RlcikgdGhlbgogICAgICAgIHJldHVybiBlbmQKCgoKICAgIGxvY2FsIG1lID0gZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKQoKICAgIGxvY2FsIGVuZW15ID0gZW50aXR5LmdldF9wbGF5ZXJzKHRydWUpCiAgICBsb2NhbCBudW1fZW5lbWllcyA9IHRhYmxlLmdldG4oZW5lbXkpIC0tIEdldCB0aGUgbnVtYmVyIG9mIGVuZW1pZXMKCgogICAgCgogICAgZm9yIGksIHYgaW4gcGFpcnMoZW5lbXkpIGRvCgogICAgICAgIGxvY2FsIGVudCA9IGVuZW15W2ldCgoKICAgICAgICBpZiByZXNvbHZlci5kYXRhLmJvZHlfeWF3W2VudF0gPT0gbmlsIHRoZW4KICAgICAgICAgICAgcmV0dXJuIGVuZAoKICAgICAgICBpZiBlbnQgPT0gbmlsIG9yIG5vdCBlbnRpdHkuaXNfYWxpdmUoZW50KSBvciBub3QgZW50aXR5LmlzX2VuZW15KGVudCkgb3Igbm90IGVudGl0eS5pc19hbGl2ZShtZSkgdGhlbgogICAgICAgICAgICByZXR1cm4KICAgICAgICBlbmQKICAgICAgICByZW5kZXJlci50ZXh0KGxhdmVuZGVyLnBvcy5yZXNvbHZlci54ICsgMzAwLCBsYXZlbmRlci5wb3MucmVzb2x2ZXIueSAtIDEyMCArICgxNSAqIGkpLCAyNTUsIDI1NSwgMjU1LCAyNTUsICIiLCAwLCBzdHJpbmcuZm9ybWF0KCJwbGF5ZXI6ICVzIH4gc3RhdGU6ICVzIC8gbWF4OiAlcyB+IGNvcnJlY3RlZDogJXMgLyB0eXBlOiAlcyIsIHN0cmluZy5sb3dlcih0b3N0cmluZyhlbnRpdHkuZ2V0X3BsYXllcl9uYW1lKGVudCkpKSwgbGF2ZW5kZXIuZnVuY3MuYWEuZ2V0X3N0YXRlKGVudCksIGRiYW5nbGVzLCBwbGlzdC5nZXQodG9udW1iZXIoZW50KSwgIkZvcmNlIGJvZHkgeWF3IHZhbHVlIiksIHN0cmluZy5sb3dlcihyZXNvbHZlci5tb2RlW2VudF0pKSkKICAgICAgICAKICAgIGVuZAogICAgcmVuZGVyZXIudGV4dChsYXZlbmRlci5wb3MucmVzb2x2ZXIueCArIDMwMCwgbGF2ZW5kZXIucG9zLnJlc29sdmVyLnkgLSAxMjAsIDI1NSwgMjU1LCAyNTUsIDI1NSwgIiIsIDAsICJyZXNvbHZlciBwYW5lbCB+IGlkczogIiAuLiBudW1fZW5lbWllcykKCmVuZAoKCmNsaWVudC5yZWdpc3Rlcl9lc3BfZmxhZygiTEFWRU5ERVIiLCAxODUsIDE5MCwgMjU1LCBmdW5jdGlvbihlbnQpCiAgICBpZiBub3QgbGF2ZW5kZXIuZnVuY3MuY2hlY2tfYnVpbGQoInByaXZhdGUiKSB0aGVuCiAgICAgICAgcmV0dXJuIGVuZAogICAgaWYgbm90IHVpLmdldChsYXZlbmRlci51aS5wcml2YXRlLnJlc29sdmVyX21hc3Rlcikgb3Igbm90IGxhdmVuZGVyLmZ1bmNzLm1pc2MuY29udGFpbnModWkuZ2V0KGxhdmVuZGVyLnVpLnByaXZhdGUucmVzb2x2ZXJfcGFuZWwpLCAiZmxhZ3MiKSB0aGVuIAogICAgICAgIHJldHVybiBlbmQKCiAgICBpZiByZXNvbHZlci5kYXRhLmJvZHlfeWF3W2VudF0gfj0gbmlsIHRoZW4KICAgCiAgICAgICAgaWYgcmVzb2x2ZXIubW9kZVtlbnRdID09ICJCUlVURSIgdGhlbgoKICAgICAgICAgICAgcmV0dXJuIHRydWUsIHRvc3RyaW5nKG1hdGguY2VpbChyZXNvbHZlci5kYXRhLmJvZHlfeWF3W2VudF0pKSAuLiAiIDogIiAuLiByZXNvbHZlci5tb2RlW2VudF0gLi4gIi0iIC4uICJTVEFHRToiIC4uIHJlc29sdmVyLmRhdGEubWlzc2VkX3Nob3RzW2VudF0KCiAgICAgICAgZWxzZQoKICAgICAgICAgICAgaWYgcmVzb2x2ZXIubW9kZVtlbnRdID09ICJMT1cgSklUVEVSIiB0aGVuCgogICAgICAgICAgICAgICAgcmV0dXJuIHRydWUsICJMT1cgSklUVEVSIgoKICAgICAgICAgICAgZWxzZWlmIHJlc29sdmVyLm1vZGVbZW50XSA9PSAiSElHSCBKSVRURVIiIHRoZW4KCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZSwgIkhJR0ggSklUVEVSIgoKICAgICAgICAgICAgZWxzZQoKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlLCByZXNvbHZlci5tb2RlW2VudF0KCiAgICAgICAgICAgIGVuZAoKICAgICAgICBlbmQKCiAgICBlbHNlCgogICAgICAgIHJldHVybiB0cnVlLCAiIgoKICAgIGVuZAoKZW5kKQoKLS0gQ2FsbGJhY2tzCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJydW5fY29tbWFuZCIsIGZ1bmN0aW9uKGNtZCkKCgplbmQpCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJwcmVfcmVuZGVyIiwgZnVuY3Rpb24oKQoKICAgIGxhdmVuZGVyLmhhbmRsZXJzLm1pc2MuYW5pbV9icmVha2VycygpCgplbmQpCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJzZXR1cF9jb21tYW5kIiwgZnVuY3Rpb24oY21kKQoKICAgIGxhdmVuZGVyLmhhbmRsZXJzLmFhLmFudGlfYmFja3N0YWIoKQoKICAgIGxhdmVuZGVyLmhhbmRsZXJzLmFhLm1hbnVhbF9hYSgpCgogICAgbGF2ZW5kZXIuaGFuZGxlcnMuYWEuZ2V0X3N0YXRlKGNtZCkKCiAgICBsYXZlbmRlci5oYW5kbGVycy5hYS5mcmVlc3RhbmRpbmcoKQoKICAgIGxhdmVuZGVyLmhhbmRsZXJzLmFhLmFudGlfYnJ1dGUoY21kKQoKICAgIGlmIGxhdmVuZGVyLmZ1bmNzLmNoZWNrX2J1aWxkKCJwcml2YXRlIikgdGhlbgogICAgICAgIHJlc29sdmVyOm9uX25ldF91cGRhdGVfZW5kKCkKICAgIGVuZAoKZW5kKQoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygicGFpbnQiLCBmdW5jdGlvbigpCiAgICAKICAgIGxhdmVuZGVyLmhhbmRsZXJzLnZpc3VhbHMuaW5kaWNhdG9ycygpCgogICAtLSBsYXZlbmRlci5oYW5kbGVycy52aXN1YWxzLmRlYnVnX3BhbmVsKCkKCiAgICBsYXZlbmRlci5oYW5kbGVycy52aXN1YWxzLm1pbl9kbWdfaW5kaWNhdG9yKCkKCiAgICBsYXZlbmRlci5oYW5kbGVycy5tYW51YWxfYWFfYXJyb3dzKCkKCiAgICBsYXZlbmRlci5jdXJyZW50X3N0YXRlID0gYWJzdGFnZSA+IDAgYW5kIHN0cmluZy5mb3JtYXQoIkFOVEkgQlJVVEUgLSBTVDogJXMiLCBhYnN0YWdlKSBvciAiQlVJTERFUiIKCiAgICBpZiBsYXZlbmRlci5mdW5jcy5jaGVja19idWlsZCgicHJpdmF0ZSIpIHRoZW4KICAgICAgICByZXNvbHZlcjpvbl9wYWludCgpCiAgICBlbmQKCmVuZCkKCmNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soImFpbV9taXNzIiwgZnVuY3Rpb24oKQoKICAgLS0gbGF2ZW5kZXIuaGFuZGxlcnMudmlzdWFscy5zaG90X2xvZ19taXNzX25vdGlmeSgpCgoKZW5kKQoKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygicGFpbnRfdWkiLCBmdW5jdGlvbigpCiAgICBsYXZlbmRlci5mdW5jcy5taXNjLnNldF9hYV92aXNpYmlsaXR5KGZhbHNlKQogICAgCiAgICBsYXZlbmRlci5oYW5kbGVycy5jb250cm9sX2FuaW1hdGlvbl9tYWluKCkKCiAgICBub3RpZnk6aGFuZGxlcigpCiAgICAKCiAgICBsYXZlbmRlci5oYW5kbGVycy52aXN1YWxzLndhdGVybWFyaygpCgogICAgbGF2ZW5kZXIuaGFuZGxlcnMudmlzdWFscy52ZWxvY2l0eV93YXJuaW5nKCkKCiAgICBsYXZlbmRlci5oYW5kbGVycy52aXN1YWxzLmtleWJpbmRzKCkKCiAgICBtZW51X2xpbmVfc2NhbGluZygpCgogICAgcmVwbGFjZV9vdGhlcigpCgplbmQpCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJzaHV0ZG93biIsIGZ1bmN0aW9uKCkKCiAgICBsYXZlbmRlci5mdW5jcy5taXNjLnNldF9hYV92aXNpYmlsaXR5KHRydWUpCiAgICAtLSBTYXZlIGtleWJpbmQgbG9jYXRpb24gb24gc2h1dGRvd24KICAgIGxvY2FsIGxvY2F0aW9ucyA9IGRhdGFiYXNlLnJlYWQobGF2ZW5kZXIuZGF0YWJhc2UubG9jYXRpb25zKSBvciB7fQogICAgbG9jYXRpb25zLmtleWJpbmRzID0geyB4ID0gbGF2ZW5kZXIudmlzdWFscy5rZXliaW5kcy5wb3MueCwgeSA9IGxhdmVuZGVyLnZpc3VhbHMua2V5YmluZHMucG9zLnkgfQoJZGF0YWJhc2Uud3JpdGUobGF2ZW5kZXIuZGF0YWJhc2UubG9jYXRpb25zLCBsb2NhdGlvbnMpCiAgICB1aS5zZXRfdmlzaWJsZShsYXZlbmRlci5yZWZzLm1pc2Muc2xvd19tb3Rpb24sIHRydWUpCiAgICB1aS5zZXRfdmlzaWJsZShsYXZlbmRlci5yZWZzLm1pc2Muc2xvd19tb3Rpb25fa2V5LCB0cnVlKQoKICAgIHVpLnNldF92aXNpYmxlKGxhdmVuZGVyLnJlZnMubWlzYy5oaWRlX3Nob3RzLCB0cnVlKQogICAgdWkuc2V0X3Zpc2libGUobGF2ZW5kZXIucmVmcy5taXNjLmhpZGVfc2hvdHNfa2V5LCB0cnVlKQoKICAgIHVpLnNldF92aXNpYmxlKGxhdmVuZGVyLnJlZnMubWlzYy5mYWtlX3BlZWssIHRydWUpCiAgICB1aS5zZXRfdmlzaWJsZShsYXZlbmRlci5yZWZzLm1pc2MuZmFrZV9wZWVrX2tleSwgdHJ1ZSkKCiAgICB1aS5zZXRfdmlzaWJsZShsYXZlbmRlci5yZWZzLm1pc2MubGVncywgdHJ1ZSkKZW5kKQoKbm90aWZ5Lm5ld19ib3R0b20oNCwge3VpLmdldChsYXZlbmRlci51aS52aXN1YWxzLm5vdGlmaWNhdGlvbl9hY2NlbnQpfSwgIk9OX0xPQUQiLCAid2VsY29tZSwiLCB1c2VybmFtZSwgInRvIiwgImxhdmVuZGVyIikK"}