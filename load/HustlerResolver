{"status":200,"content":"bG9jYWwgZmZpID0gcmVxdWlyZSgiZmZpIikKbG9jYWwgdmVjdG9yID0gcmVxdWlyZSgidmVjdG9yIikKZnVuY3Rpb24gQ2xhbXAodmFsdWUsIG1pbiwgbWF4KSByZXR1cm4gbWF0aC5taW4obWF0aC5tYXgodmFsdWUsIG1pbiksIG1heCkgZW5kCmxvY2FsIGZ1bmN0aW9uIEFuZ2xlTW9kaWZpZXIoYSkgcmV0dXJuICgzNjAgLyA2NTUzNikgKiBiaXQuYmFuZChtYXRoLmZsb29yKGEgKiAoNjU1MzYgLyAzNjApKSwgNjU1MzUpIGVuZApsb2NhbCBmdW5jdGlvbiBBcHByb2FjaCh0YXJnZXQsIHZhbHVlLCBzcGVlZCkKCXRhcmdldCA9IEFuZ2xlTW9kaWZpZXIodGFyZ2V0KQoJdmFsdWUgPSBBbmdsZU1vZGlmaWVyKHZhbHVlKQoJbG9jYWwgZGVsdGEgPSB0YXJnZXQgLSB2YWx1ZQoJaWYgc3BlZWQgPCAwIHRoZW4gc3BlZWQgPSAtc3BlZWQgZW5kCglpZiBkZWx0YSA8IC0xODAgdGhlbiBkZWx0YSA9IGRlbHRhICsgMzYwCgllbHNlaWYgZGVsdGEgPiAxODAgdGhlbiBkZWx0YSA9IGRlbHRhIC0gMzYwIGVuZAoJaWYgZGVsdGEgPiBzcGVlZCB0aGVuIHZhbHVlID0gdmFsdWUgKyBzcGVlZAoJZWxzZWlmIGRlbHRhIDwgLXNwZWVkIHRoZW4gdmFsdWUgPSB2YWx1ZSAtIHNwZWVkCiAgICBlbHNlIHZhbHVlID0gdGFyZ2V0CgllbmQKCXJldHVybiB2YWx1ZQplbmQKbG9jYWwgZnVuY3Rpb24gTm9ybWFsaXplQW5nbGUoYW5nbGUpCiAgICBpZiBhbmdsZSA9PSBuaWwgdGhlbiByZXR1cm4gMCBlbmQKCXdoaWxlIGFuZ2xlID4gMTgwIGRvIGFuZ2xlID0gYW5nbGUgLSAzNjAgZW5kCgl3aGlsZSBhbmdsZSA8IC0xODAgZG8gYW5nbGUgPSBhbmdsZSArIDM2MCBlbmQKCXJldHVybiBhbmdsZQplbmQKbG9jYWwgZnVuY3Rpb24gQW5nbGVEaWZmZXJlbmNlKGRlc3RfYW5nbGUsIHNyY19hbmdsZSkKCWxvY2FsIGRlbHRhID0gbWF0aC5mbW9kKGRlc3RfYW5nbGUgLSBzcmNfYW5nbGUsIDM2MCkKCWlmIGRlc3RfYW5nbGUgPiBzcmNfYW5nbGUgdGhlbgoJCWlmIGRlbHRhID49IDE4MCB0aGVuIGRlbHRhID0gZGVsdGEgLSAzNjAgZW5kCgllbHNlCgkJaWYgZGVsdGEgPD0gLTE4MCB0aGVuIGRlbHRhID0gZGVsdGEgKyAzNjAgZW5kCgllbmQKCXJldHVybiBkZWx0YQplbmQKbG9jYWwgZnVuY3Rpb24gQW5nbGVWZWN0b3IocGl0Y2gsIHlhdykKICAgIGlmIHBpdGNoIH49IG5pbCBhbmQgeWF3IH49IG5pbCB0aGVuIAogICAgICAgIGxvY2FsIHAsIHkgPSBtYXRoLnJhZChwaXRjaCksIG1hdGgucmFkKHlhdykKICAgICAgICBsb2NhbCBzcCwgY3AsIHN5LCBjeSA9IG1hdGguc2luKHApLCBtYXRoLmNvcyhwKSwgbWF0aC5zaW4oeSksIG1hdGguY29zKHkpCiAgICAgICAgcmV0dXJuIGNwKmN5LCBjcCpzeSwgLXNwCiAgICBlbmQKICAgIHJldHVybiAwLDAsMAplbmQKbG9jYWwgZnVuY3Rpb24gQ2FsY0FuZ2xlKGxvY2FscGxheWVyeHBvcywgbG9jYWxwbGF5ZXJ5cG9zLCBlbmVteXhwb3MsIGVuZW15eXBvcykKICAgIGxvY2FsIHJlbGF0aXZleWF3ID0gbWF0aC5hdGFuKCAobG9jYWxwbGF5ZXJ5cG9zIC0gZW5lbXl5cG9zKSAvIChsb2NhbHBsYXllcnhwb3MgLSBlbmVteXhwb3MpICkKICAgIHJldHVybiByZWxhdGl2ZXlhdyAqIDE4MCAvIG1hdGgucGkKZW5kCmxvY2FsIGZ1bmN0aW9uIEFuZ2xlRnJvbVZlY3RvcnMoYSwgYikKICAgIGxvY2FsIGFuZ2xlcyA9IHt9CiAgICBsb2NhbCBkZWx0YSA9IGEgLSBiCiAgICBsb2NhbCBoeXAgPSBkZWx0YTpsZW5ndGgyZCgpCiAgICBhbmdsZXMueSA9IG1hdGguYXRhbihkZWx0YS55IC8gZGVsdGEueCkgKiA1Ny4yOTU3Nzk1MTMxCiAgICBhbmdsZXMueCA9IG1hdGguYXRhbihkZWx0YS56IC8gaHlwKSAqIDU3LjI5NTc3OTUxMzEKICAgIGFuZ2xlcy56ID0gMC4wCiAgICBpZiBkZWx0YS54ID49IDAuMCB0aGVuIGFuZ2xlcy55ID0gYW5nbGVzLnkgKyAxODAuMCBlbmQKICAgIHJldHVybiBhbmdsZXMKZW5kCmxvY2FsIGZ1bmN0aW9uIERlZ1RvUmFkKERlZykgcmV0dXJuIERlZyAqIChtYXRoLnBpIC8gMTgwKSBlbmQKbG9jYWwgZnVuY3Rpb24gUmFkVG9EZWcoUmFkKSByZXR1cm4gUmFkICogKDE4MCAvIG1hdGgucGkpIGVuZApsb2NhbCBMZXJwID0gZnVuY3Rpb24oYSwgYiwgdCkgcmV0dXJuIGEgKyAoYiAtIGEpICogdCBlbmQKCmxvY2FsIFZUYWJsZSA9IHsKICAgIEVudHJ5ID0gZnVuY3Rpb24oaW5zdGFuY2UsIGluZGV4LCB0eXBlKSByZXR1cm4gZmZpLmNhc3QodHlwZSwgKGZmaS5jYXN0KCJ2b2lkKioqIiwgaW5zdGFuY2UpWzBdKVtpbmRleF0pIGVuZCwKICAgIEJpbmQgPSBmdW5jdGlvbihzZWxmLCBtb2R1bGUsIGludGVyZmFjZSwgaW5kZXgsIHR5cGVzdHJpbmcpCiAgICAgICAgbG9jYWwgaW5zdGFuY2UgPSBjbGllbnQuY3JlYXRlX2ludGVyZmFjZShtb2R1bGUsIGludGVyZmFjZSkKICAgICAgICBsb2NhbCBmbnB0ciA9IHNlbGYuRW50cnkoaW5zdGFuY2UsIGluZGV4LCBmZmkudHlwZW9mKHR5cGVzdHJpbmcpKQogICAgICAgIHJldHVybiBmdW5jdGlvbiguLi4pIHJldHVybiBmbnB0cihpbnN0YW5jZSwgLi4uKSBlbmQKICAgIGVuZAp9Cgpsb2NhbCBhbmltc3RhdGVfdCA9IGZmaS50eXBlb2YgJ3N0cnVjdCB7IGNoYXIgcGFkMFsweDE4XTsgZmxvYXQgYW5pbV91cGRhdGVfdGltZXI7IGNoYXIgcGFkMVsweENdOyBmbG9hdCBzdGFydGVkX21vdmluZ190aW1lOyBmbG9hdCBsYXN0X21vdmVfdGltZTsgY2hhciBwYWQyWzB4MTBdOyBmbG9hdCBsYXN0X2xieV90aW1lOyBjaGFyIHBhZDNbMHg4XTsgZmxvYXQgcnVuX2Ftb3VudDsgY2hhciBwYWQ0WzB4MTBdOyB2b2lkKiBlbnRpdHk7IHZvaWQqIGFjdGl2ZV93ZWFwb247IHZvaWQqIGxhc3RfYWN0aXZlX3dlYXBvbjsgZmxvYXQgbGFzdF9jbGllbnRfc2lkZV9hbmltYXRpb25fdXBkYXRlX3RpbWU7IGludAkgbGFzdF9jbGllbnRfc2lkZV9hbmltYXRpb25fdXBkYXRlX2ZyYW1lY291bnQ7IGZsb2F0IGV5ZV90aW1lcjsgZmxvYXQgZXllX2FuZ2xlc195OyBmbG9hdCBleWVfYW5nbGVzX3g7IGZsb2F0IGdvYWxfZmVldF95YXc7IGZsb2F0IGN1cnJlbnRfZmVldF95YXc7IGZsb2F0IHRvcnNvX3lhdzsgZmxvYXQgbGFzdF9tb3ZlX3lhdzsgZmxvYXQgbGVhbl9hbW91bnQ7IGNoYXIgcGFkNVsweDRdOyBmbG9hdCBmZWV0X2N5Y2xlOyBmbG9hdCBmZWV0X3lhd19yYXRlOyBjaGFyIHBhZDZbMHg0XTsgZmxvYXQgZHVja19hbW91bnQ7IGZsb2F0IGxhbmRpbmdfZHVja19hbW91bnQ7IGNoYXIgcGFkN1sweDRdOyBmbG9hdCBjdXJyZW50X29yaWdpblszXTsgZmxvYXQgbGFzdF9vcmlnaW5bM107IGZsb2F0IHZlbG9jaXR5X3g7IGZsb2F0IHZlbG9jaXR5X3k7IGNoYXIgcGFkOFsweDRdOyBmbG9hdCB1bmtub3duX2Zsb2F0MTsgY2hhciBwYWQ5WzB4OF07IGZsb2F0IHVua25vd25fZmxvYXQyOyBmbG9hdCB1bmtub3duX2Zsb2F0MzsgZmxvYXQgdW5rbm93bjsgZmxvYXQgbV92ZWxvY2l0eTsgZmxvYXQganVtcF9mYWxsX3ZlbG9jaXR5OyBmbG9hdCBjbGFtcGVkX3ZlbG9jaXR5OyBmbG9hdCBmZWV0X3NwZWVkX2ZvcndhcmRzX29yX3NpZGV3YXlzOyBmbG9hdCBmZWV0X3NwZWVkX3Vua25vd25fZm9yd2FyZHNfb3Jfc2lkZXdheXM7IGZsb2F0IGxhc3RfdGltZV9zdGFydGVkX21vdmluZzsgZmxvYXQgbGFzdF90aW1lX3N0b3BwZWRfbW92aW5nOyBib29sIG9uX2dyb3VuZDsgYm9vbCBoaXRfaW5fZ3JvdW5kX2FuaW1hdGlvbjsgY2hhciBwYWQxMFsweDRdOyBmbG9hdCB0aW1lX3NpbmNlX2luX2FpcjsgZmxvYXQgbGFzdF9vcmlnaW5fejsgZmxvYXQgaGVhZF9mcm9tX2dyb3VuZF9kaXN0YW5jZV9zdGFuZGluZzsgZmxvYXQgc3RvcF90b19mdWxsX3J1bm5pbmdfZnJhY3Rpb247IGNoYXIgcGFkMTFbMHg0XTsgZmxvYXQgbWFnaWNfZnJhY3Rpb247IGNoYXIgcGFkMTJbMHgzQ107IGZsb2F0IHdvcmxkX2ZvcmNlOyBjaGFyIHBhZDEzWzB4MUNBXTsgZmxvYXQgbWluX3lhdzsgZmxvYXQgbWF4X3lhdzsgfSAqKicKbG9jYWwgYW5pbWxheWVyX3QgPSBmZmkudHlwZW9mICdzdHJ1Y3QgeyBjaGFyIHBhZF8weDAwMDBbMHgxOF07IHVpbnQzMl90IHNlcXVlbmNlOyBmbG9hdCBwcmV2X2N5Y2xlOyBmbG9hdCB3ZWlnaHQ7IGZsb2F0IHdlaWdodF9kZWx0YV9yYXRlOyBmbG9hdCBwbGF5YmFja19yYXRlOyBmbG9hdCBjeWNsZTsgdm9pZCAqZW50aXR5O2NoYXIgcGFkXzB4MDAzOFsweDRdOyB9ICoqJwpsb2NhbCBOYXRpdmVHZXRDbGllbnRFbnRpdHkgPSBWVGFibGU6QmluZCgiY2xpZW50LmRsbCIsICJWQ2xpZW50RW50aXR5TGlzdDAwMyIsIDMsICJ2b2lkKihfX3RoaXNjYWxsKikodm9pZCosIGludCkiKQoKbG9jYWwgTnVsbFB0ciwgQ2hhclB0ciwgQ2xhc3NQdHIgPSBmZmkubmV3ICJ2b2lkKiIsIGZmaS50eXBlb2YgImNoYXIqIiwgZmZpLnR5cGVvZiAidm9pZCoqKiIKCmxvY2FsIEVuYWJsZVJlc29sdmVyID0gdWkubmV3X2NoZWNrYm94KCJSYWdlIiwgIk90aGVyIiwgIlJlc29sdmVyXGFDRkNGQ0ZDRiAgWzEuNV0iKQoKbG9jYWwgR2V0QW5pbVN0YXRlID0gZnVuY3Rpb24oZW50KQogICAgaWYgbm90IGVudCB0aGVuIHJldHVybiBmYWxzZSBlbmQKICAgIGxvY2FsIEFkZHJlc3MgPSB0eXBlKGVudCkgPT0gImNkYXRhIiBhbmQgZW50IG9yIE5hdGl2ZUdldENsaWVudEVudGl0eShlbnQpCiAgICBpZiBub3QgQWRkcmVzcyBvciBBZGRyZXNzID09IGZmaS5OVUxMIHRoZW4gcmV0dXJuIGZhbHNlIGVuZAogICAgbG9jYWwgQWRkcmVzc1Z0YWJsZSA9IGZmaS5jYXN0KCJ2b2lkKioqIiwgQWRkcmVzcykKICAgIHJldHVybiBmZmkuY2FzdChhbmltc3RhdGVfdCwgZmZpLmNhc3QoImNoYXIqIiwgQWRkcmVzc1Z0YWJsZSkgKyAweDk5NjApWzBdCmVuZAoKbG9jYWwgR2V0U2ltdWxhdGlvblRpbWUgPSBmdW5jdGlvbihlbnQpCiAgICBsb2NhbCBwb2ludGVyID0gTmF0aXZlR2V0Q2xpZW50RW50aXR5KGVudCkKICAgIGlmIHBvaW50ZXIgdGhlbiByZXR1cm4gZW50aXR5LmdldF9wcm9wKGVudCwgIm1fZmxTaW11bGF0aW9uVGltZSIpLCBmZmkuY2FzdCgiZmxvYXQqIiwgZmZpLmNhc3QoInVpbnRwdHJfdCIsIHBvaW50ZXIpICsgMHgyNkMpWzBdIGVsc2UgcmV0dXJuIDAgZW5kCmVuZAoKbG9jYWwgR2V0QW5pbWxheWVycyA9IGZ1bmN0aW9uIChlbnQsIGxheWVyKQogICAgbG9jYWwgcG9pbnRlciA9IE5hdGl2ZUdldENsaWVudEVudGl0eShlbnQpCiAgICBpZiBwb2ludGVyIHRoZW4gcmV0dXJuIGZmaS5jYXN0KGFuaW1sYXllcl90LCBmZmkuY2FzdCgnY2hhcionLCBmZmkuY2FzdCgidm9pZCoqKiIsIHBvaW50ZXIpKSArIDB4MzkxNClbMF1bbGF5ZXIgb3IgMF0gZW5kCmVuZAoKbG9jYWwgSXNQbGF5ZXJWYWxpZCA9IGZ1bmN0aW9uKHBsYXllcikKICAgIGlmIG5vdCBwbGF5ZXIgdGhlbiByZXR1cm4gZmFsc2UgZW5kCiAgICBpZiBub3QgZW50aXR5LmlzX2FsaXZlKHBsYXllcikgdGhlbiByZXR1cm4gZmFsc2UgZW5kCiAgICByZXR1cm4gdHJ1ZQplbmQKCmxvY2FsIEdldE1heERlc3luYyA9IGZ1bmN0aW9uKHBsYXllcikKICAgIGxvY2FsIEFuaW1zdGF0ZSA9IEdldEFuaW1TdGF0ZShwbGF5ZXIpCiAgICBpZiBub3QgQW5pbXN0YXRlIHRoZW4gcmV0dXJuIDAgZW5kCiAgICBsb2NhbCBzcGVlZGZhY3RvciA9IENsYW1wKEFuaW1zdGF0ZS5mZWV0X3NwZWVkX2ZvcndhcmRzX29yX3NpZGV3YXlzLCAwLCAxKQogICAgbG9jYWwgYXZnX3NwZWVkZmFjdG9yID0gKEFuaW1zdGF0ZS5zdG9wX3RvX2Z1bGxfcnVubmluZ19mcmFjdGlvbiAqIC0wLjMgLSAwLjIpICogc3BlZWRmYWN0b3IgKyAxCiAgICBsb2NhbCBkdWNrX2Ftb3VudCA9IEFuaW1zdGF0ZS5kdWNrX2Ftb3VudAogICAgaWYgZHVja19hbW91bnQgPiAwIHRoZW4gYXZnX3NwZWVkZmFjdG9yID0gYXZnX3NwZWVkZmFjdG9yICsgKChkdWNrX2Ftb3VudCAqIHNwZWVkZmFjdG9yKSAqICgwLjUgLSBhdmdfc3BlZWRmYWN0b3IpKSBlbmQKICAgIHJldHVybiBDbGFtcChhdmdfc3BlZWRmYWN0b3IsIC41LCAxKQplbmQKCmxvY2FsIElzUGxheWVyQW5pbWF0aW5nID0gZnVuY3Rpb24ocGxheWVyKQogICAgbG9jYWwgQ3VycmVudFNpbXVsYXRpb25UaW1lLCBSZWNvcmRTaW11bGF0aW9uVGltZSA9IEdldFNpbXVsYXRpb25UaW1lKHBsYXllcikKICAgIEN1cnJlbnRTaW11bGF0aW9uVGltZSwgUmVjb3JkU2ltdWxhdGlvblRpbWUgPSB0b3RpY2tzKEN1cnJlbnRTaW11bGF0aW9uVGltZSksIHRvdGlja3MoUmVjb3JkU2ltdWxhdGlvblRpbWUpCiAgICByZXR1cm4gdG90aWNrcyhDdXJyZW50U2ltdWxhdGlvblRpbWUpIH49IG5pbCBhbmQgdG90aWNrcyhSZWNvcmRTaW11bGF0aW9uVGltZSkgfj0gbmlsCmVuZAoKbG9jYWwgR2V0Q2hva2VkUGFja2V0cyA9IGZ1bmN0aW9uKHBsYXllcikKICAgIGlmIG5vdCBJc1BsYXllckFuaW1hdGluZyhwbGF5ZXIpIHRoZW4gcmV0dXJuIDAgZW5kCiAgICBsb2NhbCBDdXJyZW50U2ltdWxhdGlvblRpbWUsIFByZXZpb3VzU2ltdWxhdGlvblRpbWUgPSBHZXRTaW11bGF0aW9uVGltZShwbGF5ZXIpCiAgICBsb2NhbCBTaW11bGF0aW9uVGltZURpZmZlcmVuY2UgPSBnbG9iYWxzLmN1cnRpbWUoKSAtIEN1cnJlbnRTaW11bGF0aW9uVGltZQogICAgbG9jYWwgQ2hva2VkQ29tbWFuZHMgPSBDbGFtcCh0b3RpY2tzKG1hdGgubWF4KDAuMCwgU2ltdWxhdGlvblRpbWVEaWZmZXJlbmNlIC0gY2xpZW50LmxhdGVuY3koKSkpLCAwLCBjdmFyLnN2X21heHVzcmNtZHByb2Nlc3N0aWNrczpnZXRfc3RyaW5nKCkgLSAyKQogICAgcmV0dXJuIENob2tlZENvbW1hbmRzCmVuZAoKZnVuY3Rpb24gUmVidWlsZFNlcnZlcllhdyhwbGF5ZXIpCiAgICBsb2NhbCBBbmltc3RhdGUgPSBHZXRBbmltU3RhdGUocGxheWVyKQogICAgaWYgbm90IEFuaW1zdGF0ZSB0aGVuIHJldHVybiAwIGVuZAogICAgCiAgICBsb2NhbCBtX2ZsR29hbEZlZXRZYXcgPSBBbmltc3RhdGUuZ29hbF9mZWV0X3lhdwogICAgbG9jYWwgZXllX2ZlZXRfZGVsdGEgPSBBbmdsZURpZmZlcmVuY2UoQW5pbXN0YXRlLmV5ZV9hbmdsZXNfeSwgQW5pbXN0YXRlLmdvYWxfZmVldF95YXcpCiAgICBsb2NhbCBmbFJ1bm5pbmdTcGVlZCA9IENsYW1wKEFuaW1zdGF0ZS5mZWV0X3NwZWVkX2ZvcndhcmRzX29yX3NpZGV3YXlzLCAwLjAsIDEuMCkKICAgIAogICAgbG9jYWwgZmxZYXdNb2RpZmllciA9ICgoKEFuaW1zdGF0ZS5zdG9wX3RvX2Z1bGxfcnVubmluZ19mcmFjdGlvbiAqIC0wLjMpIC0gMC4yKSAqIGZsUnVubmluZ1NwZWVkKSArIDEuMAogICAgaWYgQW5pbXN0YXRlLmR1Y2tfYW1vdW50ID4gMC4wIHRoZW4KICAgICAgICBsb2NhbCBmbER1Y2tpbmdTcGVlZCA9IENsYW1wKEFuaW1zdGF0ZS5mZWV0X3NwZWVkX2ZvcndhcmRzX29yX3NpZGV3YXlzLCAwLjAsIDEuMCkKICAgICAgICBmbFlhd01vZGlmaWVyID0gZmxZYXdNb2RpZmllciArICgoQW5pbXN0YXRlLmR1Y2tfYW1vdW50ICogZmxEdWNraW5nU3BlZWQpICogKDAuNSAtIGZsWWF3TW9kaWZpZXIpKQogICAgZW5kCiAgIAogICAgbG9jYWwgZmxNYXhZYXdNb2RpZmllciA9IGZsWWF3TW9kaWZpZXIgKiBBbmltc3RhdGUubWF4X3lhdwogICAgbG9jYWwgZmxNaW5ZYXdNb2RpZmllciA9IGZsWWF3TW9kaWZpZXIgKiBBbmltc3RhdGUubWluX3lhdwogICAKICAgIGlmIGV5ZV9mZWV0X2RlbHRhIDw9IGZsTWF4WWF3TW9kaWZpZXIgdGhlbgogICAgICAgIGlmIGZsTWluWWF3TW9kaWZpZXIgPiBleWVfZmVldF9kZWx0YSB0aGVuCiAgICAgICAgICAgIG1fZmxHb2FsRmVldFlhdyA9IG1hdGguYWJzKGZsTWluWWF3TW9kaWZpZXIpICsgQW5pbXN0YXRlLmV5ZV9hbmdsZXNfeQogICAgICAgIGVuZAogICAgZWxzZQogICAgICAgIG1fZmxHb2FsRmVldFlhdyA9IEFuaW1zdGF0ZS5leWVfYW5nbGVzX3kgLSBtYXRoLmFicyhmbE1heFlhd01vZGlmaWVyKQogICAgZW5kCgoJcmV0dXJuIE5vcm1hbGl6ZUFuZ2xlKG1fZmxHb2FsRmVldFlhdykKZW5kCgpsb2NhbCBDYWNoZSA9IHt9Cgpsb2NhbCBKaXR0ZXJCdWZmZXIgPSA2CmxvY2FsIFJlc29sdmVyID0geyAKICAgIEppdHRlciA9IHsgSml0dGVyaW5nID0gZmFsc2UsIEppdHRlclRpY2tzID0gMCwgU3RhdGljVGlja3MgPSAwLCBZYXdDYWNoZSA9IHt9LCBKaXR0ZXJDYWNoZSA9IDAsIERpZmZlcmVuY2UgPSAwIH0sCiAgICBNYWluID0geyBNb2RlID0gMCwgU2lkZSA9IDAsIEFuZ2xlcyA9IDAgfQp9Cgpsb2NhbCBDYWNoZSA9IHt9Cgpsb2NhbCBDRGV0ZWN0Sml0dGVyID0gZnVuY3Rpb24ocGxheWVyKQogICAgbG9jYWwgRGF0YSA9IFJlc29sdmVyLkppdHRlcgogICAgbG9jYWwgRXllQW5nbGVzWCwgRXllQW5nbGVzWSwgRXllQW5nbGVzWiA9IGVudGl0eS5nZXRfcHJvcChwbGF5ZXIsICJtX2FuZ0V5ZUFuZ2xlcyIpCiAgICBEYXRhLllhd0NhY2hlW0RhdGEuSml0dGVyQ2FjaGUgJSBKaXR0ZXJCdWZmZXJdID0gRXllQW5nbGVzWQogICAgaWYgRGF0YS5KaXR0ZXJDYWNoZSA+PSBKaXR0ZXJCdWZmZXIgKyAxIHRoZW4KICAgICAgICBEYXRhLkppdHRlckNhY2hlID0gMAogICAgZWxzZQogICAgICAgIERhdGEuSml0dGVyQ2FjaGUgPSBEYXRhLkppdHRlckNhY2hlICsgMQogICAgZW5kCiAgICBmb3IgaSA9IDAsIEppdHRlckJ1ZmZlciwgMSBkbwogICAgICAgIGlmIGkgPCBKaXR0ZXJCdWZmZXIgdGhlbgogICAgICAgICAgICBsb2NhbCBEaWZmZXJlbmNlID0gKERhdGEuWWF3Q2FjaGVbaSAtIERhdGEuSml0dGVyQ2FjaGUgJSBKaXR0ZXJCdWZmZXJdIH49IG5pbCBhbmQgRGF0YS5ZYXdDYWNoZVtEYXRhLkppdHRlckNhY2hlICUgSml0dGVyQnVmZmVyXSB+PSBuaWwpIGFuZCBtYXRoLmFicyhEYXRhLllhd0NhY2hlW2kgLSBEYXRhLkppdHRlckNhY2hlICUgSml0dGVyQnVmZmVyXSAtIERhdGEuWWF3Q2FjaGVbRGF0YS5KaXR0ZXJDYWNoZSAlIEppdHRlckJ1ZmZlcl0pIG9yIDAKICAgICAgICAgICAgaWYgRGlmZmVyZW5jZSB+PSBuaWwgYW5kIERpZmZlcmVuY2Ugfj0gMC4wIHRoZW4KICAgICAgICAgICAgICAgIE5vcm1hbGl6ZUFuZ2xlKERpZmZlcmVuY2UpCiAgICAgICAgICAgICAgICBEYXRhLkppdHRlcmluZyA9IERpZmZlcmVuY2UgPj0gKDQ1LjAgKiBHZXRNYXhEZXN5bmMocGxheWVyKSkgYW5kIHRydWUgb3IgZmFsc2UKICAgICAgICAgICAgICAgIERhdGEuRGlmZmVyZW5jZSA9IERpZmZlcmVuY2UKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpsb2NhbCBDUHJvY2Vzc0ltcGFjdCA9IGZ1bmN0aW9uKHBsYXllcikgcmV0dXJuIFJlc29sdmVyLkppdHRlci5KaXR0ZXJpbmcgYW5kIDEgb3IgMCBlbmQKCmxvY2FsIENHZXRQb2ludERpcmVjdGlvbiA9IGZ1bmN0aW9uKHBsYXllcikKICAgIGxvY2FsIGZ3ID0gdmVjdG9yKCkKICAgIGxvY2FsIExvY2FsT3JpZ2luWCwgTG9jYWxPcmlnaW5ZLCBMb2NhbE9yaWdpblogPSBlbnRpdHkuZ2V0X3Byb3AoZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSwgIm1fdmVjT3JpZ2luIikKICAgIGxvY2FsIExvY2FsT3JpZ2luID0gdmVjdG9yKExvY2FsT3JpZ2luWCwgTG9jYWxPcmlnaW5ZKQogICAgbG9jYWwgUGxheWVyT3JpZ2luWCwgUGxheWVyT3JpZ2luWSwgUGxheWVyT3JpZ2luWiA9IGVudGl0eS5nZXRfcHJvcChwbGF5ZXIsICJtX3ZlY09yaWdpbiIpCiAgICBsb2NhbCBQbGF5ZXJPcmlnaW4gPSB2ZWN0b3IoUGxheWVyT3JpZ2luWCwgUGxheWVyT3JpZ2luWSkKICAgIGxvY2FsIEF0VGFyZ2V0ID0gQW5nbGVGcm9tVmVjdG9ycyhMb2NhbE9yaWdpbiwgUGxheWVyT3JpZ2luKS55CiAgICBBbmdsZVZlY3RvcihBdFRhcmdldFgsIEF0VGFyZ2V0WSkKICAgIHJldHVybiBmdwplbmQKCmxvY2FsIENEZXRlY3REZXN5bmNTaWRlID0gZnVuY3Rpb24ocGxheWVyKQogICAgbG9jYWwgQW5pbXN0YXRlID0gR2V0QW5pbVN0YXRlKHBsYXllcikKICAgIGlmIG5vdCBBbmltc3RhdGUgdGhlbiByZXR1cm4gMCBlbmQKICAgIGxvY2FsIEV5ZUFuZ2xlc1gsIEV5ZUFuZ2xlc1ksIEV5ZUFuZ2xlc1ogPSBlbnRpdHkuZ2V0X3Byb3AocGxheWVyLCAibV9hbmdFeWVBbmdsZXMiKQogICAgbG9jYWwgSW52ZXJzZVNpZGUgPSBmdW5jdGlvbihwbGF5ZXIpCiAgICAgICAgbG9jYWwgVmVjT3JpZ2luWCwgVmVjT3JpZ2luWSwgVmVjT3JpZ2luWiA9IGVudGl0eS5nZXRfcHJvcChlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpLCAibV92ZWNPcmlnaW4iKQogICAgICAgIGxvY2FsIEFic09yaWdpblgsIEFic09yaWdpblksIEFic09yaWdpblogPSBlbnRpdHkuZ2V0X3Byb3AoZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSwgIm1fdmVjQWJzT3JpZ2luIikKICAgICAgICBsb2NhbCBFeWVBbmdsZXNYLCBFeWVBbmdsZXNZLCBFeWVBbmdsZXNaID0gZW50aXR5LmdldF9wcm9wKHBsYXllciwgIm1fYW5nRXllQW5nbGVzIikKICAgICAgICAKICAgICAgICBsb2NhbCBWZWNPcmlnaW4gPSB2ZWN0b3IoVmVjT3JpZ2luWCwgVmVjT3JpZ2luWSwgVmVjT3JpZ2luWikKICAgICAgICBsb2NhbCBBYnNPcmlnaW4gPSB2ZWN0b3IoQWJzT3JpZ2luWCwgQWJzT3JpZ2luWSwgQWJzT3JpZ2luWikKICAgICAgICBsb2NhbCBFeWVBbmdsZXMgPSB2ZWN0b3IoRXllQW5nbGVzWCwgRXllQW5nbGVzWSwgRXllQW5nbGVzWikKICAgICAgICAKICAgICAgICBsb2NhbCBBdFRhcmdldCA9IE5vcm1hbGl6ZUFuZ2xlKEFuZ2xlRnJvbVZlY3RvcnMoVmVjT3JpZ2luLCBBYnNPcmlnaW4pLnkpCiAgICAgICAgbG9jYWwgQW5nbGUgPSBOb3JtYWxpemVBbmdsZShFeWVBbmdsZXMueSkKICAgICAgICBsb2NhbCBTaWRld2F5c0xlZnQgPSBtYXRoLmFicyhOb3JtYWxpemVBbmdsZShBbmdsZSAtIE5vcm1hbGl6ZUFuZ2xlKEF0VGFyZ2V0IC0gOTAuMCkpKSA8IDQ1LjAKICAgICAgICBsb2NhbCBTaWRld2F5c1JpZ2h0ID0gbWF0aC5hYnMoTm9ybWFsaXplQW5nbGUoQW5nbGUgLSBOb3JtYWxpemVBbmdsZShBdFRhcmdldCArIDkwLjApKSkgPCA0NS4wCiAgICAgICAgbG9jYWwgRm9yd2FyZCA9IG1hdGguYWJzKE5vcm1hbGl6ZUFuZ2xlKEFuZ2xlIC0gTm9ybWFsaXplQW5nbGUoQXRUYXJnZXQgKyAxODAuMCkpKSA8IDQ1LjAKICAgICAgICByZXR1cm4gRm9yd2FyZCBhbmQgbm90IChTaWRld2F5c0xlZnQgb3IgU2lkZXdheXNSaWdodCkKICAgIGVuZAoKICAgIGlmIFJlc29sdmVyLkppdHRlci5KaXR0ZXJpbmcgYW5kIEdldENob2tlZFBhY2tldHMocGxheWVyKSA8IDMgdGhlbgogICAgICAgIENhY2hlLkZpcnN0Tm9ybWFsaXplZEFuZ2xlID0gTm9ybWFsaXplQW5nbGUoUmVzb2x2ZXIuSml0dGVyLllhd0NhY2hlW0ppdHRlckJ1ZmZlciAtIDFdKQogICAgICAgIENhY2hlLlNlY29uZE5vcm1hbGl6ZWRBbmdsZSA9IE5vcm1hbGl6ZUFuZ2xlKFJlc29sdmVyLkppdHRlci5ZYXdDYWNoZVtKaXR0ZXJCdWZmZXIgLSAyXSkKCiAgICAgICAgQ2FjaGUuRmlyc3RTaW5BbmdsZSA9IG1hdGguc2luKERlZ1RvUmFkKENhY2hlLkZpcnN0Tm9ybWFsaXplZEFuZ2xlKSkKICAgICAgICBDYWNoZS5TZWNvbmRTaW5BbmdsZSA9IG1hdGguc2luKERlZ1RvUmFkKENhY2hlLlNlY29uZE5vcm1hbGl6ZWRBbmdsZSkpCgogICAgICAgIENhY2hlLkZpcnN0Q29zQW5nbGUgPSBtYXRoLmNvcyhEZWdUb1JhZChDYWNoZS5GaXJzdE5vcm1hbGl6ZWRBbmdsZSkpCiAgICAgICAgQ2FjaGUuU2Vjb25kQ29zQW5nbGUgPSBtYXRoLmNvcyhEZWdUb1JhZChDYWNoZS5TZWNvbmROb3JtYWxpemVkQW5nbGUpKQoKICAgICAgICBDYWNoZS5BVkdZYXcgPSBOb3JtYWxpemVBbmdsZShSYWRUb0RlZyhtYXRoLmF0YW4yKChDYWNoZS5GaXJzdFNpbkFuZ2xlICsgQ2FjaGUuU2Vjb25kU2luQW5nbGUpIC8gMi4wLCAoQ2FjaGUuRmlyc3RDb3NBbmdsZSArIENhY2hlLlNlY29uZENvc0FuZ2xlKSAvIDIuMCkpKQogICAgICAgIENhY2hlLkRpZmZlcmVuY2UgPSBOb3JtYWxpemVBbmdsZShBbmltc3RhdGUuZXllX2FuZ2xlc195IC0gQ2FjaGUuQVZHWWF3KQogICAgICAgIGlmIENhY2hlLkRpZmZlcmVuY2Ugfj0gMC4wIHRoZW4gUmVzb2x2ZXIuTWFpbi5TaWRlID0gQ2FjaGUuRGlmZmVyZW5jZSA+IDAuMCBhbmQgMSBvciAtMSBlbHNlIFJlc29sdmVyLk1haW4uU2lkZSA9IDAgZW5kCiAgICBlbmQKCiAgICByZXR1cm4gUmVzb2x2ZXIuTWFpbi5TaWRlCmVuZAoKbG9jYWwgQ1Jlc29sdmVySW5zdGFuY2UgPSBmdW5jdGlvbihwbGF5ZXIpCiAgICBsb2NhbCBBbmltc3RhdGUgPSBHZXRBbmltU3RhdGUocGxheWVyKQogICAgaWYgbm90IEFuaW1zdGF0ZSB0aGVuIHJldHVybiBlbmQKCiAgICBDUHJvY2Vzc0ltcGFjdChwbGF5ZXIpCiAgICBDRGV0ZWN0Sml0dGVyKHBsYXllcikKICAgIENEZXRlY3REZXN5bmNTaWRlKHBsYXllcikKCiAgICBsb2NhbCBDaG9rZWRQYWNrZXRzID0gR2V0Q2hva2VkUGFja2V0cyhwbGF5ZXIpCiAgICBsb2NhbCBTaW11bGF0aW9uVGltZSwgUHJldmlvdXNTaW11bGF0aW9uVGltZSA9IEdldFNpbXVsYXRpb25UaW1lKHBsYXllcikKICAgIGZvciBpID0gMCwgQ2hva2VkUGFja2V0cywgMSBkbwogICAgICAgIGxvY2FsIE5vdFNlbnRUaWNrID0gaSA9PSBDaG9rZWRQYWNrZXRzIC0gMQogICAgICAgIGxvY2FsIEJhY2t1cFNpbXVsYXRpb25UaW1lID0gU2ltdWxhdGlvblRpbWUKICAgICAgICBpZiBJc1BsYXllckFuaW1hdGluZyhwbGF5ZXIpIHRoZW4gQmFja3VwU2ltdWxhdGlvblRpbWUgPSBTaW11bGF0aW9uVGltZSAtIHRvdGltZShDaG9rZWRQYWNrZXRzIC0gaSAtIDEpIGVuZAogICAgICAgIGlmIFJlc29sdmVyLkppdHRlci5KaXR0ZXJpbmcgYW5kIG5vdCBOb3RTZW50VGljayB0aGVuCiAgICAgICAgICAgIFJlc29sdmVyLk1haW4uQW5nbGVzID0gQ2FjaGUuRGlmZmVyZW5jZSB+PSBuaWwgYW5kIChDYWNoZS5EaWZmZXJlbmNlICogR2V0TWF4RGVzeW5jKHBsYXllcikpICogUmVzb2x2ZXIuTWFpbi5TaWRlIG9yICg0NS4wICogR2V0TWF4RGVzeW5jKHBsYXllcikpICogUmVzb2x2ZXIuTWFpbi5TaWRlCiAgICAgICAgICAgIFJlc29sdmVyLk1haW4uTW9kZSA9IDEKICAgICAgICBlbHNlCiAgICAgICAgICAgIFJlc29sdmVyLk1haW4uQW5nbGVzID0gMAogICAgICAgICAgICBSZXNvbHZlci5NYWluLk1vZGUgPSAwCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJuZXRfdXBkYXRlX2VuZCIsIGZ1bmN0aW9uKCkKICAgIGlmIG5vdCBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpIHRoZW4gcmV0dXJuIGVuZAogICAgaWYgbm90IGVudGl0eS5pc19hbGl2ZShlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpKSB0aGVuIFJlc29sdmVyLk1haW4uTW9kZSA9IDAgcmV0dXJuIGVuZAogICAgbG9jYWwgUGxheWVycyA9IGVudGl0eS5nZXRfcGxheWVycygpIGNsaWVudC51cGRhdGVfcGxheWVyX2xpc3QoKQogICAgZm9yIGkgPSAxLCAjUGxheWVycyBkbwogICAgICAgIGxvY2FsIGlkeCA9IFBsYXllcnNbaV0KICAgICAgICBpZiBlbnRpdHkuaXNfZW5lbXkoaWR4KSBhbmQgSXNQbGF5ZXJBbmltYXRpbmcoaWR4KSBhbmQgdWkuZ2V0KEVuYWJsZVJlc29sdmVyKSB0aGVuCiAgICAgICAgICAgIENSZXNvbHZlckluc3RhbmNlKGlkeCkKICAgICAgICAgICAgcGxpc3Quc2V0KGlkeCwgIkZvcmNlIGJvZHkgeWF3IHZhbHVlIiwgUmVzb2x2ZXIuTWFpbi5Nb2RlIH49IDAgYW5kIFJlc29sdmVyLk1haW4uQW5nbGVzIG9yIDApCiAgICAgICAgICAgIHBsaXN0LnNldChpZHgsICJGb3JjZSBib2R5IHlhdyIsIFJlc29sdmVyLk1haW4uTW9kZSB+PSAwKQogICAgICAgIGVsc2UKICAgICAgICAgICAgcGxpc3Quc2V0KGlkeCwgIkZvcmNlIGJvZHkgeWF3IiwgZmFsc2UpCiAgICAgICAgZW5kCiAgICBlbmQKZW5kKQoKY2xpZW50LnJlZ2lzdGVyX2VzcF9mbGFnKCJKSVRURVIiLCAyMDAsIDIwMCwgMjAwLCBmdW5jdGlvbihlKSByZXR1cm4gKGVudGl0eS5pc19lbmVteShlKSBhbmQgdWkuZ2V0KEVuYWJsZVJlc29sdmVyKSBhbmQgUmVzb2x2ZXIuTWFpbi5Nb2RlID09IDEpIGFuZCB0cnVlIG9yIGZhbHNlIGVuZCkK"}