{"status":200,"content":"bG9jYWwgdXNlciA9ICJNb25zdHJ5Igpsb2NhbCBmdW5jdGlvbiBnZXRidWlsZCgpIHJldHVybiAiYmV0YSIgZW5kCmxvY2FsIGZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSwgLi4uKSByZXR1cm4gKCJcYSV4JXgleCV4Iik6Zm9ybWF0KHIsIGcsIGIsIGEpIC4uIC4uLiBlbmQKbG9jYWwgdmVjdG9yID0gcmVxdWlyZSgidmVjdG9yIikKbG9jYWwgbm90aWZ5PShmdW5jdGlvbigpbG9jYWwgYj12ZWN0b3I7bG9jYWwgYz1mdW5jdGlvbihkLGIsYylyZXR1cm4gZCsoYi1kKSpjIGVuZDtsb2NhbCBlPWZ1bmN0aW9uKClyZXR1cm4gYihjbGllbnQuc2NyZWVuX3NpemUoKSllbmQ7bG9jYWwgZj1mdW5jdGlvbihkLC4uLilsb2NhbCBjPXsuLi59bG9jYWwgYz10YWJsZS5jb25jYXQoYywiIilyZXR1cm4gYihyZW5kZXJlci5tZWFzdXJlX3RleHQoZCxjKSllbmQ7bG9jYWwgZz17bm90aWZpY2F0aW9ucz17Ym90dG9tPXt9fSxtYXg9e2JvdHRvbT02fX1nLl9faW5kZXg9ZztnLm5ld19ib3R0b209ZnVuY3Rpb24oaCxpLGosLi4uKXRhYmxlLmluc2VydChnLm5vdGlmaWNhdGlvbnMuYm90dG9tLHtzdGFydGVkPWZhbHNlLGluc3RhbmNlPXNldG1ldGF0YWJsZSh7YWN0aXZlPWZhbHNlLHRpbWVvdXQ9NSxjb2xvcj17WyJyIl09aCxbImciXT1pLFsiYiJdPWosYT0wfSx4PWUoKS54LzIseT1lKCkueSx0ZXh0PS4uLn0sZyl9KWVuZDtmdW5jdGlvbiBnOmhhbmRsZXIoKWxvY2FsIGQ9MDtsb2NhbCBiPTA7Zm9yIGQsYiBpbiBwYWlycyhnLm5vdGlmaWNhdGlvbnMuYm90dG9tKWRvIGlmIG5vdCBiLmluc3RhbmNlLmFjdGl2ZSBhbmQgYi5zdGFydGVkIHRoZW4gdGFibGUucmVtb3ZlKGcubm90aWZpY2F0aW9ucy5ib3R0b20sZCllbmQgZW5kO2ZvciBkPTEsI2cubm90aWZpY2F0aW9ucy5ib3R0b20gZG8gaWYgZy5ub3RpZmljYXRpb25zLmJvdHRvbVtkXS5pbnN0YW5jZS5hY3RpdmUgdGhlbiBiPWIrMSBlbmQgZW5kO2ZvciBjLGUgaW4gcGFpcnMoZy5ub3RpZmljYXRpb25zLmJvdHRvbSlkbyBpZiBjPmcubWF4LmJvdHRvbSB0aGVuIHJldHVybiBlbmQ7aWYgZS5pbnN0YW5jZS5hY3RpdmUgdGhlbiBlLmluc3RhbmNlOnJlbmRlcl9ib3R0b20oZCxiKWQ9ZCsxIGVuZDtpZiBub3QgZS5zdGFydGVkIHRoZW4gZS5pbnN0YW5jZTpzdGFydCgpZS5zdGFydGVkPXRydWUgZW5kIGVuZCBlbmQ7ZnVuY3Rpb24gZzpzdGFydCgpc2VsZi5hY3RpdmU9dHJ1ZTtzZWxmLmRlbGF5PWdsb2JhbHMucmVhbHRpbWUoKStzZWxmLnRpbWVvdXQgZW5kO2Z1bmN0aW9uIGc6Z2V0X3RleHQoKWxvY2FsIGQ9IiJmb3IgYixiIGluIHBhaXJzKHNlbGYudGV4dClkbyBsb2NhbCBjPWYoIiIsYlsxXSlsb2NhbCBjLGUsZj0yNTUsMjU1LDI1NTtpZiBiWzJddGhlbiBjLGUsZj05OSwxOTksOTkgZW5kO2Q9ZC4uKCJcYSUwMnglMDJ4JTAyeCUwMnglcyIpOmZvcm1hdChjLGUsZixzZWxmLmNvbG9yLmEsYlsxXSllbmQ7cmV0dXJuIGQgZW5kO2xvY2FsIGs9KGZ1bmN0aW9uKClsb2NhbCBkPXt9ZC5yZWM9ZnVuY3Rpb24oZCxiLGMsZSxmLGcsayxsLG0pbT1tYXRoLm1pbihkLzIsYi8yLG0pcmVuZGVyZXIucmVjdGFuZ2xlKGQsYittLGMsZS1tKjIsZixnLGssbClyZW5kZXJlci5yZWN0YW5nbGUoZCttLGIsYy1tKjIsbSxmLGcsayxsKXJlbmRlcmVyLnJlY3RhbmdsZShkK20sYitlLW0sYy1tKjIsbSxmLGcsayxsKXJlbmRlcmVyLmNpcmNsZShkK20sYittLGYsZyxrLGwsbSwxODAsLjI1KXJlbmRlcmVyLmNpcmNsZShkLW0rYyxiK20sZixnLGssbCxtLDkwLC4yNSlyZW5kZXJlci5jaXJjbGUoZC1tK2MsYi1tK2UsZixnLGssbCxtLDAsLjI1KXJlbmRlcmVyLmNpcmNsZShkK20sYi1tK2UsZixnLGssbCxtLC05MCwuMjUpZW5kO2QucmVjX291dGxpbmU9ZnVuY3Rpb24oZCxiLGMsZSxmLGcsayxsLG0sbiltPW1hdGgubWluKGMvMixlLzIsbSlpZiBtPT0xIHRoZW4gcmVuZGVyZXIucmVjdGFuZ2xlKGQsYixjLG4sZixnLGssbClyZW5kZXJlci5yZWN0YW5nbGUoZCxiK2UtbixjLG4sZixnLGssbCllbHNlIHJlbmRlcmVyLnJlY3RhbmdsZShkK20sYixjLW0qMixuLGYsZyxrLGwpcmVuZGVyZXIucmVjdGFuZ2xlKGQrbSxiK2UtbixjLW0qMixuLGYsZyxrLGwpcmVuZGVyZXIucmVjdGFuZ2xlKGQsYittLG4sZS1tKjIsZixnLGssbClyZW5kZXJlci5yZWN0YW5nbGUoZCtjLW4sYittLG4sZS1tKjIsZixnLGssbClyZW5kZXJlci5jaXJjbGVfb3V0bGluZShkK20sYittLGYsZyxrLGwsbSwxODAsLjI1LG4pcmVuZGVyZXIuY2lyY2xlX291dGxpbmUoZCttLGIrZS1tLGYsZyxrLGwsbSw5MCwuMjUsbilyZW5kZXJlci5jaXJjbGVfb3V0bGluZShkK2MtbSxiK20sZixnLGssbCxtLC05MCwuMjUsbilyZW5kZXJlci5jaXJjbGVfb3V0bGluZShkK2MtbSxiK2UtbSxmLGcsayxsLG0sMCwuMjUsbillbmQgZW5kO2QuZ2xvd19tb2R1bGVfbm90aWZ5PWZ1bmN0aW9uKGIsYyxlLGYsZyxrLGwsbSxuLG8scCxxLHIscyxzKWxvY2FsIHQ9MTtsb2NhbCB1PTE7aWYgcyB0aGVuIGQucmVjKGIsYyxlLGYsbCxtLG4sbyxrKWVuZDtmb3IgbD0wLGcgZG8gbG9jYWwgbT1vLzIqKGwvZyleMztkLnJlY19vdXRsaW5lKGIrKGwtZy11KSp0LGMrKGwtZy11KSp0LGUtKGwtZy11KSp0KjIsZi0obC1nLXUpKnQqMixwLHEscixtLzEuNSxrK3QqKGctbCt1KSx0KWVuZCBlbmQ7cmV0dXJuIGQgZW5kKSgpZnVuY3Rpb24gZzpyZW5kZXJfYm90dG9tKGcsbClsb2NhbCBlPWUoKWxvY2FsIG09Njtsb2NhbCBuPSIgICAgICIuLnNlbGY6Z2V0X3RleHQoKWxvY2FsIGY9ZigiIixuKWxvY2FsIG89ODtsb2NhbCBwPTU7bG9jYWwgcT0wK20rZi54O2xvY2FsIHEscj1xK3AqMiwxMisxMCsxO2xvY2FsIHMsdD1zZWxmLngtcS8yLG1hdGguY2VpbChzZWxmLnktNDArLjQpbG9jYWwgdT1nbG9iYWxzLmZyYW1ldGltZSgpaWYgZ2xvYmFscy5yZWFsdGltZSgpPHNlbGYuZGVsYXkgdGhlbiBzZWxmLnk9YyhzZWxmLnksZS55LTQ1LShsLWcpKnIqMS40LHUqNylzZWxmLmNvbG9yLmE9YyhzZWxmLmNvbG9yLmEsMjU1LHUqMillbHNlIHNlbGYueT1jKHNlbGYueSxzZWxmLnktMTAsdSoxNSlzZWxmLmNvbG9yLmE9YyhzZWxmLmNvbG9yLmEsMCx1KjIwKWlmIHNlbGYuY29sb3IuYTw9MSB0aGVuIHNlbGYuYWN0aXZlPWZhbHNlIGVuZCBlbmQ7bG9jYWwgYyxlLGcsbD1zZWxmLmNvbG9yLnIsc2VsZi5jb2xvci5nLHNlbGYuY29sb3IuYixzZWxmLmNvbG9yLmE7ay5nbG93X21vZHVsZV9ub3RpZnkocyx0LHEsciwxNSxvLDI1LDI1LDI1LGwsMTc5LCAyNTUsIDE4LGwsdHJ1ZSlsb2NhbCBrPXArMjtrPWsrMCttO3JlbmRlcmVyLnRleHQocytrLHQrci8yLWYueS8yLDk5LDE5OSw5OSxsLCJiIixuaWwsIkwiKXJlbmRlcmVyLnRleHQocytrLHQrci8yLWYueS8yLGMsZSxnLGwsIiIsbmlsLG4pZW5kO2NsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInBhaW50X3VpIixmdW5jdGlvbigpZzpoYW5kbGVyKCllbmQpcmV0dXJuIGcgZW5kKSgpCm5vdGlmeS5uZXdfYm90dG9tKDE3OSwgMjU1LCAxOCwgeyB7ICdMb2FkaW5nJyB9LCB7ICIuLi4gIiwgdHJ1ZSB9LCB9KQpsb2NhbCB3LCBoID0gY2xpZW50LnNjcmVlbl9zaXplKCkKbG9jYWwganMgPSBwYW5vcmFtYS5vcGVuKCkKbG9jYWwgYWxwaGEgPSA2OQpsb2NhbCB0b2dnbGVkID0gZmFsc2UKY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygicGFpbnRfdWkiLCBmdW5jdGlvbigpCglpZiBhbHBoYSA+IDAgYW5kIHRvZ2dsZWQgdGhlbgoJCWlmIGFscGhhID09IDE2OSB0aGVuCgkJCW5vdGlmeS5uZXdfYm90dG9tKDE3OSwgMjU1LCAxOCwgeyB7ICdXZWxjb21lOiAnIH0sIHsgdXNlciAuLiAiICIsIHRydWUgfSB9KSAKCQllbmQKCQlhbHBoYSA9IGFscGhhIC0gMC41CgllbHNlCgkJaWYgbm90IHRvZ2dsZWQgdGhlbgoJCQlhbHBoYSA9IGFscGhhICsgMQoJCQlpZiBhbHBoYSA9PSAyNTQgdGhlbgoJCQkJdG9nZ2xlZCA9IHRydWUKCQkJZW5kCgkJCWFscGhhID0gYWxwaGEgKyAxCgkJZW5kCgllbmQKCWlmIGFscGhhID4gMSB0aGVuCgkJcmVuZGVyZXIuZ3JhZGllbnQoMCwwLHcsaCwwLDAsMCxhbHBoYSwwLDAsMCxhbHBoYSxmYWxzZSkKCWVuZAplbmQpCnJldHVybiAoZnVuY3Rpb24odGJsKQogICAgdGJsLml0ZW1zID0gewogICAgICAgIGVuYWJsZWQgPSB0YmwucmVmKCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCAiZW5hYmxlZCIpLAogICAgICAgIHBpdGNoID0gdGJsLnJlZigiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgInBpdGNoIiksCiAgICAgICAgYmFzZSA9IHRibC5yZWYoImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsICJ5YXcgYmFzZSIpLAogICAgICAgIGppdHRlciA9IHRibC5yZWYoImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsICJ5YXcgaml0dGVyIiksCiAgICAgICAgeWF3ID0gdGJsLnJlZigiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgInlhdyIpLAogICAgICAgIGJvZHkgPSB0YmwucmVmKCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCAiYm9keSB5YXciKSwKICAgICAgICBmc2JvZHkgPSB0YmwucmVmKCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCAiZnJlZXN0YW5kaW5nIGJvZHkgeWF3IiksCiAgICAgICAgZWRnZSA9IHRibC5yZWYoImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsICJlZGdlIHlhdyIpLAogICAgICAgIHJvbGwgPSB0YmwucmVmKCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCAicm9sbCIpLAogICAgICAgIGZzID0gdGJsLnJlZigiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgImZyZWVzdGFuZGluZyIpCiAgICB9CiAgICBsb2NhbCBwcmVmaXggPSBmdW5jdGlvbih4LCB6KSAKICAgICAgICByZXR1cm4gKHogYW5kICgiXGEzMmE4NTJGRmx1YXNlbnNlIFxhNjk4YTZkRkZ+IFxhNDE0MTQxRkYoXGFiNWI1YjVGRiVzXGE0MTQxNDFGRikgXGE4OWY1OTZGRiVzIik6Zm9ybWF0KHgsIHopIG9yICgiXGEzMmE4NTJGRmx1YXNlbnNlIFxhNjk4YTZkRkZ+IFxhODlmNTk2RkYlcyIpOmZvcm1hdCh4KSkgCiAgICBlbmQKICAgIGxvY2FsIGZmaSA9IHJlcXVpcmUoImZmaSIpCiAgICBsb2NhbCBjbGlwYm9hcmQgPSB7CiAgICAgICAgWyJmZmkiXSA9IGZmaS5jZGVmKFtbCiAgICAgICAgICAgIHR5cGVkZWYgaW50KF9fdGhpc2NhbGwqIGdldF9jbGlwYm9hcmRfdGV4dF9jb3VudCkodm9pZCopOwogICAgICAgICAgICB0eXBlZGVmIHZvaWQoX190aGlzY2FsbCogc2V0X2NsaXBib2FyZF90ZXh0KSh2b2lkKiwgY29uc3QgY2hhciosIGludCk7CiAgICAgICAgICAgIHR5cGVkZWYgdm9pZChfX3RoaXNjYWxsKiBnZXRfY2xpcGJvYXJkX3RleHQpKHZvaWQqLCBpbnQsIGNvbnN0IGNoYXIqLCBpbnQpOwogICAgICAgIF1dKSwKICAgICAgICBbImV4cG9ydCJdID0gZnVuY3Rpb24oYXJnKQogICAgICAgICAgICBsb2NhbCBwb2ludGVyID0gZmZpLmNhc3QoZmZpLnR5cGVvZigndm9pZCoqKicpLCBjbGllbnQuY3JlYXRlX2ludGVyZmFjZSgndmd1aTIuZGxsJywgJ1ZHVUlfU3lzdGVtMDEwJykpCiAgICAgICAgICAgIGxvY2FsIGZ1bmMgPSBmZmkuY2FzdCgnc2V0X2NsaXBib2FyZF90ZXh0JywgcG9pbnRlclswXVs5XSkKICAgICAgICAgICAgZnVuYyhwb2ludGVyLCBhcmcsICNhcmcpCiAgICAgICAgZW5kLAogICAgICAgIFsiaW1wb3J0Il0gPSBmdW5jdGlvbigpCiAgICAgICAgICAgIGxvY2FsIHBvaW50ZXIgPSBmZmkuY2FzdChmZmkudHlwZW9mKCd2b2lkKioqJyksIGNsaWVudC5jcmVhdGVfaW50ZXJmYWNlKCd2Z3VpMi5kbGwnLCAnVkdVSV9TeXN0ZW0wMTAnKSkKICAgICAgICAgICAgbG9jYWwgZnVuYyA9IGZmaS5jYXN0KCdnZXRfY2xpcGJvYXJkX3RleHRfY291bnQnLCBwb2ludGVyWzBdWzddKQogICAgICAgICAgICBsb2NhbCBzaXplbGVuID0gZnVuYyhwb2ludGVyKQogICAgICAgICAgICBsb2NhbCBvdXRwdXQgPSAiIgogICAgICAgICAgICBpZiBzaXplbGVuID4gMCB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBidWZmZXIgPSBmZmkubmV3KCJjaGFyWz9dIiwgc2l6ZWxlbikKICAgICAgICAgICAgICAgIGxvY2FsIHNpemVmaXggPSBzaXplbGVuICogZmZpLnNpemVvZigiY2hhcls/XSIsIHNpemVsZW4pCiAgICAgICAgICAgICAgICBsb2NhbCBleHRyYWZ1bmMgPSBmZmkuY2FzdCgnZ2V0X2NsaXBib2FyZF90ZXh0JywgcG9pbnRlclswXVsxMV0pCiAgICAgICAgICAgICAgICBleHRyYWZ1bmMocG9pbnRlciwgMCwgYnVmZmVyLCBzaXplZml4KQogICAgICAgICAgICAgICAgb3V0cHV0ID0gZmZpLnN0cmluZyhidWZmZXIsIHNpemVsZW4tMSkKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIHJldHVybiBvdXRwdXQKICAgICAgICBlbmQKICAgIH0KICAgIGxvY2FsIGNhdGVnb3J5ID0gdWkubmV3X2NvbWJvYm94KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCBwcmVmaXgoImNhdGVnb3J5IiAuLiByZ2JhKDY5LDE2OSwxNTUsMjU1LCIgIiAuLiAoZ2V0YnVpbGQoKSA9PSAiYmV0YSIgYW5kICIgKGJldGEpIiBvciAiIikpKSwgeyJhbnRpIGFpbWJvdCIsICJ2aXN1YWxzICYgbWlzYyIsICJjb25maWcifSkKICAgIGxvY2FsIGFhID0ge30KICAgIGxvY2FsIG1lbnUgPSB7fQoJbG9jYWwgbm90aWZpY2F0aW9ucyA9IHt9Cglsb2NhbCBkcmF3X2dhbWVzZW5zZV91aSA9IHt9CglkcmF3X2dhbWVzZW5zZV91aS5hbHBoYSA9IGZ1bmN0aW9uKGNvbG9yLCBhbHBoYSkKCQljb2xvcls0XSA9IGFscGhhCgkJcmV0dXJuIGNvbG9yCgllbmQKCWRyYXdfZ2FtZXNlbnNlX3VpLmNvbG9ycyA9IHsKCQltYWluID0gezEyLCAxMiwgMTJ9LAoJCWJvcmRlcl9lZGdlID0gezYwLCA2MCwgNjB9LAoJCWJvcmRlcl9pbm5lciA9IHs0MCwgNDAsIDQwfSwKCQlncmFkaWVudCA9IHsKCQkJdG9wID0gewoJCQkJbGVmdCA9IHs1NSwgMTc3LCAyMTh9LAoJCQkJbWlkZGxlID0gezIwNCwgNzAsIDIwNX0sCgkJCQlyaWdodCA9IHsyMDQsIDIyNywgNTN9CgkJCX0sCgkJCWJvdHRvbSA9IHsKCQkJCWxlZnQgPSB7MjksIDk0LCAxMTZ9LAoJCQkJbWlkZGxlID0gezEwOSwgMzcsIDEwOX0sCgkJCQlyaWdodCA9IHsxMDksIDEyMSwgMjh9CgkJCX0sCgkJCXBpeGVsX3RocmVlID0gezYsIDYsIDZ9CgkJfSwKCQljb21iaW5lID0gZnVuY3Rpb24oY29sb3IxLCBjb2xvcjIsIC4uLikKCQkJbG9jYWwgdCA9IHt1bnBhY2soY29sb3IxKX0KCQkJZm9yIGkgPSAxLCAjY29sb3IyIGRvCgkJCQl0YWJsZS5pbnNlcnQodCwgY29sb3IyW2ldKQoJCQllbmQKCQkJbG9jYWwgYXJncyA9IHsuLi59CgkJCWZvciBpID0gMSwgI2FyZ3MgZG8KCQkJCXRhYmxlLmluc2VydCh0LCBhcmdzW2ldKQoJCQllbmQKCQkJcmV0dXJuIHQKCQllbmQKCX0KCWRyYXdfZ2FtZXNlbnNlX3VpLmJvcmRlciA9IGZ1bmN0aW9uKHgsIHksIHdpZHRoLCBoZWlnaHQsIGFscGhhKQoJCWxvY2FsIHggPSB4IC0gNyAtIDEKCQlsb2NhbCB5ID0geSAtIDcgLSA1CgkJbG9jYWwgdyA9IHdpZHRoICsgMTQgKyAyCgkJbG9jYWwgaCA9IGhlaWdodCArIDE0ICsgMTAKCQlyZW5kZXJlci5yZWN0YW5nbGUoeCwgeSwgdywgaCwgdW5wYWNrKGRyYXdfZ2FtZXNlbnNlX3VpLmFscGhhKGRyYXdfZ2FtZXNlbnNlX3VpLmNvbG9ycy5tYWluLCBhbHBoYSkpKQoJCXJlbmRlcmVyLnJlY3RhbmdsZSh4ICsgMSwgeSArIDEsIHcgLSAyLCBoIC0gMiwgdW5wYWNrKGRyYXdfZ2FtZXNlbnNlX3VpLmFscGhhKGRyYXdfZ2FtZXNlbnNlX3VpLmNvbG9ycy5ib3JkZXJfZWRnZSwgYWxwaGEpKSkKCQlyZW5kZXJlci5yZWN0YW5nbGUoeCArIDIsIHkgKyAyLCB3IC0gNCwgaCAtIDQsIHVucGFjayhkcmF3X2dhbWVzZW5zZV91aS5hbHBoYShkcmF3X2dhbWVzZW5zZV91aS5jb2xvcnMuYm9yZGVyX2lubmVyLCBhbHBoYSkpKQoJCXJlbmRlcmVyLnJlY3RhbmdsZSh4ICsgNiwgeSArIDYsIHcgLSAxMiwgaCAtIDEyLCB1bnBhY2soZHJhd19nYW1lc2Vuc2VfdWkuYWxwaGEoZHJhd19nYW1lc2Vuc2VfdWkuY29sb3JzLmJvcmRlcl9lZGdlLCBhbHBoYSkpKQoJZW5kCglkcmF3X2dhbWVzZW5zZV91aS5ncmFkaWVudCA9IGZ1bmN0aW9uKHgsIHksIHdpZHRoLCBhbHBoYSkKCQlsb2NhbCBmdWxsX3dpZHRoID0gd2lkdGgKCQlsb2NhbCB3aWR0aCA9IG1hdGguZmxvb3Iod2lkdGggLyAyKQoJCWxvY2FsIHRvcF9sZWZ0ID0gZHJhd19nYW1lc2Vuc2VfdWkuYWxwaGEoZHJhd19nYW1lc2Vuc2VfdWkuY29sb3JzLmdyYWRpZW50LnRvcC5sZWZ0LCBhbHBoYSkKCQlsb2NhbCB0b3BfbWlkZGxlID0gZHJhd19nYW1lc2Vuc2VfdWkuYWxwaGEoZHJhd19nYW1lc2Vuc2VfdWkuY29sb3JzLmdyYWRpZW50LnRvcC5taWRkbGUsIGFscGhhKQoJCWxvY2FsIHRvcF9yaWdodCA9IGRyYXdfZ2FtZXNlbnNlX3VpLmFscGhhKGRyYXdfZ2FtZXNlbnNlX3VpLmNvbG9ycy5ncmFkaWVudC50b3AucmlnaHQsIGFscGhhKQoJCWxvY2FsIGJvdHRvbV9sZWZ0ID0gZHJhd19nYW1lc2Vuc2VfdWkuYWxwaGEoZHJhd19nYW1lc2Vuc2VfdWkuY29sb3JzLmdyYWRpZW50LmJvdHRvbS5sZWZ0LCBhbHBoYSkKCQlsb2NhbCBib3R0b21fbWlkZGxlID0gZHJhd19nYW1lc2Vuc2VfdWkuYWxwaGEoZHJhd19nYW1lc2Vuc2VfdWkuY29sb3JzLmdyYWRpZW50LmJvdHRvbS5taWRkbGUsIGFscGhhKQoJCWxvY2FsIGJvdHRvbV9yaWdodCA9IGRyYXdfZ2FtZXNlbnNlX3VpLmFscGhhKGRyYXdfZ2FtZXNlbnNlX3VpLmNvbG9ycy5ncmFkaWVudC5ib3R0b20ucmlnaHQsIGFscGhhKQoJCXRvcF9sZWZ0ID0gZHJhd19nYW1lc2Vuc2VfdWkuY29sb3JzLmNvbWJpbmUodG9wX2xlZnQsIHRvcF9taWRkbGUsIHRydWUpCgkJdG9wX3JpZ2h0ID0gZHJhd19nYW1lc2Vuc2VfdWkuY29sb3JzLmNvbWJpbmUodG9wX21pZGRsZSwgdG9wX3JpZ2h0LCB0cnVlKQoJCWJvdHRvbV9sZWZ0ID0gZHJhd19nYW1lc2Vuc2VfdWkuY29sb3JzLmNvbWJpbmUoYm90dG9tX2xlZnQsIGJvdHRvbV9taWRkbGUsIHRydWUpCgkJYm90dG9tX3JpZ2h0ID0gZHJhd19nYW1lc2Vuc2VfdWkuY29sb3JzLmNvbWJpbmUoYm90dG9tX21pZGRsZSwgYm90dG9tX3JpZ2h0LCB0cnVlKQoJCWxvY2FsIG9kZGZpeCA9IG1hdGguY2VpbChmdWxsX3dpZHRoIC8gMikKCQlyZW5kZXJlci5ncmFkaWVudCh4LCB5IC0gNCwgd2lkdGgsIDEsIHVucGFjayh0b3BfbGVmdCkpCgkJcmVuZGVyZXIuZ3JhZGllbnQoeCArIHdpZHRoLCB5IC0gNCwgb2RkZml4LCAxLCB1bnBhY2sodG9wX3JpZ2h0KSkKCQlyZW5kZXJlci5ncmFkaWVudCh4LCB5IC0gMywgd2lkdGgsIDEsIHVucGFjayhib3R0b21fbGVmdCkpCgkJcmVuZGVyZXIuZ3JhZGllbnQoeCArIHdpZHRoLCB5IC0gMywgb2RkZml4LCAxLCB1bnBhY2soYm90dG9tX3JpZ2h0KSkKCQlyZW5kZXJlci5yZWN0YW5nbGUoeCwgeSAtIDIsIGZ1bGxfd2lkdGgsIDEsIHVucGFjayhkcmF3X2dhbWVzZW5zZV91aS5jb2xvcnMuZ3JhZGllbnQucGl4ZWxfdGhyZWUpKQoJZW5kCglkcmF3X2dhbWVzZW5zZV91aS5kcmF3ID0gZnVuY3Rpb24oeCwgeSwgd2lkdGgsIGhlaWdodCwgYWxwaGEpCgkJeSA9IHkgLSA3CgkJZHJhd19nYW1lc2Vuc2VfdWkuYm9yZGVyKHgsIHksIHdpZHRoLCBoZWlnaHQsIGFscGhhKQoJCXJlbmRlcmVyLnJlY3RhbmdsZSh4IC0gMSwgeSAtIDUsIHdpZHRoICsgMiwgaGVpZ2h0ICsgMTAsIHVucGFjayhkcmF3X2dhbWVzZW5zZV91aS5hbHBoYShkcmF3X2dhbWVzZW5zZV91aS5jb2xvcnMubWFpbiwgYWxwaGEpKSkKCQlkcmF3X2dhbWVzZW5zZV91aS5ncmFkaWVudCh4LCB5LCB3aWR0aCwgYWxwaGEpCgllbmQKCWxvY2FsIGZ1bmN0aW9uIHB1c2hfbm90aWZ5KHRleHQpCiAgICAgICAgaWYgdGJsLmNvbnRhaW5zKHVpLmdldChtZW51WyJ2aXN1YWxzICYgbWlzYyJdWyJ2aXN1YWxzIl1bIm5vdGlmeSJdKSwgIm9sZCIpIHRoZW4KICAgICAgICAgICAgbm90aWZ5Lm5ld19ib3R0b20oMTc5LCAyNTUsIDE4LCB7IHsgdGV4dCB9IH0pIAogICAgICAgIGVsc2UKICAgICAgICAgICAgdGFibGUuaW5zZXJ0KG5vdGlmaWNhdGlvbnMsIDEsIHsKICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LAogICAgICAgICAgICAgICAgYWxwaGEgPSAyNTUsCiAgICAgICAgICAgICAgICBzcGFjZXIgPSAwLAogICAgICAgICAgICAgICAgbGlmZXRpbWUgPSBjbGllbnQudGltZXN0YW1wKCkgKyAoMTAuMCAqIDEwMCksCiAgICAgICAgICAgIH0pCiAgICAgICAgZW5kCiAgICBlbmQKCWxvY2FsIGxlcnAgPSBmdW5jdGlvbihjdXJyZW50LCB0b19yZWFjaCwgdCkgcmV0dXJuIGN1cnJlbnQgKyAodG9fcmVhY2ggLSBjdXJyZW50KSAqIHQgZW5kCgljbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJwYWludF91aSIsIGZ1bmN0aW9uKCkKCQlsb2NhbCB3aWR0aCwgaGVpZ2h0ID0gY2xpZW50LnNjcmVlbl9zaXplKCkKCQlsb2NhbCBmcmFtZXRpbWUgPSBnbG9iYWxzLmZyYW1ldGltZSgpCgkJbG9jYWwgdGltZXN0YW1wID0gY2xpZW50LnRpbWVzdGFtcCgpCgkJZm9yIGlkeCwgbm90aWZpY2F0aW9uIGluIG5leHQsIG5vdGlmaWNhdGlvbnMgZG8KCQkJaWYgdGltZXN0YW1wID4gbm90aWZpY2F0aW9uLmxpZmV0aW1lIHRoZW4KCQkJCW5vdGlmaWNhdGlvbi5hbHBoYSA9IGxlcnAoMjU1LCAwLCAxIC0gKG5vdGlmaWNhdGlvbi5hbHBoYSAvIDI1NSkgKyBmcmFtZXRpbWUgKiAoMSAvIDcuNSAqIDEwKSkKCQkJZW5kCgkJCWlmIG5vdGlmaWNhdGlvbi5hbHBoYSA8PSAwIHRoZW4KCQkJCW5vdGlmaWNhdGlvbnNbaWR4XSA9IG5pbAoJCQllbHNlCgkJCQlub3RpZmljYXRpb24uc3BhY2VyID0gbGVycChub3RpZmljYXRpb24uc3BhY2VyLCBpZHggKiA0MCwgZnJhbWV0aW1lKQoJCQkJbG9jYWwgdGV4dF93aWR0aCA9IHJlbmRlcmVyLm1lYXN1cmVfdGV4dCgiYyIsIG5vdGlmaWNhdGlvbi50ZXh0KSArIDEwCgkJCQlkcmF3X2dhbWVzZW5zZV91aS5kcmF3KHdpZHRoLzIgLSB0ZXh0X3dpZHRoIC8gMiwgaGVpZ2h0LzIgKyAzMDAgKyBub3RpZmljYXRpb24uc3BhY2VyLCB0ZXh0X3dpZHRoLCAxMiwgbm90aWZpY2F0aW9uLmFscGhhKQoJCQkJcmVuZGVyZXIudGV4dCh3aWR0aC8yLCBoZWlnaHQvMiArIDMwMCArIG5vdGlmaWNhdGlvbi5zcGFjZXIsIDI1NSwgMjU1LCAyNTUsIG5vdGlmaWNhdGlvbi5hbHBoYSwgImMiLCAwLCBub3RpZmljYXRpb24udGV4dDpnc3ViKCJcYSV4JXgleCV4JXgleCV4JXgiLCBmdW5jdGlvbihjb2xvcikKCQkJCQlyZXR1cm4gY29sb3I6c3ViKDEsICNjb2xvciAtIDIpLi5zdHJpbmcuZm9ybWF0KCIlMDJ4Iiwgbm90aWZpY2F0aW9uLmFscGhhKQoJCQkJZW5kKTpzdWIoMSwgLTEpKQoJCQllbmQKCQllbmQKCWVuZCkKICAgIG1lbnUgPSB7CiAgICAgICAgWyJhbnRpIGFpbWJvdCJdID0gewogICAgICAgICAgICBzdWJtZW51ID0gdWkubmV3X2NvbWJvYm94KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCAiXG5tZW51IiwgeyJidWlsZGVyIiwgImtleWJpbmRzIiwgImZlYXR1cmVzIn0pLAogICAgICAgICAgICBbImJ1aWxkZXIiXSA9IHsKICAgICAgICAgICAgICAgIGJ1aWxkZXIgPSB1aS5uZXdfY29tYm9ib3goImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsIHByZWZpeCgiYnVpbGRlciIpLCB0Ymwuc3RhdGVzKSwKICAgICAgICAgICAgICAgIHRlYW0gPSB1aS5uZXdfY29tYm9ib3goImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsICJcbnRlYW0iLCB7ImN0IiwgInQifSkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWyJrZXliaW5kcyJdID0gewogICAgICAgICAgICAgICAga2V5cyA9IHVpLm5ld19tdWx0aXNlbGVjdCgiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KCJrZXlzIiksIHsibWFudWFsIiwgImVkZ2UiLCAiZnJlZXN0YW5kIn0pLAogICAgICAgICAgICAgICAgbGVmdCA9IHVpLm5ld19ob3RrZXkoImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsIHByZWZpeCgibGVmdCIpKSwKICAgICAgICAgICAgICAgIHJpZ2h0ID0gdWkubmV3X2hvdGtleSgiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KCJyaWdodCIpKSwKICAgICAgICAgICAgICAgIGZvcndhcmQgPSB1aS5uZXdfaG90a2V5KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCBwcmVmaXgoImZvcndhcmQiKSksCiAgICAgICAgICAgICAgICBiYWNrd2FyZCA9IHVpLm5ld19ob3RrZXkoImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsIHByZWZpeCgiYmFja3dhcmQiKSksCiAgICAgICAgICAgICAgICB0eXBlX21hbnVhbCA9IHVpLm5ld19jb21ib2JveCgiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KCJtYW51YWwiKSwgeyJkZWZhdWx0IiwgImppdHRlciIsICJzdGF0aWMifSksCiAgICAgICAgICAgICAgICBlZGdlID0gdWkubmV3X2hvdGtleSgiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KCJlZGdlIikpLAogICAgICAgICAgICAgICAgdHlwZV9mcmVlc3RhbmQgPSB1aS5uZXdfY29tYm9ib3goImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsIHByZWZpeCgiZnJlZXN0YW5kIiksIHsiZGVmYXVsdCIsICJqaXR0ZXIiLCAic3RhdGljIn0pLAogICAgICAgICAgICAgICAgZnJlZXN0YW5kID0gdWkubmV3X2hvdGtleSgiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgIlxuZnJlZXN0YW5kIiwgdHJ1ZSksCiAgICAgICAgICAgICAgICBkaXNhYmxlcnMgPSB1aS5uZXdfbXVsdGlzZWxlY3QoImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsIHByZWZpeCgiZnMgZGlzYWJsZXJzIiksIHsiYWlyIiwgInNsb3ciLCAiZHVjayIsICJlZGdlIiwgIm1hbnVhbCIsICJmYWtlIGxhZyJ9KQogICAgICAgICAgICB9LAogICAgICAgICAgICBbImZlYXR1cmVzIl0gPSB7CiAgICAgICAgICAgICAgICBsZWdpdCA9IHVpLm5ld19jb21ib2JveCgiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KCJsZWdpdCIpLCB7Im9mZiIsICJkZWZhdWx0IiwgImx1YXNlbnNlIn0pLAogICAgICAgICAgICAgICAgZml4ID0gdWkubmV3X211bHRpc2VsZWN0KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCAiXG5maXgiLCB7ImdlbmVyaWMiLCAiYm9tYnNpdGUifSksCgkJCQlkZWZlbnNpdmUgPSB1aS5uZXdfY29tYm9ib3goImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsIHByZWZpeCgiZGVmZW5zaXZlIiksIHsib2ZmIiwgInBpdGNoIiwgInNwaW4iLCAicmFuZG9tIiwgInJhbmRvbSBwaXRjaCIsICJzaWRld2F5cyBkb3duIiwgInNpZGV3YXlzIHVwIn0pLAogICAgICAgICAgICAgICAgZml4ZXIgPSB1aS5uZXdfY29tYm9ib3goImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsICJcbmZpeGVyIiwgeyJkZWZhdWx0IiwgImx1YXNlbnNlIn0pLAoJCQkJc3RhdGVzID0gdWkubmV3X211bHRpc2VsZWN0KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCAiXG5zdGF0ZXNcbiIsIHsic3RhbmRpbmciLCAibW92aW5nIiwgImFpciIsICJhaXIgZHVjayIsICJkdWNrIiwgImR1Y2sgbW92aW5nIiwgInNsb3cgbW90aW9uIn0pLAogICAgICAgICAgICAgICAgYmFja3N0YWIgPSB1aS5uZXdfY29tYm9ib3goImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsIHByZWZpeCgiYmFja3N0YWIiKSwgeyJvZmYiLCAiZm9yd2FyZCIsICJyYW5kb20ifSksCiAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHVpLm5ld19zbGlkZXIoImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsICJcbmJhY2tzdGFiIiwgMTAwLCA1MDAsIDI1MCksCiAgICAgICAgICAgICAgICByb2xsID0gdWkubmV3X3NsaWRlcigiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KCJyb2xsIiksIC00NSwgNDUsIDApCiAgICAgICAgICAgIH0sCiAgICAgICAgfSwKICAgICAgICBbInZpc3VhbHMgJiBtaXNjIl0gPSB7CiAgICAgICAgICAgIHN1Ym1lbnUgPSB1aS5uZXdfY29tYm9ib3goImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsICJcbnZpc3VhbHMgJiBtaXNjIiwgeyJ2aXN1YWxzIiwgIm1pc2MifSksCiAgICAgICAgICAgIFsidmlzdWFscyJdID0gewogICAgICAgICAgICAgICAgd2F0ZXJtYXJrID0gdWkubmV3X2NvbWJvYm94KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCBwcmVmaXgoImFsd2F5cyBvbiIsICJ3YXRlcm1hcmsiKSwgeyJib3R0b20iLCAicmlnaHQiLCAibGVmdCJ9KSwKICAgICAgICAgICAgICAgIHdhdGVybWFya19jb2xvciA9IHVpLm5ld19jb2xvcl9waWNrZXIoImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsICJcbndhdGVybWFyayIsIDE1MCwgMjAwLCA2OSwgMjU1KSwKICAgICAgICAgICAgICAgIHdhdGVybWFya19zcGFjZXMgPSB1aS5uZXdfY29tYm9ib3goImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsIHByZWZpeCgicmVtb3ZlIHNwYWNlcyIpLCB7InllcyIsICJubyJ9KSwKICAgICAgICAgICAgICAgIG5vdGlmeSA9IHVpLm5ld19tdWx0aXNlbGVjdCgiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KCJub3RpZnkiKSwgeyJoaXQiLCAibWlzcyIsICJzaG90IiwgInJlc2V0IiwgIm9sZCJ9KSwKICAgICAgICAgICAgICAgIGFycm93cyA9IHVpLm5ld19jb21ib2JveCgiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KCJhcnJvd3MiKSwgeyItIiwgInNpbXBsZSIsICJib2R5IiwgImx1YXNlbnNlIn0pLAogICAgICAgICAgICAgICAgYXJyb3dzX2NvbG9yID0gdWkubmV3X2NvbG9yX3BpY2tlcigiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgIlxuYXJyb3dzIiwgMTM3LCAyNDUsIDE1MCwgMjU1KSwKICAgICAgICAgICAgICAgIGluZGljYXRvcnMgPSB1aS5uZXdfY29tYm9ib3goImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsIHByZWZpeCgiaW5kaWNhdG9ycyIpLCB7Ii0iLCAiZGVmYXVsdCJ9KSwKICAgICAgICAgICAgICAgIGluZGljYXRvcnNfY29sb3IgPSB1aS5uZXdfY29sb3JfcGlja2VyKCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCAiXG5pbmRpY2F0b3JzIiwgMTM3LCAyNDUsIDE1MCwgMjU1KSwKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWyJtaXNjIl0gPSB7CiAgICAgICAgICAgICAgICBmZWF0dXJlcyA9IHVpLm5ld19tdWx0aXNlbGVjdCgiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KCJmZWF0dXJlcyIpLCB7ImZpeCBoaWRlc2hvdCIsICJhbmltYXRpb25zIiwgImxlZ3Mgc3BhbW1lciJ9KSwKICAgICAgICAgICAgICAgIHNwYW1tZXIgPSB1aS5uZXdfc2xpZGVyKCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCAiXG5zcGFtbWVyIiwgMSwgOSwgMSksCiAgICAgICAgICAgICAgICBhdXRvYnV5ID0gdWkubmV3X2NvbWJvYm94KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCBwcmVmaXgoImF1dG8gYnV5IiksIHsib2ZmIiwgImF3cCIsICJzY291dCJ9KQogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbImNvbmZpZyJdID0gewogICAgICAgICAgICBleHBvcnQgPSB1aS5uZXdfYnV0dG9uKCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCAiXGE4OWY1OTZGRiBleHBvcnQiLCBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCB0YmwgPSB7fQogICAgICAgICAgICAgICAgZm9yIGksIHYgaW4gbmV4dCwgYWEgZG8KICAgICAgICAgICAgICAgICAgICB0YmxbaV0gPSB7fQogICAgICAgICAgICAgICAgICAgIGZvciBpbmRleCwgdmFsdWUgaW4gbmV4dCwgdiBkbwogICAgICAgICAgICAgICAgICAgICAgICB0YmxbaV1baW5kZXhdID0ge30KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGlpLCB2diBpbiBuZXh0LCB2YWx1ZSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaWkgPT0gInR5cGUiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YmxbaV1baW5kZXhdW2lpXSA9IHVpLmdldCh2dikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpaSB+PSAiYnV0dG9uIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRibFtpXVtpbmRleF1baWldID0ge30KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGlpaSwgdnZ2IGluIG5leHQsIHZ2IGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YmxbaV1baW5kZXhdW2lpXVtpaWldID0gdWkuZ2V0KHZ2dikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIHRibFsiZXh0cmEiXSA9IHt9CiAgICAgICAgICAgICAgICBmb3IgaSwgdiBpbiBuZXh0LCBtZW51WyJhbnRpIGFpbWJvdCJdIGRvCiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAic3VibWVudSIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICB0YmxbImV4dHJhIl1baV0gPSB1aS5nZXQodikKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIHRibFsiZXh0cmEiXVtpXSA9IHt9CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpbmRleCwgdmFsdWUgaW4gbmV4dCwgdiBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgZml4ZXIgPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpID09ICJrZXliaW5kcyIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGluZGV4ID09ICJsZWZ0IiBvciBpbmRleCA9PSAicmlnaHQiIG9yIGluZGV4ID09ICJmb3J3YXJkIiBvciBpbmRleCA9PSAiYmFja3dhcmQiIG9yIGluZGV4ID09ICJlZGdlIiBvciBpbmRleCA9PSAiZnJlZXN0YW5kIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpeGVyID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgZml4ZXIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRibFsiZXh0cmEiXVtpXVtpbmRleF0gPSB1aS5nZXQodmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKCQkJCXB1c2hfbm90aWZ5KCJFeHBvcnRlZCBjb25maWchIikKICAgICAgICAgICAgICAgIGNsaXBib2FyZC5leHBvcnQoanNvbi5zdHJpbmdpZnkoe1siTFVBU0VOU0UiXSA9IHRibH0pKQogICAgICAgICAgICBlbmQpLAogICAgICAgICAgICBpbXBvcnQgPSB1aS5uZXdfYnV0dG9uKCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCAiXGEzMmE4NTJGRiBpbXBvcnQiLCBmdW5jdGlvbigpCiAgICAgICAgICAgICAgICBsb2NhbCBjaGVjaywgbWVzc2FnZSA9IHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICBsb2NhbCB0YmwgPSBqc29uLnBhcnNlKGNsaXBib2FyZC5pbXBvcnQoKSkKICAgICAgICAgICAgICAgICAgICBmb3IgaSwgdiBpbiBuZXh0LCB0YmxbIkxVQVNFTlNFIl1bImV4dHJhIl0gZG8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAic3VibWVudSIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KG1lbnVbImFudGkgYWltYm90Il1baV0sIHYpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpbmRleCwgdmFsdWUgaW4gbmV4dCwgdiBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChtZW51WyJhbnRpIGFpbWJvdCJdW2ldW2luZGV4XSwgdmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgdGJsWyJMVUFTRU5TRSJdWyJleHRyYSJdID0gbmlsCiAgICAgICAgICAgICAgICAgICAgZm9yIGksIHYgaW4gbmV4dCwgdGJsWyJMVUFTRU5TRSJdIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpbmRleCwgdmFsdWUgaW4gbmV4dCwgdiBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGlpLCB2diBpbiBuZXh0LCB2YWx1ZSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlpID09ICJ0eXBlIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChhYVtpXVtpbmRleF1baWldLCB2dikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpaWksIHZ2diBpbiBuZXh0LCB2diBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KGFhW2ldW2luZGV4XVtpaV1baWlpXSwgdnZ2KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZCkKCQkJCXB1c2hfbm90aWZ5KGNoZWNrIGFuZCAiSW1wb3J0ZWQgY29uZmlnISIgb3IgIkVycm9yIHdoaWxlIGltcG9ydGluZyEiKQogICAgICAgICAgICBlbmQpLAogICAgICAgIH0KICAgIH0KICAgIGZvciBpLCB2IGluIG5leHQsIHRibC5zdGF0ZXMgZG8KICAgICAgICBhYVt2XSA9IHt9CiAgICAgICAgZm9yIGluZGV4LCB2YWx1ZSBpbiBuZXh0LCB7ImN0IiwgInQifSBkbwogICAgICAgICAgICBhYVt2XVt2YWx1ZV0gPSB7CiAgICAgICAgICAgICAgICBbInR5cGUiXSA9IHVpLm5ld19jb21ib2JveCgiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KHYgLi4gIiAiIC4uIHZhbHVlLCAidHlwZSIpLCAodiA9PSAiZ2xvYmFsIiBhbmQgeyJub3JtYWwiLCAibHVhc2Vuc2UiLCAiYWR2YW5jZWQiLCAiYXV0byJ9IG9yIHsiZGlzYWJsZWQiLCAibm9ybWFsIiwgImx1YXNlbnNlIiwgImFkdmFuY2VkIiwgImF1dG8ifSkpLAogICAgICAgICAgICAgICAgWyJub3JtYWwiXSA9IHsKICAgICAgICAgICAgICAgICAgICBtb2RlID0gdWkubmV3X211bHRpc2VsZWN0KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCBwcmVmaXgodiAuLiAiICIgLi4gdmFsdWUsICJtb2RlIiksIHsieWF3IiwgImxlZnQgcmlnaHQifSksCiAgICAgICAgICAgICAgICAgICAgeWF3ID0gdWkubmV3X3NsaWRlcigiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KHYgLi4gIiAiIC4uIHZhbHVlLCAieWF3IiksIC0xODAsIDE4MCwgMCksCiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IHVpLm5ld19zbGlkZXIoImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsIHByZWZpeCh2IC4uICIgIiAuLiB2YWx1ZSwgImxlZnQiKSwgLTE4MCwgMTgwLCAwKSwKICAgICAgICAgICAgICAgICAgICByaWdodCA9IHVpLm5ld19zbGlkZXIoImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsIHByZWZpeCh2IC4uICIgIiAuLiB2YWx1ZSwgInJpZ2h0IiksIC0xODAsIDE4MCwgMCksCiAgICAgICAgICAgICAgICAgICAgbWV0aG9kID0gdWkubmV3X2NvbWJvYm94KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCBwcmVmaXgodiAuLiAiICIgLi4gdmFsdWUsICJtZXRob2QiKSwgeyJkZWZhdWx0IiwgImx1YXNlbnNlIn0pLAogICAgICAgICAgICAgICAgICAgIGppdHRlciA9IHVpLm5ld19jb21ib2JveCgiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KHYgLi4gIiAiIC4uIHZhbHVlLCAiaml0dGVyIiksIHsib2ZmIiwgIm9mZnNldCIsICJjZW50ZXIiLCAicmFuZG9tIiwgInNraXR0ZXIifSksCiAgICAgICAgICAgICAgICAgICAgaml0dGVyX3NsaWRlciA9IHVpLm5ld19zbGlkZXIoImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsICJcbmppdHRlciBzbGlkZXIgIiAuLiB2IC4uICIgIiAuLiB2YWx1ZSwgLTE4MCwgMTgwLCAwKSwKICAgICAgICAgICAgICAgICAgICBib2R5ID0gdWkubmV3X2NvbWJvYm94KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCBwcmVmaXgodiAuLiAiICIgLi4gdmFsdWUsICJib2R5IiksIHsib2ZmIiwgImx1YXNlbnNlIiwgIm9wcG9zaXRlIiwgInN0YXRpYyIsICJqaXR0ZXIifSksCiAgICAgICAgICAgICAgICAgICAgYm9keV9zbGlkZXIgPSB1aS5uZXdfc2xpZGVyKCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCAiXG5ib2R5IHNsaWRlciAiIC4uIHYgLi4gIiAiIC4uIHZhbHVlLCAtMTgwLCAxODAsIDApLAogICAgICAgICAgICAgICAgICAgIGN1c3RvbV9zbGlkZXIgPSB1aS5uZXdfc2xpZGVyKCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCAiXG5jdXN0b20gc2xpZGVyICIgLi4gdiAuLiAiICIgLi4gdmFsdWUsIDAsIDYwLCA2MCksCiAgICAgICAgICAgICAgICAgICAgZGVmZW5zaXZlID0gdWkubmV3X2NvbWJvYm94KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCBwcmVmaXgodiAuLiAiICIgLi4gdmFsdWUsICJkZWZlbnNpdmUiKSwgeyJvZmYiLCAiYWx3YXlzIG9uIiwgImx1YXNlbnNlIn0pCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgWyJsdWFzZW5zZSJdID0gewogICAgICAgICAgICAgICAgICAgIGx1YXNlbnNlID0gdWkubmV3X3NsaWRlcigiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KHYgLi4gIiAiIC4uIHZhbHVlLCAibHVhc2Vuc2UiKSwgMSwgMTAsIDEpLAogICAgICAgICAgICAgICAgICAgIG1vZGUgPSB1aS5uZXdfbXVsdGlzZWxlY3QoImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsIHByZWZpeCh2IC4uICIgIiAuLiB2YWx1ZSwgIm1vZGVcbiIpLCB7InlhdyIsICJsZWZ0IHJpZ2h0In0pLAogICAgICAgICAgICAgICAgICAgIHlhdyA9IHVpLm5ld19zbGlkZXIoImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsIHByZWZpeCh2IC4uICIgIiAuLiB2YWx1ZSwgInlhd1xuIiksIC0xODAsIDE4MCwgMCksCiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IHVpLm5ld19zbGlkZXIoImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsIHByZWZpeCh2IC4uICIgIiAuLiB2YWx1ZSwgImxlZnRcbiIpLCAtMTgwLCAxODAsIDApLAogICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gdWkubmV3X3NsaWRlcigiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KHYgLi4gIiAiIC4uIHZhbHVlLCAicmlnaHRcbiIpLCAtMTgwLCAxODAsIDApLAogICAgICAgICAgICAgICAgICAgIGZha2UgPSB1aS5uZXdfc2xpZGVyKCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCBwcmVmaXgodiAuLiAiICIgLi4gdmFsdWUsICJmYWtlIiksIDAsIDYwLCA2MCksCiAgICAgICAgICAgICAgICAgICAgZGVmZW5zaXZlID0gdWkubmV3X2NvbWJvYm94KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCBwcmVmaXgodiAuLiAiICIgLi4gdmFsdWUsICJkZWZlbnNpdmVcbiIpLCB7Im9mZiIsICJhbHdheXMgb24iLCAibHVhc2Vuc2UifSkKICAgICAgICAgICAgICAgIH0sCgkJCQlbImFkdmFuY2VkIl0gPSB7CgkJCQkJLS10cmlnZ2VyID0gdGJsLml0ZW0oIm5ld19jb21ib2JveCIsIHtyZ2JhKDY5LDE2OSw1NSwyNTUsdiAuLiAiOiAiKSAuLiByZ2JhKDY5LDE2OSwxNTUsMjU1LCJUcmlnZ2VyIiksICJBOiBCcmFuZG9uIiwgIkI6IEJlc3QiLCAiQzogRXhwZXJpbWVudGFsIiwgIkF1dG9tYXRpYyJ9KSwKCQkJCQl0cmlnZ2VyID0gdWkubmV3X2NvbWJvYm94KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCBwcmVmaXgodiAuLiAiICIgLi4gdmFsdWUsICJ0cmlnZ2VyIiksICJhOiBicmFuZG9uIiwgImI6IGJlc3QiLCAiYzogZXhwZXJpbWVudGFsIiwgImF1dG9tYXRpYyIpLAoJCQkJCWxlZnQgPSB1aS5uZXdfc2xpZGVyKCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCBwcmVmaXgodiAuLiAiICIgLi4gdmFsdWUsICJsZWZ0XG5cbiIpLCAtMTgwLCAxODAsIDApLAogICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gdWkubmV3X3NsaWRlcigiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KHYgLi4gIiAiIC4uIHZhbHVlLCAicmlnaHRcblxuIiksIC0xODAsIDE4MCwgMCksCgkJCQkJZGVmZW5zaXZlID0gdWkubmV3X2NvbWJvYm94KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCBwcmVmaXgodiAuLiAiICIgLi4gdmFsdWUsICJkZWZlbnNpdmVcblxuXG4iKSwgeyJvZmYiLCAiYWx3YXlzIG9uIiwgImx1YXNlbnNlIn0pCgkJCQl9LAogICAgICAgICAgICAgICAgWyJhdXRvIl0gPSB7CiAgICAgICAgICAgICAgICAgICAgbWV0aG9kID0gdWkubmV3X2NvbWJvYm94KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCBwcmVmaXgodiAuLiAiICIgLi4gdmFsdWUsICJtZXRob2RcbiIpLCB7InNpbXBsZSIsICJsdWFzZW5zZSJ9KSwKICAgICAgICAgICAgICAgICAgICB0aW1lciA9IHVpLm5ld19zbGlkZXIoImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsICJcbnRpbWVyIiwgNTAsIDI1MCwgMTUwKSwKCQkJCQlsZWZ0ID0gdWkubmV3X3NsaWRlcigiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KHYgLi4gIiAiIC4uIHZhbHVlLCAibGVmdFxuXG5cbiIpLCAtMTgwLCAxODAsIDApLAogICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gdWkubmV3X3NsaWRlcigiYWEiLCAiYW50aS1haW1ib3QgYW5nbGVzIiwgcHJlZml4KHYgLi4gIiAiIC4uIHZhbHVlLCAicmlnaHRcblxuXG4iKSwgLTE4MCwgMTgwLCAwKSwKICAgICAgICAgICAgICAgICAgICBhbnRpYmYgPSB1aS5uZXdfY29tYm9ib3goImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsIHByZWZpeCh2IC4uICIgIiAuLiB2YWx1ZSwgImJydXRlZm9yY2UiKSwgeyJubyIsICJ5ZXMifSksCiAgICAgICAgICAgICAgICAgICAgZGVmZW5zaXZlID0gdWkubmV3X2NvbWJvYm94KCJhYSIsICJhbnRpLWFpbWJvdCBhbmdsZXMiLCBwcmVmaXgodiAuLiAiICIgLi4gdmFsdWUsICJkZWZlbnNpdmVcblxuIiksIHsib2ZmIiwgImFsd2F5cyBvbiIsICJsdWFzZW5zZSJ9KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsiZGlzYWJsZWQiXSA9IHt9LAogICAgICAgICAgICAgICAgWyJidXR0b24iXSA9IHVpLm5ld19idXR0b24oImFhIiwgImFudGktYWltYm90IGFuZ2xlcyIsICJcYTMyYTg1MkZGc2VuZCB0byBcYTg5ZjU5NkZGIiAuLiAodmFsdWUgPT0gInQiIGFuZCAiY3QiIG9yICJ0IiksIGZ1bmN0aW9uKCkKICAgICAgICAgICAgICAgICAgICBsb2NhbCBzdGF0ZSA9IHVpLmdldChtZW51WyJhbnRpIGFpbWJvdCJdWyJidWlsZGVyIl1bImJ1aWxkZXIiXSkKICAgICAgICAgICAgICAgICAgICBsb2NhbCB0ZWFtID0gdWkuZ2V0KG1lbnVbImFudGkgYWltYm90Il1bImJ1aWxkZXIiXVsidGVhbSJdKQogICAgICAgICAgICAgICAgICAgIGxvY2FsIHRhcmdldCA9ICh0ZWFtID09ICJ0IiBhbmQgImN0IiBvciAidCIpCiAgICAgICAgICAgICAgICAgICAgZm9yIGksIHYgaW4gbmV4dCwgYWFbc3RhdGVdW3RlYW1dIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGkgfj0gImJ1dHRvbiIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAidHlwZSIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldChhYVtzdGF0ZV1bdGFyZ2V0XVtpXSwgdWkuZ2V0KHYpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpbmRleCwgdmFsdWUgaW4gbmV4dCwgdiBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQoYWFbc3RhdGVdW3RhcmdldF1baV1baW5kZXhdLCB1aS5nZXQodmFsdWUpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kKQogICAgICAgICAgICB9CiAgICAgICAgZW5kCiAgICBlbmQKICAgIHRibC5yZWZzID0gewogICAgICAgIHNsb3cgPSB0YmwucmVmKCJhYSIsICJvdGhlciIsICJzbG93IG1vdGlvbiIpLAogICAgICAgIGhpZGUgPSB0YmwucmVmKCJhYSIsICJvdGhlciIsICJvbiBzaG90IGFudGktYWltIiksCiAgICAgICAgZHQgPSB0YmwucmVmKCJyYWdlIiwgImFpbWJvdCIsICJkb3VibGUgdGFwIikKICAgIH0KICAgIHRibC5hbnRpYWltID0gewogICAgICAgIGx1YXNlbnNlZmFrZSA9IGZhbHNlLAogICAgICAgIGF1dG9jaGVjayA9IGZhbHNlLAogICAgICAgIGN1cnJlbnQgPSBmYWxzZSwKICAgICAgICBhY3RpdmUgPSBmYWxzZSwKICAgICAgICBjb3VudCA9IGZhbHNlLAoJCXJlYWR5ID0gZmFsc2UsCiAgICAgICAgdGltZXIgPSAwLAogICAgICAgIGZzID0gMCwKICAgICAgICBsYXN0ID0gMCwKICAgICAgICBsb2cgPSB7fSwKICAgICAgICBtYW51YWwgPSB7CiAgICAgICAgICAgIGFhID0gMCwKICAgICAgICAgICAgdGljayA9IDAKICAgICAgICB9CiAgICB9CiAgICBsb2NhbCBkaXN0YW5jZSA9IGZ1bmN0aW9uKHgxLHkxLHoxLHgyLHkyLHoyKQoJCXJldHVybiBtYXRoLnNxcnQoKHgxIC0geDIpICogKHgxIC0geDIpICsgKHkxIC0geTIpICogKHkxIC0geTIpKQoJZW5kCglsb2NhbCBleHRyYXBvbGF0ZSA9IGZ1bmN0aW9uKHBsYXllciwgdGlja3MsIHgseSx6KQoJCWxvY2FsIHh2LCB5diwgenYgPSAgZW50aXR5LmdldF9wcm9wKHBsYXllciwgIm1fdmVjVmVsb2NpdHkiKQoJCWxvY2FsIG5ld194ID0geCArIGdsb2JhbHMudGlja2ludGVydmFsKCkgKiB4diAqIHRpY2tzCgkJbG9jYWwgbmV3X3kgPSB5ICsgZ2xvYmFscy50aWNraW50ZXJ2YWwoKSAqIHl2ICogdGlja3MKCQlsb2NhbCBuZXdfeiA9IHogKyBnbG9iYWxzLnRpY2tpbnRlcnZhbCgpICogenYgKiB0aWNrcwoJCXJldHVybiBuZXdfeCwgbmV3X3ksIG5ld196CgllbmQKICAgIGxvY2FsIGZ1bmN0aW9uIGNhbGNhbmdsZShsb2NhbHBsYXllcnhwb3MsIGxvY2FscGxheWVyeXBvcywgZW5lbXl4cG9zLCBlbmVteXlwb3MpCiAgICAgICBsb2NhbCByZWxhdGl2ZXlhdyA9IG1hdGguYXRhbiggKGxvY2FscGxheWVyeXBvcyAtIGVuZW15eXBvcykgLyAobG9jYWxwbGF5ZXJ4cG9zIC0gZW5lbXl4cG9zKSApCiAgICAgICByZXR1cm4gcmVsYXRpdmV5YXcgKiAxODAgLyBtYXRoLnBpCiAgICBlbmQKICAgIGxvY2FsIGZ1bmN0aW9uIGFuZ2xlX3ZlY3RvcihhbmdsZV94LCBhbmdsZV95KQogICAgICAgIGxvY2FsIHNwLCBzeSwgY3AsIGN5ID0gbmlsCiAgICAgICAgc3kgPSBtYXRoLnNpbihtYXRoLnJhZChhbmdsZV95KSk7CiAgICAgICAgY3kgPSBtYXRoLmNvcyhtYXRoLnJhZChhbmdsZV95KSk7CiAgICAgICAgc3AgPSBtYXRoLnNpbihtYXRoLnJhZChhbmdsZV94KSk7CiAgICAgICAgY3AgPSBtYXRoLmNvcyhtYXRoLnJhZChhbmdsZV94KSk7CiAgICAgICAgcmV0dXJuIGNwICogY3ksIGNwICogc3ksIC1zcDsKICAgIGVuZAogICAgbG9jYWwgZW5lbXlfdmlzaWJsZSA9IGZ1bmN0aW9uKHgpCiAgICAgICAgaWYgbm90IChlbnRpdHkuaXNfYWxpdmUoeCkgYW5kIG5vdCBlbnRpdHkuaXNfZG9ybWFudCh4KSkgdGhlbiAKICAgICAgICAgICAgcmV0dXJuIGZhbHNlIAogICAgICAgIGVuZAogICAgICAgIGZvciBpPTAsIDE4IGRvIAogICAgICAgICAgICBpZiBjbGllbnQudmlzaWJsZShlbnRpdHkuaGl0Ym94X3Bvc2l0aW9uKHgsIGkpKSB0aGVuCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZSAKICAgICAgICAgICAgZW5kIAogICAgICAgIGVuZCAKICAgICAgICByZXR1cm4gZmFsc2UKICAgIGVuZAogICAgbG9jYWwgZnVuY3Rpb24gZ2V0X2NhbWVyYV9wb3MoZW5lbXkpCgkJbG9jYWwgZV94LCBlX3ksIGVfeiA9IGVudGl0eS5nZXRfcHJvcChlbmVteSwgIm1fdmVjT3JpZ2luIikKCQlpZiBlX3ggPT0gbmlsIHRoZW4gcmV0dXJuIGVuZAoJCWxvY2FsIF8sIF8sIG9mcyA9IGVudGl0eS5nZXRfcHJvcChlbmVteSwgIm1fdmVjVmlld09mZnNldCIpCgkJZV96ID0gZV96ICsgKG9mcyAtIChlbnRpdHkuZ2V0X3Byb3AoZW5lbXksICJtX2ZsRHVja0Ftb3VudCIpICogMTYpKQoJCXJldHVybiBlX3gsIGVfeSwgZV96CgllbmQKCWxvY2FsIGZ1bmN0aW9uIGZpcmVkX2F0KHRhcmdldCwgc2hvb3Rlciwgc2hvdCkKCQlsb2NhbCBzaG9vdGVyX2NhbSA9IHsgZ2V0X2NhbWVyYV9wb3Moc2hvb3RlcikgfQoJCWlmIHNob290ZXJfY2FtWzFdID09IG5pbCB0aGVuIHJldHVybiBlbmQKCQlsb2NhbCBwbGF5ZXJfaGVhZCA9IHsgZW50aXR5LmhpdGJveF9wb3NpdGlvbih0YXJnZXQsIDApIH0KCQlsb2NhbCBzaG9vdGVyX2NhbV90b19oZWFkID0geyBwbGF5ZXJfaGVhZFsxXSAtIHNob290ZXJfY2FtWzFdLHBsYXllcl9oZWFkWzJdIC0gc2hvb3Rlcl9jYW1bMl0scGxheWVyX2hlYWRbM10gLSBzaG9vdGVyX2NhbVszXSB9CgkJbG9jYWwgc2hvb3Rlcl9jYW1fdG9fc2hvdCA9IHsgc2hvdFsxXSAtIHNob290ZXJfY2FtWzFdLCBzaG90WzJdIC0gc2hvb3Rlcl9jYW1bMl0sc2hvdFszXSAtIHNob290ZXJfY2FtWzNdfQoJCWxvY2FsIG1hZ2ljID0gKChzaG9vdGVyX2NhbV90b19oZWFkWzFdKnNob290ZXJfY2FtX3RvX3Nob3RbMV0pICsgKHNob290ZXJfY2FtX3RvX2hlYWRbMl0qc2hvb3Rlcl9jYW1fdG9fc2hvdFsyXSkgKyAoc2hvb3Rlcl9jYW1fdG9faGVhZFszXSpzaG9vdGVyX2NhbV90b19zaG90WzNdKSkgLyAobWF0aC5wb3coc2hvb3Rlcl9jYW1fdG9fc2hvdFsxXSwgMikgKyBtYXRoLnBvdyhzaG9vdGVyX2NhbV90b19zaG90WzJdLCAyKSArIG1hdGgucG93KHNob290ZXJfY2FtX3RvX3Nob3RbM10sIDIpKQoJCWxvY2FsIGNsb3Nlc3QgPSB7IHNob290ZXJfY2FtWzFdICsgc2hvb3Rlcl9jYW1fdG9fc2hvdFsxXSptYWdpYywgc2hvb3Rlcl9jYW1bMl0gKyBzaG9vdGVyX2NhbV90b19zaG90WzJdKm1hZ2ljLCBzaG9vdGVyX2NhbVszXSArIHNob290ZXJfY2FtX3RvX3Nob3RbM10qbWFnaWN9CgkJbG9jYWwgbGVuZ3RoID0gbWF0aC5hYnMobWF0aC5zcXJ0KG1hdGgucG93KChwbGF5ZXJfaGVhZFsxXS1jbG9zZXN0WzFdKSwgMikgKyBtYXRoLnBvdygocGxheWVyX2hlYWRbMl0tY2xvc2VzdFsyXSksIDIpICsgbWF0aC5wb3coKHBsYXllcl9oZWFkWzNdLWNsb3Nlc3RbM10pLCAyKSkpCgkJbG9jYWwgZnJhY19zaG90ID0gY2xpZW50LnRyYWNlX2xpbmUoc2hvb3Rlciwgc2hvdFsxXSwgc2hvdFsyXSwgc2hvdFszXSwgcGxheWVyX2hlYWRbMV0sIHBsYXllcl9oZWFkWzJdLCBwbGF5ZXJfaGVhZFszXSkKCQlsb2NhbCBmcmFjX2ZpbmFsID0gY2xpZW50LnRyYWNlX2xpbmUodGFyZ2V0LCBjbG9zZXN0WzFdLCBjbG9zZXN0WzJdLCBjbG9zZXN0WzNdLCBwbGF5ZXJfaGVhZFsxXSwgcGxheWVyX2hlYWRbMl0sIHBsYXllcl9oZWFkWzNdKQoJCXJldHVybiAobGVuZ3RoIDwgNjkpIGFuZCAoZnJhY19zaG90ID4gMC45OSBvciBmcmFjX2ZpbmFsID4gMC45OSkKCWVuZAoJbG9jYWwgdGlja3Nob3QgPSAwCgljbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJidWxsZXRfaW1wYWN0IiwgZnVuY3Rpb24oZXZlbnQpCgkJaWYgZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSA9PSBuaWwgdGhlbiByZXR1cm4gZW5kCgkJbG9jYWwgZW5lbXkgPSBjbGllbnQudXNlcmlkX3RvX2VudGluZGV4KGV2ZW50LnVzZXJpZCkKCQlsb2NhbCBscCA9IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkKCQlpZiBlbmVteSA9PSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpIG9yIG5vdCBlbnRpdHkuaXNfZW5lbXkoZW5lbXkpIG9yIG5vdCBlbnRpdHkuaXNfYWxpdmUobHApIHRoZW4gcmV0dXJuIG5pbCBlbmQKCQlpZiBmaXJlZF9hdChscCwgZW5lbXksIHtldmVudC54LCBldmVudC55LCBldmVudC56fSkgdGhlbgoJCQlpZiB0aWNrc2hvdCB+PSBnbG9iYWxzLnRpY2tjb3VudCgpIHRoZW4KCQkJCWlmIHRibC5jb250YWlucyh1aS5nZXQobWVudVsidmlzdWFscyAmIG1pc2MiXVsidmlzdWFscyJdWyJub3RpZnkiXSksICJzaG90IikgdGhlbgoJCQkJCXB1c2hfbm90aWZ5KCJEZXRlY3RlZCBhIHNob3QhIikKCQkJCWVuZAoJCQkJdGlja3Nob3QgPSBnbG9iYWxzLnRpY2tjb3VudCgpCiAgICAgICAgICAgICAgICB0YmwuYW50aWFpbS5jb3VudCA9IHRydWUKICAgICAgICAgICAgICAgIHRibC5hbnRpYWltLnRpbWVyID0gMAogICAgICAgICAgICAgICAgaWYgdGJsLmFudGlhaW0uYWN0aXZlIGFuZCB0YmwuYW50aWFpbS5sb2dbZW5lbXldID09IG5pbCB0aGVuCiAgICAgICAgICAgICAgICAgICAgdGJsLmFudGlhaW0ubG9nW2VuZW15XSA9IG5vdCB0YmwuYW50aWFpbS5jdXJyZW50CiAgICAgICAgICAgICAgICBlbHNlCgkJCQkgICAgdGJsLmFudGlhaW0ubG9nW2VuZW15XSA9IG5vdCB0YmwuYW50aWFpbS5sb2dbZW5lbXldCiAgICAgICAgICAgICAgICBlbmQKCQkJZW5kCgkJZW5kCgllbmQpCglsb2NhbCBoaXRib3hlcyA9IHsgWzBdID0gJ2JvZHknLCAnaGVhZCcsICdjaGVzdCcsICdzdG9tYWNoJywgJ2FybScsICdhcm0nLCAnbGVnJywgJ2xlZycsICduZWNrJywgJ2JvZHknLCAnYm9keScgfQoJY2xpZW50LnNldF9ldmVudF9jYWxsYmFjaygnYWltX21pc3MnLCBmdW5jdGlvbihzaG90KQoJCWlmIG5vdCB0YmwuY29udGFpbnModWkuZ2V0KG1lbnVbInZpc3VhbHMgJiBtaXNjIl1bInZpc3VhbHMiXVsibm90aWZ5Il0pLCAibWlzcyIpIHRoZW4gcmV0dXJuIG5pbCBlbmQKCQlsb2NhbCB0YXJnZXQgPSBlbnRpdHkuZ2V0X3BsYXllcl9uYW1lKHNob3QudGFyZ2V0KTpsb3dlcigpCgkJbG9jYWwgaGl0Ym94ID0gaGl0Ym94ZXNbc2hvdC5oaXRncm91cF0gb3IgIj8iCgkJcHVzaF9ub3RpZnkoIk1pc3NlZCAiIC4uIHRhcmdldCAuLiAiJ3MgIiAuLiBoaXRib3ggLi4gIiBkdWUgdG8gIiAuLiBzaG90LnJlYXNvbiAuLiAiISIpCgllbmQpCgljbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCdhaW1faGl0JywgZnVuY3Rpb24oc2hvdCkKCQlpZiBub3QgdGJsLmNvbnRhaW5zKHVpLmdldChtZW51WyJ2aXN1YWxzICYgbWlzYyJdWyJ2aXN1YWxzIl1bIm5vdGlmeSJdKSwgImhpdCIpIHRoZW4gcmV0dXJuIG5pbCBlbmQKCQlsb2NhbCB0YXJnZXQgPSBlbnRpdHkuZ2V0X3BsYXllcl9uYW1lKHNob3QudGFyZ2V0KTpsb3dlcigpCgkJbG9jYWwgaGl0Ym94ID0gaGl0Ym94ZXNbc2hvdC5oaXRncm91cF0gb3IgIj8iCgkJcHVzaF9ub3RpZnkoIkhpdCAiIC4uIHRhcmdldCAuLiAiJ3MgIiAuLiBoaXRib3ggLi4gIiBmb3IgIiAuLiBzaG90LmRhbWFnZSAuLiAiISIpCgllbmQpCglsb2NhbCB6ID0ge30KCXouZGVmZW5zaXZlID0gewoJCWNtZCA9IDAsCgkJY2hlY2sgPSAwLAoJCWRlZmVuc2l2ZSA9IDAsCgkJcnVuID0gZnVuY3Rpb24oYXJnKQoJCQl6LmRlZmVuc2l2ZS5jbWQgPSBhcmcuY29tbWFuZF9udW1iZXIKCQkJbGFkZGVyID0gKGVudGl0eS5nZXRfcHJvcCh6LCAibV9Nb3ZlVHlwZSIpID09IDkpCgkJZW5kLAoJCXByZWRpY3QgPSBmdW5jdGlvbihhcmcpCgkJCWlmIGFyZy5jb21tYW5kX251bWJlciA9PSB6LmRlZmVuc2l2ZS5jbWQgdGhlbgoJCQkJbG9jYWwgdGlja2Jhc2UgPSBlbnRpdHkuZ2V0X3Byb3AoZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKSwgIm1fblRpY2tCYXNlIikKCQkJCXouZGVmZW5zaXZlLmRlZmVuc2l2ZSA9IG1hdGguYWJzKHRpY2tiYXNlIC0gei5kZWZlbnNpdmUuY2hlY2spCgkJCQl6LmRlZmVuc2l2ZS5jaGVjayA9IG1hdGgubWF4KHRpY2tiYXNlLCB6LmRlZmVuc2l2ZS5jaGVjayBvciAwKQoJCQkJei5kZWZlbnNpdmUuY21kID0gMAoJCQllbmQKCQllbmQKCX0KCWNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soImxldmVsX2luaXQiLCBmdW5jdGlvbigpCgkJei5kZWZlbnNpdmUuY2hlY2ssIHouZGVmZW5zaXZlLmRlZmVuc2l2ZSA9IDAsIDAKCWVuZCkKCWxvY2FsIHNjb3BlX2ZpeCA9IGZhbHNlCglsb2NhbCBzY29wZV9pbnQgPSAwCglsb2NhbCBzaGlmdF9pbnQgPSAwCglsb2NhbCBsaXN0X3NoaWZ0ID0gKGZ1bmN0aW9uKCkKCQlsb2NhbCBpbmRleCwgbWF4ID0geyB9LCAxNgoJCWZvciBpPTEsIG1heCBkbwoJCQlpbmRleFsjaW5kZXgrMV0gPSAwCgkJCWlmIGkgPT0gbWF4IHRoZW4KCQkJCXJldHVybiBpbmRleAoJCQllbmQKCQllbmQKCWVuZCkoKQoJei5kdHNoaWZ0ID0gZnVuY3Rpb24oKQoJCWxvY2FsIGxvY2FsX3BsYXllciA9IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkKCQlsb2NhbCBzaW1fdGltZSA9IGVudGl0eS5nZXRfcHJvcChsb2NhbF9wbGF5ZXIsICJtX2ZsU2ltdWxhdGlvblRpbWUiKQoJCWlmIGxvY2FsX3BsYXllciA9PSBuaWwgb3Igc2ltX3RpbWUgPT0gbmlsIHRoZW4KCQkJcmV0dXJuCgkJZW5kCgkJbG9jYWwgdGlja19jb3VudCA9IGdsb2JhbHMudGlja2NvdW50KCkKCQlsb2NhbCBzaGlmdGVkID0gbWF0aC5tYXgodW5wYWNrKGxpc3Rfc2hpZnQpKQoJCXNoaWZ0X2ludCA9IHNoaWZ0ZWQgPCAwIGFuZCBtYXRoLmFicyhzaGlmdGVkKSBvciAwCgkJbGlzdF9zaGlmdFsjbGlzdF9zaGlmdCsxXSA9IHNpbV90aW1lL2dsb2JhbHMudGlja2ludGVydmFsKCkgLSB0aWNrX2NvdW50CgkJdGFibGUucmVtb3ZlKGxpc3Rfc2hpZnQsIDEpCgllbmQKCWNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soIm5ldF91cGRhdGVfc3RhcnQiLCB6LmR0c2hpZnQpCgljbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKCJydW5fY29tbWFuZCIsIHouZGVmZW5zaXZlLnJ1bikKCWNsaWVudC5zZXRfZXZlbnRfY2FsbGJhY2soInByZWRpY3RfY29tbWFuZCIsIHouZGVmZW5zaXZlLnByZWRpY3QpCglsb2NhbCBhbmlta2V5cyA9IHsKCQlkdCA9IDAsCgkJZHVjayA9IDAsCgkJaGlkZSA9IDAsCgkJc2FmZSA9IDAsCgkJYmFpbSA9IDAsCgkJZnMgPSAwCgl9Cglsb2NhbCBncmFkaWVudCA9IGZ1bmN0aW9uKHIxLCBnMSwgYjEsIGExLCByMiwgZzIsIGIyLCBhMiwgdGV4dCkKCQlsb2NhbCBvdXRwdXQgPSAnJwoJCWxvY2FsIGxlbiA9ICN0ZXh0LTEKCQlsb2NhbCByaW5jID0gKHIyIC0gcjEpIC8gbGVuCgkJbG9jYWwgZ2luYyA9IChnMiAtIGcxKSAvIGxlbgoJCWxvY2FsIGJpbmMgPSAoYjIgLSBiMSkgLyBsZW4KCQlsb2NhbCBhaW5jID0gKGEyIC0gYTEpIC8gbGVuCgkJZm9yIGk9MSwgbGVuKzEgZG8KCQkJb3V0cHV0ID0gb3V0cHV0IC4uICgnXGElMDJ4JTAyeCUwMnglMDJ4JXMnKTpmb3JtYXQocjEsIGcxLCBiMSwgYTEsIHRleHQ6c3ViKGksIGkpKQoJCQlyMSA9IHIxICsgcmluYwoJCQlnMSA9IGcxICsgZ2luYwoJCQliMSA9IGIxICsgYmluYwoJCQlhMSA9IGExICsgYWluYwoJCWVuZAoJCXJldHVybiBvdXRwdXQKCWVuZAoJei5pdGVtcyA9IHt9Cgl6Lml0ZW1zLmtleXMgPSB7IAoJCWR0ID0ge3VpLnJlZmVyZW5jZSgicmFnZSIsICJhaW1ib3QiLCAiZG91YmxlIHRhcCIpfSwKICAgICAgICBocyA9IHt1aS5yZWZlcmVuY2UoImFhIiwgIm90aGVyIiwgIm9uIHNob3QgYW50aS1haW0iKX0sCgkJZmQgPSB7dWkucmVmZXJlbmNlKCJyYWdlIiwgIm90aGVyIiwgImR1Y2sgcGVlayBhc3Npc3QiKX0sCgkJc3AgPSB7dWkucmVmZXJlbmNlKCJyYWdlIiwgImFpbWJvdCIsICJmb3JjZSBzYWZlIHBvaW50Iil9LAoJCWZiID0ge3VpLnJlZmVyZW5jZSgicmFnZSIsICJhaW1ib3QiLCAiZm9yY2UgYm9keSBhaW0iKX0KICAgIH0KICAgIGxvY2FsIGxpbWl0ZmwgPSB1aS5yZWZlcmVuY2UoImFhIiwgImZha2UgbGFnIiwgImxpbWl0IikKICAgIGxvY2FsIGxlZ3MgPSB1aS5yZWZlcmVuY2UoImFhIiwgIm90aGVyIiwgImxlZyBtb3ZlbWVudCIpCiAgICBsb2NhbCBzcGFtbWVyID0gMAoJdGJsLnRpY2tfYWEgPSAtMjE0NzQ4MzUwMAoJdGJsLmxpc3RfYWEgPSB7fQoJdGJsLnJlc2V0X2FhID0gZmFsc2UKCXRibC5kZWZlbnNpdmVfYWEgPSAxMzM3Cgl0YmwuY2FsbGJhY2tzID0gewogICAgICAgIFsiZnJlZXN0YW5kIl0gPSBmdW5jdGlvbigpCiAgICAgICAgICAgIGxvY2FsIHJlc3VsdCA9IDAKICAgICAgICAgICAgbG9jYWwgcGxheWVyID0gY2xpZW50LmN1cnJlbnRfdGhyZWF0KCkKICAgICAgICAgICAgaWYgcGxheWVyIH49IG5pbCBhbmQgbm90IGVuZW15X3Zpc2libGUocGxheWVyKSB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBseCwgbHksIGx6ID0gZW50aXR5LmdldF9wcm9wKGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCksICJtX3ZlY09yaWdpbiIpCiAgICAgICAgICAgICAgICBsb2NhbCBlbmVteXgsIGVuZW15eSwgZW5lbXl6ID0gZW50aXR5LmdldF9wcm9wKHBsYXllciwgIm1fdmVjT3JpZ2luIikKICAgICAgICAgICAgICAgIGxvY2FsIHlhdyA9IGNhbGNhbmdsZShseCwgbHksIGVuZW15eCwgZW5lbXl5KQogICAgICAgICAgICAgICAgbG9jYWwgZGlyX3gsIGRpcl95ID0gYW5nbGVfdmVjdG9yKDAsICh5YXcgKyA5MCkpCiAgICAgICAgICAgICAgICBsb2NhbCBlbmRfeCA9IGx4ICsgZGlyX3ggKiA1NQogICAgICAgICAgICAgICAgbG9jYWwgZW5kX3kgPSBseSArIGRpcl95ICogNTUKICAgICAgICAgICAgICAgIGxvY2FsIGVuZF96ID0gbHogKyA4MAogICAgICAgICAgICAgICAgbG9jYWwgaW5kZXgsIGRhbWFnZSA9IGNsaWVudC50cmFjZV9idWxsZXQocGxheWVyLCBlbmVteXgsIGVuZW15eSwgZW5lbXl6ICsgNzAsIGVuZF94LCBlbmRfeSwgZW5kX3osdHJ1ZSkKICAgICAgICAgICAgICAgIGlmIGRhbWFnZSA+IDAgdGhlbiByZXN1bHQgPSAxIGVuZAogICAgICAgICAgICAgICAgZGlyX3gsIGRpcl95ID0gYW5nbGVfdmVjdG9yKDAsICh5YXcgKyAtOTApKQogICAgICAgICAgICAgICAgZW5kX3ggPSBseCArIGRpcl94ICogNTUKICAgICAgICAgICAgICAgIGVuZF95ID0gbHkgKyBkaXJfeSAqIDU1CiAgICAgICAgICAgICAgICBlbmRfeiA9IGx6ICsgODAKICAgICAgICAgICAgICAgIGluZGV4LCBkYW1hZ2UgPSBjbGllbnQudHJhY2VfYnVsbGV0KHBsYXllciwgZW5lbXl4LCBlbmVteXksIGVuZW15eiArIDcwLCBlbmRfeCwgZW5kX3ksIGVuZF96LHRydWUpCiAgICAgICAgICAgICAgICBpZiBkYW1hZ2UgPiAwIHRoZW4gCiAgICAgICAgICAgICAgICAgICAgaWYgcmVzdWx0ID09IDEgdGhlbiAKICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gMCAKICAgICAgICAgICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSAtMSAKICAgICAgICAgICAgICAgICAgICBlbmQgCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIHRibC5hbnRpYWltLmZzID0gcmVzdWx0CiAgICAgICAgZW5kLAogICAgICAgIFsiY29tbWFuZCJdID0gZnVuY3Rpb24oYXJnKQogICAgICAgICAgICBsb2NhbCBteXNlbGYgPSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpCgkJCWxvY2FsIGFpciA9IGJpdC5iYW5kKGVudGl0eS5nZXRfcHJvcChteXNlbGYsICJtX2ZGbGFncyIpLCAxKSA9PSAwCiAgICAgICAgICAgIGxvY2FsIHh2LCB5diwgenYgPSBlbnRpdHkuZ2V0X3Byb3AobXlzZWxmLCAibV92ZWNWZWxvY2l0eSIpCgkJCWxvY2FsIGR1Y2sgPSAoZW50aXR5LmdldF9wcm9wKG15c2VsZiwgIm1fZmxEdWNrQW1vdW50IikgPiAwLjEpCiAgICAgICAgICAgIGxvY2FsIHRlYW0gPSAoZW50aXR5LmdldF9wcm9wKG15c2VsZiwgIm1faVRlYW1OdW0iKSA9PSAyIGFuZCAidCIgb3IgImN0IikKICAgICAgICAgICAgbG9jYWwgZmFrZWxhZyA9IG5vdCAoKHVpLmdldCh0YmwucmVmcy5kdFsxXSkgYW5kIHVpLmdldCh0YmwucmVmcy5kdFsyXSkpIG9yICh1aS5nZXQodGJsLnJlZnMuaGlkZVsxXSkgYW5kIHVpLmdldCh0YmwucmVmcy5oaWRlWzJdKSkpCiAgICAgICAgICAgIGxvY2FsIHJlYWxfc3RhdGUgPSB0YmwuZ2V0c3RhdGUoYXJnLmluX2p1bXAgPT0gMSBvciBhaXIsIGR1Y2ssIG1hdGguc3FydCh4dip4diArIHl2Knl2ICsgenYqenYpLCAodWkuZ2V0KHRibC5yZWZzLnNsb3dbMV0pIGFuZCB1aS5nZXQodGJsLnJlZnMuc2xvd1syXSkpKQogICAgICAgICAgICBsb2NhbCBoaWRlc2hvdCA9ICgodWkuZ2V0KHRibC5yZWZzLmhpZGVbMV0pIGFuZCB1aS5nZXQodGJsLnJlZnMuaGlkZVsyXSkpIGFuZCBub3QgKHVpLmdldCh0YmwucmVmcy5kdFsxXSkgYW5kIHVpLmdldCh0YmwucmVmcy5kdFsyXSkpKQogICAgICAgICAgICBsb2NhbCBzdGF0ZSA9IHJlYWxfc3RhdGUKICAgICAgICAgICAgaWYgZmFrZWxhZyBhbmQgdWkuZ2V0KGFhWyJmYWtlIGxhZyJdW3RlYW1dWyJ0eXBlIl0pIH49ICJkaXNhYmxlZCIgdGhlbgogICAgICAgICAgICAgICAgc3RhdGUgPSAiZmFrZSBsYWciCiAgICAgICAgICAgIGVsc2VpZiBoaWRlc2hvdCBhbmQgdWkuZ2V0KGFhWyJoaWRlIHNob3QiXVt0ZWFtXVsidHlwZSJdKSB+PSAiZGlzYWJsZWQiIHRoZW4KICAgICAgICAgICAgICAgIHN0YXRlID0gImhpZGUgc2hvdCIKICAgICAgICAgICAgZWxzZWlmIHVpLmdldChhYVtzdGF0ZV1bdGVhbV1bInR5cGUiXSkgPT0gImRpc2FibGVkIiB0aGVuCiAgICAgICAgICAgICAgICBzdGF0ZSA9ICJnbG9iYWwiCiAgICAgICAgICAgIGVsc2UgZW5kCiAgICAgICAgICAgIGxvY2FsIGVuZW15ID0gY2xpZW50LmN1cnJlbnRfdGhyZWF0KCkKICAgICAgICAgICAgbG9jYWwgbWVudXRibCA9IGFhW3N0YXRlXVt0ZWFtXQogICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLmVuYWJsZWRbMV0sIHRydWUpCgkJCXVpLnNldCh0YmwuaXRlbXMuYmFzZVsxXSwgImF0IHRhcmdldHMiKQoJCQl1aS5zZXQodGJsLml0ZW1zLnBpdGNoWzFdLCAiZGVmYXVsdCIpCgkJCXVpLnNldCh0YmwuaXRlbXMueWF3WzFdLCAiMTgwIikKICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5mc2JvZHlbMV0sIGZhbHNlKQoJCQl1aS5zZXQodGJsLml0ZW1zLmVkZ2VbMV0sIGZhbHNlKQoJCQl1aS5zZXQodGJsLml0ZW1zLmZzWzFdLCBmYWxzZSkKCQkJdWkuc2V0KHRibC5pdGVtcy5mc1syXSwgImFsd2F5cyBvbiIpCiAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMucm9sbFsxXSwgMCkKICAgICAgICAgICAgYXJnLnJvbGwgPSB1aS5nZXQobWVudVsiYW50aSBhaW1ib3QiXVsiZmVhdHVyZXMiXVsicm9sbCJdKQogICAgICAgICAgICBsb2NhbCBteXdlYXBvbiA9IGVudGl0eS5nZXRfcGxheWVyX3dlYXBvbihteXNlbGYpCiAgICAgICAgICAgIGlmIHVpLmdldChtZW51WyJhbnRpIGFpbWJvdCJdWyJmZWF0dXJlcyJdWyJsZWdpdCJdKSB+PSAib2ZmIiBhbmQgYXJnLmluX3VzZSA9PSAxIGFuZCBlbnRpdHkuZ2V0X2NsYXNzbmFtZShteXdlYXBvbikgfj0gIkNDNCIgdGhlbgogICAgICAgICAgICAgICAgaWYgdGJsLmNvbnRhaW5zKHVpLmdldChtZW51WyJhbnRpIGFpbWJvdCJdWyJmZWF0dXJlcyJdWyJmaXgiXSksICJnZW5lcmljIikgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIGFyZy5jaG9rZWRjb21tYW5kcyB+PSAxIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgYXJnLmluX3VzZSA9IDAKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBhcmcuaW5fdXNlID0gMAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBpZiB0YmwuY29udGFpbnModWkuZ2V0KG1lbnVbImFudGkgYWltYm90Il1bImZlYXR1cmVzIl1bImZpeCJdKSwgImJvbWJzaXRlIikgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIHBsYXllcl94LCBwbGF5ZXJfeSwgcGxheWVyX3ogPSBlbnRpdHkuZ2V0X3Byb3AobXlzZWxmLCAibV92ZWNPcmlnaW4iKQogICAgICAgICAgICAgICAgICAgIGxvY2FsIGRpc3RhbmNlX2JvbWIgPSAxMDAKICAgICAgICAgICAgICAgICAgICBsb2NhbCBib21iID0gZW50aXR5LmdldF9hbGwoIkNQbGFudGVkQzQiKVsxXQogICAgICAgICAgICAgICAgICAgIGxvY2FsIGJvbWJfeCwgYm9tYl95LCBib21iX3ogPSBlbnRpdHkuZ2V0X3Byb3AoYm9tYiwgIm1fdmVjT3JpZ2luIikKICAgICAgICAgICAgICAgICAgICBpZiBib21iX3ggfj0gbmlsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2VfYm9tYiA9IGRpc3RhbmNlKGJvbWJfeCwgYm9tYl95LCBib21iX3osIHBsYXllcl94LCBwbGF5ZXJfeSwgcGxheWVyX3opCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgZGlzdGFuY2VfaG9zdGFnZSA9IDEwMAogICAgICAgICAgICAgICAgICAgIGxvY2FsIGhvc3RhZ2UgPSBlbnRpdHkuZ2V0X2FsbCgiQ1BsYW50ZWRDNCIpWzFdCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgaG9zdGFnZV94LCBob3N0YWdlX3ksIGhvc3RhZ2VfeiA9IGVudGl0eS5nZXRfcHJvcChib21iLCAibV92ZWNPcmlnaW4iKQogICAgICAgICAgICAgICAgICAgIGlmIGhvc3RhZ2VfeCB+PSBuaWwgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZV9ob3N0YWdlID0gZGlzdGFuY2UoaG9zdGFnZV94LCBob3N0YWdlX3ksIGhvc3RhZ2VfeiwgcGxheWVyX3gsIHBsYXllcl95LCBwbGF5ZXJfeikKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2VfYm9tYiA8IDY5KSBvciAoZGlzdGFuY2VfaG9zdGFnZSA8IDY5KSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGFyZy5pbl91c2UgPSAxCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMuYmFzZVsxXSwgImxvY2FsIHZpZXciKQoJCQkgICAgdWkuc2V0KHRibC5pdGVtcy5waXRjaFsxXSwgIm9mZiIpCiAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLmZzYm9keVsxXSwgdHJ1ZSkKICAgICAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMueWF3WzJdLCAxODApCiAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLmppdHRlclsxXSwgIm9mZiIpCiAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLmppdHRlclsyXSwgMCkKICAgICAgICAgICAgICAgIGlmIHVpLmdldChtZW51WyJhbnRpIGFpbWJvdCJdWyJmZWF0dXJlcyJdWyJsZWdpdCJdKSA9PSAiZGVmYXVsdCIgb3IgdGJsLmFudGlhaW0uZnMgPT0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5ib2R5WzFdLCB1aS5nZXQobWVudVsiYW50aSBhaW1ib3QiXVsiZmVhdHVyZXMiXVsibGVnaXQiXSkgPT0gImRlZmF1bHQiIGFuZCAib3Bwb3NpdGUiIG9yICJqaXR0ZXIiKQogICAgICAgICAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMuYm9keVsyXSwgMCkKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLmJvZHlbMV0sICJzdGF0aWMiKQogICAgICAgICAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMuYm9keVsyXSwgdGJsLmFudGlhaW0uZnMgPT0gMSBhbmQgLTE4MCBvciAxODApCiAgICAgICAgICAgICAgICAgICAgaWYgYXJnLmNob2tlZGNvbW1hbmRzID09IDAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBhcmcuYWxsb3dfc2VuZF9wYWNrZXQgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBhcmcuZm9yY2VfZGVmZW5zaXZlID0gdHJ1ZQogICAgICAgICAgICAgICAgcmV0dXJuIG5pbAogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgdWkuZ2V0KG1lbnVbImFudGkgYWltYm90Il1bImZlYXR1cmVzIl1bImJhY2tzdGFiIl0pIH49ICJvZmYiIGFuZCBlbmVteSB+PSBuaWwgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgd2VhcG9uID0gZW50aXR5LmdldF9wbGF5ZXJfd2VhcG9uKGVuZW15KQogICAgICAgICAgICAgICAgaWYgd2VhcG9uIH49IG5pbCBhbmQgZW50aXR5LmdldF9jbGFzc25hbWUod2VhcG9uKSA9PSAiQ0tuaWZlIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgZXgsZXksZXogPSBlbnRpdHkuZ2V0X29yaWdpbihlbmVteSkKCQkJCQlsb2NhbCBseCxseSxseiA9IGVudGl0eS5nZXRfb3JpZ2luKG15c2VsZikKCQkJCQlpZiBleCB+PSBuaWwgYW5kIGx4IH49IG5pbCB0aGVuIAoJCQkJCQlmb3IgdGlja3MgPSAxLDkgZG8KCQkJCQkJCWxvY2FsIHRleCx0ZXksdGV6ID0gZXh0cmFwb2xhdGUobXlzZWxmLHRpY2tzLGx4LGx5LGx6KQoJCQkJCQkJbG9jYWwgZGlzdGFuY2UgPSBkaXN0YW5jZShleCxleSxleix0ZXgsdGV5LHRleikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG1hdGguYWJzKGRpc3RhbmNlKSA8IHVpLmdldChtZW51WyJhbnRpIGFpbWJvdCJdWyJmZWF0dXJlcyJdWyJkaXN0YW5jZSJdKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy55YXdbMl0sIHVpLmdldChtZW51WyJhbnRpIGFpbWJvdCJdWyJmZWF0dXJlcyJdWyJiYWNrc3RhYiJdKSA9PSAiZm9yd2FyZCIgYW5kIDE4MCBvciBjbGllbnQucmFuZG9tX2ludCgtMTgwLCAxODApKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMuaml0dGVyWzFdLCAib2ZmIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLmppdHRlclsyXSwgMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLmJvZHlbMV0sIHVpLmdldChtZW51WyJhbnRpIGFpbWJvdCJdWyJmZWF0dXJlcyJdWyJiYWNrc3RhYiJdKSA9PSAicmFuZG9tIiBhbmQgImppdHRlciIgb3IgIm9wcG9zaXRlIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLmJvZHlbMl0sIDApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnLmZvcmNlX2RlZmVuc2l2ZSA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmlsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGlmIHVpLmdldChtZW51dGJsWyJ0eXBlIl0pID09ICJub3JtYWwiIHRoZW4KICAgICAgICAgICAgICAgIG1lbnV0YmwgPSBtZW51dGJsW3VpLmdldChtZW51dGJsWyJ0eXBlIl0pXQogICAgICAgICAgICAgICAgbG9jYWwgeWF3ID0gdGJsLmFudGlhaW0ubWFudWFsLmFhCiAgICAgICAgICAgICAgICBpZiB0YmwuY29udGFpbnModWkuZ2V0KG1lbnV0YmxbIm1vZGUiXSksICJ5YXciKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgeWF3ID0gdGJsLmFudGlhaW0ubWFudWFsLmFhICsgdWkuZ2V0KG1lbnV0YmxbInlhdyJdKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBpZiB0YmwuY29udGFpbnModWkuZ2V0KG1lbnV0YmxbIm1vZGUiXSksICJsZWZ0IHJpZ2h0IikgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIG1ldGhvZCA9IGFyZy5jaG9rZWRjb21tYW5kcyA9PSAwCiAgICAgICAgICAgICAgICAgICAgaWYgdWkuZ2V0KG1lbnV0YmxbIm1ldGhvZCJdKSA9PSAibHVhc2Vuc2UiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kID0gYXJnLmNob2tlZGNvbW1hbmRzIH49IDAKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBpZiBtZXRob2QgYW5kIHVpLmdldChtZW51dGJsWyJib2R5Il0pIH49ICJsdWFzZW5zZSIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBpZiBtYXRoLm1heCgtNjAsIG1hdGgubWluKDYwLCBtYXRoLmZsb29yKChlbnRpdHkuZ2V0X3Byb3AobXlzZWxmLCJtX2ZsUG9zZVBhcmFtZXRlciIsIDExKSBvciAwKSoxMjAtNjArMC41KSkpID4gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLnlhd1syXSwgdGJsLmNsYW1wKHlhdyArIHVpLmdldChtZW51dGJsWyJyaWdodCJdKSkpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMueWF3WzJdLCB0YmwuY2xhbXAoeWF3ICsgdWkuZ2V0KG1lbnV0YmxbImxlZnQiXSkpKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLnlhd1syXSwgdGJsLmNsYW1wKHlhdykpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMuaml0dGVyWzFdLCB1aS5nZXQobWVudXRibFsiaml0dGVyIl0pKQogICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5qaXR0ZXJbMl0sIHVpLmdldChtZW51dGJsWyJqaXR0ZXJfc2xpZGVyIl0pKQogICAgICAgICAgICAgICAgaWYgdWkuZ2V0KG1lbnV0YmxbImJvZHkiXSkgfj0gImx1YXNlbnNlIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5ib2R5WzFdLCB1aS5nZXQobWVudXRibFsiYm9keSJdKSkKICAgICAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLmJvZHlbMl0sIHVpLmdldChtZW51dGJsWyJib2R5X3NsaWRlciJdKSkKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLmJvZHlbMV0sICJzdGF0aWMiKQogICAgICAgICAgICAgICAgICAgIGxvY2FsIGZha2UgPSAodWkuZ2V0KG1lbnV0YmxbImN1c3RvbV9zbGlkZXIiXSkrMSkgKiAyCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgbHVhc2Vuc2VmYWtlID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICBpZiBhcmcuY29tbWFuZF9udW1iZXIgJSBjbGllbnQucmFuZG9tX2ludCgzLDYpID09IDEgdGhlbgoJCQkJCQl0YmwuYW50aWFpbS5yZWFkeSA9IHRydWUKICAgICAgICAgICAgICAgICAgICBlbmQKCQkJCQlpZiB0YmwuYW50aWFpbS5yZWFkeSBhbmQgYXJnLmNob2tlZGNvbW1hbmRzID09IDAgdGhlbgoJCQkJCQl0YmwuYW50aWFpbS5yZWFkeSA9IGZhbHNlCgkJCQkJCXRibC5hbnRpYWltLmx1YXNlbnNlZmFrZSA9IG5vdCB0YmwuYW50aWFpbS5sdWFzZW5zZWZha2UKICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5ib2R5WzJdLCB0YmwuYW50aWFpbS5sdWFzZW5zZWZha2UgYW5kIC1mYWtlIG9yIGZha2UpCiAgICAgICAgICAgICAgICAgICAgICAgIGx1YXNlbnNlZmFrZSA9IHRydWUKCQkJCQllbmQKICAgICAgICAgICAgICAgICAgICBpZiB0YmwuY29udGFpbnModWkuZ2V0KG1lbnV0YmxbIm1vZGUiXSksICJsZWZ0IHJpZ2h0IikgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBpZiBsdWFzZW5zZWZha2UgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGJsLmFudGlhaW0ubHVhc2Vuc2VmYWtlIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLnlhd1syXSwgdGJsLmNsYW1wKHlhdyArIHVpLmdldChtZW51dGJsWyJyaWdodCJdKSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy55YXdbMl0sIHRibC5jbGFtcCh5YXcgKyB1aS5nZXQobWVudXRibFsibGVmdCJdKSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGlmIHVpLmdldChtZW51dGJsWyJkZWZlbnNpdmUiXSkgPT0gImx1YXNlbnNlIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgYXJnLmZvcmNlX2RlZmVuc2l2ZSA9IGFyZy5jb21tYW5kX251bWJlciAlIDMgfj0gMSBvciBhcmcud2VhcG9uc2VsZWN0IH49IDAgb3IgYXJnLnF1aWNrX3N0b3AgPT0gMQogICAgICAgICAgICAgICAgZWxzZWlmIHVpLmdldChtZW51dGJsWyJkZWZlbnNpdmUiXSkgPT0gImFsd2F5cyBvbiIgdGhlbgogICAgICAgICAgICAgICAgICAgIGFyZy5mb3JjZV9kZWZlbnNpdmUgPSB0cnVlCiAgICAgICAgICAgICAgICBlbHNlIGVuZAogICAgICAgICAgICBlbHNlaWYgdWkuZ2V0KG1lbnV0YmxbInR5cGUiXSkgPT0gImx1YXNlbnNlIiB0aGVuCiAgICAgICAgICAgICAgICBtZW51dGJsID0gbWVudXRibFt1aS5nZXQobWVudXRibFsidHlwZSJdKV0KICAgICAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMuaml0dGVyWzFdLCAib2ZmIikKICAgICAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMuYm9keVsxXSwgInN0YXRpYyIpCiAgICAgICAgICAgICAgICBpZiBhcmcuY29tbWFuZF9udW1iZXIgJSAodWkuZ2V0KG1lbnV0YmxbImx1YXNlbnNlIl0pKzErMSkgPT0gMSB0aGVuCgkJCQkJdGJsLmFudGlhaW0ucmVhZHkgPSB0cnVlCiAgICAgICAgICAgICAgICBlbmQKCQkJCWlmIHRibC5hbnRpYWltLnJlYWR5IGFuZCBhcmcuY2hva2VkY29tbWFuZHMgPT0gMCB0aGVuCgkJCQkJbG9jYWwgZmFrZSA9ICh1aS5nZXQobWVudXRibFsiZmFrZSJdKSsxKSAqIDIKCQkJCQl0YmwuYW50aWFpbS5yZWFkeSA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgdGJsLmFudGlhaW0ubHVhc2Vuc2VmYWtlID0gbm90IHRibC5hbnRpYWltLmx1YXNlbnNlZmFrZQogICAgICAgICAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMuYm9keVsyXSwgdGJsLmFudGlhaW0ubHVhc2Vuc2VmYWtlIGFuZCAtZmFrZSBvciBmYWtlKQogICAgICAgICAgICAgICAgICAgIGxvY2FsIHlhdyA9IHRibC5hbnRpYWltLm1hbnVhbC5hYQogICAgICAgICAgICAgICAgICAgIGlmIHRibC5jb250YWlucyh1aS5nZXQobWVudXRibFsibW9kZSJdKSwgInlhdyIpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgeWF3ID0gdGJsLmFudGlhaW0ubWFudWFsLmFhICsgdWkuZ2V0KG1lbnV0YmxbInlhdyJdKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGlmIHRibC5jb250YWlucyh1aS5nZXQobWVudXRibFsibW9kZSJdKSwgImxlZnQgcmlnaHQiKSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRibC5hbnRpYWltLmx1YXNlbnNlZmFrZSB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLnlhd1syXSwgdGJsLmNsYW1wKHlhdyArIHVpLmdldChtZW51dGJsWyJyaWdodCJdKSkpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMueWF3WzJdLCB0YmwuY2xhbXAoeWF3ICsgdWkuZ2V0KG1lbnV0YmxbImxlZnQiXSkpKQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMueWF3WzJdLCB0YmwuY2xhbXAoeWF3KSkKICAgICAgICAgICAgICAgICAgICBlbmQKCQkJCWVuZAogICAgICAgICAgICAgICAgaWYgdWkuZ2V0KG1lbnV0YmxbImRlZmVuc2l2ZSJdKSA9PSAibHVhc2Vuc2UiIHRoZW4KICAgICAgICAgICAgICAgICAgICBhcmcuZm9yY2VfZGVmZW5zaXZlID0gYXJnLmNvbW1hbmRfbnVtYmVyICUgMyB+PSAxIG9yIGFyZy53ZWFwb25zZWxlY3Qgfj0gMCBvciBhcmcucXVpY2tfc3RvcCA9PSAxCiAgICAgICAgICAgICAgICBlbHNlaWYgdWkuZ2V0KG1lbnV0YmxbImRlZmVuc2l2ZSJdKSA9PSAiYWx3YXlzIG9uIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgYXJnLmZvcmNlX2RlZmVuc2l2ZSA9IHRydWUKICAgICAgICAgICAgICAgIGVsc2UgZW5kCgkJCWVsc2VpZiB1aS5nZXQobWVudXRibFsidHlwZSJdKSA9PSAiYWR2YW5jZWQiIHRoZW4KICAgICAgICAgICAgICAgIG1lbnV0YmwgPSBtZW51dGJsW3VpLmdldChtZW51dGJsWyJ0eXBlIl0pXQogICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5qaXR0ZXJbMV0sICJvZmYiKQogICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5ib2R5WzFdLCAic3RhdGljIikKICAgICAgICAgICAgICAgIGxvY2FsIHRyaWdnZXIgPSBjbGllbnQucmFuZG9tX2ludCgzLDYpCgkJCQlpZiB1aS5nZXQobWVudXRibFsidHJpZ2dlciJdKSA9PSAiYTogYnJhbmRvbiIgdGhlbgoJCQkJCXRyaWdnZXIgPSA1CgkJCQllbmQKCQkJCWlmIHVpLmdldChtZW51dGJsWyJ0cmlnZ2VyIl0pID09ICJiOiBiZXN0IiB0aGVuCgkJCQkJdHJpZ2dlciA9IDYKCQkJCWVuZAoJCQkJaWYgdWkuZ2V0KG1lbnV0YmxbInRyaWdnZXIiXSkgPT0gImM6IGV4cGVyaW1lbnRhbCIgdGhlbgoJCQkJCWlmIHRyaWdnZXIgPT0gMSBvciB0cmlnZ2VyID09IDErMSB0aGVuCgkJCQkJCXRyaWdnZXIgPSA5CgkJCQkJZWxzZQoJCQkJCQl0cmlnZ2VyID0gdHJpZ2dlciArIDEKCQkJCQllbmQKCQkJCWVuZAoJCQkJaWYgYXJnLmNvbW1hbmRfbnVtYmVyICUgdHJpZ2dlciA9PSAxIHRoZW4KCQkJCQl0YmwuYXV0byA9IG5vdCB0YmwuYXV0bwoJCQkJCWlmIHRibC5hdXRvIHRoZW4KCQkJCQkJdWkuc2V0KHRibC5pdGVtcy5ib2R5WzJdLCAtMTIzKQoJCQkJCQl1aS5zZXQodGJsLml0ZW1zLnlhd1syXSwgdGJsLmNsYW1wKHVpLmdldChtZW51dGJsWyJyaWdodCJdKSArIHRibC5hbnRpYWltLm1hbnVhbC5hYSkpCgkJCQkJZWxzZQoJCQkJCQl1aS5zZXQodGJsLml0ZW1zLmJvZHlbMl0sIDEyMykKCQkJCQkJdWkuc2V0KHRibC5pdGVtcy55YXdbMl0sIHRibC5jbGFtcCh1aS5nZXQobWVudXRibFsibGVmdCJdKSArIHRibC5hbnRpYWltLm1hbnVhbC5hYSkpCgkJCQkJZW5kCgkJCQllbmQKICAgICAgICAgICAgICAgIGlmIHVpLmdldChtZW51dGJsWyJkZWZlbnNpdmUiXSkgPT0gImx1YXNlbnNlIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgYXJnLmZvcmNlX2RlZmVuc2l2ZSA9IGFyZy5jb21tYW5kX251bWJlciAlIDMgfj0gMSBvciBhcmcud2VhcG9uc2VsZWN0IH49IDAgb3IgYXJnLnF1aWNrX3N0b3AgPT0gMQogICAgICAgICAgICAgICAgZWxzZWlmIHVpLmdldChtZW51dGJsWyJkZWZlbnNpdmUiXSkgPT0gImFsd2F5cyBvbiIgdGhlbgogICAgICAgICAgICAgICAgICAgIGFyZy5mb3JjZV9kZWZlbnNpdmUgPSB0cnVlCiAgICAgICAgICAgICAgICBlbHNlIGVuZAogICAgICAgICAgICBlbHNlaWYgdWkuZ2V0KG1lbnV0YmxbInR5cGUiXSkgPT0gImF1dG8iIHRoZW4KICAgICAgICAgICAgICAgIG1lbnV0YmwgPSBtZW51dGJsW3VpLmdldChtZW51dGJsWyJ0eXBlIl0pXQogICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5qaXR0ZXJbMV0sICJyYW5kb20iKQogICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5ib2R5WzFdLCAic3RhdGljIikKICAgICAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMueWF3WzJdLCB0YmwuYW50aWFpbS5tYW51YWwuYWEpCiAgICAgICAgICAgICAgICBsb2NhbCBjaGVjayA9IGFyZy5jb21tYW5kX251bWJlciAlIDEwID4gNQogICAgICAgICAgICAgICAgaWYgdGJsLmFudGlhaW0uZnMgfj0gMCB0aGVuCiAgICAgICAgICAgICAgICAgICAgY2hlY2sgPSB0YmwuYW50aWFpbS5mcyB+PSAxCiAgICAgICAgICAgICAgICAgICAgdGJsLmFudGlhaW0ubGFzdCA9IGNoZWNrCiAgICAgICAgICAgICAgICAgICAgdGJsLmFudGlhaW0uY3VycmVudCA9IGNoZWNrCiAgICAgICAgICAgICAgICAgICAgdGJsLmFudGlhaW0uYWN0aXZlID0gdHJ1ZQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBpZiB1aS5nZXQobWVudXRibFsibWV0aG9kIl0pID09ICJzaW1wbGUiIGFuZCB0YmwuYW50aWFpbS5mcyA9PSAwIHRoZW4KICAgICAgICAgICAgICAgICAgICBjaGVjayA9IG5vdCB0YmwuYW50aWFpbS5sYXN0CiAgICAgICAgICAgICAgICAgICAgdGJsLmFudGlhaW0uY3VycmVudCA9IGNoZWNrCiAgICAgICAgICAgICAgICAgICAgdGJsLmFudGlhaW0uYWN0aXZlID0gdHJ1ZQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBpZiB1aS5nZXQobWVudXRibFsibWV0aG9kIl0pID09ICJsdWFzZW5zZSIgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIHRibC5hbnRpYWltLmNvdW50IHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGJsLmFudGlhaW0udGltZXIgPiB1aS5nZXQobWVudXRibFsidGltZXIiXSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGJsLmFudGlhaW0udGltZXIgPSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YmwuYW50aWFpbS5jb3VudCA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YmwuYW50aWFpbS5sb2cgPSB7fQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YmwuYW50aWFpbS50aW1lciA9IHRibC5hbnRpYWltLnRpbWVyICsgMQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKCQkJCQlpZiB0YmwuYW50aWFpbS5mcyA9PSAwIHRoZW4KCQkJCQkJaWYgYXJnLmNvbW1hbmRfbnVtYmVyICUgMyA9PSAxIHRoZW4KCQkJCQkJCXRibC5hbnRpYWltLnJlYWR5ID0gdHJ1ZQoJCQkJCQllbmQKCQkJCQkJaWYgdGJsLmFudGlhaW0ucmVhZHkgYW5kIGFyZy5jaG9rZWRjb21tYW5kcyA9PSAwIHRoZW4KCQkJCQkJCXRibC5hbnRpYWltLnJlYWR5ID0gZmFsc2UKCQkJCQkJCXRibC5hbnRpYWltLmx1YXNlbnNlZmFrZSA9IG5vdCB0YmwuYW50aWFpbS5sdWFzZW5zZWZha2UKCQkJCQkJZW5kCgkJCQkJCWxvY2FsIHlhdyA9IHRibC5hbnRpYWltLm1hbnVhbC5hYQoJCQkJCQljaGVjayA9IHRibC5hbnRpYWltLmx1YXNlbnNlZmFrZQoJCQkJCQlpZiB0YmwuYW50aWFpbS5sdWFzZW5zZWZha2UgdGhlbgoJCQkJCQkJdWkuc2V0KHRibC5pdGVtcy55YXdbMl0sIHRibC5jbGFtcCh5YXcgKyB1aS5nZXQobWVudXRibFsicmlnaHQiXSkpKQoJCQkJCQllbHNlCgkJCQkJCQl1aS5zZXQodGJsLml0ZW1zLnlhd1syXSwgdGJsLmNsYW1wKHlhdyArIHVpLmdldChtZW51dGJsWyJsZWZ0Il0pKSkKCQkJCQkJZW5kCgkJCQkJZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGlmIHVpLmdldChtZW51dGJsWyJhbnRpYmYiXSkgPT0gInllcyIgdGhlbgogICAgICAgICAgICAgICAgICAgIGlmIGVuZW15IH49IG5pbCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRibC5hbnRpYWltLmxvZ1tlbmVteV0gfj0gbmlsIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrID0gdGJsLmFudGlhaW0ubG9nW2VuZW15XQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5qaXR0ZXJbMl0sIGNoZWNrIGFuZCAtMyBvciAzKQogICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5ib2R5WzJdLCBjaGVjayBhbmQgLTEyMyBvciAxMjMpCiAgICAgICAgICAgICAgICBpZiB1aS5nZXQobWVudXRibFsiZGVmZW5zaXZlIl0pID09ICJsdWFzZW5zZSIgdGhlbgogICAgICAgICAgICAgICAgICAgIGFyZy5mb3JjZV9kZWZlbnNpdmUgPSBhcmcuY29tbWFuZF9udW1iZXIgJSAzIH49IDEgb3IgYXJnLndlYXBvbnNlbGVjdCB+PSAwIG9yIGFyZy5xdWlja19zdG9wID09IDEKICAgICAgICAgICAgICAgIGVsc2VpZiB1aS5nZXQobWVudXRibFsiZGVmZW5zaXZlIl0pID09ICJhbHdheXMgb24iIHRoZW4KICAgICAgICAgICAgICAgICAgICBhcmcuZm9yY2VfZGVmZW5zaXZlID0gdHJ1ZQogICAgICAgICAgICAgICAgZWxzZSBlbmQKICAgICAgICAgICAgZWxzZSBlbmQKICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5lZGdlWzFdLCB1aS5nZXQobWVudVsiYW50aSBhaW1ib3QiXVsia2V5YmluZHMiXVsiZWRnZSJdKSkKICAgICAgICAgICAgbG9jYWwgZnJlZXN0YW5kID0gdWkuZ2V0KG1lbnVbImFudGkgYWltYm90Il1bImtleWJpbmRzIl1bImZyZWVzdGFuZCJdKQogICAgICAgICAgICBsb2NhbCBkaXNhYmxlcnMgPSB1aS5nZXQobWVudVsiYW50aSBhaW1ib3QiXVsia2V5YmluZHMiXVsiZGlzYWJsZXJzIl0pCiAgICAgICAgICAgIGlmIHRibC5jb250YWlucyhkaXNhYmxlcnMsICJhaXIiKSBhbmQgKGFyZy5pbl9qdW1wID09IDEgb3IgYWlyKSB0aGVuCiAgICAgICAgICAgICAgICBmcmVlc3RhbmQgPSBmYWxzZQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgdGJsLmNvbnRhaW5zKGRpc2FibGVycywgInNsb3ciKSBhbmQgKHVpLmdldCh0YmwucmVmcy5zbG93WzFdKSBhbmQgdWkuZ2V0KHRibC5yZWZzLnNsb3dbMl0pKSB0aGVuCiAgICAgICAgICAgICAgICBmcmVlc3RhbmQgPSBmYWxzZQogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgdGJsLmNvbnRhaW5zKGRpc2FibGVycywgImR1Y2siKSBhbmQgKGR1Y2spIHRoZW4KICAgICAgICAgICAgICAgIGZyZWVzdGFuZCA9IGZhbHNlCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBpZiB0YmwuY29udGFpbnMoZGlzYWJsZXJzLCAiZWRnZSIpIGFuZCAodWkuZ2V0KG1lbnVbImFudGkgYWltYm90Il1bImtleWJpbmRzIl1bImVkZ2UiXSkpIHRoZW4KICAgICAgICAgICAgICAgIGZyZWVzdGFuZCA9IGZhbHNlCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBpZiB0YmwuY29udGFpbnMoZGlzYWJsZXJzLCAibWFudWFsIikgYW5kICh0YmwuYW50aWFpbS5tYW51YWwuYWEgfj0gMCkgdGhlbgogICAgICAgICAgICAgICAgZnJlZXN0YW5kID0gZmFsc2UKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGlmIHRibC5jb250YWlucyhkaXNhYmxlcnMsICJmYWtlIGxhZyIpIGFuZCAoZmFrZWxhZykgdGhlbgogICAgICAgICAgICAgICAgZnJlZXN0YW5kID0gZmFsc2UKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGlmIHRibC5hbnRpYWltLm1hbnVhbC5hYSB+PSAwIHRoZW4KICAgICAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMuYmFzZVsxXSwgImxvY2FsIHZpZXciKQogICAgICAgICAgICAgICAgaWYgdWkuZ2V0KG1lbnVbImFudGkgYWltYm90Il1bImtleWJpbmRzIl1bInR5cGVfbWFudWFsIl0pIH49ICJkZWZhdWx0IiB0aGVuCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy55YXdbMl0sIHRibC5hbnRpYWltLm1hbnVhbC5hYSkKICAgICAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLmppdHRlclsxXSwgIm9mZiIpCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5qaXR0ZXJbMl0sIDApCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5ib2R5WzFdLCB1aS5nZXQobWVudVsiYW50aSBhaW1ib3QiXVsia2V5YmluZHMiXVsidHlwZV9tYW51YWwiXSkgPT0gImppdHRlciIgYW5kICJqaXR0ZXIiIG9yICJvcHBvc2l0ZSIpCiAgICAgICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5ib2R5WzJdLCAwKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBpZiB1aS5nZXQobWVudVsiYW50aSBhaW1ib3QiXVsia2V5YmluZHMiXVsidHlwZV9mcmVlc3RhbmQiXSkgfj0gImRlZmF1bHQiIGFuZCBmcmVlc3RhbmQgdGhlbgogICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy55YXdbMl0sIDApCiAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLmppdHRlclsxXSwgIm9mZiIpCiAgICAgICAgICAgICAgICB1aS5zZXQodGJsLml0ZW1zLmppdHRlclsyXSwgMCkKICAgICAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMuYm9keVsxXSwgdWkuZ2V0KG1lbnVbImFudGkgYWltYm90Il1bImtleWJpbmRzIl1bInR5cGVfZnJlZXN0YW5kIl0pID09ICJqaXR0ZXIiIGFuZCAiaml0dGVyIiBvciAib3Bwb3NpdGUiKQogICAgICAgICAgICAgICAgdWkuc2V0KHRibC5pdGVtcy5ib2R5WzJdLCAwKQogICAgICAgICAgICAgICAgYXJnLmZvcmNlX2RlZmVuc2l2ZSA9IHRydWUKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIHVpLnNldCh0YmwuaXRlbXMuZnNbMV0sIGZyZWVzdGFuZCkKCQkJbG9jYWwgZGVmZW5zaXZlY2hlY2sgPSAoei5kZWZlbnNpdmUuZGVmZW5zaXZlID4gMykgYW5kICh6LmRlZmVuc2l2ZS5kZWZlbnNpdmUgPCAxMSkKICAgICAgICAgICAgaWYgZmFrZWxhZyBvciBoaWRlc2hvdCB0aGVuCiAgICAgICAgICAgICAgICBkZWZlbnNpdmVjaGVjayA9IGZhbHNlCiAgICAgICAgICAgIGVuZAoJCQlsb2NhbCBkZWZlbnNpdmVtZW51ID0gdWkuZ2V0KG1lbnVbImFudGkgYWltYm90Il1bImZlYXR1cmVzIl1bImRlZmVuc2l2ZSJdKQoJCQl0Ymwubm9ybWFsX2FhID0gdHJ1ZQoJCQl0YmwudGlja19hYSA9IHRibC50aWNrX2FhICsgMQoJCQl0YmwubGlzdF9hYVt0YmwudGlja19hYV0gPSB7CgkJCQlbImFhIl0gPSB1aS5nZXQodGJsLml0ZW1zLnlhd1syXSksCgkJCX0KCQkJaWYgZGVmZW5zaXZlbWVudSB+PSAib2ZmIiBhbmQgZGVmZW5zaXZlY2hlY2sgYW5kIG5vdCBmcmVlc3RhbmQgYW5kIHRibC5hbnRpYWltLm1hbnVhbC5hYSA9PSAwIGFuZCB0YmwuY29udGFpbnModWkuZ2V0KG1lbnVbImFudGkgYWltYm90Il1bImZlYXR1cmVzIl1bInN0YXRlcyJdKSwgcmVhbF9zdGF0ZSkgdGhlbgoJCQkJdGJsLm5vcm1hbF9hYSA9IGZhbHNlCgkJCQlpZiBkZWZlbnNpdmVtZW51ID09ICJwaXRjaCIgdGhlbgoJCQkJCXVpLnNldCh0YmwuaXRlbXMucGl0Y2hbMV0sICJ1cCIpCiAgICAgICAgICAgICAgICBlbHNlaWYgZGVmZW5zaXZlbWVudSA9PSAic3BpbiIgdGhlbgoJCQkJCXVpLnNldCh0YmwuaXRlbXMueWF3WzJdLCAoKChhcmcuY29tbWFuZF9udW1iZXIgJSAzNjApIC0gMTgwKSAqIDMpICUgMTgwKQoJCQkJZWxzZWlmIGRlZmVuc2l2ZW1lbnUgPT0gInJhbmRvbSIgdGhlbgoJCQkJCXVpLnNldCh0YmwuaXRlbXMueWF3WzJdLCBjbGllbnQucmFuZG9tX2ludCgtMTgwLDE4MCkpCgkJCQllbHNlaWYgZGVmZW5zaXZlbWVudSA9PSAicmFuZG9tIHBpdGNoIiB0aGVuCgkJCQkJdWkuc2V0KHRibC5pdGVtcy5waXRjaFsxXSwgKGFyZy5jb21tYW5kX251bWJlciAlIDQgPiAyKSBhbmQgInVwIiBvciAiZG93biIpCgkJCQkJdWkuc2V0KHRibC5pdGVtcy55YXdbMl0sIGNsaWVudC5yYW5kb21faW50KC0xODAsMTgwKSkKCQkJCWVsc2VpZiBkZWZlbnNpdmVtZW51ID09ICJzaWRld2F5cyB1cCIgdGhlbgoJCQkJCXVpLnNldCh0YmwuaXRlbXMucGl0Y2hbMV0sICJ1cCIpCgkJCQkJdWkuc2V0KHRibC5pdGVtcy55YXdbMl0sIChhcmcuY29tbWFuZF9udW1iZXIgJSA2ID4gMykgYW5kIDExMSBvciAtMTExKQoJCQkJZWxzZWlmIGRlZmVuc2l2ZW1lbnUgPT0gInNpZGV3YXlzIGRvd24iIHRoZW4KCQkJCQl1aS5zZXQodGJsLml0ZW1zLnlhd1syXSwgKGFyZy5jb21tYW5kX251bWJlciAlIDYgPiAzKSBhbmQgMTExIG9yIC0xMTEpCgkJCQllbmQKCQkJCWlmIGRlZmVuc2l2ZW1lbnUgfj0gInBpdGNoIiB0aGVuCgkJCQkJdGJsLnJlc2V0X2FhID0gdHJ1ZQoJCQkJCXRibC5kZWZlbnNpdmVfYWEgPSB1aS5nZXQodGJsLml0ZW1zLnlhd1syXSkKCQkJCWVuZAoJCQllbmQKCQkJdGJsLmxpc3RfYWFbdGJsLnRpY2tfYWFdWyJjaGVjayJdID0gdGJsLm5vcm1hbF9hYQoJCQlpZiB0Ymwubm9ybWFsX2FhIGFuZCB0YmwucmVzZXRfYWEgYW5kIHVpLmdldChtZW51WyJhbnRpIGFpbWJvdCJdWyJmZWF0dXJlcyJdWyJmaXhlciJdKSA9PSAibHVhc2Vuc2UiIHRoZW4KCQkJCXRibC5yZXNldF9hYSA9IGZhbHNlCgkJCQlmb3IgaSA9IDEsIDY5IGRvCgkJCQkJaWYgdGJsLmxpc3RfYWFbdGJsLnRpY2tfYWEtaV0gdGhlbgoJCQkJCQlpZiB0YmwubGlzdF9hYVt0YmwudGlja19hYS1pXVsiY2hlY2siXSB0aGVuCgkJCQkJCQlpZiB0YmwuZGVmZW5zaXZlX2FhIH49IHRibC5saXN0X2FhW3RibC50aWNrX2FhLWldWyJhYSJdIHRoZW4KCQkJCQkJCQl1aS5zZXQodGJsLml0ZW1zLnlhd1syXSwgdGJsLmxpc3RfYWFbdGJsLnRpY2tfYWEtaV1bImFhIl0pCgkJCQkJCQkJcmV0dXJuIG5pbAoJCQkJCQkJZW5kCgkJCQkJCWVuZAoJCQkJCWVuZAoJCQkJZW5kCgkJCWVuZAogICAgICAgIGVuZCwKICAgICAgICBbInJlc2V0Il0gPSBmdW5jdGlvbigpCgkJCWlmIHRibC5jb250YWlucyh1aS5nZXQobWVudVsidmlzdWFscyAmIG1pc2MiXVsidmlzdWFscyJdWyJub3RpZnkiXSksICJyZXNldCIpIHRoZW4KCQkJCXB1c2hfbm90aWZ5KCJSZXNldCBmb3IgbmV3IHJvdW5kISIpCgkJCWVuZAogICAgICAgICAgICB0YmwuYW50aWFpbS5tYW51YWwuYWEgPSAwCiAgICAgICAgICAgIHRibC5hbnRpYWltLm1hbnVhbC50aWNrID0gMAogICAgICAgICAgICBpZiB1aS5nZXQobWVudVsidmlzdWFscyAmIG1pc2MiXVsibWlzYyJdWyJhdXRvYnV5Il0pIH49ICJvZmYiIHRoZW4KICAgICAgICAgICAgICAgIGNsaWVudC5leGVjKCJidXkgIiAuLiAodWkuZ2V0KG1lbnVbInZpc3VhbHMgJiBtaXNjIl1bIm1pc2MiXVsiYXV0b2J1eSJdKSA9PSAic2NvdXQiIGFuZCAic3NnMDgiIG9yICJhd3AiKSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kLAoJCVsibWVudSJdID0gZnVuY3Rpb24oKQogICAgICAgICAgICB1aS5zZXQobWVudVsiYW50aSBhaW1ib3QiXVsia2V5YmluZHMiXVsibGVmdCJdLCAib24gaG90a2V5IikKICAgICAgICAgICAgdWkuc2V0KG1lbnVbImFudGkgYWltYm90Il1bImtleWJpbmRzIl1bInJpZ2h0Il0sICJvbiBob3RrZXkiKQogICAgICAgICAgICB1aS5zZXQobWVudVsiYW50aSBhaW1ib3QiXVsia2V5YmluZHMiXVsiZm9yd2FyZCJdLCAib24gaG90a2V5IikKICAgICAgICAgICAgdWkuc2V0KG1lbnVbImFudGkgYWltYm90Il1bImtleWJpbmRzIl1bImJhY2t3YXJkIl0sICJvbiBob3RrZXkiKQogICAgICAgICAgICBsb2NhbCB0aWNrID0gZ2xvYmFscy50aWNrY291bnQoKQogICAgICAgICAgICBpZiB1aS5nZXQobWVudVsiYW50aSBhaW1ib3QiXVsia2V5YmluZHMiXVsibGVmdCJdKSBhbmQgKHRibC5hbnRpYWltLm1hbnVhbC50aWNrIDwgdGljayAtIDExKSB0aGVuCiAgICAgICAgICAgICAgICB0YmwuYW50aWFpbS5tYW51YWwuYWEgPSB0YmwuYW50aWFpbS5tYW51YWwuYWEgPT0gLTkwIGFuZCAwIG9yIC05MAogICAgICAgICAgICAgICAgdGJsLmFudGlhaW0ubWFudWFsLnRpY2sgPSB0aWNrCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBpZiB1aS5nZXQobWVudVsiYW50aSBhaW1ib3QiXVsia2V5YmluZHMiXVsicmlnaHQiXSkgYW5kICh0YmwuYW50aWFpbS5tYW51YWwudGljayA8IHRpY2sgLSAxMSkgdGhlbgogICAgICAgICAgICAgICAgdGJsLmFudGlhaW0ubWFudWFsLmFhID0gdGJsLmFudGlhaW0ubWFudWFsLmFhID09IDkwIGFuZCAwIG9yIDkwCiAgICAgICAgICAgICAgICB0YmwuYW50aWFpbS5tYW51YWwudGljayA9IHRpY2sKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGlmIHVpLmdldChtZW51WyJhbnRpIGFpbWJvdCJdWyJrZXliaW5kcyJdWyJmb3J3YXJkIl0pIGFuZCAodGJsLmFudGlhaW0ubWFudWFsLnRpY2sgPCB0aWNrIC0gMTEpIHRoZW4KICAgICAgICAgICAgICAgIHRibC5hbnRpYWltLm1hbnVhbC5hYSA9IHRibC5hbnRpYWltLm1hbnVhbC5hYSA9PSAxODAgYW5kIDAgb3IgMTgwCiAgICAgICAgICAgICAgICB0YmwuYW50aWFpbS5tYW51YWwudGljayA9IHRpY2sKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGlmIHVpLmdldChtZW51WyJhbnRpIGFpbWJvdCJdWyJrZXliaW5kcyJdWyJiYWNrd2FyZCJdKSBhbmQgKHRibC5hbnRpYWltLm1hbnVhbC50aWNrIDwgdGljayAtIDExKSB0aGVuCiAgICAgICAgICAgICAgICB0YmwuYW50aWFpbS5tYW51YWwuYWEgPSB0YmwuYW50aWFpbS5tYW51YWwuYWEgPT0gLTEgYW5kIDAgb3IgLTEKICAgICAgICAgICAgICAgIHRibC5hbnRpYWltLm1hbnVhbC50aWNrID0gdGljawogICAgICAgICAgICBlbmQKICAgICAgICAgICAgaWYgdGJsLmNvbnRhaW5zKHVpLmdldChtZW51WyJ2aXN1YWxzICYgbWlzYyJdWyJtaXNjIl1bImZlYXR1cmVzIl0pLCAiZml4IGhpZGVzaG90IikgdGhlbgogICAgICAgICAgICAgICAgdWkuc2V0KGxpbWl0ZmwsICh1aS5nZXQodGJsLnJlZnMuaGlkZVsxXSkgYW5kIHVpLmdldCh0YmwucmVmcy5oaWRlWzJdKSkgYW5kIDEgb3IgMTQpCiAgICAgICAgICAgIGVuZAogICAgICAgICAgICBpZiB0YmwuY29udGFpbnModWkuZ2V0KG1lbnVbInZpc3VhbHMgJiBtaXNjIl1bIm1pc2MiXVsiZmVhdHVyZXMiXSksICJsZWdzIHNwYW1tZXIiKSB0aGVuCiAgICAgICAgICAgICAgICB1aS5zZXQobGVncywgZ2xvYmFscy50aWNrY291bnQoKSAlIHVpLmdldChtZW51WyJ2aXN1YWxzICYgbWlzYyJdWyJtaXNjIl1bInNwYW1tZXIiXSkgPT0gMCBhbmQgIm5ldmVyIHNsaWRlIiBvciAiYWx3YXlzIHNsaWRlIikKICAgICAgICAgICAgZW5kCgkJCWlmIG5vdCB1aS5pc19tZW51X29wZW4oKSB0aGVuIHJldHVybiBuaWwgZW5kCgkJCWZvciBpLCB2IGluIG5leHQsIHRibC5pdGVtcyBkbwoJCQkJZm9yIGluZGV4LCB2YWx1ZSBpbiBuZXh0LCB2IGRvCgkJCQkJdWkuc2V0X3Zpc2libGUodmFsdWUsIGZhbHNlKQoJCQkJZW5kCgkJCWVuZAogICAgICAgICAgICBsb2NhbCBjdXJyZW50ID0gdWkuZ2V0KGNhdGVnb3J5KQogICAgICAgICAgICBsb2NhbCBzdWIgPSB1aS5nZXQobWVudVsiYW50aSBhaW1ib3QiXVsic3VibWVudSJdKQogICAgICAgICAgICBsb2NhbCBzdWJleHRyYSA9IHVpLmdldChtZW51WyJ2aXN1YWxzICYgbWlzYyJdWyJzdWJtZW51Il0pCiAgICAgICAgICAgIGxvY2FsIGZpeCA9IHRydWUKICAgICAgICAgICAgZm9yIGksIHYgaW4gbmV4dCwgYWEgZG8KICAgICAgICAgICAgICAgIGxvY2FsIHNlY3Rpb24gPSB1aS5nZXQobWVudVsiYW50aSBhaW1ib3QiXVsiYnVpbGRlciJdWyJidWlsZGVyIl0pID09IGkKICAgICAgICAgICAgICAgIGZvciBpbmRleCwgdmFsdWUgaW4gbmV4dCwgdiBkbyAKICAgICAgICAgICAgICAgICAgICBsb2NhbCBzZWxlY3RlZCA9IHVpLmdldChtZW51WyJhbnRpIGFpbWJvdCJdWyJidWlsZGVyIl1bInRlYW0iXSkgPT0gaW5kZXgKICAgICAgICAgICAgICAgICAgICBmb3IgaWksIHZ2IGluIG5leHQsIHZhbHVlIGRvCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlpIH49ICJ0eXBlIiBhbmQgaWkgfj0gImJ1dHRvbiIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWwgbW9kZSA9IHVpLmdldCh2YWx1ZVsidHlwZSJdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGlpaSwgdnZ2IGluIG5leHQsIHZ2IGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZml4ID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlpID09ICJub3JtYWwiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaWlpID09ICJqaXR0ZXJfc2xpZGVyIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXggPSB1aS5nZXQodnZbImppdHRlciJdKSB+PSAib2ZmIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaWlpID09ICJib2R5X3NsaWRlciIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZml4ID0gdWkuZ2V0KHZ2WyJib2R5Il0pIH49ICJvZmYiIGFuZCB1aS5nZXQodnZbImJvZHkiXSkgfj0gIm9wcG9zaXRlIiBhbmQgdWkuZ2V0KHZ2WyJib2R5Il0pIH49ICJsdWFzZW5zZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlpaSA9PSAiY3VzdG9tX3NsaWRlciIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZml4ID0gdWkuZ2V0KHZ2WyJib2R5Il0pID09ICJsdWFzZW5zZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlpaSA9PSAieWF3IiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXggPSB0YmwuY29udGFpbnModWkuZ2V0KHZ2WyJtb2RlIl0pLCBpaWkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpaWkgPT0gImxlZnQiIG9yIGlpaSA9PSAicmlnaHQiIG9yIGlpaSA9PSAibWV0aG9kIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXggPSB0YmwuY29udGFpbnModWkuZ2V0KHZ2WyJtb2RlIl0pLCAibGVmdCByaWdodCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlpID09ICJsdWFzZW5zZSIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpaWkgPT0gInlhdyIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZml4ID0gdGJsLmNvbnRhaW5zKHVpLmdldCh2dlsibW9kZSJdKSwgaWlpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaWlpID09ICJsZWZ0IiBvciBpaWkgPT0gInJpZ2h0IiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXggPSB0YmwuY29udGFpbnModWkuZ2V0KHZ2WyJtb2RlIl0pLCAibGVmdCByaWdodCIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlpID09ICJhdXRvIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlpaSA9PSAidGltZXIiIG9yIGlpaSA9PSAibGVmdCIgb3IgaWlpID09ICJyaWdodCIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZml4ID0gdWkuZ2V0KHZ2WyJtZXRob2QiXSkgPT0gImx1YXNlbnNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXRfdmlzaWJsZSh2dnYsIHNlY3Rpb24gYW5kIHNlbGVjdGVkIGFuZCBjdXJyZW50ID09ICJhbnRpIGFpbWJvdCIgYW5kIHN1YiA9PSAiYnVpbGRlciIgYW5kIG1vZGUgPT0gaWkgYW5kIGZpeCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXRfdmlzaWJsZSh2diwgc2VjdGlvbiBhbmQgc2VsZWN0ZWQgYW5kIGN1cnJlbnQgPT0gImFudGkgYWltYm90IiBhbmQgc3ViID09ICJidWlsZGVyIikKICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGZvciBpLCB2IGluIG5leHQsIG1lbnUgZG8KICAgICAgICAgICAgICAgIGZvciBpbmRleCwgdmFsdWUgaW4gbmV4dCwgdiBkbwogICAgICAgICAgICAgICAgICAgIGlmIGkgPT0gImFudGkgYWltYm90IiBhbmQgaW5kZXggfj0gInN1Ym1lbnUiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGlpLCB2diBpbiBuZXh0LCB2YWx1ZSBkbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZml4ID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaW5kZXggPT0gImZlYXR1cmVzIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaWkgPT0gImRpc3RhbmNlIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpeCA9IHVpLmdldCh2YWx1ZVsiYmFja3N0YWIiXSkgfj0gIm9mZiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpaSA9PSAiZml4IiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpeCA9IHVpLmdldCh2YWx1ZVsibGVnaXQiXSkgfj0gIm9mZiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKCQkJCQkJCQlpZiBpaSA9PSAiZml4ZXIiIG9yIGlpID09ICJzdGF0ZXMiIHRoZW4KCQkJCQkJCQkJZml4ID0gdWkuZ2V0KHZhbHVlWyJkZWZlbnNpdmUiXSkgfj0gIm9mZiIKCQkJCQkJCQllbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaW5kZXggPT0gImtleWJpbmRzIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaWkgPT0gImVkZ2UiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZml4ID0gdGJsLmNvbnRhaW5zKHVpLmdldCh2YWx1ZVsia2V5cyJdKSwgaWkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaWkgPT0gImZyZWVzdGFuZCIgb3IgaWkgPT0gInR5cGVfZnJlZXN0YW5kIiBvciBpaSA9PSAiZGlzYWJsZXJzIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpeCA9IHRibC5jb250YWlucyh1aS5nZXQodmFsdWVbImtleXMiXSksICJmcmVlc3RhbmQiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlpID09ICJsZWZ0IiBvciBpaSA9PSAicmlnaHQiIG9yIGlpID09ICJmb3J3YXJkIiBvciBpaSA9PSAiYmFja3dhcmQiIG9yIGlpID09ICJ0eXBlX21hbnVhbCIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXggPSB0YmwuY29udGFpbnModWkuZ2V0KHZhbHVlWyJrZXlzIl0pLCAibWFudWFsIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0X3Zpc2libGUodnYsIGkgPT0gY3VycmVudCBhbmQgaW5kZXggPT0gc3ViIGFuZCBmaXgpCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIGVsc2VpZiBpID09ICJ2aXN1YWxzICYgbWlzYyIgYW5kIGluZGV4IH49ICJzdWJtZW51IiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpaSwgdnYgaW4gbmV4dCwgdmFsdWUgZG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpeCA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGluZGV4ID09ICJtaXNjIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaWkgPT0gInNwYW1tZXIiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZml4ID0gdGJsLmNvbnRhaW5zKHVpLmdldCh2YWx1ZVsiZmVhdHVyZXMiXSksICJsZWdzIHNwYW1tZXIiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpbmRleCA9PSAidmlzdWFscyIgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlpID09ICJhcnJvd3NfY29sb3IiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZml4ID0gdWkuZ2V0KHZhbHVlWyJhcnJvd3MiXSkgfj0gIi0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGluZGV4ID09ICJ2aXN1YWxzIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgaWkgPT0gImluZGljYXRvcnNfY29sb3IiIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZml4ID0gdWkuZ2V0KHZhbHVlWyJpbmRpY2F0b3JzIl0pIH49ICItIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXRfdmlzaWJsZSh2diwgaSA9PSBjdXJyZW50IGFuZCBpbmRleCA9PSBzdWJleHRyYSBhbmQgZml4KQogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldF92aXNpYmxlKHZhbHVlLCBpID09IGN1cnJlbnQpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgZW5kCgkJZW5kLAogICAgICAgIFsiYW5pbWF0aW9ucyJdID0gZnVuY3Rpb24oKQoJCQlsb2NhbCBteXNlbGYgPSBlbnRpdHkuZ2V0X2xvY2FsX3BsYXllcigpCiAgICAgICAgICAgIGlmIHRibC5jb250YWlucyh1aS5nZXQobWVudVsidmlzdWFscyAmIG1pc2MiXVsibWlzYyJdWyJmZWF0dXJlcyJdKSwgImFuaW1hdGlvbnMiKSBhbmQgbXlzZWxmIH49IG5pbCB0aGVuCiAgICAgICAgICAgICAgICBlbnRpdHkuc2V0X3Byb3AobXlzZWxmLCAibV9mbFBvc2VQYXJhbWV0ZXIiLCAxLCBiaXQuYmFuZChlbnRpdHkuZ2V0X3Byb3AobXlzZWxmLCAibV9mRmxhZ3MiKSwgMSkgPT0gMCBhbmQgNiBvciAwKQogICAgICAgICAgICBlbmQKICAgICAgICBlbmQsCiAgICAgICAgWyJhcnJvd3MiXSA9IGZ1bmN0aW9uKCkKICAgICAgICAgICAgbG9jYWwgbXlzZWxmID0gZW50aXR5LmdldF9sb2NhbF9wbGF5ZXIoKQogICAgICAgICAgICBpZiBteXNlbGYgfj0gbmlsIGFuZCBlbnRpdHkuaXNfYWxpdmUobXlzZWxmKSB0aGVuCgkJCQlsb2NhbCB3aWR0aCwgaGVpZ2h0ID0gY2xpZW50LnNjcmVlbl9zaXplKCkKICAgICAgICAgICAgICAgIGxvY2FsIHIyLCBnMiwgYjIsIGEyID0gNTUsNTUsNTUsMjU1CiAgICAgICAgICAgICAgICBsb2NhbCBoaWdobGlnaHRfZnJhY3Rpb24gPSAgKGdsb2JhbHMucmVhbHRpbWUoKSAvIDIgJSAxLjIgKiAyKSAtIDEuMgogICAgICAgICAgICAgICAgbG9jYWwgb3V0cHV0ID0gIiIKICAgICAgICAgICAgICAgIGxvY2FsIHRleHRfdG9fZHJhdyA9ICIgUyBFIE4gUyBFIgogICAgICAgICAgICAgICAgZm9yIGlkeCA9IDEsICN0ZXh0X3RvX2RyYXcgZG8KICAgICAgICAgICAgICAgICAgICBsb2NhbCBjaGFyYWN0ZXIgPSB0ZXh0X3RvX2RyYXc6c3ViKGlkeCwgaWR4KQogICAgICAgICAgICAgICAgICAgIGxvY2FsIGNoYXJhY3Rlcl9mcmFjdGlvbiA9IGlkeCAvICN0ZXh0X3RvX2RyYXcKICAgICAgICAgICAgICAgICAgICBsb2NhbCByMSwgZzEsIGIxLCBhMSA9IDI1NSwgMjU1LCAyNTUsIDI1NQogICAgICAgICAgICAgICAgICAgIGxvY2FsIGhpZ2hsaWdodF9kZWx0YSA9IChjaGFyYWN0ZXJfZnJhY3Rpb24gLSBoaWdobGlnaHRfZnJhY3Rpb24pCiAgICAgICAgICAgICAgICAgICAgaWYgaGlnaGxpZ2h0X2RlbHRhID49IDAgYW5kIGhpZ2hsaWdodF9kZWx0YSA8PSAxLjQgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBpZiBoaWdobGlnaHRfZGVsdGEgPiAwLjcgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0X2RlbHRhID0gMS40IC0gaGlnaGxpZ2h0X2RlbHRhCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgICAgICBsb2NhbCByX2ZyYWN0aW9uLCBnX2ZyYWN0aW9uLCBiX2ZyYWN0aW9uLCBhX2ZyYWN0aW9uID0gcjIgLSByMSwgZzIgLSBnMSwgYjIgLSBiMQogICAgICAgICAgICAgICAgICAgICAgICByMSA9IHIxICsgcl9mcmFjdGlvbiAqIGhpZ2hsaWdodF9kZWx0YSAvIDAuOAogICAgICAgICAgICAgICAgICAgICAgICBnMSA9IGcxICsgZ19mcmFjdGlvbiAqIGhpZ2hsaWdodF9kZWx0YSAvIDAuOAogICAgICAgICAgICAgICAgICAgICAgICBiMSA9IGIxICsgYl9mcmFjdGlvbiAqIGhpZ2hsaWdodF9kZWx0YSAvIDAuOAogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dCAuLiAoJ1xhJTAyeCUwMnglMDJ4JTAyeCVzJyk6Zm9ybWF0KHIxLCBnMSwgYjEsIDI1NSwgdGV4dF90b19kcmF3OnN1YihpZHgsIGlkeCkpCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIG91dHB1dCA9ICJMIFUgQSIgLi4gb3V0cHV0CiAgICAgICAgICAgICAgICBpZiB1aS5nZXQobWVudVsidmlzdWFscyAmIG1pc2MiXVsidmlzdWFscyJdWyJ3YXRlcm1hcmtfc3BhY2VzIl0pID09ICJ5ZXMiIHRoZW4KICAgICAgICAgICAgICAgICAgICBvdXRwdXQgPSBvdXRwdXQ6Z3N1YigiICIsICIiKQogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBpZiBnZXRidWlsZCgpID09ICJiZXRhIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gb3V0cHV0IC4uICgiXGEleCV4JXgleCIpOmZvcm1hdCgyMDAsIDY5LCA2OSwgMjU1KSAuLiAiIFtCRVRBXSAiCiAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGxvY2FsIHIsZyxiID0gdWkuZ2V0KG1lbnVbInZpc3VhbHMgJiBtaXNjIl1bInZpc3VhbHMiXVsid2F0ZXJtYXJrX2NvbG9yIl0pCiAgICAgICAgICAgICAgICBpZiB1aS5nZXQobWVudVsidmlzdWFscyAmIG1pc2MiXVsidmlzdWFscyJdWyJ3YXRlcm1hcmsiXSkgPT0gImJvdHRvbSIgdGhlbgogICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLnRleHQod2lkdGgvMiwgaGVpZ2h0IC0gMjAsIHIsZyxiLCAyNTUsICJjIiwgMCwgb3V0cHV0KQogICAgICAgICAgICAgICAgZWxzZWlmIHVpLmdldChtZW51WyJ2aXN1YWxzICYgbWlzYyJdWyJ2aXN1YWxzIl1bIndhdGVybWFyayJdKSA9PSAicmlnaHQiIHRoZW4KICAgICAgICAgICAgICAgICAgICByZW5kZXJlci50ZXh0KHdpZHRoIC0gNjksIGhlaWdodC8yLCByLGcsYiwgMjU1LCAiYyIsIDAsIG91dHB1dCkKICAgICAgICAgICAgICAgIGVsc2VpZiB1aS5nZXQobWVudVsidmlzdWFscyAmIG1pc2MiXVsidmlzdWFscyJdWyJ3YXRlcm1hcmsiXSkgPT0gImxlZnQiIHRoZW4KICAgICAgICAgICAgICAgICAgICByZW5kZXJlci50ZXh0KDY5LCBoZWlnaHQvMiwgcixnLGIsIDI1NSwgImMiLCAwLCBvdXRwdXQpCgkJCQllbmQKICAgICAgICAgICAgICAgIGxvY2FsIHIsZyxiID0gdWkuZ2V0KG1lbnVbInZpc3VhbHMgJiBtaXNjIl1bInZpc3VhbHMiXVsiYXJyb3dzX2NvbG9yIl0pCiAgICAgICAgICAgICAgICBsb2NhbCBsZWZ0a2V5ID0gdWkuZ2V0KG1lbnVbInZpc3VhbHMgJiBtaXNjIl1bInZpc3VhbHMiXVsiYXJyb3dzIl0pID09ICJzaW1wbGUiIGFuZCAiPCIgb3IgIuKvhyIKCQkJICAgIGxvY2FsIHJpZ2h0a2V5ID0gdWkuZ2V0KG1lbnVbInZpc3VhbHMgJiBtaXNjIl1bInZpc3VhbHMiXVsiYXJyb3dzIl0pID09ICJzaW1wbGUiIGFuZCAiPiIgb3IgIuKviCIKICAgICAgICAgICAgICAgIGxvY2FsIHcsIGggPSBjbGllbnQuc2NyZWVuX3NpemUoKQogICAgICAgICAgICAgICAgdywgaCA9IHcvMiwgaC8yCiAgICAgICAgICAgICAgICBsb2NhbCB5YXdfYm9keSA9IG1hdGgubWF4KC02MCwgbWF0aC5taW4oNjAsIG1hdGguZmxvb3IoKGVudGl0eS5nZXRfcHJvcChteXNlbGYsICJtX2ZsUG9zZVBhcmFtZXRlciIsIDExKSBvciAwKSoxMjAtNjArMC41KSkpCgkJCQlpZiB5YXdfYm9keSA+IDAgYW5kIHlhd19ib2R5ID4gNjAgdGhlbiB5YXdfYm9keSA9IDYwIGVuZAoJCQkJaWYgeWF3X2JvZHkgPCAwIGFuZCB5YXdfYm9keSA8IC02MCB0aGVuIHlhd19ib2R5ID0gLTYwIGVuZAogICAgICAgICAgICAgICAgbG9jYWwgYWxwaGEgPSAyNTUKICAgICAgICAgICAgICAgIGlmIHVpLmdldChtZW51WyJ2aXN1YWxzICYgbWlzYyJdWyJ2aXN1YWxzIl1bImFycm93cyJdKSA9PSAic2ltcGxlIiB0aGVuCiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIudGV4dCh3ICsgNTAsIGgsIDExMSwgMTExLCAxMTEsIDI1NSwgImMrIiwgMCwgcmlnaHRrZXkpCiAgICAgICAgICAgICAgICAgICAgaWYgdGJsLmFudGlhaW0ubWFudWFsLmFhID09IDkwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIudGV4dCh3ICsgNTAsIGgsIHIsZyxiLCBhbHBoYSwgImMrIiwgMCwgcmlnaHRrZXkpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIudGV4dCh3IC0gNTAsIGgsIDExMSwgMTExLCAxMTEsIDI1NSwgImMrIiwgMCwgbGVmdGtleSkKICAgICAgICAgICAgICAgICAgICBpZiB0YmwuYW50aWFpbS5tYW51YWwuYWEgPT0gLTkwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIudGV4dCh3IC0gNTAsIGgsIHIsZyxiLCBhbHBoYSwgImMrIiwgMCwgbGVmdGtleSkKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVsc2VpZiB1aS5nZXQobWVudVsidmlzdWFscyAmIG1pc2MiXVsidmlzdWFscyJdWyJhcnJvd3MiXSkgPT0gImJvZHkiIHRoZW4KICAgICAgICAgICAgICAgICAgICByZW5kZXJlci5saW5lKHcgKyAtKDQwKSwgaC04LCB3ICsgLSg0MCksIGgrOCwgciwgZywgYiwgeWF3X2JvZHkgPiAwIGFuZCA1NSBvciAyNTUpCiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIubGluZSh3ICsgKDQyKSwgaC04LCB3ICsgKDQyKSwgaCs4LCByLCBnLCBiLCB5YXdfYm9keSA8IDAgYW5kIDU1IG9yIDI1NSkKICAgICAgICAgICAgICAgICAgICBoID0gaCAtIDIuNQogICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLnRleHQodyArIDUwLCBoLCAxMTEsIDExMSwgMTExLCAyNTUsICJjKyIsIDAsIHJpZ2h0a2V5KQogICAgICAgICAgICAgICAgICAgIGlmIHRibC5hbnRpYWltLm1hbnVhbC5hYSA9PSA5MCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLnRleHQodyArIDUwLCBoLCByLGcsYiwgYWxwaGEsICJjKyIsIDAsIHJpZ2h0a2V5KQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLnRleHQodyAtIDUwLCBoLCAxMTEsIDExMSwgMTExLCAyNTUsICJjKyIsIDAsIGxlZnRrZXkpCiAgICAgICAgICAgICAgICAgICAgaWYgdGJsLmFudGlhaW0ubWFudWFsLmFhID09IC05MCB0aGVuCiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLnRleHQodyAtIDUwLCBoLCByLGcsYiwgYWxwaGEsICJjKyIsIDAsIGxlZnRrZXkpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICBlbHNlaWYgdWkuZ2V0KG1lbnVbInZpc3VhbHMgJiBtaXNjIl1bInZpc3VhbHMiXVsiYXJyb3dzIl0pID09ICJsdWFzZW5zZSIgdGhlbgogICAgICAgICAgICAgICAgICAgIGxvY2FsIHh2LCB5diwgenYgPSBlbnRpdHkuZ2V0X3Byb3AobXlzZWxmLCAibV92ZWNWZWxvY2l0eSIpCiAgICAgICAgICAgICAgICAgICAgbG9jYWwgc3BlZWQgPSBtYXRoLnNxcnQoeHYqeHYgKyB5dip5diArIHp2Knp2KS8xMAogICAgICAgICAgICAgICAgICAgIGlmIHRibC5hbnRpYWltLmZzID09IDEgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlci5saW5lKHcgKyAtKDM2K3NwZWVkKSwgaC04LCB3ICsgLSgzNitzcGVlZCksIGgrOCwgMjU1LCAyNTUsIDI1NSwgYWxwaGEpCiAgICAgICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgICAgICAgICAgaWYgdGJsLmFudGlhaW0uZnMgPT0gLTEgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlci5saW5lKHcgKyAoMzgrc3BlZWQpLCBoLTgsIHcgKyAoMzgrc3BlZWQpLCBoKzgsIDI1NSwgMjU1LCAyNTUsIGFscGhhKQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLmxpbmUodyArIC0oNDArc3BlZWQpLCBoLTgsIHcgKyAtKDQwK3NwZWVkKSwgaCs4LCByLCBnLCBiLCB5YXdfYm9keSA+IDAgYW5kIDU1IG9yIDI1NSkKICAgICAgICAgICAgICAgICAgICByZW5kZXJlci5saW5lKHcgKyAoNDIrc3BlZWQpLCBoLTgsIHcgKyAoNDIrc3BlZWQpLCBoKzgsIHIsIGcsIGIsIHlhd19ib2R5IDwgMCBhbmQgNTUgb3IgMjU1KQogICAgICAgICAgICAgICAgICAgIGggPSBoIC0gMi41CiAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIudGV4dCh3ICsgKDUwK3NwZWVkKSwgaCwgMTExLCAxMTEsIDExMSwgMjU1LCAiYysiLCAwLCByaWdodGtleSkKICAgICAgICAgICAgICAgICAgICBpZiB0YmwuYW50aWFpbS5tYW51YWwuYWEgPT0gOTAgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlci50ZXh0KHcgKyAoNTArc3BlZWQpLCBoLCByLGcsYiwgYWxwaGEsICJjKyIsIDAsIHJpZ2h0a2V5KQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyLnRleHQodyAtICg1MCtzcGVlZCksIGgsIDExMSwgMTExLCAxMTEsIDI1NSwgImMrIiwgMCwgbGVmdGtleSkKICAgICAgICAgICAgICAgICAgICBpZiB0YmwuYW50aWFpbS5tYW51YWwuYWEgPT0gLTkwIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXIudGV4dCh3IC0gKDUwK3NwZWVkKSwgaCwgcixnLGIsIGFscGhhLCAiYysiLCAwLCBsZWZ0a2V5KQogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZWxzZSBlbmQKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kLAoJCVsiaW5kaWNhdG9yIl0gPSBmdW5jdGlvbigpCgkJCWxvY2FsIG15c2VsZiA9IGVudGl0eS5nZXRfbG9jYWxfcGxheWVyKCkKCQkJaWYgbm90IGVudGl0eS5pc19hbGl2ZShteXNlbGYpIHRoZW4gcmV0dXJuIG5pbCBlbmQKCQkJaWYgdWkuZ2V0KG1lbnVbInZpc3VhbHMgJiBtaXNjIl1bInZpc3VhbHMiXVsiaW5kaWNhdG9ycyJdKSA9PSAiZGVmYXVsdCIgdGhlbgoJCQkJbG9jYWwgdywgaCA9IGNsaWVudC5zY3JlZW5fc2l6ZSgpCgkJCQl3LCBoID0gdy8yLCBoLzIKCQkJCWxvY2FsIHlhd19ib2R5ID0gbWF0aC5tYXgoLTYwLCBtYXRoLm1pbig2MCwgbWF0aC5mbG9vcigoZW50aXR5LmdldF9wcm9wKG15c2VsZiwibV9mbFBvc2VQYXJhbWV0ZXIiLCAxMSkgb3IgMCkqMTIwLTYwKzAuNSkpKQoJCQkJaWYgeWF3X2JvZHkgPiAwIGFuZCB5YXdfYm9keSA+IDYwIHRoZW4geWF3X2JvZHkgPSA2MCBlbmQKCQkJCWlmIHlhd19ib2R5IDwgMCBhbmQgeWF3X2JvZHkgPCAtNjAgdGhlbiB5YXdfYm9keSA9IC02MCBlbmQKCQkJCXNjb3BlX2ZpeCA9IGVudGl0eS5nZXRfcHJvcChteXNlbGYsICJtX2JJc1Njb3BlZCIpIH49IDAKCQkJCWlmIHNjb3BlX2ZpeCB0aGVuIAoJCQkJCWlmIHNjb3BlX2ludCA8IDMwIHRoZW4KCQkJCQkJc2NvcGVfaW50ID0gc2NvcGVfaW50ICsgMQoJCQkJCWVuZAoJCQkJZWxzZQoJCQkJCWlmIHNjb3BlX2ludCA+IDAgdGhlbgoJCQkJCQlzY29wZV9pbnQgPSBzY29wZV9pbnQgLSAxCgkJCQkJZW5kCgkJCQllbmQKCQkJCXcgPSB3ICsgc2NvcGVfaW50CgkJCQl3ID0gdyAtIDIKCQkJCWxvY2FsIGluZF9oZWlnaHQgPSAxNQoJCQkJbG9jYWwgciwgZywgYiA9IHVpLmdldChtZW51WyJ2aXN1YWxzICYgbWlzYyJdWyJ2aXN1YWxzIl1bImluZGljYXRvcnNfY29sb3IiXSkKCQkJCWxvY2FsIHIxLCBnMSwgYjEsIGExID0gcixnLGIsIDI1NQoJCQkJbG9jYWwgcjIsIGcyLCBiMiwgYTIgPSAxNTUsIDE1NSwgMTU1LCAyNTUKCQkJCWlmIHlhd19ib2R5ID4gMCB0aGVuCgkJCQkJcmVuZGVyZXIudGV4dCggdywgaCArIGluZF9oZWlnaHQsIDI1NSwgMjU1LCAyNTUsIDI1NSwgImNiIiwgbmlsLCBncmFkaWVudChyMiwgZzIsIGIyLCBhMiwgcjEsIGcxLCBiMSwgYTEsICJsdWFzZW5zZSIpICkKCQkJCWVsc2UKCQkJCQlyZW5kZXJlci50ZXh0KCB3LCBoICsgaW5kX2hlaWdodCwgMjU1LCAyNTUsIDI1NSwgMjU1LCAiY2IiLCBuaWwsIGdyYWRpZW50KHIxLCBnMSwgYjEsIGExLCByMiwgZzIsIGIyLCBhMiwgImx1YXNlbnNlIikgKQoJCQkJZW5kCgkJCQlsb2NhbCBkdF9vbiA9ICh1aS5nZXQoei5pdGVtcy5rZXlzLmR0WzFdKSBhbmQgdWkuZ2V0KHouaXRlbXMua2V5cy5kdFsyXSkpCgkJCQlsb2NhbCBoc19vbiA9ICh1aS5nZXQoei5pdGVtcy5rZXlzLmhzWzFdKSBhbmQgdWkuZ2V0KHouaXRlbXMua2V5cy5oc1syXSkpCgkJCQlpZiB1aS5nZXQoei5pdGVtcy5rZXlzLmZkWzFdKSB0aGVuCgkJCQkJaW5kX2hlaWdodCA9IGluZF9oZWlnaHQgKyA4CgkJCQkJcmVuZGVyZXIudGV4dCggdywgaCArIGluZF9oZWlnaHQsIHIyLCBnMiwgYjIsIGEyLCAiYy0iLCBuaWwsICJEVUNLIiApCgkJCQkJaWYgZW50aXR5LmdldF9wcm9wKG15c2VsZiwgIm1fZmxEdWNrQW1vdW50IikgPiAwLjEgdGhlbgoJCQkJCQlpZiBhbmlta2V5cy5kdWNrIDwgMjU1IHRoZW4KCQkJCQkJCWFuaW1rZXlzLmR1Y2sgPSBhbmlta2V5cy5kdWNrICsgMi41CgkJCQkJCWVuZAoJCQkJCQlyZW5kZXJlci50ZXh0KCB3LCBoICsgaW5kX2hlaWdodCwgcjEsIGcxLCBiMSwgYW5pbWtleXMuZHVjaywgImMtIiwgbmlsLCAiRFVDSyIgKQoJCQkJCWVsc2UKCQkJCQkJYW5pbWtleXMuZHVjayA9IDAKCQkJCQllbmQKCQkJCWVsc2UKCQkJCQlhbmlta2V5cy5kdWNrID0gMAoJCQkJZW5kCgkJCQlpZiB1aS5nZXQoei5pdGVtcy5rZXlzLnNwWzFdKSB0aGVuCgkJCQkJaW5kX2hlaWdodCA9IGluZF9oZWlnaHQgKyA4CgkJCQkJaWYgYW5pbWtleXMuc2FmZSAgPCAyNTUgdGhlbgoJCQkJCQlhbmlta2V5cy5zYWZlID0gYW5pbWtleXMuc2FmZSAgKyAyLjUKCQkJCQllbmQKCQkJCQlyZW5kZXJlci50ZXh0KCB3LCBoICsgaW5kX2hlaWdodCwgcjEsIGcxLCBiMSwgYW5pbWtleXMuc2FmZSAsICJjLSIsIG5pbCwgIlNBRkUiICkKCQkJCWVsc2UKCQkJCQlhbmlta2V5cy5zYWZlID0gMAoJCQkJZW5kCgkJCQlpZiB1aS5nZXQoei5pdGVtcy5rZXlzLmZiWzFdKSB0aGVuCgkJCQkJaW5kX2hlaWdodCA9IGluZF9oZWlnaHQgKyA4CgkJCQkJaWYgYW5pbWtleXMuYmFpbSAgPCAyNTUgdGhlbgoJCQkJCQlhbmlta2V5cy5iYWltID0gYW5pbWtleXMuYmFpbSAgKyAyLjUKCQkJCQllbmQKCQkJCQlyZW5kZXJlci50ZXh0KCB3LCBoICsgaW5kX2hlaWdodCwgcjEsIGcxLCBiMSwgYW5pbWtleXMuYmFpbSAsICJjLSIsIG5pbCwgIkJBSU0iICkKCQkJCWVsc2UKCQkJCQlhbmlta2V5cy5iYWltID0gMAoJCQkJZW5kCgkJCQlpZiBkdF9vbiB0aGVuCgkJCQkJaW5kX2hlaWdodCA9IGluZF9oZWlnaHQgKyA4CgkJCQkJcmVuZGVyZXIudGV4dCggdywgaCArIGluZF9oZWlnaHQsIHIyLCBnMiwgYjIsIGEyLCAiYy0iLCBuaWwsICJEVCIgKQoJCQkJCWlmIChzaGlmdF9pbnQgPiAwKSBvciAoei5kZWZlbnNpdmUuZGVmZW5zaXZlID4gMSkgdGhlbgoJCQkJCQlpZiBhbmlta2V5cy5kdCAgPCAyNTUgdGhlbgoJCQkJCQkJYW5pbWtleXMuZHQgID0gYW5pbWtleXMuZHQgICsgMi41CgkJCQkJCWVuZAoJCQkJCQlyZW5kZXJlci50ZXh0KCB3LCBoICsgaW5kX2hlaWdodCwgcjEsIGcxLCBiMSwgYW5pbWtleXMuZHQgLCAiYy0iLCBuaWwsICJEVCIgKQoJCQkJCWVsc2UKCQkJCQkJYW5pbWtleXMuZHQgPSAwCgkJCQkJZW5kCgkJCQllbHNlCgkJCQkJYW5pbWtleXMuZHQgPSAwCgkJCQllbmQKCQkJCWlmIGhzX29uIHRoZW4KCQkJCQlpbmRfaGVpZ2h0ID0gaW5kX2hlaWdodCArIDgKCQkJCQlyZW5kZXJlci50ZXh0KCB3LCBoICsgaW5kX2hlaWdodCwgcjIsIGcyLCBiMiwgYTIsICJjLSIsIG5pbCwgIkhTIiApCgkJCQkJaWYgbm90IChkdF9vbikgdGhlbgoJCQkJCQlpZiBhbmlta2V5cy5oaWRlICA8IDI1NSB0aGVuCgkJCQkJCQlhbmlta2V5cy5oaWRlICA9IGFuaW1rZXlzLmhpZGUgICsgMi41CgkJCQkJCWVuZAoJCQkJCQlyZW5kZXJlci50ZXh0KCB3LCBoICsgaW5kX2hlaWdodCwgcjEsIGcxLCBiMSwgYW5pbWtleXMuaGlkZSAsICJjLSIsIG5pbCwgIkhTIiApCgkJCQkJZWxzZQoJCQkJCQlhbmlta2V5cy5oaWRlID0gMAoJCQkJCWVuZAoJCQkJZWxzZQoJCQkJCWFuaW1rZXlzLmhpZGUgPSAwCgkJCQllbmQKCQkJCWlmIHVpLmdldChtZW51WyJhbnRpIGFpbWJvdCJdWyJrZXliaW5kcyJdWyJmcmVlc3RhbmQiXSkgdGhlbgoJCQkJCWluZF9oZWlnaHQgPSBpbmRfaGVpZ2h0ICsgOAoJCQkJCWlmIGFuaW1rZXlzLmZzICA8IDI1NSB0aGVuCgkJCQkJCWFuaW1rZXlzLmZzID0gYW5pbWtleXMuZnMgICsgMi41CgkJCQkJZW5kCgkJCQkJcmVuZGVyZXIudGV4dCggdywgaCArIGluZF9oZWlnaHQsIHIxLCBnMSwgYjEsIGFuaW1rZXlzLmZzICwgImMtIiwgbmlsLCAiRlMiICkKCQkJCWVsc2UKCQkJCQlhbmlta2V5cy5mcyA9IDAKCQkJCWVuZAoJCQllbmQKCQllbmQsCgkJWyJzaHV0ZG93biJdID0gZnVuY3Rpb24oKQoJCQlmb3IgaSwgdiBpbiBuZXh0LCB0YmwuaXRlbXMgZG8KCQkJCWZvciBpbmRleCwgdmFsdWUgaW4gbmV4dCwgdiBkbwoJCQkJCXVpLnNldF92aXNpYmxlKHZhbHVlLCB0cnVlKQoJCQkJZW5kCgkJCWVuZAoJCQl1aS5zZXQodGJsLml0ZW1zLmVuYWJsZWRbMV0sIHRydWUpCgkJCXVpLnNldCh0YmwuaXRlbXMuYmFzZVsxXSwgImF0IHRhcmdldHMiKQoJCQl1aS5zZXQodGJsLml0ZW1zLnBpdGNoWzFdLCAiZGVmYXVsdCIpCgkJCXVpLnNldCh0YmwuaXRlbXMueWF3WzFdLCAiMTgwIikKCQkJdWkuc2V0KHRibC5pdGVtcy55YXdbMl0sIDApCgkJCXVpLnNldCh0YmwuaXRlbXMuaml0dGVyWzFdLCAib2ZmIikKCQkJdWkuc2V0KHRibC5pdGVtcy5qaXR0ZXJbMl0sIDApCgkJCXVpLnNldCh0YmwuaXRlbXMuYm9keVsxXSwgIm9wcG9zaXRlIikKCQkJdWkuc2V0KHRibC5pdGVtcy5ib2R5WzJdLCAwKQoJCQl1aS5zZXQodGJsLml0ZW1zLmZzYm9keVsxXSwgdHJ1ZSkKCQkJdWkuc2V0KHRibC5pdGVtcy5lZGdlWzFdLCBmYWxzZSkKCQkJdWkuc2V0KHRibC5pdGVtcy5mc1sxXSwgZmFsc2UpCgkJCXVpLnNldCh0YmwuaXRlbXMuZnNbMl0sICJhbHdheXMgb24iKQoJCQl1aS5zZXQodGJsLml0ZW1zLnJvbGxbMV0sIDApCgkJCXVpLnNldF92aXNpYmxlKHRibC5pdGVtcy5qaXR0ZXJbMl0sIGZhbHNlKQoJCQl1aS5zZXRfdmlzaWJsZSh0YmwuaXRlbXMuYm9keVsyXSwgZmFsc2UpCgkJZW5kCgl9CiAgICB0YmwuZXZlbnRzID0gewogICAgICAgIHBhaW50X3VpID0geyAibWVudSIsICJhcnJvd3MiLCAiaW5kaWNhdG9yIiB9LAogICAgICAgIHNldHVwX2NvbW1hbmQgPSB7ICJjb21tYW5kIiwgImZyZWVzdGFuZCIgfSwKCQlzaHV0ZG93biA9IHsgInNodXRkb3duIiB9LAogICAgICAgIHJvdW5kX3ByZXN0YXJ0ID0geyAicmVzZXQiIH0sCiAgICAgICAgcHJlX3JlbmRlciA9IHsgImFuaW1hdGlvbnMiIH0KICAgIH0KICAgIGZvciBpbmRleCwgdmFsdWUgaW4gbmV4dCwgdGJsLmV2ZW50cyBkbyAKICAgICAgICBmb3IgaSwgdiBpbiBuZXh0LCB2YWx1ZSBkbyBjbGllbnQuc2V0X2V2ZW50X2NhbGxiYWNrKGluZGV4LCB0YmwuY2FsbGJhY2tzW3ZdKSBlbmQKICAgIGVuZAplbmQpKHsKICAgIHJlZiA9IGZ1bmN0aW9uKGEsYixjKSByZXR1cm4geyB1aS5yZWZlcmVuY2UoYSxiLGMpIH0gZW5kLAogICAgY2xhbXAgPSBmdW5jdGlvbih4KSBpZiB4ID09IG5pbCB0aGVuIHJldHVybiAwIGVuZCB4ID0gKHggJSAzNjAgKyAzNjApICUgMzYwIHJldHVybiB4ID4gMTgwIGFuZCB4IC0gMzYwIG9yIHggZW5kLAogICAgY29udGFpbnMgPSBmdW5jdGlvbih6LHgpIGZvciBpLCB2IGluIG5leHQsIHogZG8gaWYgdiA9PSB4IHRoZW4gcmV0dXJuIHRydWUgZW5kIGVuZCByZXR1cm4gZmFsc2UgZW5kLAogICAgc3RhdGVzID0geyAiZ2xvYmFsIiwgInN0YW5kaW5nIiwgIm1vdmluZyIsICJhaXIiLCAiYWlyIGR1Y2siLCAiZHVjayIsICJkdWNrIG1vdmluZyIsICJzbG93IG1vdGlvbiIsICJmYWtlIGxhZyIsICJoaWRlIHNob3QiIH0sCiAgICBnZXRzdGF0ZSA9IGZ1bmN0aW9uKGFpciwgZHVjaywgc3BlZWQsIHNsb3djaGVjaykKICAgICAgICBsb2NhbCBzdGF0ZSA9ICJnbG9iYWwiCiAgICAgICAgaWYgYWlyIGFuZCBkdWNrIHRoZW4gc3RhdGUgPSAiYWlyIGR1Y2siIGVuZAogICAgICAgIGlmIGFpciBhbmQgbm90IGR1Y2sgdGhlbiBzdGF0ZSA9ICJhaXIiIGVuZAogICAgICAgIGlmIGR1Y2sgYW5kIG5vdCBhaXIgYW5kIHNwZWVkIDwgMS4xIHRoZW4gc3RhdGUgPSAiZHVjayIgZW5kCiAgICAgICAgaWYgZHVjayBhbmQgbm90IGFpciBhbmQgc3BlZWQgPiAxLjEgdGhlbiBzdGF0ZSA9ICJkdWNrIG1vdmluZyIgZW5kCiAgICAgICAgaWYgc3BlZWQgPCAxLjEgYW5kIG5vdCBhaXIgYW5kIG5vdCBkdWNrIHRoZW4gc3RhdGUgPSAic3RhbmRpbmciIGVuZAogICAgICAgIGlmIHNwZWVkID4gMS4xIGFuZCBub3QgYWlyIGFuZCBub3QgZHVjayB0aGVuIHN0YXRlID0gIm1vdmluZyIgZW5kCgkJaWYgc2xvd2NoZWNrIGFuZCBub3QgYWlyIGFuZCBub3QgZHVjayBhbmQgc3BlZWQgPiAxLjEgdGhlbiBzdGF0ZSA9ICJzbG93IG1vdGlvbiIgZW5kCiAgICAgICAgcmV0dXJuIHN0YXRlCiAgICBlbmQKfSk="}